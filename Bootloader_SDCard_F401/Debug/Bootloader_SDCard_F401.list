
Bootloader_SDCard_F401.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a83c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e0  0800a9dc  0800a9dc  0001a9dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aebc  0800aebc  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  0800aebc  0800aebc  0001aebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aec4  0800aec4  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aec4  0800aec4  0001aec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aec8  0800aec8  0001aec8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  0800aecc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000029f0  2000005c  0800af28  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002a4c  0800af28  00022a4c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016457  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e1a  00000000  00000000  00036526  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013f8  00000000  00000000  0003a340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f45  00000000  00000000  0003b738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019a73  00000000  00000000  0003c67d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c65c  00000000  00000000  000560f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f1df  00000000  00000000  0007274c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005730  00000000  00000000  0010192c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  0010705c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a9c4 	.word	0x0800a9c4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	0800a9c4 	.word	0x0800a9c4

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80005b2:	2300      	movs	r3, #0
 80005b4:	607b      	str	r3, [r7, #4]
 80005b6:	4b10      	ldr	r3, [pc, #64]	; (80005f8 <MX_DMA_Init+0x4c>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ba:	4a0f      	ldr	r2, [pc, #60]	; (80005f8 <MX_DMA_Init+0x4c>)
 80005bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80005c0:	6313      	str	r3, [r2, #48]	; 0x30
 80005c2:	4b0d      	ldr	r3, [pc, #52]	; (80005f8 <MX_DMA_Init+0x4c>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80005ca:	607b      	str	r3, [r7, #4]
 80005cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80005ce:	2200      	movs	r2, #0
 80005d0:	2100      	movs	r1, #0
 80005d2:	203b      	movs	r0, #59	; 0x3b
 80005d4:	f000 ffdf 	bl	8001596 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80005d8:	203b      	movs	r0, #59	; 0x3b
 80005da:	f000 fff8 	bl	80015ce <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80005de:	2200      	movs	r2, #0
 80005e0:	2100      	movs	r1, #0
 80005e2:	2045      	movs	r0, #69	; 0x45
 80005e4:	f000 ffd7 	bl	8001596 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80005e8:	2045      	movs	r0, #69	; 0x45
 80005ea:	f000 fff0 	bl	80015ce <HAL_NVIC_EnableIRQ>

}
 80005ee:	bf00      	nop
 80005f0:	3708      	adds	r7, #8
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	40023800 	.word	0x40023800

080005fc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b08a      	sub	sp, #40	; 0x28
 8000600:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000602:	f107 0314 	add.w	r3, r7, #20
 8000606:	2200      	movs	r2, #0
 8000608:	601a      	str	r2, [r3, #0]
 800060a:	605a      	str	r2, [r3, #4]
 800060c:	609a      	str	r2, [r3, #8]
 800060e:	60da      	str	r2, [r3, #12]
 8000610:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000612:	2300      	movs	r3, #0
 8000614:	613b      	str	r3, [r7, #16]
 8000616:	4b38      	ldr	r3, [pc, #224]	; (80006f8 <MX_GPIO_Init+0xfc>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	4a37      	ldr	r2, [pc, #220]	; (80006f8 <MX_GPIO_Init+0xfc>)
 800061c:	f043 0304 	orr.w	r3, r3, #4
 8000620:	6313      	str	r3, [r2, #48]	; 0x30
 8000622:	4b35      	ldr	r3, [pc, #212]	; (80006f8 <MX_GPIO_Init+0xfc>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	f003 0304 	and.w	r3, r3, #4
 800062a:	613b      	str	r3, [r7, #16]
 800062c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800062e:	2300      	movs	r3, #0
 8000630:	60fb      	str	r3, [r7, #12]
 8000632:	4b31      	ldr	r3, [pc, #196]	; (80006f8 <MX_GPIO_Init+0xfc>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000636:	4a30      	ldr	r2, [pc, #192]	; (80006f8 <MX_GPIO_Init+0xfc>)
 8000638:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800063c:	6313      	str	r3, [r2, #48]	; 0x30
 800063e:	4b2e      	ldr	r3, [pc, #184]	; (80006f8 <MX_GPIO_Init+0xfc>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000646:	60fb      	str	r3, [r7, #12]
 8000648:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800064a:	2300      	movs	r3, #0
 800064c:	60bb      	str	r3, [r7, #8]
 800064e:	4b2a      	ldr	r3, [pc, #168]	; (80006f8 <MX_GPIO_Init+0xfc>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000652:	4a29      	ldr	r2, [pc, #164]	; (80006f8 <MX_GPIO_Init+0xfc>)
 8000654:	f043 0301 	orr.w	r3, r3, #1
 8000658:	6313      	str	r3, [r2, #48]	; 0x30
 800065a:	4b27      	ldr	r3, [pc, #156]	; (80006f8 <MX_GPIO_Init+0xfc>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	f003 0301 	and.w	r3, r3, #1
 8000662:	60bb      	str	r3, [r7, #8]
 8000664:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000666:	2300      	movs	r3, #0
 8000668:	607b      	str	r3, [r7, #4]
 800066a:	4b23      	ldr	r3, [pc, #140]	; (80006f8 <MX_GPIO_Init+0xfc>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	4a22      	ldr	r2, [pc, #136]	; (80006f8 <MX_GPIO_Init+0xfc>)
 8000670:	f043 0308 	orr.w	r3, r3, #8
 8000674:	6313      	str	r3, [r2, #48]	; 0x30
 8000676:	4b20      	ldr	r3, [pc, #128]	; (80006f8 <MX_GPIO_Init+0xfc>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	f003 0308 	and.w	r3, r3, #8
 800067e:	607b      	str	r3, [r7, #4]
 8000680:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000682:	2300      	movs	r3, #0
 8000684:	603b      	str	r3, [r7, #0]
 8000686:	4b1c      	ldr	r3, [pc, #112]	; (80006f8 <MX_GPIO_Init+0xfc>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	4a1b      	ldr	r2, [pc, #108]	; (80006f8 <MX_GPIO_Init+0xfc>)
 800068c:	f043 0302 	orr.w	r3, r3, #2
 8000690:	6313      	str	r3, [r2, #48]	; 0x30
 8000692:	4b19      	ldr	r3, [pc, #100]	; (80006f8 <MX_GPIO_Init+0xfc>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	f003 0302 	and.w	r3, r3, #2
 800069a:	603b      	str	r3, [r7, #0]
 800069c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, STATUS_LED_Pin|PWR_LED_Pin, GPIO_PIN_RESET);
 800069e:	2200      	movs	r2, #0
 80006a0:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80006a4:	4815      	ldr	r0, [pc, #84]	; (80006fc <MX_GPIO_Init+0x100>)
 80006a6:	f001 ffb7 	bl	8002618 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EE_WP_GPIO_Port, EE_WP_Pin, GPIO_PIN_RESET);
 80006aa:	2200      	movs	r2, #0
 80006ac:	2120      	movs	r1, #32
 80006ae:	4814      	ldr	r0, [pc, #80]	; (8000700 <MX_GPIO_Init+0x104>)
 80006b0:	f001 ffb2 	bl	8002618 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = STATUS_LED_Pin|PWR_LED_Pin;
 80006b4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80006b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ba:	2301      	movs	r3, #1
 80006bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006be:	2300      	movs	r3, #0
 80006c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c2:	2300      	movs	r3, #0
 80006c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006c6:	f107 0314 	add.w	r3, r7, #20
 80006ca:	4619      	mov	r1, r3
 80006cc:	480b      	ldr	r0, [pc, #44]	; (80006fc <MX_GPIO_Init+0x100>)
 80006ce:	f001 fe1f 	bl	8002310 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EE_WP_Pin;
 80006d2:	2320      	movs	r3, #32
 80006d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d6:	2301      	movs	r3, #1
 80006d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006da:	2300      	movs	r3, #0
 80006dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006de:	2300      	movs	r3, #0
 80006e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EE_WP_GPIO_Port, &GPIO_InitStruct);
 80006e2:	f107 0314 	add.w	r3, r7, #20
 80006e6:	4619      	mov	r1, r3
 80006e8:	4805      	ldr	r0, [pc, #20]	; (8000700 <MX_GPIO_Init+0x104>)
 80006ea:	f001 fe11 	bl	8002310 <HAL_GPIO_Init>

}
 80006ee:	bf00      	nop
 80006f0:	3728      	adds	r7, #40	; 0x28
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	40023800 	.word	0x40023800
 80006fc:	40020800 	.word	0x40020800
 8000700:	40020400 	.word	0x40020400

08000704 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000708:	4b12      	ldr	r3, [pc, #72]	; (8000754 <MX_I2C1_Init+0x50>)
 800070a:	4a13      	ldr	r2, [pc, #76]	; (8000758 <MX_I2C1_Init+0x54>)
 800070c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800070e:	4b11      	ldr	r3, [pc, #68]	; (8000754 <MX_I2C1_Init+0x50>)
 8000710:	4a12      	ldr	r2, [pc, #72]	; (800075c <MX_I2C1_Init+0x58>)
 8000712:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000714:	4b0f      	ldr	r3, [pc, #60]	; (8000754 <MX_I2C1_Init+0x50>)
 8000716:	2200      	movs	r2, #0
 8000718:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800071a:	4b0e      	ldr	r3, [pc, #56]	; (8000754 <MX_I2C1_Init+0x50>)
 800071c:	2200      	movs	r2, #0
 800071e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000720:	4b0c      	ldr	r3, [pc, #48]	; (8000754 <MX_I2C1_Init+0x50>)
 8000722:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000726:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000728:	4b0a      	ldr	r3, [pc, #40]	; (8000754 <MX_I2C1_Init+0x50>)
 800072a:	2200      	movs	r2, #0
 800072c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800072e:	4b09      	ldr	r3, [pc, #36]	; (8000754 <MX_I2C1_Init+0x50>)
 8000730:	2200      	movs	r2, #0
 8000732:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000734:	4b07      	ldr	r3, [pc, #28]	; (8000754 <MX_I2C1_Init+0x50>)
 8000736:	2200      	movs	r2, #0
 8000738:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800073a:	4b06      	ldr	r3, [pc, #24]	; (8000754 <MX_I2C1_Init+0x50>)
 800073c:	2200      	movs	r2, #0
 800073e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000740:	4804      	ldr	r0, [pc, #16]	; (8000754 <MX_I2C1_Init+0x50>)
 8000742:	f001 ff83 	bl	800264c <HAL_I2C_Init>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800074c:	f000 fb48 	bl	8000de0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000750:	bf00      	nop
 8000752:	bd80      	pop	{r7, pc}
 8000754:	20000078 	.word	0x20000078
 8000758:	40005400 	.word	0x40005400
 800075c:	00061a80 	.word	0x00061a80

08000760 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b08a      	sub	sp, #40	; 0x28
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000768:	f107 0314 	add.w	r3, r7, #20
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
 8000770:	605a      	str	r2, [r3, #4]
 8000772:	609a      	str	r2, [r3, #8]
 8000774:	60da      	str	r2, [r3, #12]
 8000776:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a19      	ldr	r2, [pc, #100]	; (80007e4 <HAL_I2C_MspInit+0x84>)
 800077e:	4293      	cmp	r3, r2
 8000780:	d12b      	bne.n	80007da <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	613b      	str	r3, [r7, #16]
 8000786:	4b18      	ldr	r3, [pc, #96]	; (80007e8 <HAL_I2C_MspInit+0x88>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a17      	ldr	r2, [pc, #92]	; (80007e8 <HAL_I2C_MspInit+0x88>)
 800078c:	f043 0302 	orr.w	r3, r3, #2
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b15      	ldr	r3, [pc, #84]	; (80007e8 <HAL_I2C_MspInit+0x88>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0302 	and.w	r3, r3, #2
 800079a:	613b      	str	r3, [r7, #16]
 800079c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800079e:	23c0      	movs	r3, #192	; 0xc0
 80007a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007a2:	2312      	movs	r3, #18
 80007a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a6:	2300      	movs	r3, #0
 80007a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007aa:	2303      	movs	r3, #3
 80007ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007ae:	2304      	movs	r3, #4
 80007b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007b2:	f107 0314 	add.w	r3, r7, #20
 80007b6:	4619      	mov	r1, r3
 80007b8:	480c      	ldr	r0, [pc, #48]	; (80007ec <HAL_I2C_MspInit+0x8c>)
 80007ba:	f001 fda9 	bl	8002310 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	60fb      	str	r3, [r7, #12]
 80007c2:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <HAL_I2C_MspInit+0x88>)
 80007c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c6:	4a08      	ldr	r2, [pc, #32]	; (80007e8 <HAL_I2C_MspInit+0x88>)
 80007c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007cc:	6413      	str	r3, [r2, #64]	; 0x40
 80007ce:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <HAL_I2C_MspInit+0x88>)
 80007d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007d6:	60fb      	str	r3, [r7, #12]
 80007d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80007da:	bf00      	nop
 80007dc:	3728      	adds	r7, #40	; 0x28
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	40005400 	.word	0x40005400
 80007e8:	40023800 	.word	0x40023800
 80007ec:	40020400 	.word	0x40020400

080007f0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80007f4:	f3bf 8f4f 	dsb	sy
}
 80007f8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80007fa:	4b06      	ldr	r3, [pc, #24]	; (8000814 <__NVIC_SystemReset+0x24>)
 80007fc:	68db      	ldr	r3, [r3, #12]
 80007fe:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000802:	4904      	ldr	r1, [pc, #16]	; (8000814 <__NVIC_SystemReset+0x24>)
 8000804:	4b04      	ldr	r3, [pc, #16]	; (8000818 <__NVIC_SystemReset+0x28>)
 8000806:	4313      	orrs	r3, r2
 8000808:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800080a:	f3bf 8f4f 	dsb	sy
}
 800080e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000810:	bf00      	nop
 8000812:	e7fd      	b.n	8000810 <__NVIC_SystemReset+0x20>
 8000814:	e000ed00 	.word	0xe000ed00
 8000818:	05fa0004 	.word	0x05fa0004

0800081c <print>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void print(const char *fmt, ...) {
 800081c:	b40f      	push	{r0, r1, r2, r3}
 800081e:	b580      	push	{r7, lr}
 8000820:	b082      	sub	sp, #8
 8000822:	af00      	add	r7, sp, #0
	static char buffer[256];
	va_list args;
	va_start(args, fmt);
 8000824:	f107 0314 	add.w	r3, r7, #20
 8000828:	603b      	str	r3, [r7, #0]
	vsnprintf(buffer, sizeof(buffer), fmt, args);
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	693a      	ldr	r2, [r7, #16]
 800082e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000832:	480b      	ldr	r0, [pc, #44]	; (8000860 <print+0x44>)
 8000834:	f009 fc2c 	bl	800a090 <vsniprintf>
	va_end(args);

	uint16_t len = strlen(buffer);
 8000838:	4809      	ldr	r0, [pc, #36]	; (8000860 <print+0x44>)
 800083a:	f7ff fcdb 	bl	80001f4 <strlen>
 800083e:	4603      	mov	r3, r0
 8000840:	80fb      	strh	r3, [r7, #6]
	HAL_UART_Transmit(&huart2, buffer, len, 500);
 8000842:	88fa      	ldrh	r2, [r7, #6]
 8000844:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000848:	4905      	ldr	r1, [pc, #20]	; (8000860 <print+0x44>)
 800084a:	4806      	ldr	r0, [pc, #24]	; (8000864 <print+0x48>)
 800084c:	f005 f832 	bl	80058b4 <HAL_UART_Transmit>
}
 8000850:	bf00      	nop
 8000852:	3708      	adds	r7, #8
 8000854:	46bd      	mov	sp, r7
 8000856:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800085a:	b004      	add	sp, #16
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop
 8000860:	20002608 	.word	0x20002608
 8000864:	20002850 	.word	0x20002850

08000868 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800086e:	f000 fd21 	bl	80012b4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000872:	f000 f8a5 	bl	80009c0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000876:	f7ff fec1 	bl	80005fc <MX_GPIO_Init>
	MX_DMA_Init();
 800087a:	f7ff fe97 	bl	80005ac <MX_DMA_Init>
	MX_SDIO_SD_Init();
 800087e:	f000 fab5 	bl	8000dec <MX_SDIO_SD_Init>
	MX_USART2_UART_Init();
 8000882:	f000 fc7b 	bl	800117c <MX_USART2_UART_Init>
	MX_FATFS_Init();
 8000886:	f006 f945 	bl	8006b14 <MX_FATFS_Init>
	MX_I2C1_Init();
 800088a:	f7ff ff3b 	bl	8000704 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
	print("Success: Working\n");
 800088e:	483d      	ldr	r0, [pc, #244]	; (8000984 <main+0x11c>)
 8000890:	f7ff ffc4 	bl	800081c <print>
	print("Log: Now Entering in Bootloader.....\r\n");
 8000894:	483c      	ldr	r0, [pc, #240]	; (8000988 <main+0x120>)
 8000896:	f7ff ffc1 	bl	800081c <print>

	HAL_Delay(100);
 800089a:	2064      	movs	r0, #100	; 0x64
 800089c:	f000 fd7c 	bl	8001398 <HAL_Delay>
	uint8_t bl_stat = 0;
 80008a0:	2300      	movs	r3, #0
 80008a2:	71fb      	strb	r3, [r7, #7]
	if (ee_getBLUpdateStatus(&bl_stat)) {
 80008a4:	1dfb      	adds	r3, r7, #7
 80008a6:	4618      	mov	r0, r3
 80008a8:	f000 fa18 	bl	8000cdc <ee_getBLUpdateStatus>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d05c      	beq.n	800096c <main+0x104>
		if (bl_stat) {
 80008b2:	79fb      	ldrb	r3, [r7, #7]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d050      	beq.n	800095a <main+0xf2>
			print("Log: New update found.\r\n");
 80008b8:	4834      	ldr	r0, [pc, #208]	; (800098c <main+0x124>)
 80008ba:	f7ff ffaf 	bl	800081c <print>
			if(!ee_getBLFileName(fileName)){
 80008be:	4834      	ldr	r0, [pc, #208]	; (8000990 <main+0x128>)
 80008c0:	f000 fa59 	bl	8000d76 <ee_getBLFileName>
 80008c4:	4603      	mov	r3, r0
 80008c6:	f083 0301 	eor.w	r3, r3, #1
 80008ca:	b2db      	uxtb	r3, r3
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d008      	beq.n	80008e2 <main+0x7a>
				strncpy(fileName, deffileName, strlen(deffileName));
 80008d0:	4b2f      	ldr	r3, [pc, #188]	; (8000990 <main+0x128>)
 80008d2:	4a30      	ldr	r2, [pc, #192]	; (8000994 <main+0x12c>)
 80008d4:	ca07      	ldmia	r2, {r0, r1, r2}
 80008d6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				print("Error: Couldn't fetch file name from eeprom.\r\nUsing Default File Name '%s'", fileName);
 80008da:	492d      	ldr	r1, [pc, #180]	; (8000990 <main+0x128>)
 80008dc:	482e      	ldr	r0, [pc, #184]	; (8000998 <main+0x130>)
 80008de:	f7ff ff9d 	bl	800081c <print>
			}
			if(ee_setBLUpdateStatus(0)){
 80008e2:	2000      	movs	r0, #0
 80008e4:	f000 fa13 	bl	8000d0e <ee_setBLUpdateStatus>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d040      	beq.n	8000970 <main+0x108>
				print("Log: New Firmware Update in Progress.........\r\n");
 80008ee:	482b      	ldr	r0, [pc, #172]	; (800099c <main+0x134>)
 80008f0:	f7ff ff94 	bl	800081c <print>
				if (sd_mount(&SDCard, "/")) {
 80008f4:	492a      	ldr	r1, [pc, #168]	; (80009a0 <main+0x138>)
 80008f6:	482b      	ldr	r0, [pc, #172]	; (80009a4 <main+0x13c>)
 80008f8:	f006 fc18 	bl	800712c <sd_mount>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d01b      	beq.n	800093a <main+0xd2>
					SDCard.mounted = 1;
 8000902:	4b28      	ldr	r3, [pc, #160]	; (80009a4 <main+0x13c>)
 8000904:	2201      	movs	r2, #1
 8000906:	701a      	strb	r2, [r3, #0]
					print("Log: Mounted Successfully (%i)\r\n", SDCard.fres);
 8000908:	4b26      	ldr	r3, [pc, #152]	; (80009a4 <main+0x13c>)
 800090a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800090e:	f893 30d4 	ldrb.w	r3, [r3, #212]	; 0xd4
 8000912:	4619      	mov	r1, r3
 8000914:	4824      	ldr	r0, [pc, #144]	; (80009a8 <main+0x140>)
 8000916:	f7ff ff81 	bl	800081c <print>
					if(!bootloader_upload_firmware()){
 800091a:	f000 f8e1 	bl	8000ae0 <bootloader_upload_firmware>
 800091e:	4603      	mov	r3, r0
 8000920:	f083 0301 	eor.w	r3, r3, #1
 8000924:	b2db      	uxtb	r3, r3
 8000926:	2b00      	cmp	r3, #0
 8000928:	d002      	beq.n	8000930 <main+0xc8>
						ee_setBLUpdateStatus(1);
 800092a:	2001      	movs	r0, #1
 800092c:	f000 f9ef 	bl	8000d0e <ee_setBLUpdateStatus>
					}
					print("Log: Resetting MCU\r\n");
 8000930:	481e      	ldr	r0, [pc, #120]	; (80009ac <main+0x144>)
 8000932:	f7ff ff73 	bl	800081c <print>
					NVIC_SystemReset();
 8000936:	f7ff ff5b 	bl	80007f0 <__NVIC_SystemReset>
				} else {
					SDCard.mounted = 0;
 800093a:	4b1a      	ldr	r3, [pc, #104]	; (80009a4 <main+0x13c>)
 800093c:	2200      	movs	r2, #0
 800093e:	701a      	strb	r2, [r3, #0]
					print("ERROR: Mounting ERROR (%i)\r\n", SDCard.fres);
 8000940:	4b18      	ldr	r3, [pc, #96]	; (80009a4 <main+0x13c>)
 8000942:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8000946:	f893 30d4 	ldrb.w	r3, [r3, #212]	; 0xd4
 800094a:	4619      	mov	r1, r3
 800094c:	4818      	ldr	r0, [pc, #96]	; (80009b0 <main+0x148>)
 800094e:	f7ff ff65 	bl	800081c <print>
					ee_setBLUpdateStatus(1);
 8000952:	2001      	movs	r0, #1
 8000954:	f000 f9db 	bl	8000d0e <ee_setBLUpdateStatus>
 8000958:	e00b      	b.n	8000972 <main+0x10a>
			}
			else{
				goto user_app;
			}
		} else {
			print("Log: No update found.\r\n");
 800095a:	4816      	ldr	r0, [pc, #88]	; (80009b4 <main+0x14c>)
 800095c:	f7ff ff5e 	bl	800081c <print>
			print("Log: Jumping to application Code.........\r\n");
 8000960:	4815      	ldr	r0, [pc, #84]	; (80009b8 <main+0x150>)
 8000962:	f7ff ff5b 	bl	800081c <print>
			jump_to_user_application_code();
 8000966:	f000 f895 	bl	8000a94 <jump_to_user_application_code>
 800096a:	e002      	b.n	8000972 <main+0x10a>
		}
	} else {
		goto user_app;
 800096c:	bf00      	nop
 800096e:	e000      	b.n	8000972 <main+0x10a>
				goto user_app;
 8000970:	bf00      	nop
	}
user_app:
	print("ERROR: Some Problem in reading Data from EEPROM.\r\n");
 8000972:	4812      	ldr	r0, [pc, #72]	; (80009bc <main+0x154>)
 8000974:	f7ff ff52 	bl	800081c <print>
	print("Log: Jumping to application Code.........\r\n");
 8000978:	480f      	ldr	r0, [pc, #60]	; (80009b8 <main+0x150>)
 800097a:	f7ff ff4f 	bl	800081c <print>
	jump_to_user_application_code();
 800097e:	f000 f889 	bl	8000a94 <jump_to_user_application_code>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000982:	e7fe      	b.n	8000982 <main+0x11a>
 8000984:	0800a9dc 	.word	0x0800a9dc
 8000988:	0800a9f0 	.word	0x0800a9f0
 800098c:	0800aa18 	.word	0x0800aa18
 8000990:	200000cc 	.word	0x200000cc
 8000994:	0800adb4 	.word	0x0800adb4
 8000998:	0800aa34 	.word	0x0800aa34
 800099c:	0800aa80 	.word	0x0800aa80
 80009a0:	0800aab0 	.word	0x0800aab0
 80009a4:	200004d4 	.word	0x200004d4
 80009a8:	0800aab4 	.word	0x0800aab4
 80009ac:	0800aad8 	.word	0x0800aad8
 80009b0:	0800aaf0 	.word	0x0800aaf0
 80009b4:	0800ab10 	.word	0x0800ab10
 80009b8:	0800ab28 	.word	0x0800ab28
 80009bc:	0800ab54 	.word	0x0800ab54

080009c0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b094      	sub	sp, #80	; 0x50
 80009c4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80009c6:	f107 0320 	add.w	r3, r7, #32
 80009ca:	2230      	movs	r2, #48	; 0x30
 80009cc:	2100      	movs	r1, #0
 80009ce:	4618      	mov	r0, r3
 80009d0:	f009 fb6c 	bl	800a0ac <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80009d4:	f107 030c 	add.w	r3, r7, #12
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	605a      	str	r2, [r3, #4]
 80009de:	609a      	str	r2, [r3, #8]
 80009e0:	60da      	str	r2, [r3, #12]
 80009e2:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80009e4:	2300      	movs	r3, #0
 80009e6:	60bb      	str	r3, [r7, #8]
 80009e8:	4b28      	ldr	r3, [pc, #160]	; (8000a8c <SystemClock_Config+0xcc>)
 80009ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ec:	4a27      	ldr	r2, [pc, #156]	; (8000a8c <SystemClock_Config+0xcc>)
 80009ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009f2:	6413      	str	r3, [r2, #64]	; 0x40
 80009f4:	4b25      	ldr	r3, [pc, #148]	; (8000a8c <SystemClock_Config+0xcc>)
 80009f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009fc:	60bb      	str	r3, [r7, #8]
 80009fe:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000a00:	2300      	movs	r3, #0
 8000a02:	607b      	str	r3, [r7, #4]
 8000a04:	4b22      	ldr	r3, [pc, #136]	; (8000a90 <SystemClock_Config+0xd0>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a0c:	4a20      	ldr	r2, [pc, #128]	; (8000a90 <SystemClock_Config+0xd0>)
 8000a0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a12:	6013      	str	r3, [r2, #0]
 8000a14:	4b1e      	ldr	r3, [pc, #120]	; (8000a90 <SystemClock_Config+0xd0>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a1c:	607b      	str	r3, [r7, #4]
 8000a1e:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a20:	2302      	movs	r3, #2
 8000a22:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a24:	2301      	movs	r3, #1
 8000a26:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a28:	2310      	movs	r3, #16
 8000a2a:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a2c:	2302      	movs	r3, #2
 8000a2e:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a30:	2300      	movs	r3, #0
 8000a32:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 8000a34:	2310      	movs	r3, #16
 8000a36:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 192;
 8000a38:	23c0      	movs	r3, #192	; 0xc0
 8000a3a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a40:	2304      	movs	r3, #4
 8000a42:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000a44:	f107 0320 	add.w	r3, r7, #32
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f002 ff51 	bl	80038f0 <HAL_RCC_OscConfig>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <SystemClock_Config+0x98>
		Error_Handler();
 8000a54:	f000 f9c4 	bl	8000de0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000a58:	230f      	movs	r3, #15
 8000a5a:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a60:	2300      	movs	r3, #0
 8000a62:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a64:	2300      	movs	r3, #0
 8000a66:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000a6c:	f107 030c 	add.w	r3, r7, #12
 8000a70:	2100      	movs	r1, #0
 8000a72:	4618      	mov	r0, r3
 8000a74:	f003 f9b4 	bl	8003de0 <HAL_RCC_ClockConfig>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <SystemClock_Config+0xc2>
		Error_Handler();
 8000a7e:	f000 f9af 	bl	8000de0 <Error_Handler>
	}
}
 8000a82:	bf00      	nop
 8000a84:	3750      	adds	r7, #80	; 0x50
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40023800 	.word	0x40023800
 8000a90:	40007000 	.word	0x40007000

08000a94 <jump_to_user_application_code>:

/* USER CODE BEGIN 4 */

void jump_to_user_application_code(void) {
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b084      	sub	sp, #16
 8000a98:	af00      	add	r7, sp, #0
	//just a function pointer to hold the address of the reset handler of the user app.
	void (*app_reset_handler)(void);

	print("Log: bootloader_jump_to_user_app\n");
 8000a9a:	480d      	ldr	r0, [pc, #52]	; (8000ad0 <jump_to_user_application_code+0x3c>)
 8000a9c:	f7ff febe 	bl	800081c <print>

	// 1. configure the MSP by reading the value from the base address of the sector 2
	uint32_t msp_value = *(volatile uint32_t*) FLASH_ADDR_APP;
 8000aa0:	4b0c      	ldr	r3, [pc, #48]	; (8000ad4 <jump_to_user_application_code+0x40>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	60fb      	str	r3, [r7, #12]
	print("Log: MSP value : %#x\n", msp_value);
 8000aa6:	68f9      	ldr	r1, [r7, #12]
 8000aa8:	480b      	ldr	r0, [pc, #44]	; (8000ad8 <jump_to_user_application_code+0x44>)
 8000aaa:	f7ff feb7 	bl	800081c <print>
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	f383 8808 	msr	MSP, r3
}
 8000ab8:	bf00      	nop

	/* 2. Now fetch the reset handler address of the user application
	 * from the location FLASH_SECTOR2_BASE_ADDRESS+4
	 */
	uint32_t resethandler_address =
			*(volatile uint32_t*) (FLASH_ADDR_APP + 4);
 8000aba:	4b08      	ldr	r3, [pc, #32]	; (8000adc <jump_to_user_application_code+0x48>)
	uint32_t resethandler_address =
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	60bb      	str	r3, [r7, #8]

	app_reset_handler = (void*) resethandler_address;
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	607b      	str	r3, [r7, #4]

//	print("BL_DEBUG_MSG: app reset handler addr : %#x\n", app_reset_handler);

	//3. jump to reset handler of the user application
	app_reset_handler();
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	4798      	blx	r3
}
 8000ac8:	bf00      	nop
 8000aca:	3710      	adds	r7, #16
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	0800ab88 	.word	0x0800ab88
 8000ad4:	0800c000 	.word	0x0800c000
 8000ad8:	0800abac 	.word	0x0800abac
 8000adc:	0800c004 	.word	0x0800c004

08000ae0 <bootloader_upload_firmware>:

bool bootloader_upload_firmware(void) {
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b084      	sub	sp, #16
 8000ae4:	af02      	add	r7, sp, #8
	if (sd_fileExists(&SDCard, fileName)) {
 8000ae6:	496f      	ldr	r1, [pc, #444]	; (8000ca4 <bootloader_upload_firmware+0x1c4>)
 8000ae8:	486f      	ldr	r0, [pc, #444]	; (8000ca8 <bootloader_upload_firmware+0x1c8>)
 8000aea:	f006 fb52 	bl	8007192 <sd_fileExists>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	f000 80d2 	beq.w	8000c9a <bootloader_upload_firmware+0x1ba>
		sd_getFileInfo(&SDCard, fileName);
 8000af6:	496b      	ldr	r1, [pc, #428]	; (8000ca4 <bootloader_upload_firmware+0x1c4>)
 8000af8:	486b      	ldr	r0, [pc, #428]	; (8000ca8 <bootloader_upload_firmware+0x1c8>)
 8000afa:	f006 fc3d 	bl	8007378 <sd_getFileInfo>
		uint32_t noBytes = SDCard.fno.fsize;
 8000afe:	4b6a      	ldr	r3, [pc, #424]	; (8000ca8 <bootloader_upload_firmware+0x1c8>)
 8000b00:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8000b04:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b08:	607b      	str	r3, [r7, #4]
		print("Log: Total Size of File is : %d\r\n", noBytes);
 8000b0a:	6879      	ldr	r1, [r7, #4]
 8000b0c:	4867      	ldr	r0, [pc, #412]	; (8000cac <bootloader_upload_firmware+0x1cc>)
 8000b0e:	f7ff fe85 	bl	800081c <print>
		if(!checkFileSizeOk(noBytes)){
 8000b12:	6878      	ldr	r0, [r7, #4]
 8000b14:	f000 f953 	bl	8000dbe <checkFileSizeOk>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	f083 0301 	eor.w	r3, r3, #1
 8000b1e:	b2db      	uxtb	r3, r3
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d008      	beq.n	8000b36 <bootloader_upload_firmware+0x56>
			print("Error: File Size exceed the flash by %d.\r\n", noBytes - FLASH_SIZE - FLASH_BL_SIZE);
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	f5a3 3330 	sub.w	r3, r3, #180224	; 0x2c000
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4860      	ldr	r0, [pc, #384]	; (8000cb0 <bootloader_upload_firmware+0x1d0>)
 8000b2e:	f7ff fe75 	bl	800081c <print>
			return false;
 8000b32:	2300      	movs	r3, #0
 8000b34:	e0b2      	b.n	8000c9c <bootloader_upload_firmware+0x1bc>
		}
		if(!execute_flash_erase(3, 2)){
 8000b36:	2102      	movs	r1, #2
 8000b38:	2003      	movs	r0, #3
 8000b3a:	f006 fcad 	bl	8007498 <execute_flash_erase>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d104      	bne.n	8000b4e <bootloader_upload_firmware+0x6e>
			print("Error: Could not erase flash memory.\r\n");
 8000b44:	485b      	ldr	r0, [pc, #364]	; (8000cb4 <bootloader_upload_firmware+0x1d4>)
 8000b46:	f7ff fe69 	bl	800081c <print>
			return false;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	e0a6      	b.n	8000c9c <bootloader_upload_firmware+0x1bc>
		}
		else{
			print("Log: Erasing Flash Memory from 0x%X to 0x%X.\r\n", FLASH_ADDR_APP, FLASH_ADDR_APP + FLASH_SIZE - FLASH_BL_SIZE - 1);
 8000b4e:	4a5a      	ldr	r2, [pc, #360]	; (8000cb8 <bootloader_upload_firmware+0x1d8>)
 8000b50:	495a      	ldr	r1, [pc, #360]	; (8000cbc <bootloader_upload_firmware+0x1dc>)
 8000b52:	485b      	ldr	r0, [pc, #364]	; (8000cc0 <bootloader_upload_firmware+0x1e0>)
 8000b54:	f7ff fe62 	bl	800081c <print>
		}

		uint32_t seekPtr = 0;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	603b      	str	r3, [r7, #0]
		while (noBytes) {
 8000b5c:	e097      	b.n	8000c8e <bootloader_upload_firmware+0x1ae>
			seekPtr = SDCard.fil.fptr;
 8000b5e:	4b52      	ldr	r3, [pc, #328]	; (8000ca8 <bootloader_upload_firmware+0x1c8>)
 8000b60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000b64:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8000b68:	603b      	str	r3, [r7, #0]
			if (noBytes >= 1000)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000b70:	d331      	bcc.n	8000bd6 <bootloader_upload_firmware+0xf6>
				if (sd_fileseekread(&SDCard, fileName, seekPtr, binData,
 8000b72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b76:	9300      	str	r3, [sp, #0]
 8000b78:	4b52      	ldr	r3, [pc, #328]	; (8000cc4 <bootloader_upload_firmware+0x1e4>)
 8000b7a:	683a      	ldr	r2, [r7, #0]
 8000b7c:	4949      	ldr	r1, [pc, #292]	; (8000ca4 <bootloader_upload_firmware+0x1c4>)
 8000b7e:	484a      	ldr	r0, [pc, #296]	; (8000ca8 <bootloader_upload_firmware+0x1c8>)
 8000b80:	f006 fbb7 	bl	80072f2 <sd_fileseekread>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d016      	beq.n	8000bb8 <bootloader_upload_firmware+0xd8>
						1000)) {
					noBytes -= SDCard.br;
 8000b8a:	4b47      	ldr	r3, [pc, #284]	; (8000ca8 <bootloader_upload_firmware+0x1c8>)
 8000b8c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8000b90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000b94:	687a      	ldr	r2, [r7, #4]
 8000b96:	1ad3      	subs	r3, r2, r3
 8000b98:	607b      	str	r3, [r7, #4]
					print("Log: Data Reading Success at Addr: %X, %d\r\n",
 8000b9a:	4b43      	ldr	r3, [pc, #268]	; (8000ca8 <bootloader_upload_firmware+0x1c8>)
 8000b9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000ba0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8000ba4:	4a40      	ldr	r2, [pc, #256]	; (8000ca8 <bootloader_upload_firmware+0x1c8>)
 8000ba6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8000baa:	f8d2 20bc 	ldr.w	r2, [r2, #188]	; 0xbc
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4845      	ldr	r0, [pc, #276]	; (8000cc8 <bootloader_upload_firmware+0x1e8>)
 8000bb2:	f7ff fe33 	bl	800081c <print>
 8000bb6:	e03e      	b.n	8000c36 <bootloader_upload_firmware+0x156>
							SDCard.fil.fptr, SDCard.fil.fptr);
				} else {
					print("ERROR: Data Reading Failed at Addr: %X, %d\r\n",
 8000bb8:	4b3b      	ldr	r3, [pc, #236]	; (8000ca8 <bootloader_upload_firmware+0x1c8>)
 8000bba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000bbe:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8000bc2:	4a39      	ldr	r2, [pc, #228]	; (8000ca8 <bootloader_upload_firmware+0x1c8>)
 8000bc4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8000bc8:	f8d2 20bc 	ldr.w	r2, [r2, #188]	; 0xbc
 8000bcc:	4619      	mov	r1, r3
 8000bce:	483f      	ldr	r0, [pc, #252]	; (8000ccc <bootloader_upload_firmware+0x1ec>)
 8000bd0:	f7ff fe24 	bl	800081c <print>
 8000bd4:	e02f      	b.n	8000c36 <bootloader_upload_firmware+0x156>
							SDCard.fil.fptr, SDCard.fil.fptr);
				}
			else if (sd_fileseekread(&SDCard, fileName, seekPtr, binData,
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	9300      	str	r3, [sp, #0]
 8000bda:	4b3a      	ldr	r3, [pc, #232]	; (8000cc4 <bootloader_upload_firmware+0x1e4>)
 8000bdc:	683a      	ldr	r2, [r7, #0]
 8000bde:	4931      	ldr	r1, [pc, #196]	; (8000ca4 <bootloader_upload_firmware+0x1c4>)
 8000be0:	4831      	ldr	r0, [pc, #196]	; (8000ca8 <bootloader_upload_firmware+0x1c8>)
 8000be2:	f006 fb86 	bl	80072f2 <sd_fileseekread>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d016      	beq.n	8000c1a <bootloader_upload_firmware+0x13a>
					noBytes)) {
				noBytes -= SDCard.br;
 8000bec:	4b2e      	ldr	r3, [pc, #184]	; (8000ca8 <bootloader_upload_firmware+0x1c8>)
 8000bee:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8000bf2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000bf6:	687a      	ldr	r2, [r7, #4]
 8000bf8:	1ad3      	subs	r3, r2, r3
 8000bfa:	607b      	str	r3, [r7, #4]
				print("Log: Data Reading Success at Addr: %X, %d\r\n",
 8000bfc:	4b2a      	ldr	r3, [pc, #168]	; (8000ca8 <bootloader_upload_firmware+0x1c8>)
 8000bfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000c02:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8000c06:	4a28      	ldr	r2, [pc, #160]	; (8000ca8 <bootloader_upload_firmware+0x1c8>)
 8000c08:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8000c0c:	f8d2 20bc 	ldr.w	r2, [r2, #188]	; 0xbc
 8000c10:	4619      	mov	r1, r3
 8000c12:	482d      	ldr	r0, [pc, #180]	; (8000cc8 <bootloader_upload_firmware+0x1e8>)
 8000c14:	f7ff fe02 	bl	800081c <print>
 8000c18:	e00d      	b.n	8000c36 <bootloader_upload_firmware+0x156>
						SDCard.fil.fptr, SDCard.fil.fptr);
			} else {
				print("Error: Data Reading Failed at Addr: %X, %d\r\n",
 8000c1a:	4b23      	ldr	r3, [pc, #140]	; (8000ca8 <bootloader_upload_firmware+0x1c8>)
 8000c1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000c20:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8000c24:	4a20      	ldr	r2, [pc, #128]	; (8000ca8 <bootloader_upload_firmware+0x1c8>)
 8000c26:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8000c2a:	f8d2 20bc 	ldr.w	r2, [r2, #188]	; 0xbc
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4827      	ldr	r0, [pc, #156]	; (8000cd0 <bootloader_upload_firmware+0x1f0>)
 8000c32:	f7ff fdf3 	bl	800081c <print>
						SDCard.fil.fptr, SDCard.fil.fptr);
			}
//			print("Log: Loc Addr: 0x%X\r\n", FLASH_ADDR_APP + seekPtr);
			if(execute_mem_write(binData, FLASH_ADDR_APP + seekPtr, SDCard.br)){
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8000c3c:	f503 4340 	add.w	r3, r3, #49152	; 0xc000
 8000c40:	4a19      	ldr	r2, [pc, #100]	; (8000ca8 <bootloader_upload_firmware+0x1c8>)
 8000c42:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8000c46:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	481d      	ldr	r0, [pc, #116]	; (8000cc4 <bootloader_upload_firmware+0x1e4>)
 8000c4e:	f006 fbf1 	bl	8007434 <execute_mem_write>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d009      	beq.n	8000c6c <bootloader_upload_firmware+0x18c>
				print("Success: Data written to flash at addr: 0x%X.\r\n", FLASH_ADDR_APP + seekPtr);
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8000c5e:	f503 4340 	add.w	r3, r3, #49152	; 0xc000
 8000c62:	4619      	mov	r1, r3
 8000c64:	481b      	ldr	r0, [pc, #108]	; (8000cd4 <bootloader_upload_firmware+0x1f4>)
 8000c66:	f7ff fdd9 	bl	800081c <print>
 8000c6a:	e00a      	b.n	8000c82 <bootloader_upload_firmware+0x1a2>
			}
			else{
				print("Error: Could not write to flash at addr: 0x%X.\r\n", FLASH_ADDR_APP + seekPtr);
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8000c72:	f503 4340 	add.w	r3, r3, #49152	; 0xc000
 8000c76:	4619      	mov	r1, r3
 8000c78:	4817      	ldr	r0, [pc, #92]	; (8000cd8 <bootloader_upload_firmware+0x1f8>)
 8000c7a:	f7ff fdcf 	bl	800081c <print>
				return false;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	e00c      	b.n	8000c9c <bootloader_upload_firmware+0x1bc>
			}
			memset(binData, 0, sizeof(binData));
 8000c82:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c86:	2100      	movs	r1, #0
 8000c88:	480e      	ldr	r0, [pc, #56]	; (8000cc4 <bootloader_upload_firmware+0x1e4>)
 8000c8a:	f009 fa0f 	bl	800a0ac <memset>
		while (noBytes) {
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	f47f af64 	bne.w	8000b5e <bootloader_upload_firmware+0x7e>
		}
		return true;
 8000c96:	2301      	movs	r3, #1
 8000c98:	e000      	b.n	8000c9c <bootloader_upload_firmware+0x1bc>
	}
		return false;
 8000c9a:	2300      	movs	r3, #0
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	3708      	adds	r7, #8
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	200000cc 	.word	0x200000cc
 8000ca8:	200004d4 	.word	0x200004d4
 8000cac:	0800abc4 	.word	0x0800abc4
 8000cb0:	0800abe8 	.word	0x0800abe8
 8000cb4:	0800ac14 	.word	0x0800ac14
 8000cb8:	0801ffff 	.word	0x0801ffff
 8000cbc:	0800c000 	.word	0x0800c000
 8000cc0:	0800ac3c 	.word	0x0800ac3c
 8000cc4:	200000ec 	.word	0x200000ec
 8000cc8:	0800ac6c 	.word	0x0800ac6c
 8000ccc:	0800ac98 	.word	0x0800ac98
 8000cd0:	0800acc8 	.word	0x0800acc8
 8000cd4:	0800acf8 	.word	0x0800acf8
 8000cd8:	0800ad28 	.word	0x0800ad28

08000cdc <ee_getBLUpdateStatus>:

bool ee_getBLUpdateStatus(uint8_t *blust) {
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
	if (ee24_isConnected()) {
 8000ce4:	f006 f95c 	bl	8006fa0 <ee24_isConnected>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d00a      	beq.n	8000d04 <ee_getBLUpdateStatus+0x28>
		if (ee24_read(0, blust, 1, 200)) {
 8000cee:	23c8      	movs	r3, #200	; 0xc8
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	6879      	ldr	r1, [r7, #4]
 8000cf4:	2000      	movs	r0, #0
 8000cf6:	f006 f9df 	bl	80070b8 <ee24_read>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <ee_getBLUpdateStatus+0x28>
			return true;
 8000d00:	2301      	movs	r3, #1
 8000d02:	e000      	b.n	8000d06 <ee_getBLUpdateStatus+0x2a>
		}
	}
	return false;
 8000d04:	2300      	movs	r3, #0
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}

08000d0e <ee_setBLUpdateStatus>:

bool ee_setBLUpdateStatus(uint8_t blust) {
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	b082      	sub	sp, #8
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	4603      	mov	r3, r0
 8000d16:	71fb      	strb	r3, [r7, #7]
	if (ee24_isConnected()) {
 8000d18:	f006 f942 	bl	8006fa0 <ee24_isConnected>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d00b      	beq.n	8000d3a <ee_setBLUpdateStatus+0x2c>
		if (ee24_write(0, &blust, 1, 500)) {
 8000d22:	1df9      	adds	r1, r7, #7
 8000d24:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000d28:	2201      	movs	r2, #1
 8000d2a:	2000      	movs	r0, #0
 8000d2c:	f006 f952 	bl	8006fd4 <ee24_write>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <ee_setBLUpdateStatus+0x2c>
			return true;
 8000d36:	2301      	movs	r3, #1
 8000d38:	e000      	b.n	8000d3c <ee_setBLUpdateStatus+0x2e>
		}
	}
	return false;
 8000d3a:	2300      	movs	r3, #0
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3708      	adds	r7, #8
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <ee_getBLFileNameLen>:

bool ee_getBLFileNameLen(uint8_t *len) {
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
	if (ee24_isConnected()) {
 8000d4c:	f006 f928 	bl	8006fa0 <ee24_isConnected>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d00a      	beq.n	8000d6c <ee_getBLFileNameLen+0x28>
		if (ee24_read(21, len, 1, 200)) {
 8000d56:	23c8      	movs	r3, #200	; 0xc8
 8000d58:	2201      	movs	r2, #1
 8000d5a:	6879      	ldr	r1, [r7, #4]
 8000d5c:	2015      	movs	r0, #21
 8000d5e:	f006 f9ab 	bl	80070b8 <ee24_read>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <ee_getBLFileNameLen+0x28>
			return true;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	e000      	b.n	8000d6e <ee_getBLFileNameLen+0x2a>
		}
	}
	return false;
 8000d6c:	2300      	movs	r3, #0
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}

08000d76 <ee_getBLFileName>:

bool ee_getBLFileName(char *str) {
 8000d76:	b580      	push	{r7, lr}
 8000d78:	b084      	sub	sp, #16
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	6078      	str	r0, [r7, #4]
	if (ee24_isConnected()) {
 8000d7e:	f006 f90f 	bl	8006fa0 <ee24_isConnected>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d015      	beq.n	8000db4 <ee_getBLFileName+0x3e>
		uint8_t flen = 0;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	73fb      	strb	r3, [r7, #15]
		if (ee_getBLFileNameLen(&flen)) {
 8000d8c:	f107 030f 	add.w	r3, r7, #15
 8000d90:	4618      	mov	r0, r3
 8000d92:	f7ff ffd7 	bl	8000d44 <ee_getBLFileNameLen>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d00b      	beq.n	8000db4 <ee_getBLFileName+0x3e>
			if (ee24_read(1, str, flen, 200)) {
 8000d9c:	7bfb      	ldrb	r3, [r7, #15]
 8000d9e:	461a      	mov	r2, r3
 8000da0:	23c8      	movs	r3, #200	; 0xc8
 8000da2:	6879      	ldr	r1, [r7, #4]
 8000da4:	2001      	movs	r0, #1
 8000da6:	f006 f987 	bl	80070b8 <ee24_read>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <ee_getBLFileName+0x3e>
				return true;
 8000db0:	2301      	movs	r3, #1
 8000db2:	e000      	b.n	8000db6 <ee_getBLFileName+0x40>
			}
		}
	}
	return false;
 8000db4:	2300      	movs	r3, #0
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3710      	adds	r7, #16
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}

08000dbe <checkFileSizeOk>:
		return true;
	}
	return false;
}

bool checkFileSizeOk(uint32_t sz){
 8000dbe:	b480      	push	{r7}
 8000dc0:	b083      	sub	sp, #12
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	6078      	str	r0, [r7, #4]
	if((FLASH_SIZE - FLASH_BL_SIZE) > sz){
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	f5b3 3fa0 	cmp.w	r3, #81920	; 0x14000
 8000dcc:	d201      	bcs.n	8000dd2 <checkFileSizeOk+0x14>
		return true;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	e000      	b.n	8000dd4 <checkFileSizeOk+0x16>
	}
	else{
		return false;
 8000dd2:	2300      	movs	r3, #0
	}
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	370c      	adds	r7, #12
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr

08000de0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000de4:	b672      	cpsid	i
}
 8000de6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000de8:	e7fe      	b.n	8000de8 <Error_Handler+0x8>
	...

08000dec <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_tx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000df0:	4b0c      	ldr	r3, [pc, #48]	; (8000e24 <MX_SDIO_SD_Init+0x38>)
 8000df2:	4a0d      	ldr	r2, [pc, #52]	; (8000e28 <MX_SDIO_SD_Init+0x3c>)
 8000df4:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000df6:	4b0b      	ldr	r3, [pc, #44]	; (8000e24 <MX_SDIO_SD_Init+0x38>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000dfc:	4b09      	ldr	r3, [pc, #36]	; (8000e24 <MX_SDIO_SD_Init+0x38>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000e02:	4b08      	ldr	r3, [pc, #32]	; (8000e24 <MX_SDIO_SD_Init+0x38>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000e08:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <MX_SDIO_SD_Init+0x38>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000e0e:	4b05      	ldr	r3, [pc, #20]	; (8000e24 <MX_SDIO_SD_Init+0x38>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 4;
 8000e14:	4b03      	ldr	r3, [pc, #12]	; (8000e24 <MX_SDIO_SD_Init+0x38>)
 8000e16:	2204      	movs	r2, #4
 8000e18:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000e1a:	bf00      	nop
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr
 8000e24:	20002708 	.word	0x20002708
 8000e28:	40012c00 	.word	0x40012c00

08000e2c <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b08a      	sub	sp, #40	; 0x28
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e34:	f107 0314 	add.w	r3, r7, #20
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]
 8000e3c:	605a      	str	r2, [r3, #4]
 8000e3e:	609a      	str	r2, [r3, #8]
 8000e40:	60da      	str	r2, [r3, #12]
 8000e42:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a68      	ldr	r2, [pc, #416]	; (8000fec <HAL_SD_MspInit+0x1c0>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	f040 80c9 	bne.w	8000fe2 <HAL_SD_MspInit+0x1b6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000e50:	2300      	movs	r3, #0
 8000e52:	613b      	str	r3, [r7, #16]
 8000e54:	4b66      	ldr	r3, [pc, #408]	; (8000ff0 <HAL_SD_MspInit+0x1c4>)
 8000e56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e58:	4a65      	ldr	r2, [pc, #404]	; (8000ff0 <HAL_SD_MspInit+0x1c4>)
 8000e5a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e5e:	6453      	str	r3, [r2, #68]	; 0x44
 8000e60:	4b63      	ldr	r3, [pc, #396]	; (8000ff0 <HAL_SD_MspInit+0x1c4>)
 8000e62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e68:	613b      	str	r3, [r7, #16]
 8000e6a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	4b5f      	ldr	r3, [pc, #380]	; (8000ff0 <HAL_SD_MspInit+0x1c4>)
 8000e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e74:	4a5e      	ldr	r2, [pc, #376]	; (8000ff0 <HAL_SD_MspInit+0x1c4>)
 8000e76:	f043 0304 	orr.w	r3, r3, #4
 8000e7a:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7c:	4b5c      	ldr	r3, [pc, #368]	; (8000ff0 <HAL_SD_MspInit+0x1c4>)
 8000e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e80:	f003 0304 	and.w	r3, r3, #4
 8000e84:	60fb      	str	r3, [r7, #12]
 8000e86:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e88:	2300      	movs	r3, #0
 8000e8a:	60bb      	str	r3, [r7, #8]
 8000e8c:	4b58      	ldr	r3, [pc, #352]	; (8000ff0 <HAL_SD_MspInit+0x1c4>)
 8000e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e90:	4a57      	ldr	r2, [pc, #348]	; (8000ff0 <HAL_SD_MspInit+0x1c4>)
 8000e92:	f043 0308 	orr.w	r3, r3, #8
 8000e96:	6313      	str	r3, [r2, #48]	; 0x30
 8000e98:	4b55      	ldr	r3, [pc, #340]	; (8000ff0 <HAL_SD_MspInit+0x1c4>)
 8000e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9c:	f003 0308 	and.w	r3, r3, #8
 8000ea0:	60bb      	str	r3, [r7, #8]
 8000ea2:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000ea4:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000ea8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eaa:	2302      	movs	r3, #2
 8000eac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb2:	2303      	movs	r3, #3
 8000eb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000eb6:	230c      	movs	r3, #12
 8000eb8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eba:	f107 0314 	add.w	r3, r7, #20
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	484c      	ldr	r0, [pc, #304]	; (8000ff4 <HAL_SD_MspInit+0x1c8>)
 8000ec2:	f001 fa25 	bl	8002310 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ec6:	2304      	movs	r3, #4
 8000ec8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eca:	2302      	movs	r3, #2
 8000ecc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed2:	2303      	movs	r3, #3
 8000ed4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000ed6:	230c      	movs	r3, #12
 8000ed8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eda:	f107 0314 	add.w	r3, r7, #20
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4845      	ldr	r0, [pc, #276]	; (8000ff8 <HAL_SD_MspInit+0x1cc>)
 8000ee2:	f001 fa15 	bl	8002310 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8000ee6:	4b45      	ldr	r3, [pc, #276]	; (8000ffc <HAL_SD_MspInit+0x1d0>)
 8000ee8:	4a45      	ldr	r2, [pc, #276]	; (8001000 <HAL_SD_MspInit+0x1d4>)
 8000eea:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8000eec:	4b43      	ldr	r3, [pc, #268]	; (8000ffc <HAL_SD_MspInit+0x1d0>)
 8000eee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ef2:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ef4:	4b41      	ldr	r3, [pc, #260]	; (8000ffc <HAL_SD_MspInit+0x1d0>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000efa:	4b40      	ldr	r3, [pc, #256]	; (8000ffc <HAL_SD_MspInit+0x1d0>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f00:	4b3e      	ldr	r3, [pc, #248]	; (8000ffc <HAL_SD_MspInit+0x1d0>)
 8000f02:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f06:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000f08:	4b3c      	ldr	r3, [pc, #240]	; (8000ffc <HAL_SD_MspInit+0x1d0>)
 8000f0a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f0e:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000f10:	4b3a      	ldr	r3, [pc, #232]	; (8000ffc <HAL_SD_MspInit+0x1d0>)
 8000f12:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f16:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8000f18:	4b38      	ldr	r3, [pc, #224]	; (8000ffc <HAL_SD_MspInit+0x1d0>)
 8000f1a:	2220      	movs	r2, #32
 8000f1c:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f1e:	4b37      	ldr	r3, [pc, #220]	; (8000ffc <HAL_SD_MspInit+0x1d0>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000f24:	4b35      	ldr	r3, [pc, #212]	; (8000ffc <HAL_SD_MspInit+0x1d0>)
 8000f26:	2204      	movs	r2, #4
 8000f28:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000f2a:	4b34      	ldr	r3, [pc, #208]	; (8000ffc <HAL_SD_MspInit+0x1d0>)
 8000f2c:	2203      	movs	r2, #3
 8000f2e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8000f30:	4b32      	ldr	r3, [pc, #200]	; (8000ffc <HAL_SD_MspInit+0x1d0>)
 8000f32:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000f36:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000f38:	4b30      	ldr	r3, [pc, #192]	; (8000ffc <HAL_SD_MspInit+0x1d0>)
 8000f3a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000f3e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8000f40:	482e      	ldr	r0, [pc, #184]	; (8000ffc <HAL_SD_MspInit+0x1d0>)
 8000f42:	f000 fb5f 	bl	8001604 <HAL_DMA_Init>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <HAL_SD_MspInit+0x124>
    {
      Error_Handler();
 8000f4c:	f7ff ff48 	bl	8000de0 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	4a2a      	ldr	r2, [pc, #168]	; (8000ffc <HAL_SD_MspInit+0x1d0>)
 8000f54:	641a      	str	r2, [r3, #64]	; 0x40
 8000f56:	4a29      	ldr	r2, [pc, #164]	; (8000ffc <HAL_SD_MspInit+0x1d0>)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8000f5c:	4b29      	ldr	r3, [pc, #164]	; (8001004 <HAL_SD_MspInit+0x1d8>)
 8000f5e:	4a2a      	ldr	r2, [pc, #168]	; (8001008 <HAL_SD_MspInit+0x1dc>)
 8000f60:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8000f62:	4b28      	ldr	r3, [pc, #160]	; (8001004 <HAL_SD_MspInit+0x1d8>)
 8000f64:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f68:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f6a:	4b26      	ldr	r3, [pc, #152]	; (8001004 <HAL_SD_MspInit+0x1d8>)
 8000f6c:	2240      	movs	r2, #64	; 0x40
 8000f6e:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f70:	4b24      	ldr	r3, [pc, #144]	; (8001004 <HAL_SD_MspInit+0x1d8>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f76:	4b23      	ldr	r3, [pc, #140]	; (8001004 <HAL_SD_MspInit+0x1d8>)
 8000f78:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f7c:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000f7e:	4b21      	ldr	r3, [pc, #132]	; (8001004 <HAL_SD_MspInit+0x1d8>)
 8000f80:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f84:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000f86:	4b1f      	ldr	r3, [pc, #124]	; (8001004 <HAL_SD_MspInit+0x1d8>)
 8000f88:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f8c:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8000f8e:	4b1d      	ldr	r3, [pc, #116]	; (8001004 <HAL_SD_MspInit+0x1d8>)
 8000f90:	2220      	movs	r2, #32
 8000f92:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f94:	4b1b      	ldr	r3, [pc, #108]	; (8001004 <HAL_SD_MspInit+0x1d8>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000f9a:	4b1a      	ldr	r3, [pc, #104]	; (8001004 <HAL_SD_MspInit+0x1d8>)
 8000f9c:	2204      	movs	r2, #4
 8000f9e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000fa0:	4b18      	ldr	r3, [pc, #96]	; (8001004 <HAL_SD_MspInit+0x1d8>)
 8000fa2:	2203      	movs	r2, #3
 8000fa4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8000fa6:	4b17      	ldr	r3, [pc, #92]	; (8001004 <HAL_SD_MspInit+0x1d8>)
 8000fa8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000fac:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000fae:	4b15      	ldr	r3, [pc, #84]	; (8001004 <HAL_SD_MspInit+0x1d8>)
 8000fb0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000fb4:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8000fb6:	4813      	ldr	r0, [pc, #76]	; (8001004 <HAL_SD_MspInit+0x1d8>)
 8000fb8:	f000 fb24 	bl	8001604 <HAL_DMA_Init>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <HAL_SD_MspInit+0x19a>
    {
      Error_Handler();
 8000fc2:	f7ff ff0d 	bl	8000de0 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4a0e      	ldr	r2, [pc, #56]	; (8001004 <HAL_SD_MspInit+0x1d8>)
 8000fca:	63da      	str	r2, [r3, #60]	; 0x3c
 8000fcc:	4a0d      	ldr	r2, [pc, #52]	; (8001004 <HAL_SD_MspInit+0x1d8>)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	2031      	movs	r0, #49	; 0x31
 8000fd8:	f000 fadd 	bl	8001596 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8000fdc:	2031      	movs	r0, #49	; 0x31
 8000fde:	f000 faf6 	bl	80015ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8000fe2:	bf00      	nop
 8000fe4:	3728      	adds	r7, #40	; 0x28
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	40012c00 	.word	0x40012c00
 8000ff0:	40023800 	.word	0x40023800
 8000ff4:	40020800 	.word	0x40020800
 8000ff8:	40020c00 	.word	0x40020c00
 8000ffc:	2000278c 	.word	0x2000278c
 8001000:	40026458 	.word	0x40026458
 8001004:	200027ec 	.word	0x200027ec
 8001008:	400264a0 	.word	0x400264a0

0800100c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001012:	2300      	movs	r3, #0
 8001014:	607b      	str	r3, [r7, #4]
 8001016:	4b10      	ldr	r3, [pc, #64]	; (8001058 <HAL_MspInit+0x4c>)
 8001018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800101a:	4a0f      	ldr	r2, [pc, #60]	; (8001058 <HAL_MspInit+0x4c>)
 800101c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001020:	6453      	str	r3, [r2, #68]	; 0x44
 8001022:	4b0d      	ldr	r3, [pc, #52]	; (8001058 <HAL_MspInit+0x4c>)
 8001024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001026:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800102a:	607b      	str	r3, [r7, #4]
 800102c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800102e:	2300      	movs	r3, #0
 8001030:	603b      	str	r3, [r7, #0]
 8001032:	4b09      	ldr	r3, [pc, #36]	; (8001058 <HAL_MspInit+0x4c>)
 8001034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001036:	4a08      	ldr	r2, [pc, #32]	; (8001058 <HAL_MspInit+0x4c>)
 8001038:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800103c:	6413      	str	r3, [r2, #64]	; 0x40
 800103e:	4b06      	ldr	r3, [pc, #24]	; (8001058 <HAL_MspInit+0x4c>)
 8001040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001046:	603b      	str	r3, [r7, #0]
 8001048:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800104a:	bf00      	nop
 800104c:	370c      	adds	r7, #12
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	40023800 	.word	0x40023800

0800105c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001060:	e7fe      	b.n	8001060 <NMI_Handler+0x4>

08001062 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001062:	b480      	push	{r7}
 8001064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001066:	e7fe      	b.n	8001066 <HardFault_Handler+0x4>

08001068 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800106c:	e7fe      	b.n	800106c <MemManage_Handler+0x4>

0800106e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800106e:	b480      	push	{r7}
 8001070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001072:	e7fe      	b.n	8001072 <BusFault_Handler+0x4>

08001074 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001078:	e7fe      	b.n	8001078 <UsageFault_Handler+0x4>

0800107a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800107a:	b480      	push	{r7}
 800107c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800107e:	bf00      	nop
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr

08001088 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800108c:	bf00      	nop
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr

08001096 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001096:	b480      	push	{r7}
 8001098:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800109a:	bf00      	nop
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr

080010a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010a8:	f000 f956 	bl	8001358 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010ac:	bf00      	nop
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80010b4:	4802      	ldr	r0, [pc, #8]	; (80010c0 <SDIO_IRQHandler+0x10>)
 80010b6:	f003 faeb 	bl	8004690 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 80010ba:	bf00      	nop
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	20002708 	.word	0x20002708

080010c4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 80010c8:	4802      	ldr	r0, [pc, #8]	; (80010d4 <DMA2_Stream3_IRQHandler+0x10>)
 80010ca:	f000 fbc3 	bl	8001854 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80010ce:	bf00      	nop
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	2000278c 	.word	0x2000278c

080010d8 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 80010dc:	4802      	ldr	r0, [pc, #8]	; (80010e8 <DMA2_Stream6_IRQHandler+0x10>)
 80010de:	f000 fbb9 	bl	8001854 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80010e2:	bf00      	nop
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	200027ec 	.word	0x200027ec

080010ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b086      	sub	sp, #24
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010f4:	4a14      	ldr	r2, [pc, #80]	; (8001148 <_sbrk+0x5c>)
 80010f6:	4b15      	ldr	r3, [pc, #84]	; (800114c <_sbrk+0x60>)
 80010f8:	1ad3      	subs	r3, r2, r3
 80010fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001100:	4b13      	ldr	r3, [pc, #76]	; (8001150 <_sbrk+0x64>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d102      	bne.n	800110e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001108:	4b11      	ldr	r3, [pc, #68]	; (8001150 <_sbrk+0x64>)
 800110a:	4a12      	ldr	r2, [pc, #72]	; (8001154 <_sbrk+0x68>)
 800110c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800110e:	4b10      	ldr	r3, [pc, #64]	; (8001150 <_sbrk+0x64>)
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4413      	add	r3, r2
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	429a      	cmp	r2, r3
 800111a:	d207      	bcs.n	800112c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800111c:	f008 ffce 	bl	800a0bc <__errno>
 8001120:	4603      	mov	r3, r0
 8001122:	220c      	movs	r2, #12
 8001124:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001126:	f04f 33ff 	mov.w	r3, #4294967295
 800112a:	e009      	b.n	8001140 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800112c:	4b08      	ldr	r3, [pc, #32]	; (8001150 <_sbrk+0x64>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001132:	4b07      	ldr	r3, [pc, #28]	; (8001150 <_sbrk+0x64>)
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4413      	add	r3, r2
 800113a:	4a05      	ldr	r2, [pc, #20]	; (8001150 <_sbrk+0x64>)
 800113c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800113e:	68fb      	ldr	r3, [r7, #12]
}
 8001140:	4618      	mov	r0, r3
 8001142:	3718      	adds	r7, #24
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	20010000 	.word	0x20010000
 800114c:	00000400 	.word	0x00000400
 8001150:	2000284c 	.word	0x2000284c
 8001154:	20002a50 	.word	0x20002a50

08001158 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800115c:	4b06      	ldr	r3, [pc, #24]	; (8001178 <SystemInit+0x20>)
 800115e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001162:	4a05      	ldr	r2, [pc, #20]	; (8001178 <SystemInit+0x20>)
 8001164:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001168:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800116c:	bf00      	nop
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	e000ed00 	.word	0xe000ed00

0800117c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001180:	4b11      	ldr	r3, [pc, #68]	; (80011c8 <MX_USART2_UART_Init+0x4c>)
 8001182:	4a12      	ldr	r2, [pc, #72]	; (80011cc <MX_USART2_UART_Init+0x50>)
 8001184:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001186:	4b10      	ldr	r3, [pc, #64]	; (80011c8 <MX_USART2_UART_Init+0x4c>)
 8001188:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800118c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800118e:	4b0e      	ldr	r3, [pc, #56]	; (80011c8 <MX_USART2_UART_Init+0x4c>)
 8001190:	2200      	movs	r2, #0
 8001192:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001194:	4b0c      	ldr	r3, [pc, #48]	; (80011c8 <MX_USART2_UART_Init+0x4c>)
 8001196:	2200      	movs	r2, #0
 8001198:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800119a:	4b0b      	ldr	r3, [pc, #44]	; (80011c8 <MX_USART2_UART_Init+0x4c>)
 800119c:	2200      	movs	r2, #0
 800119e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011a0:	4b09      	ldr	r3, [pc, #36]	; (80011c8 <MX_USART2_UART_Init+0x4c>)
 80011a2:	220c      	movs	r2, #12
 80011a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011a6:	4b08      	ldr	r3, [pc, #32]	; (80011c8 <MX_USART2_UART_Init+0x4c>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011ac:	4b06      	ldr	r3, [pc, #24]	; (80011c8 <MX_USART2_UART_Init+0x4c>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011b2:	4805      	ldr	r0, [pc, #20]	; (80011c8 <MX_USART2_UART_Init+0x4c>)
 80011b4:	f004 fb2e 	bl	8005814 <HAL_UART_Init>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011be:	f7ff fe0f 	bl	8000de0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011c2:	bf00      	nop
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	20002850 	.word	0x20002850
 80011cc:	40004400 	.word	0x40004400

080011d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b08a      	sub	sp, #40	; 0x28
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d8:	f107 0314 	add.w	r3, r7, #20
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	605a      	str	r2, [r3, #4]
 80011e2:	609a      	str	r2, [r3, #8]
 80011e4:	60da      	str	r2, [r3, #12]
 80011e6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a19      	ldr	r2, [pc, #100]	; (8001254 <HAL_UART_MspInit+0x84>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d12b      	bne.n	800124a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	613b      	str	r3, [r7, #16]
 80011f6:	4b18      	ldr	r3, [pc, #96]	; (8001258 <HAL_UART_MspInit+0x88>)
 80011f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fa:	4a17      	ldr	r2, [pc, #92]	; (8001258 <HAL_UART_MspInit+0x88>)
 80011fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001200:	6413      	str	r3, [r2, #64]	; 0x40
 8001202:	4b15      	ldr	r3, [pc, #84]	; (8001258 <HAL_UART_MspInit+0x88>)
 8001204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800120a:	613b      	str	r3, [r7, #16]
 800120c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800120e:	2300      	movs	r3, #0
 8001210:	60fb      	str	r3, [r7, #12]
 8001212:	4b11      	ldr	r3, [pc, #68]	; (8001258 <HAL_UART_MspInit+0x88>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	4a10      	ldr	r2, [pc, #64]	; (8001258 <HAL_UART_MspInit+0x88>)
 8001218:	f043 0301 	orr.w	r3, r3, #1
 800121c:	6313      	str	r3, [r2, #48]	; 0x30
 800121e:	4b0e      	ldr	r3, [pc, #56]	; (8001258 <HAL_UART_MspInit+0x88>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001222:	f003 0301 	and.w	r3, r3, #1
 8001226:	60fb      	str	r3, [r7, #12]
 8001228:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800122a:	230c      	movs	r3, #12
 800122c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122e:	2302      	movs	r3, #2
 8001230:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001232:	2300      	movs	r3, #0
 8001234:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001236:	2303      	movs	r3, #3
 8001238:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800123a:	2307      	movs	r3, #7
 800123c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800123e:	f107 0314 	add.w	r3, r7, #20
 8001242:	4619      	mov	r1, r3
 8001244:	4805      	ldr	r0, [pc, #20]	; (800125c <HAL_UART_MspInit+0x8c>)
 8001246:	f001 f863 	bl	8002310 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800124a:	bf00      	nop
 800124c:	3728      	adds	r7, #40	; 0x28
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	40004400 	.word	0x40004400
 8001258:	40023800 	.word	0x40023800
 800125c:	40020000 	.word	0x40020000

08001260 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001260:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001298 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001264:	f7ff ff78 	bl	8001158 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001268:	480c      	ldr	r0, [pc, #48]	; (800129c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800126a:	490d      	ldr	r1, [pc, #52]	; (80012a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800126c:	4a0d      	ldr	r2, [pc, #52]	; (80012a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800126e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001270:	e002      	b.n	8001278 <LoopCopyDataInit>

08001272 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001272:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001274:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001276:	3304      	adds	r3, #4

08001278 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001278:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800127a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800127c:	d3f9      	bcc.n	8001272 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800127e:	4a0a      	ldr	r2, [pc, #40]	; (80012a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001280:	4c0a      	ldr	r4, [pc, #40]	; (80012ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8001282:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001284:	e001      	b.n	800128a <LoopFillZerobss>

08001286 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001286:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001288:	3204      	adds	r2, #4

0800128a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800128a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800128c:	d3fb      	bcc.n	8001286 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800128e:	f008 ff1b 	bl	800a0c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001292:	f7ff fae9 	bl	8000868 <main>
  bx  lr    
 8001296:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001298:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800129c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012a0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80012a4:	0800aecc 	.word	0x0800aecc
  ldr r2, =_sbss
 80012a8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80012ac:	20002a4c 	.word	0x20002a4c

080012b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012b0:	e7fe      	b.n	80012b0 <ADC_IRQHandler>
	...

080012b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012b8:	4b0e      	ldr	r3, [pc, #56]	; (80012f4 <HAL_Init+0x40>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a0d      	ldr	r2, [pc, #52]	; (80012f4 <HAL_Init+0x40>)
 80012be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012c4:	4b0b      	ldr	r3, [pc, #44]	; (80012f4 <HAL_Init+0x40>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a0a      	ldr	r2, [pc, #40]	; (80012f4 <HAL_Init+0x40>)
 80012ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012d0:	4b08      	ldr	r3, [pc, #32]	; (80012f4 <HAL_Init+0x40>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a07      	ldr	r2, [pc, #28]	; (80012f4 <HAL_Init+0x40>)
 80012d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012dc:	2003      	movs	r0, #3
 80012de:	f000 f94f 	bl	8001580 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012e2:	200f      	movs	r0, #15
 80012e4:	f000 f808 	bl	80012f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012e8:	f7ff fe90 	bl	800100c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012ec:	2300      	movs	r3, #0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	40023c00 	.word	0x40023c00

080012f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001300:	4b12      	ldr	r3, [pc, #72]	; (800134c <HAL_InitTick+0x54>)
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	4b12      	ldr	r3, [pc, #72]	; (8001350 <HAL_InitTick+0x58>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	4619      	mov	r1, r3
 800130a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800130e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001312:	fbb2 f3f3 	udiv	r3, r2, r3
 8001316:	4618      	mov	r0, r3
 8001318:	f000 f967 	bl	80015ea <HAL_SYSTICK_Config>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	e00e      	b.n	8001344 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2b0f      	cmp	r3, #15
 800132a:	d80a      	bhi.n	8001342 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800132c:	2200      	movs	r2, #0
 800132e:	6879      	ldr	r1, [r7, #4]
 8001330:	f04f 30ff 	mov.w	r0, #4294967295
 8001334:	f000 f92f 	bl	8001596 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001338:	4a06      	ldr	r2, [pc, #24]	; (8001354 <HAL_InitTick+0x5c>)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800133e:	2300      	movs	r3, #0
 8001340:	e000      	b.n	8001344 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
}
 8001344:	4618      	mov	r0, r3
 8001346:	3708      	adds	r7, #8
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	20000000 	.word	0x20000000
 8001350:	20000008 	.word	0x20000008
 8001354:	20000004 	.word	0x20000004

08001358 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800135c:	4b06      	ldr	r3, [pc, #24]	; (8001378 <HAL_IncTick+0x20>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	461a      	mov	r2, r3
 8001362:	4b06      	ldr	r3, [pc, #24]	; (800137c <HAL_IncTick+0x24>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4413      	add	r3, r2
 8001368:	4a04      	ldr	r2, [pc, #16]	; (800137c <HAL_IncTick+0x24>)
 800136a:	6013      	str	r3, [r2, #0]
}
 800136c:	bf00      	nop
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	20000008 	.word	0x20000008
 800137c:	20002898 	.word	0x20002898

08001380 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  return uwTick;
 8001384:	4b03      	ldr	r3, [pc, #12]	; (8001394 <HAL_GetTick+0x14>)
 8001386:	681b      	ldr	r3, [r3, #0]
}
 8001388:	4618      	mov	r0, r3
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	20002898 	.word	0x20002898

08001398 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013a0:	f7ff ffee 	bl	8001380 <HAL_GetTick>
 80013a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013b0:	d005      	beq.n	80013be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013b2:	4b0a      	ldr	r3, [pc, #40]	; (80013dc <HAL_Delay+0x44>)
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	461a      	mov	r2, r3
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	4413      	add	r3, r2
 80013bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013be:	bf00      	nop
 80013c0:	f7ff ffde 	bl	8001380 <HAL_GetTick>
 80013c4:	4602      	mov	r2, r0
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	68fa      	ldr	r2, [r7, #12]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d8f7      	bhi.n	80013c0 <HAL_Delay+0x28>
  {
  }
}
 80013d0:	bf00      	nop
 80013d2:	bf00      	nop
 80013d4:	3710      	adds	r7, #16
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	20000008 	.word	0x20000008

080013e0 <__NVIC_SetPriorityGrouping>:
{
 80013e0:	b480      	push	{r7}
 80013e2:	b085      	sub	sp, #20
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	f003 0307 	and.w	r3, r3, #7
 80013ee:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013f0:	4b0c      	ldr	r3, [pc, #48]	; (8001424 <__NVIC_SetPriorityGrouping+0x44>)
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013f6:	68ba      	ldr	r2, [r7, #8]
 80013f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013fc:	4013      	ands	r3, r2
 80013fe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001408:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800140c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001410:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001412:	4a04      	ldr	r2, [pc, #16]	; (8001424 <__NVIC_SetPriorityGrouping+0x44>)
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	60d3      	str	r3, [r2, #12]
}
 8001418:	bf00      	nop
 800141a:	3714      	adds	r7, #20
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr
 8001424:	e000ed00 	.word	0xe000ed00

08001428 <__NVIC_GetPriorityGrouping>:
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800142c:	4b04      	ldr	r3, [pc, #16]	; (8001440 <__NVIC_GetPriorityGrouping+0x18>)
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	0a1b      	lsrs	r3, r3, #8
 8001432:	f003 0307 	and.w	r3, r3, #7
}
 8001436:	4618      	mov	r0, r3
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr
 8001440:	e000ed00 	.word	0xe000ed00

08001444 <__NVIC_EnableIRQ>:
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	4603      	mov	r3, r0
 800144c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800144e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001452:	2b00      	cmp	r3, #0
 8001454:	db0b      	blt.n	800146e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001456:	79fb      	ldrb	r3, [r7, #7]
 8001458:	f003 021f 	and.w	r2, r3, #31
 800145c:	4907      	ldr	r1, [pc, #28]	; (800147c <__NVIC_EnableIRQ+0x38>)
 800145e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001462:	095b      	lsrs	r3, r3, #5
 8001464:	2001      	movs	r0, #1
 8001466:	fa00 f202 	lsl.w	r2, r0, r2
 800146a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800146e:	bf00      	nop
 8001470:	370c      	adds	r7, #12
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	e000e100 	.word	0xe000e100

08001480 <__NVIC_SetPriority>:
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	4603      	mov	r3, r0
 8001488:	6039      	str	r1, [r7, #0]
 800148a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800148c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001490:	2b00      	cmp	r3, #0
 8001492:	db0a      	blt.n	80014aa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	b2da      	uxtb	r2, r3
 8001498:	490c      	ldr	r1, [pc, #48]	; (80014cc <__NVIC_SetPriority+0x4c>)
 800149a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149e:	0112      	lsls	r2, r2, #4
 80014a0:	b2d2      	uxtb	r2, r2
 80014a2:	440b      	add	r3, r1
 80014a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80014a8:	e00a      	b.n	80014c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	b2da      	uxtb	r2, r3
 80014ae:	4908      	ldr	r1, [pc, #32]	; (80014d0 <__NVIC_SetPriority+0x50>)
 80014b0:	79fb      	ldrb	r3, [r7, #7]
 80014b2:	f003 030f 	and.w	r3, r3, #15
 80014b6:	3b04      	subs	r3, #4
 80014b8:	0112      	lsls	r2, r2, #4
 80014ba:	b2d2      	uxtb	r2, r2
 80014bc:	440b      	add	r3, r1
 80014be:	761a      	strb	r2, [r3, #24]
}
 80014c0:	bf00      	nop
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr
 80014cc:	e000e100 	.word	0xe000e100
 80014d0:	e000ed00 	.word	0xe000ed00

080014d4 <NVIC_EncodePriority>:
{
 80014d4:	b480      	push	{r7}
 80014d6:	b089      	sub	sp, #36	; 0x24
 80014d8:	af00      	add	r7, sp, #0
 80014da:	60f8      	str	r0, [r7, #12]
 80014dc:	60b9      	str	r1, [r7, #8]
 80014de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	f003 0307 	and.w	r3, r3, #7
 80014e6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	f1c3 0307 	rsb	r3, r3, #7
 80014ee:	2b04      	cmp	r3, #4
 80014f0:	bf28      	it	cs
 80014f2:	2304      	movcs	r3, #4
 80014f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	3304      	adds	r3, #4
 80014fa:	2b06      	cmp	r3, #6
 80014fc:	d902      	bls.n	8001504 <NVIC_EncodePriority+0x30>
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	3b03      	subs	r3, #3
 8001502:	e000      	b.n	8001506 <NVIC_EncodePriority+0x32>
 8001504:	2300      	movs	r3, #0
 8001506:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001508:	f04f 32ff 	mov.w	r2, #4294967295
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	43da      	mvns	r2, r3
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	401a      	ands	r2, r3
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800151c:	f04f 31ff 	mov.w	r1, #4294967295
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	fa01 f303 	lsl.w	r3, r1, r3
 8001526:	43d9      	mvns	r1, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800152c:	4313      	orrs	r3, r2
}
 800152e:	4618      	mov	r0, r3
 8001530:	3724      	adds	r7, #36	; 0x24
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
	...

0800153c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	3b01      	subs	r3, #1
 8001548:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800154c:	d301      	bcc.n	8001552 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800154e:	2301      	movs	r3, #1
 8001550:	e00f      	b.n	8001572 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001552:	4a0a      	ldr	r2, [pc, #40]	; (800157c <SysTick_Config+0x40>)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	3b01      	subs	r3, #1
 8001558:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800155a:	210f      	movs	r1, #15
 800155c:	f04f 30ff 	mov.w	r0, #4294967295
 8001560:	f7ff ff8e 	bl	8001480 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001564:	4b05      	ldr	r3, [pc, #20]	; (800157c <SysTick_Config+0x40>)
 8001566:	2200      	movs	r2, #0
 8001568:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800156a:	4b04      	ldr	r3, [pc, #16]	; (800157c <SysTick_Config+0x40>)
 800156c:	2207      	movs	r2, #7
 800156e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001570:	2300      	movs	r3, #0
}
 8001572:	4618      	mov	r0, r3
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	e000e010 	.word	0xe000e010

08001580 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	f7ff ff29 	bl	80013e0 <__NVIC_SetPriorityGrouping>
}
 800158e:	bf00      	nop
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}

08001596 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001596:	b580      	push	{r7, lr}
 8001598:	b086      	sub	sp, #24
 800159a:	af00      	add	r7, sp, #0
 800159c:	4603      	mov	r3, r0
 800159e:	60b9      	str	r1, [r7, #8]
 80015a0:	607a      	str	r2, [r7, #4]
 80015a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015a4:	2300      	movs	r3, #0
 80015a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015a8:	f7ff ff3e 	bl	8001428 <__NVIC_GetPriorityGrouping>
 80015ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	68b9      	ldr	r1, [r7, #8]
 80015b2:	6978      	ldr	r0, [r7, #20]
 80015b4:	f7ff ff8e 	bl	80014d4 <NVIC_EncodePriority>
 80015b8:	4602      	mov	r2, r0
 80015ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015be:	4611      	mov	r1, r2
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff ff5d 	bl	8001480 <__NVIC_SetPriority>
}
 80015c6:	bf00      	nop
 80015c8:	3718      	adds	r7, #24
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}

080015ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b082      	sub	sp, #8
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	4603      	mov	r3, r0
 80015d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015dc:	4618      	mov	r0, r3
 80015de:	f7ff ff31 	bl	8001444 <__NVIC_EnableIRQ>
}
 80015e2:	bf00      	nop
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}

080015ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015ea:	b580      	push	{r7, lr}
 80015ec:	b082      	sub	sp, #8
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	f7ff ffa2 	bl	800153c <SysTick_Config>
 80015f8:	4603      	mov	r3, r0
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
	...

08001604 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b086      	sub	sp, #24
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800160c:	2300      	movs	r3, #0
 800160e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001610:	f7ff feb6 	bl	8001380 <HAL_GetTick>
 8001614:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d101      	bne.n	8001620 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	e099      	b.n	8001754 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2202      	movs	r2, #2
 8001624:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2200      	movs	r2, #0
 800162c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f022 0201 	bic.w	r2, r2, #1
 800163e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001640:	e00f      	b.n	8001662 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001642:	f7ff fe9d 	bl	8001380 <HAL_GetTick>
 8001646:	4602      	mov	r2, r0
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	2b05      	cmp	r3, #5
 800164e:	d908      	bls.n	8001662 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2220      	movs	r2, #32
 8001654:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2203      	movs	r2, #3
 800165a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800165e:	2303      	movs	r3, #3
 8001660:	e078      	b.n	8001754 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 0301 	and.w	r3, r3, #1
 800166c:	2b00      	cmp	r3, #0
 800166e:	d1e8      	bne.n	8001642 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001678:	697a      	ldr	r2, [r7, #20]
 800167a:	4b38      	ldr	r3, [pc, #224]	; (800175c <HAL_DMA_Init+0x158>)
 800167c:	4013      	ands	r3, r2
 800167e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	685a      	ldr	r2, [r3, #4]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800168e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	691b      	ldr	r3, [r3, #16]
 8001694:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800169a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	699b      	ldr	r3, [r3, #24]
 80016a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6a1b      	ldr	r3, [r3, #32]
 80016ac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016ae:	697a      	ldr	r2, [r7, #20]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b8:	2b04      	cmp	r3, #4
 80016ba:	d107      	bne.n	80016cc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c4:	4313      	orrs	r3, r2
 80016c6:	697a      	ldr	r2, [r7, #20]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	697a      	ldr	r2, [r7, #20]
 80016d2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	695b      	ldr	r3, [r3, #20]
 80016da:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	f023 0307 	bic.w	r3, r3, #7
 80016e2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e8:	697a      	ldr	r2, [r7, #20]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f2:	2b04      	cmp	r3, #4
 80016f4:	d117      	bne.n	8001726 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016fa:	697a      	ldr	r2, [r7, #20]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001704:	2b00      	cmp	r3, #0
 8001706:	d00e      	beq.n	8001726 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f000 fa9d 	bl	8001c48 <DMA_CheckFifoParam>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d008      	beq.n	8001726 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2240      	movs	r2, #64	; 0x40
 8001718:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2201      	movs	r2, #1
 800171e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001722:	2301      	movs	r3, #1
 8001724:	e016      	b.n	8001754 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	697a      	ldr	r2, [r7, #20]
 800172c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f000 fa54 	bl	8001bdc <DMA_CalcBaseAndBitshift>
 8001734:	4603      	mov	r3, r0
 8001736:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800173c:	223f      	movs	r2, #63	; 0x3f
 800173e:	409a      	lsls	r2, r3
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2200      	movs	r2, #0
 8001748:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2201      	movs	r2, #1
 800174e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001752:	2300      	movs	r3, #0
}
 8001754:	4618      	mov	r0, r3
 8001756:	3718      	adds	r7, #24
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	f010803f 	.word	0xf010803f

08001760 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b086      	sub	sp, #24
 8001764:	af00      	add	r7, sp, #0
 8001766:	60f8      	str	r0, [r7, #12]
 8001768:	60b9      	str	r1, [r7, #8]
 800176a:	607a      	str	r2, [r7, #4]
 800176c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800176e:	2300      	movs	r3, #0
 8001770:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001776:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800177e:	2b01      	cmp	r3, #1
 8001780:	d101      	bne.n	8001786 <HAL_DMA_Start_IT+0x26>
 8001782:	2302      	movs	r3, #2
 8001784:	e040      	b.n	8001808 <HAL_DMA_Start_IT+0xa8>
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	2201      	movs	r2, #1
 800178a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001794:	b2db      	uxtb	r3, r3
 8001796:	2b01      	cmp	r3, #1
 8001798:	d12f      	bne.n	80017fa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	2202      	movs	r2, #2
 800179e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	2200      	movs	r2, #0
 80017a6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	68b9      	ldr	r1, [r7, #8]
 80017ae:	68f8      	ldr	r0, [r7, #12]
 80017b0:	f000 f9e6 	bl	8001b80 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017b8:	223f      	movs	r2, #63	; 0x3f
 80017ba:	409a      	lsls	r2, r3
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f042 0216 	orr.w	r2, r2, #22
 80017ce:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d007      	beq.n	80017e8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f042 0208 	orr.w	r2, r2, #8
 80017e6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f042 0201 	orr.w	r2, r2, #1
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	e005      	b.n	8001806 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	2200      	movs	r2, #0
 80017fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001802:	2302      	movs	r3, #2
 8001804:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001806:	7dfb      	ldrb	r3, [r7, #23]
}
 8001808:	4618      	mov	r0, r3
 800180a:	3718      	adds	r7, #24
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}

08001810 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800181e:	b2db      	uxtb	r3, r3
 8001820:	2b02      	cmp	r3, #2
 8001822:	d004      	beq.n	800182e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2280      	movs	r2, #128	; 0x80
 8001828:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e00c      	b.n	8001848 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2205      	movs	r2, #5
 8001832:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f022 0201 	bic.w	r2, r2, #1
 8001844:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001846:	2300      	movs	r3, #0
}
 8001848:	4618      	mov	r0, r3
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr

08001854 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b086      	sub	sp, #24
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800185c:	2300      	movs	r3, #0
 800185e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001860:	4b8e      	ldr	r3, [pc, #568]	; (8001a9c <HAL_DMA_IRQHandler+0x248>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a8e      	ldr	r2, [pc, #568]	; (8001aa0 <HAL_DMA_IRQHandler+0x24c>)
 8001866:	fba2 2303 	umull	r2, r3, r2, r3
 800186a:	0a9b      	lsrs	r3, r3, #10
 800186c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001872:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800187e:	2208      	movs	r2, #8
 8001880:	409a      	lsls	r2, r3
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	4013      	ands	r3, r2
 8001886:	2b00      	cmp	r3, #0
 8001888:	d01a      	beq.n	80018c0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0304 	and.w	r3, r3, #4
 8001894:	2b00      	cmp	r3, #0
 8001896:	d013      	beq.n	80018c0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f022 0204 	bic.w	r2, r2, #4
 80018a6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018ac:	2208      	movs	r2, #8
 80018ae:	409a      	lsls	r2, r3
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018b8:	f043 0201 	orr.w	r2, r3, #1
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018c4:	2201      	movs	r2, #1
 80018c6:	409a      	lsls	r2, r3
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	4013      	ands	r3, r2
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d012      	beq.n	80018f6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	695b      	ldr	r3, [r3, #20]
 80018d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d00b      	beq.n	80018f6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018e2:	2201      	movs	r2, #1
 80018e4:	409a      	lsls	r2, r3
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018ee:	f043 0202 	orr.w	r2, r3, #2
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018fa:	2204      	movs	r2, #4
 80018fc:	409a      	lsls	r2, r3
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	4013      	ands	r3, r2
 8001902:	2b00      	cmp	r3, #0
 8001904:	d012      	beq.n	800192c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0302 	and.w	r3, r3, #2
 8001910:	2b00      	cmp	r3, #0
 8001912:	d00b      	beq.n	800192c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001918:	2204      	movs	r2, #4
 800191a:	409a      	lsls	r2, r3
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001924:	f043 0204 	orr.w	r2, r3, #4
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001930:	2210      	movs	r2, #16
 8001932:	409a      	lsls	r2, r3
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	4013      	ands	r3, r2
 8001938:	2b00      	cmp	r3, #0
 800193a:	d043      	beq.n	80019c4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0308 	and.w	r3, r3, #8
 8001946:	2b00      	cmp	r3, #0
 8001948:	d03c      	beq.n	80019c4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800194e:	2210      	movs	r2, #16
 8001950:	409a      	lsls	r2, r3
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001960:	2b00      	cmp	r3, #0
 8001962:	d018      	beq.n	8001996 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d108      	bne.n	8001984 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001976:	2b00      	cmp	r3, #0
 8001978:	d024      	beq.n	80019c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	4798      	blx	r3
 8001982:	e01f      	b.n	80019c4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001988:	2b00      	cmp	r3, #0
 800198a:	d01b      	beq.n	80019c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	4798      	blx	r3
 8001994:	e016      	b.n	80019c4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d107      	bne.n	80019b4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f022 0208 	bic.w	r2, r2, #8
 80019b2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d003      	beq.n	80019c4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019c8:	2220      	movs	r2, #32
 80019ca:	409a      	lsls	r2, r3
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	4013      	ands	r3, r2
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	f000 808f 	beq.w	8001af4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 0310 	and.w	r3, r3, #16
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	f000 8087 	beq.w	8001af4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019ea:	2220      	movs	r2, #32
 80019ec:	409a      	lsls	r2, r3
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	2b05      	cmp	r3, #5
 80019fc:	d136      	bne.n	8001a6c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f022 0216 	bic.w	r2, r2, #22
 8001a0c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	695a      	ldr	r2, [r3, #20]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a1c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d103      	bne.n	8001a2e <HAL_DMA_IRQHandler+0x1da>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d007      	beq.n	8001a3e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f022 0208 	bic.w	r2, r2, #8
 8001a3c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a42:	223f      	movs	r2, #63	; 0x3f
 8001a44:	409a      	lsls	r2, r3
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2200      	movs	r2, #0
 8001a56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d07e      	beq.n	8001b60 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	4798      	blx	r3
        }
        return;
 8001a6a:	e079      	b.n	8001b60 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d01d      	beq.n	8001ab6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d10d      	bne.n	8001aa4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d031      	beq.n	8001af4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	4798      	blx	r3
 8001a98:	e02c      	b.n	8001af4 <HAL_DMA_IRQHandler+0x2a0>
 8001a9a:	bf00      	nop
 8001a9c:	20000000 	.word	0x20000000
 8001aa0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d023      	beq.n	8001af4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	4798      	blx	r3
 8001ab4:	e01e      	b.n	8001af4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d10f      	bne.n	8001ae4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f022 0210 	bic.w	r2, r2, #16
 8001ad2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d003      	beq.n	8001af4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d032      	beq.n	8001b62 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b00:	f003 0301 	and.w	r3, r3, #1
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d022      	beq.n	8001b4e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2205      	movs	r2, #5
 8001b0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f022 0201 	bic.w	r2, r2, #1
 8001b1e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	3301      	adds	r3, #1
 8001b24:	60bb      	str	r3, [r7, #8]
 8001b26:	697a      	ldr	r2, [r7, #20]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d307      	bcc.n	8001b3c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0301 	and.w	r3, r3, #1
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d1f2      	bne.n	8001b20 <HAL_DMA_IRQHandler+0x2cc>
 8001b3a:	e000      	b.n	8001b3e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001b3c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2201      	movs	r2, #1
 8001b42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d005      	beq.n	8001b62 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	4798      	blx	r3
 8001b5e:	e000      	b.n	8001b62 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001b60:	bf00      	nop
    }
  }
}
 8001b62:	3718      	adds	r7, #24
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr

08001b80 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b085      	sub	sp, #20
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	60f8      	str	r0, [r7, #12]
 8001b88:	60b9      	str	r1, [r7, #8]
 8001b8a:	607a      	str	r2, [r7, #4]
 8001b8c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001b9c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	683a      	ldr	r2, [r7, #0]
 8001ba4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	2b40      	cmp	r3, #64	; 0x40
 8001bac:	d108      	bne.n	8001bc0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	68ba      	ldr	r2, [r7, #8]
 8001bbc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001bbe:	e007      	b.n	8001bd0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	68ba      	ldr	r2, [r7, #8]
 8001bc6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	60da      	str	r2, [r3, #12]
}
 8001bd0:	bf00      	nop
 8001bd2:	3714      	adds	r7, #20
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b085      	sub	sp, #20
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	3b10      	subs	r3, #16
 8001bec:	4a14      	ldr	r2, [pc, #80]	; (8001c40 <DMA_CalcBaseAndBitshift+0x64>)
 8001bee:	fba2 2303 	umull	r2, r3, r2, r3
 8001bf2:	091b      	lsrs	r3, r3, #4
 8001bf4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001bf6:	4a13      	ldr	r2, [pc, #76]	; (8001c44 <DMA_CalcBaseAndBitshift+0x68>)
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	4413      	add	r3, r2
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	461a      	mov	r2, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2b03      	cmp	r3, #3
 8001c08:	d909      	bls.n	8001c1e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001c12:	f023 0303 	bic.w	r3, r3, #3
 8001c16:	1d1a      	adds	r2, r3, #4
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	659a      	str	r2, [r3, #88]	; 0x58
 8001c1c:	e007      	b.n	8001c2e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001c26:	f023 0303 	bic.w	r3, r3, #3
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3714      	adds	r7, #20
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	aaaaaaab 	.word	0xaaaaaaab
 8001c44:	0800adec 	.word	0x0800adec

08001c48 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b085      	sub	sp, #20
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c50:	2300      	movs	r3, #0
 8001c52:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c58:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	699b      	ldr	r3, [r3, #24]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d11f      	bne.n	8001ca2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	2b03      	cmp	r3, #3
 8001c66:	d856      	bhi.n	8001d16 <DMA_CheckFifoParam+0xce>
 8001c68:	a201      	add	r2, pc, #4	; (adr r2, 8001c70 <DMA_CheckFifoParam+0x28>)
 8001c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c6e:	bf00      	nop
 8001c70:	08001c81 	.word	0x08001c81
 8001c74:	08001c93 	.word	0x08001c93
 8001c78:	08001c81 	.word	0x08001c81
 8001c7c:	08001d17 	.word	0x08001d17
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d046      	beq.n	8001d1a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c90:	e043      	b.n	8001d1a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c96:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001c9a:	d140      	bne.n	8001d1e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ca0:	e03d      	b.n	8001d1e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	699b      	ldr	r3, [r3, #24]
 8001ca6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001caa:	d121      	bne.n	8001cf0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	2b03      	cmp	r3, #3
 8001cb0:	d837      	bhi.n	8001d22 <DMA_CheckFifoParam+0xda>
 8001cb2:	a201      	add	r2, pc, #4	; (adr r2, 8001cb8 <DMA_CheckFifoParam+0x70>)
 8001cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cb8:	08001cc9 	.word	0x08001cc9
 8001cbc:	08001ccf 	.word	0x08001ccf
 8001cc0:	08001cc9 	.word	0x08001cc9
 8001cc4:	08001ce1 	.word	0x08001ce1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	73fb      	strb	r3, [r7, #15]
      break;
 8001ccc:	e030      	b.n	8001d30 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d025      	beq.n	8001d26 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001cde:	e022      	b.n	8001d26 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001ce8:	d11f      	bne.n	8001d2a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001cee:	e01c      	b.n	8001d2a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	d903      	bls.n	8001cfe <DMA_CheckFifoParam+0xb6>
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	2b03      	cmp	r3, #3
 8001cfa:	d003      	beq.n	8001d04 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001cfc:	e018      	b.n	8001d30 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	73fb      	strb	r3, [r7, #15]
      break;
 8001d02:	e015      	b.n	8001d30 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d00e      	beq.n	8001d2e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	73fb      	strb	r3, [r7, #15]
      break;
 8001d14:	e00b      	b.n	8001d2e <DMA_CheckFifoParam+0xe6>
      break;
 8001d16:	bf00      	nop
 8001d18:	e00a      	b.n	8001d30 <DMA_CheckFifoParam+0xe8>
      break;
 8001d1a:	bf00      	nop
 8001d1c:	e008      	b.n	8001d30 <DMA_CheckFifoParam+0xe8>
      break;
 8001d1e:	bf00      	nop
 8001d20:	e006      	b.n	8001d30 <DMA_CheckFifoParam+0xe8>
      break;
 8001d22:	bf00      	nop
 8001d24:	e004      	b.n	8001d30 <DMA_CheckFifoParam+0xe8>
      break;
 8001d26:	bf00      	nop
 8001d28:	e002      	b.n	8001d30 <DMA_CheckFifoParam+0xe8>
      break;   
 8001d2a:	bf00      	nop
 8001d2c:	e000      	b.n	8001d30 <DMA_CheckFifoParam+0xe8>
      break;
 8001d2e:	bf00      	nop
    }
  } 
  
  return status; 
 8001d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3714      	adds	r7, #20
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop

08001d40 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b086      	sub	sp, #24
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	60f8      	str	r0, [r7, #12]
 8001d48:	60b9      	str	r1, [r7, #8]
 8001d4a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001d52:	4b23      	ldr	r3, [pc, #140]	; (8001de0 <HAL_FLASH_Program+0xa0>)
 8001d54:	7e1b      	ldrb	r3, [r3, #24]
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d101      	bne.n	8001d5e <HAL_FLASH_Program+0x1e>
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	e03b      	b.n	8001dd6 <HAL_FLASH_Program+0x96>
 8001d5e:	4b20      	ldr	r3, [pc, #128]	; (8001de0 <HAL_FLASH_Program+0xa0>)
 8001d60:	2201      	movs	r2, #1
 8001d62:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001d64:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001d68:	f000 f870 	bl	8001e4c <FLASH_WaitForLastOperation>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001d70:	7dfb      	ldrb	r3, [r7, #23]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d12b      	bne.n	8001dce <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d105      	bne.n	8001d88 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001d7c:	783b      	ldrb	r3, [r7, #0]
 8001d7e:	4619      	mov	r1, r3
 8001d80:	68b8      	ldr	r0, [r7, #8]
 8001d82:	f000 f91b 	bl	8001fbc <FLASH_Program_Byte>
 8001d86:	e016      	b.n	8001db6 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d105      	bne.n	8001d9a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001d8e:	883b      	ldrh	r3, [r7, #0]
 8001d90:	4619      	mov	r1, r3
 8001d92:	68b8      	ldr	r0, [r7, #8]
 8001d94:	f000 f8ee 	bl	8001f74 <FLASH_Program_HalfWord>
 8001d98:	e00d      	b.n	8001db6 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2b02      	cmp	r3, #2
 8001d9e:	d105      	bne.n	8001dac <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	4619      	mov	r1, r3
 8001da4:	68b8      	ldr	r0, [r7, #8]
 8001da6:	f000 f8c3 	bl	8001f30 <FLASH_Program_Word>
 8001daa:	e004      	b.n	8001db6 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001dac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001db0:	68b8      	ldr	r0, [r7, #8]
 8001db2:	f000 f88b 	bl	8001ecc <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001db6:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001dba:	f000 f847 	bl	8001e4c <FLASH_WaitForLastOperation>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8001dc2:	4b08      	ldr	r3, [pc, #32]	; (8001de4 <HAL_FLASH_Program+0xa4>)
 8001dc4:	691b      	ldr	r3, [r3, #16]
 8001dc6:	4a07      	ldr	r2, [pc, #28]	; (8001de4 <HAL_FLASH_Program+0xa4>)
 8001dc8:	f023 0301 	bic.w	r3, r3, #1
 8001dcc:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001dce:	4b04      	ldr	r3, [pc, #16]	; (8001de0 <HAL_FLASH_Program+0xa0>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	761a      	strb	r2, [r3, #24]
  
  return status;
 8001dd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3718      	adds	r7, #24
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	2000289c 	.word	0x2000289c
 8001de4:	40023c00 	.word	0x40023c00

08001de8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001dee:	2300      	movs	r3, #0
 8001df0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001df2:	4b0b      	ldr	r3, [pc, #44]	; (8001e20 <HAL_FLASH_Unlock+0x38>)
 8001df4:	691b      	ldr	r3, [r3, #16]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	da0b      	bge.n	8001e12 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001dfa:	4b09      	ldr	r3, [pc, #36]	; (8001e20 <HAL_FLASH_Unlock+0x38>)
 8001dfc:	4a09      	ldr	r2, [pc, #36]	; (8001e24 <HAL_FLASH_Unlock+0x3c>)
 8001dfe:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001e00:	4b07      	ldr	r3, [pc, #28]	; (8001e20 <HAL_FLASH_Unlock+0x38>)
 8001e02:	4a09      	ldr	r2, [pc, #36]	; (8001e28 <HAL_FLASH_Unlock+0x40>)
 8001e04:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001e06:	4b06      	ldr	r3, [pc, #24]	; (8001e20 <HAL_FLASH_Unlock+0x38>)
 8001e08:	691b      	ldr	r3, [r3, #16]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	da01      	bge.n	8001e12 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001e12:	79fb      	ldrb	r3, [r7, #7]
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	370c      	adds	r7, #12
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr
 8001e20:	40023c00 	.word	0x40023c00
 8001e24:	45670123 	.word	0x45670123
 8001e28:	cdef89ab 	.word	0xcdef89ab

08001e2c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001e30:	4b05      	ldr	r3, [pc, #20]	; (8001e48 <HAL_FLASH_Lock+0x1c>)
 8001e32:	691b      	ldr	r3, [r3, #16]
 8001e34:	4a04      	ldr	r2, [pc, #16]	; (8001e48 <HAL_FLASH_Lock+0x1c>)
 8001e36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001e3a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr
 8001e48:	40023c00 	.word	0x40023c00

08001e4c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e54:	2300      	movs	r3, #0
 8001e56:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001e58:	4b1a      	ldr	r3, [pc, #104]	; (8001ec4 <FLASH_WaitForLastOperation+0x78>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001e5e:	f7ff fa8f 	bl	8001380 <HAL_GetTick>
 8001e62:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001e64:	e010      	b.n	8001e88 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e6c:	d00c      	beq.n	8001e88 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d007      	beq.n	8001e84 <FLASH_WaitForLastOperation+0x38>
 8001e74:	f7ff fa84 	bl	8001380 <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d201      	bcs.n	8001e88 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	e019      	b.n	8001ebc <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001e88:	4b0f      	ldr	r3, [pc, #60]	; (8001ec8 <FLASH_WaitForLastOperation+0x7c>)
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d1e8      	bne.n	8001e66 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001e94:	4b0c      	ldr	r3, [pc, #48]	; (8001ec8 <FLASH_WaitForLastOperation+0x7c>)
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	f003 0301 	and.w	r3, r3, #1
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d002      	beq.n	8001ea6 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001ea0:	4b09      	ldr	r3, [pc, #36]	; (8001ec8 <FLASH_WaitForLastOperation+0x7c>)
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001ea6:	4b08      	ldr	r3, [pc, #32]	; (8001ec8 <FLASH_WaitForLastOperation+0x7c>)
 8001ea8:	68db      	ldr	r3, [r3, #12]
 8001eaa:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d003      	beq.n	8001eba <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001eb2:	f000 f8a5 	bl	8002000 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e000      	b.n	8001ebc <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001eba:	2300      	movs	r3, #0
  
}  
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3710      	adds	r7, #16
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	2000289c 	.word	0x2000289c
 8001ec8:	40023c00 	.word	0x40023c00

08001ecc <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b085      	sub	sp, #20
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	60f8      	str	r0, [r7, #12]
 8001ed4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001ed8:	4b14      	ldr	r3, [pc, #80]	; (8001f2c <FLASH_Program_DoubleWord+0x60>)
 8001eda:	691b      	ldr	r3, [r3, #16]
 8001edc:	4a13      	ldr	r2, [pc, #76]	; (8001f2c <FLASH_Program_DoubleWord+0x60>)
 8001ede:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ee2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001ee4:	4b11      	ldr	r3, [pc, #68]	; (8001f2c <FLASH_Program_DoubleWord+0x60>)
 8001ee6:	691b      	ldr	r3, [r3, #16]
 8001ee8:	4a10      	ldr	r2, [pc, #64]	; (8001f2c <FLASH_Program_DoubleWord+0x60>)
 8001eea:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001eee:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001ef0:	4b0e      	ldr	r3, [pc, #56]	; (8001f2c <FLASH_Program_DoubleWord+0x60>)
 8001ef2:	691b      	ldr	r3, [r3, #16]
 8001ef4:	4a0d      	ldr	r2, [pc, #52]	; (8001f2c <FLASH_Program_DoubleWord+0x60>)
 8001ef6:	f043 0301 	orr.w	r3, r3, #1
 8001efa:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	683a      	ldr	r2, [r7, #0]
 8001f00:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8001f02:	f3bf 8f6f 	isb	sy
}
 8001f06:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001f08:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001f0c:	f04f 0200 	mov.w	r2, #0
 8001f10:	f04f 0300 	mov.w	r3, #0
 8001f14:	000a      	movs	r2, r1
 8001f16:	2300      	movs	r3, #0
 8001f18:	68f9      	ldr	r1, [r7, #12]
 8001f1a:	3104      	adds	r1, #4
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	600b      	str	r3, [r1, #0]
}
 8001f20:	bf00      	nop
 8001f22:	3714      	adds	r7, #20
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr
 8001f2c:	40023c00 	.word	0x40023c00

08001f30 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001f3a:	4b0d      	ldr	r3, [pc, #52]	; (8001f70 <FLASH_Program_Word+0x40>)
 8001f3c:	691b      	ldr	r3, [r3, #16]
 8001f3e:	4a0c      	ldr	r2, [pc, #48]	; (8001f70 <FLASH_Program_Word+0x40>)
 8001f40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f44:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001f46:	4b0a      	ldr	r3, [pc, #40]	; (8001f70 <FLASH_Program_Word+0x40>)
 8001f48:	691b      	ldr	r3, [r3, #16]
 8001f4a:	4a09      	ldr	r2, [pc, #36]	; (8001f70 <FLASH_Program_Word+0x40>)
 8001f4c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f50:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001f52:	4b07      	ldr	r3, [pc, #28]	; (8001f70 <FLASH_Program_Word+0x40>)
 8001f54:	691b      	ldr	r3, [r3, #16]
 8001f56:	4a06      	ldr	r2, [pc, #24]	; (8001f70 <FLASH_Program_Word+0x40>)
 8001f58:	f043 0301 	orr.w	r3, r3, #1
 8001f5c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	683a      	ldr	r2, [r7, #0]
 8001f62:	601a      	str	r2, [r3, #0]
}
 8001f64:	bf00      	nop
 8001f66:	370c      	adds	r7, #12
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr
 8001f70:	40023c00 	.word	0x40023c00

08001f74 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001f80:	4b0d      	ldr	r3, [pc, #52]	; (8001fb8 <FLASH_Program_HalfWord+0x44>)
 8001f82:	691b      	ldr	r3, [r3, #16]
 8001f84:	4a0c      	ldr	r2, [pc, #48]	; (8001fb8 <FLASH_Program_HalfWord+0x44>)
 8001f86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f8a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001f8c:	4b0a      	ldr	r3, [pc, #40]	; (8001fb8 <FLASH_Program_HalfWord+0x44>)
 8001f8e:	691b      	ldr	r3, [r3, #16]
 8001f90:	4a09      	ldr	r2, [pc, #36]	; (8001fb8 <FLASH_Program_HalfWord+0x44>)
 8001f92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f96:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001f98:	4b07      	ldr	r3, [pc, #28]	; (8001fb8 <FLASH_Program_HalfWord+0x44>)
 8001f9a:	691b      	ldr	r3, [r3, #16]
 8001f9c:	4a06      	ldr	r2, [pc, #24]	; (8001fb8 <FLASH_Program_HalfWord+0x44>)
 8001f9e:	f043 0301 	orr.w	r3, r3, #1
 8001fa2:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	887a      	ldrh	r2, [r7, #2]
 8001fa8:	801a      	strh	r2, [r3, #0]
}
 8001faa:	bf00      	nop
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	40023c00 	.word	0x40023c00

08001fbc <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001fc8:	4b0c      	ldr	r3, [pc, #48]	; (8001ffc <FLASH_Program_Byte+0x40>)
 8001fca:	691b      	ldr	r3, [r3, #16]
 8001fcc:	4a0b      	ldr	r2, [pc, #44]	; (8001ffc <FLASH_Program_Byte+0x40>)
 8001fce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fd2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001fd4:	4b09      	ldr	r3, [pc, #36]	; (8001ffc <FLASH_Program_Byte+0x40>)
 8001fd6:	4a09      	ldr	r2, [pc, #36]	; (8001ffc <FLASH_Program_Byte+0x40>)
 8001fd8:	691b      	ldr	r3, [r3, #16]
 8001fda:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001fdc:	4b07      	ldr	r3, [pc, #28]	; (8001ffc <FLASH_Program_Byte+0x40>)
 8001fde:	691b      	ldr	r3, [r3, #16]
 8001fe0:	4a06      	ldr	r2, [pc, #24]	; (8001ffc <FLASH_Program_Byte+0x40>)
 8001fe2:	f043 0301 	orr.w	r3, r3, #1
 8001fe6:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	78fa      	ldrb	r2, [r7, #3]
 8001fec:	701a      	strb	r2, [r3, #0]
}
 8001fee:	bf00      	nop
 8001ff0:	370c      	adds	r7, #12
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	40023c00 	.word	0x40023c00

08002000 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8002004:	4b2f      	ldr	r3, [pc, #188]	; (80020c4 <FLASH_SetErrorCode+0xc4>)
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	f003 0310 	and.w	r3, r3, #16
 800200c:	2b00      	cmp	r3, #0
 800200e:	d008      	beq.n	8002022 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002010:	4b2d      	ldr	r3, [pc, #180]	; (80020c8 <FLASH_SetErrorCode+0xc8>)
 8002012:	69db      	ldr	r3, [r3, #28]
 8002014:	f043 0310 	orr.w	r3, r3, #16
 8002018:	4a2b      	ldr	r2, [pc, #172]	; (80020c8 <FLASH_SetErrorCode+0xc8>)
 800201a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800201c:	4b29      	ldr	r3, [pc, #164]	; (80020c4 <FLASH_SetErrorCode+0xc4>)
 800201e:	2210      	movs	r2, #16
 8002020:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8002022:	4b28      	ldr	r3, [pc, #160]	; (80020c4 <FLASH_SetErrorCode+0xc4>)
 8002024:	68db      	ldr	r3, [r3, #12]
 8002026:	f003 0320 	and.w	r3, r3, #32
 800202a:	2b00      	cmp	r3, #0
 800202c:	d008      	beq.n	8002040 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800202e:	4b26      	ldr	r3, [pc, #152]	; (80020c8 <FLASH_SetErrorCode+0xc8>)
 8002030:	69db      	ldr	r3, [r3, #28]
 8002032:	f043 0308 	orr.w	r3, r3, #8
 8002036:	4a24      	ldr	r2, [pc, #144]	; (80020c8 <FLASH_SetErrorCode+0xc8>)
 8002038:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800203a:	4b22      	ldr	r3, [pc, #136]	; (80020c4 <FLASH_SetErrorCode+0xc4>)
 800203c:	2220      	movs	r2, #32
 800203e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8002040:	4b20      	ldr	r3, [pc, #128]	; (80020c4 <FLASH_SetErrorCode+0xc4>)
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002048:	2b00      	cmp	r3, #0
 800204a:	d008      	beq.n	800205e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800204c:	4b1e      	ldr	r3, [pc, #120]	; (80020c8 <FLASH_SetErrorCode+0xc8>)
 800204e:	69db      	ldr	r3, [r3, #28]
 8002050:	f043 0304 	orr.w	r3, r3, #4
 8002054:	4a1c      	ldr	r2, [pc, #112]	; (80020c8 <FLASH_SetErrorCode+0xc8>)
 8002056:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8002058:	4b1a      	ldr	r3, [pc, #104]	; (80020c4 <FLASH_SetErrorCode+0xc4>)
 800205a:	2240      	movs	r2, #64	; 0x40
 800205c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800205e:	4b19      	ldr	r3, [pc, #100]	; (80020c4 <FLASH_SetErrorCode+0xc4>)
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002066:	2b00      	cmp	r3, #0
 8002068:	d008      	beq.n	800207c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800206a:	4b17      	ldr	r3, [pc, #92]	; (80020c8 <FLASH_SetErrorCode+0xc8>)
 800206c:	69db      	ldr	r3, [r3, #28]
 800206e:	f043 0302 	orr.w	r3, r3, #2
 8002072:	4a15      	ldr	r2, [pc, #84]	; (80020c8 <FLASH_SetErrorCode+0xc8>)
 8002074:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8002076:	4b13      	ldr	r3, [pc, #76]	; (80020c4 <FLASH_SetErrorCode+0xc4>)
 8002078:	2280      	movs	r2, #128	; 0x80
 800207a:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 800207c:	4b11      	ldr	r3, [pc, #68]	; (80020c4 <FLASH_SetErrorCode+0xc4>)
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002084:	2b00      	cmp	r3, #0
 8002086:	d009      	beq.n	800209c <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8002088:	4b0f      	ldr	r3, [pc, #60]	; (80020c8 <FLASH_SetErrorCode+0xc8>)
 800208a:	69db      	ldr	r3, [r3, #28]
 800208c:	f043 0301 	orr.w	r3, r3, #1
 8002090:	4a0d      	ldr	r2, [pc, #52]	; (80020c8 <FLASH_SetErrorCode+0xc8>)
 8002092:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8002094:	4b0b      	ldr	r3, [pc, #44]	; (80020c4 <FLASH_SetErrorCode+0xc4>)
 8002096:	f44f 7280 	mov.w	r2, #256	; 0x100
 800209a:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800209c:	4b09      	ldr	r3, [pc, #36]	; (80020c4 <FLASH_SetErrorCode+0xc4>)
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	f003 0302 	and.w	r3, r3, #2
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d008      	beq.n	80020ba <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80020a8:	4b07      	ldr	r3, [pc, #28]	; (80020c8 <FLASH_SetErrorCode+0xc8>)
 80020aa:	69db      	ldr	r3, [r3, #28]
 80020ac:	f043 0320 	orr.w	r3, r3, #32
 80020b0:	4a05      	ldr	r2, [pc, #20]	; (80020c8 <FLASH_SetErrorCode+0xc8>)
 80020b2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80020b4:	4b03      	ldr	r3, [pc, #12]	; (80020c4 <FLASH_SetErrorCode+0xc4>)
 80020b6:	2202      	movs	r2, #2
 80020b8:	60da      	str	r2, [r3, #12]
  }
}
 80020ba:	bf00      	nop
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr
 80020c4:	40023c00 	.word	0x40023c00
 80020c8:	2000289c 	.word	0x2000289c

080020cc <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80020da:	2300      	movs	r3, #0
 80020dc:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80020de:	4b31      	ldr	r3, [pc, #196]	; (80021a4 <HAL_FLASHEx_Erase+0xd8>)
 80020e0:	7e1b      	ldrb	r3, [r3, #24]
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d101      	bne.n	80020ea <HAL_FLASHEx_Erase+0x1e>
 80020e6:	2302      	movs	r3, #2
 80020e8:	e058      	b.n	800219c <HAL_FLASHEx_Erase+0xd0>
 80020ea:	4b2e      	ldr	r3, [pc, #184]	; (80021a4 <HAL_FLASHEx_Erase+0xd8>)
 80020ec:	2201      	movs	r2, #1
 80020ee:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80020f0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80020f4:	f7ff feaa 	bl	8001e4c <FLASH_WaitForLastOperation>
 80020f8:	4603      	mov	r3, r0
 80020fa:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80020fc:	7bfb      	ldrb	r3, [r7, #15]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d148      	bne.n	8002194 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	f04f 32ff 	mov.w	r2, #4294967295
 8002108:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	2b01      	cmp	r3, #1
 8002110:	d115      	bne.n	800213e <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	691b      	ldr	r3, [r3, #16]
 8002116:	b2da      	uxtb	r2, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	4619      	mov	r1, r3
 800211e:	4610      	mov	r0, r2
 8002120:	f000 f844 	bl	80021ac <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002124:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002128:	f7ff fe90 	bl	8001e4c <FLASH_WaitForLastOperation>
 800212c:	4603      	mov	r3, r0
 800212e:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8002130:	4b1d      	ldr	r3, [pc, #116]	; (80021a8 <HAL_FLASHEx_Erase+0xdc>)
 8002132:	691b      	ldr	r3, [r3, #16]
 8002134:	4a1c      	ldr	r2, [pc, #112]	; (80021a8 <HAL_FLASHEx_Erase+0xdc>)
 8002136:	f023 0304 	bic.w	r3, r3, #4
 800213a:	6113      	str	r3, [r2, #16]
 800213c:	e028      	b.n	8002190 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	60bb      	str	r3, [r7, #8]
 8002144:	e01c      	b.n	8002180 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	691b      	ldr	r3, [r3, #16]
 800214a:	b2db      	uxtb	r3, r3
 800214c:	4619      	mov	r1, r3
 800214e:	68b8      	ldr	r0, [r7, #8]
 8002150:	f000 f850 	bl	80021f4 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002154:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002158:	f7ff fe78 	bl	8001e4c <FLASH_WaitForLastOperation>
 800215c:	4603      	mov	r3, r0
 800215e:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8002160:	4b11      	ldr	r3, [pc, #68]	; (80021a8 <HAL_FLASHEx_Erase+0xdc>)
 8002162:	691b      	ldr	r3, [r3, #16]
 8002164:	4a10      	ldr	r2, [pc, #64]	; (80021a8 <HAL_FLASHEx_Erase+0xdc>)
 8002166:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800216a:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 800216c:	7bfb      	ldrb	r3, [r7, #15]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d003      	beq.n	800217a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	68ba      	ldr	r2, [r7, #8]
 8002176:	601a      	str	r2, [r3, #0]
          break;
 8002178:	e00a      	b.n	8002190 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	3301      	adds	r3, #1
 800217e:	60bb      	str	r3, [r7, #8]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	68da      	ldr	r2, [r3, #12]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	4413      	add	r3, r2
 800218a:	68ba      	ldr	r2, [r7, #8]
 800218c:	429a      	cmp	r2, r3
 800218e:	d3da      	bcc.n	8002146 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8002190:	f000 f878 	bl	8002284 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002194:	4b03      	ldr	r3, [pc, #12]	; (80021a4 <HAL_FLASHEx_Erase+0xd8>)
 8002196:	2200      	movs	r2, #0
 8002198:	761a      	strb	r2, [r3, #24]

  return status;
 800219a:	7bfb      	ldrb	r3, [r7, #15]
}
 800219c:	4618      	mov	r0, r3
 800219e:	3710      	adds	r7, #16
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	2000289c 	.word	0x2000289c
 80021a8:	40023c00 	.word	0x40023c00

080021ac <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	4603      	mov	r3, r0
 80021b4:	6039      	str	r1, [r7, #0]
 80021b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80021b8:	4b0d      	ldr	r3, [pc, #52]	; (80021f0 <FLASH_MassErase+0x44>)
 80021ba:	691b      	ldr	r3, [r3, #16]
 80021bc:	4a0c      	ldr	r2, [pc, #48]	; (80021f0 <FLASH_MassErase+0x44>)
 80021be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021c2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80021c4:	4b0a      	ldr	r3, [pc, #40]	; (80021f0 <FLASH_MassErase+0x44>)
 80021c6:	691b      	ldr	r3, [r3, #16]
 80021c8:	4a09      	ldr	r2, [pc, #36]	; (80021f0 <FLASH_MassErase+0x44>)
 80021ca:	f043 0304 	orr.w	r3, r3, #4
 80021ce:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 80021d0:	4b07      	ldr	r3, [pc, #28]	; (80021f0 <FLASH_MassErase+0x44>)
 80021d2:	691a      	ldr	r2, [r3, #16]
 80021d4:	79fb      	ldrb	r3, [r7, #7]
 80021d6:	021b      	lsls	r3, r3, #8
 80021d8:	4313      	orrs	r3, r2
 80021da:	4a05      	ldr	r2, [pc, #20]	; (80021f0 <FLASH_MassErase+0x44>)
 80021dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021e0:	6113      	str	r3, [r2, #16]
}
 80021e2:	bf00      	nop
 80021e4:	370c      	adds	r7, #12
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	40023c00 	.word	0x40023c00

080021f4 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b085      	sub	sp, #20
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	460b      	mov	r3, r1
 80021fe:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8002200:	2300      	movs	r3, #0
 8002202:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8002204:	78fb      	ldrb	r3, [r7, #3]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d102      	bne.n	8002210 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800220a:	2300      	movs	r3, #0
 800220c:	60fb      	str	r3, [r7, #12]
 800220e:	e010      	b.n	8002232 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8002210:	78fb      	ldrb	r3, [r7, #3]
 8002212:	2b01      	cmp	r3, #1
 8002214:	d103      	bne.n	800221e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8002216:	f44f 7380 	mov.w	r3, #256	; 0x100
 800221a:	60fb      	str	r3, [r7, #12]
 800221c:	e009      	b.n	8002232 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800221e:	78fb      	ldrb	r3, [r7, #3]
 8002220:	2b02      	cmp	r3, #2
 8002222:	d103      	bne.n	800222c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8002224:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002228:	60fb      	str	r3, [r7, #12]
 800222a:	e002      	b.n	8002232 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800222c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002230:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002232:	4b13      	ldr	r3, [pc, #76]	; (8002280 <FLASH_Erase_Sector+0x8c>)
 8002234:	691b      	ldr	r3, [r3, #16]
 8002236:	4a12      	ldr	r2, [pc, #72]	; (8002280 <FLASH_Erase_Sector+0x8c>)
 8002238:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800223c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800223e:	4b10      	ldr	r3, [pc, #64]	; (8002280 <FLASH_Erase_Sector+0x8c>)
 8002240:	691a      	ldr	r2, [r3, #16]
 8002242:	490f      	ldr	r1, [pc, #60]	; (8002280 <FLASH_Erase_Sector+0x8c>)
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	4313      	orrs	r3, r2
 8002248:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800224a:	4b0d      	ldr	r3, [pc, #52]	; (8002280 <FLASH_Erase_Sector+0x8c>)
 800224c:	691b      	ldr	r3, [r3, #16]
 800224e:	4a0c      	ldr	r2, [pc, #48]	; (8002280 <FLASH_Erase_Sector+0x8c>)
 8002250:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002254:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8002256:	4b0a      	ldr	r3, [pc, #40]	; (8002280 <FLASH_Erase_Sector+0x8c>)
 8002258:	691a      	ldr	r2, [r3, #16]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	00db      	lsls	r3, r3, #3
 800225e:	4313      	orrs	r3, r2
 8002260:	4a07      	ldr	r2, [pc, #28]	; (8002280 <FLASH_Erase_Sector+0x8c>)
 8002262:	f043 0302 	orr.w	r3, r3, #2
 8002266:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8002268:	4b05      	ldr	r3, [pc, #20]	; (8002280 <FLASH_Erase_Sector+0x8c>)
 800226a:	691b      	ldr	r3, [r3, #16]
 800226c:	4a04      	ldr	r2, [pc, #16]	; (8002280 <FLASH_Erase_Sector+0x8c>)
 800226e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002272:	6113      	str	r3, [r2, #16]
}
 8002274:	bf00      	nop
 8002276:	3714      	adds	r7, #20
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr
 8002280:	40023c00 	.word	0x40023c00

08002284 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8002288:	4b20      	ldr	r3, [pc, #128]	; (800230c <FLASH_FlushCaches+0x88>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002290:	2b00      	cmp	r3, #0
 8002292:	d017      	beq.n	80022c4 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002294:	4b1d      	ldr	r3, [pc, #116]	; (800230c <FLASH_FlushCaches+0x88>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a1c      	ldr	r2, [pc, #112]	; (800230c <FLASH_FlushCaches+0x88>)
 800229a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800229e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80022a0:	4b1a      	ldr	r3, [pc, #104]	; (800230c <FLASH_FlushCaches+0x88>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a19      	ldr	r2, [pc, #100]	; (800230c <FLASH_FlushCaches+0x88>)
 80022a6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80022aa:	6013      	str	r3, [r2, #0]
 80022ac:	4b17      	ldr	r3, [pc, #92]	; (800230c <FLASH_FlushCaches+0x88>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a16      	ldr	r2, [pc, #88]	; (800230c <FLASH_FlushCaches+0x88>)
 80022b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80022b6:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022b8:	4b14      	ldr	r3, [pc, #80]	; (800230c <FLASH_FlushCaches+0x88>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a13      	ldr	r2, [pc, #76]	; (800230c <FLASH_FlushCaches+0x88>)
 80022be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022c2:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80022c4:	4b11      	ldr	r3, [pc, #68]	; (800230c <FLASH_FlushCaches+0x88>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d017      	beq.n	8002300 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80022d0:	4b0e      	ldr	r3, [pc, #56]	; (800230c <FLASH_FlushCaches+0x88>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a0d      	ldr	r2, [pc, #52]	; (800230c <FLASH_FlushCaches+0x88>)
 80022d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80022da:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80022dc:	4b0b      	ldr	r3, [pc, #44]	; (800230c <FLASH_FlushCaches+0x88>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a0a      	ldr	r2, [pc, #40]	; (800230c <FLASH_FlushCaches+0x88>)
 80022e2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80022e6:	6013      	str	r3, [r2, #0]
 80022e8:	4b08      	ldr	r3, [pc, #32]	; (800230c <FLASH_FlushCaches+0x88>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a07      	ldr	r2, [pc, #28]	; (800230c <FLASH_FlushCaches+0x88>)
 80022ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80022f2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80022f4:	4b05      	ldr	r3, [pc, #20]	; (800230c <FLASH_FlushCaches+0x88>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a04      	ldr	r2, [pc, #16]	; (800230c <FLASH_FlushCaches+0x88>)
 80022fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022fe:	6013      	str	r3, [r2, #0]
  }
}
 8002300:	bf00      	nop
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	40023c00 	.word	0x40023c00

08002310 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002310:	b480      	push	{r7}
 8002312:	b089      	sub	sp, #36	; 0x24
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800231a:	2300      	movs	r3, #0
 800231c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800231e:	2300      	movs	r3, #0
 8002320:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002322:	2300      	movs	r3, #0
 8002324:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002326:	2300      	movs	r3, #0
 8002328:	61fb      	str	r3, [r7, #28]
 800232a:	e159      	b.n	80025e0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800232c:	2201      	movs	r2, #1
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	fa02 f303 	lsl.w	r3, r2, r3
 8002334:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	697a      	ldr	r2, [r7, #20]
 800233c:	4013      	ands	r3, r2
 800233e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002340:	693a      	ldr	r2, [r7, #16]
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	429a      	cmp	r2, r3
 8002346:	f040 8148 	bne.w	80025da <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f003 0303 	and.w	r3, r3, #3
 8002352:	2b01      	cmp	r3, #1
 8002354:	d005      	beq.n	8002362 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800235e:	2b02      	cmp	r3, #2
 8002360:	d130      	bne.n	80023c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	005b      	lsls	r3, r3, #1
 800236c:	2203      	movs	r2, #3
 800236e:	fa02 f303 	lsl.w	r3, r2, r3
 8002372:	43db      	mvns	r3, r3
 8002374:	69ba      	ldr	r2, [r7, #24]
 8002376:	4013      	ands	r3, r2
 8002378:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	68da      	ldr	r2, [r3, #12]
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	005b      	lsls	r3, r3, #1
 8002382:	fa02 f303 	lsl.w	r3, r2, r3
 8002386:	69ba      	ldr	r2, [r7, #24]
 8002388:	4313      	orrs	r3, r2
 800238a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	69ba      	ldr	r2, [r7, #24]
 8002390:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002398:	2201      	movs	r2, #1
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	43db      	mvns	r3, r3
 80023a2:	69ba      	ldr	r2, [r7, #24]
 80023a4:	4013      	ands	r3, r2
 80023a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	091b      	lsrs	r3, r3, #4
 80023ae:	f003 0201 	and.w	r2, r3, #1
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	fa02 f303 	lsl.w	r3, r2, r3
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	69ba      	ldr	r2, [r7, #24]
 80023c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f003 0303 	and.w	r3, r3, #3
 80023cc:	2b03      	cmp	r3, #3
 80023ce:	d017      	beq.n	8002400 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	005b      	lsls	r3, r3, #1
 80023da:	2203      	movs	r2, #3
 80023dc:	fa02 f303 	lsl.w	r3, r2, r3
 80023e0:	43db      	mvns	r3, r3
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	4013      	ands	r3, r2
 80023e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	689a      	ldr	r2, [r3, #8]
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	69ba      	ldr	r2, [r7, #24]
 80023fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f003 0303 	and.w	r3, r3, #3
 8002408:	2b02      	cmp	r3, #2
 800240a:	d123      	bne.n	8002454 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	08da      	lsrs	r2, r3, #3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	3208      	adds	r2, #8
 8002414:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002418:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	f003 0307 	and.w	r3, r3, #7
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	220f      	movs	r2, #15
 8002424:	fa02 f303 	lsl.w	r3, r2, r3
 8002428:	43db      	mvns	r3, r3
 800242a:	69ba      	ldr	r2, [r7, #24]
 800242c:	4013      	ands	r3, r2
 800242e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	691a      	ldr	r2, [r3, #16]
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	f003 0307 	and.w	r3, r3, #7
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	fa02 f303 	lsl.w	r3, r2, r3
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	4313      	orrs	r3, r2
 8002444:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	08da      	lsrs	r2, r3, #3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	3208      	adds	r2, #8
 800244e:	69b9      	ldr	r1, [r7, #24]
 8002450:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	005b      	lsls	r3, r3, #1
 800245e:	2203      	movs	r2, #3
 8002460:	fa02 f303 	lsl.w	r3, r2, r3
 8002464:	43db      	mvns	r3, r3
 8002466:	69ba      	ldr	r2, [r7, #24]
 8002468:	4013      	ands	r3, r2
 800246a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f003 0203 	and.w	r2, r3, #3
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	005b      	lsls	r3, r3, #1
 8002478:	fa02 f303 	lsl.w	r3, r2, r3
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	4313      	orrs	r3, r2
 8002480:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002490:	2b00      	cmp	r3, #0
 8002492:	f000 80a2 	beq.w	80025da <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002496:	2300      	movs	r3, #0
 8002498:	60fb      	str	r3, [r7, #12]
 800249a:	4b57      	ldr	r3, [pc, #348]	; (80025f8 <HAL_GPIO_Init+0x2e8>)
 800249c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800249e:	4a56      	ldr	r2, [pc, #344]	; (80025f8 <HAL_GPIO_Init+0x2e8>)
 80024a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024a4:	6453      	str	r3, [r2, #68]	; 0x44
 80024a6:	4b54      	ldr	r3, [pc, #336]	; (80025f8 <HAL_GPIO_Init+0x2e8>)
 80024a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024ae:	60fb      	str	r3, [r7, #12]
 80024b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024b2:	4a52      	ldr	r2, [pc, #328]	; (80025fc <HAL_GPIO_Init+0x2ec>)
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	089b      	lsrs	r3, r3, #2
 80024b8:	3302      	adds	r3, #2
 80024ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	f003 0303 	and.w	r3, r3, #3
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	220f      	movs	r2, #15
 80024ca:	fa02 f303 	lsl.w	r3, r2, r3
 80024ce:	43db      	mvns	r3, r3
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	4013      	ands	r3, r2
 80024d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a49      	ldr	r2, [pc, #292]	; (8002600 <HAL_GPIO_Init+0x2f0>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d019      	beq.n	8002512 <HAL_GPIO_Init+0x202>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a48      	ldr	r2, [pc, #288]	; (8002604 <HAL_GPIO_Init+0x2f4>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d013      	beq.n	800250e <HAL_GPIO_Init+0x1fe>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a47      	ldr	r2, [pc, #284]	; (8002608 <HAL_GPIO_Init+0x2f8>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d00d      	beq.n	800250a <HAL_GPIO_Init+0x1fa>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4a46      	ldr	r2, [pc, #280]	; (800260c <HAL_GPIO_Init+0x2fc>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d007      	beq.n	8002506 <HAL_GPIO_Init+0x1f6>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4a45      	ldr	r2, [pc, #276]	; (8002610 <HAL_GPIO_Init+0x300>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d101      	bne.n	8002502 <HAL_GPIO_Init+0x1f2>
 80024fe:	2304      	movs	r3, #4
 8002500:	e008      	b.n	8002514 <HAL_GPIO_Init+0x204>
 8002502:	2307      	movs	r3, #7
 8002504:	e006      	b.n	8002514 <HAL_GPIO_Init+0x204>
 8002506:	2303      	movs	r3, #3
 8002508:	e004      	b.n	8002514 <HAL_GPIO_Init+0x204>
 800250a:	2302      	movs	r3, #2
 800250c:	e002      	b.n	8002514 <HAL_GPIO_Init+0x204>
 800250e:	2301      	movs	r3, #1
 8002510:	e000      	b.n	8002514 <HAL_GPIO_Init+0x204>
 8002512:	2300      	movs	r3, #0
 8002514:	69fa      	ldr	r2, [r7, #28]
 8002516:	f002 0203 	and.w	r2, r2, #3
 800251a:	0092      	lsls	r2, r2, #2
 800251c:	4093      	lsls	r3, r2
 800251e:	69ba      	ldr	r2, [r7, #24]
 8002520:	4313      	orrs	r3, r2
 8002522:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002524:	4935      	ldr	r1, [pc, #212]	; (80025fc <HAL_GPIO_Init+0x2ec>)
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	089b      	lsrs	r3, r3, #2
 800252a:	3302      	adds	r3, #2
 800252c:	69ba      	ldr	r2, [r7, #24]
 800252e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002532:	4b38      	ldr	r3, [pc, #224]	; (8002614 <HAL_GPIO_Init+0x304>)
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	43db      	mvns	r3, r3
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	4013      	ands	r3, r2
 8002540:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d003      	beq.n	8002556 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	4313      	orrs	r3, r2
 8002554:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002556:	4a2f      	ldr	r2, [pc, #188]	; (8002614 <HAL_GPIO_Init+0x304>)
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800255c:	4b2d      	ldr	r3, [pc, #180]	; (8002614 <HAL_GPIO_Init+0x304>)
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	43db      	mvns	r3, r3
 8002566:	69ba      	ldr	r2, [r7, #24]
 8002568:	4013      	ands	r3, r2
 800256a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d003      	beq.n	8002580 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	4313      	orrs	r3, r2
 800257e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002580:	4a24      	ldr	r2, [pc, #144]	; (8002614 <HAL_GPIO_Init+0x304>)
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002586:	4b23      	ldr	r3, [pc, #140]	; (8002614 <HAL_GPIO_Init+0x304>)
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	43db      	mvns	r3, r3
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	4013      	ands	r3, r2
 8002594:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d003      	beq.n	80025aa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80025a2:	69ba      	ldr	r2, [r7, #24]
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025aa:	4a1a      	ldr	r2, [pc, #104]	; (8002614 <HAL_GPIO_Init+0x304>)
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025b0:	4b18      	ldr	r3, [pc, #96]	; (8002614 <HAL_GPIO_Init+0x304>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	43db      	mvns	r3, r3
 80025ba:	69ba      	ldr	r2, [r7, #24]
 80025bc:	4013      	ands	r3, r2
 80025be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d003      	beq.n	80025d4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	4313      	orrs	r3, r2
 80025d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025d4:	4a0f      	ldr	r2, [pc, #60]	; (8002614 <HAL_GPIO_Init+0x304>)
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	3301      	adds	r3, #1
 80025de:	61fb      	str	r3, [r7, #28]
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	2b0f      	cmp	r3, #15
 80025e4:	f67f aea2 	bls.w	800232c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025e8:	bf00      	nop
 80025ea:	bf00      	nop
 80025ec:	3724      	adds	r7, #36	; 0x24
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	40023800 	.word	0x40023800
 80025fc:	40013800 	.word	0x40013800
 8002600:	40020000 	.word	0x40020000
 8002604:	40020400 	.word	0x40020400
 8002608:	40020800 	.word	0x40020800
 800260c:	40020c00 	.word	0x40020c00
 8002610:	40021000 	.word	0x40021000
 8002614:	40013c00 	.word	0x40013c00

08002618 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	460b      	mov	r3, r1
 8002622:	807b      	strh	r3, [r7, #2]
 8002624:	4613      	mov	r3, r2
 8002626:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002628:	787b      	ldrb	r3, [r7, #1]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d003      	beq.n	8002636 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800262e:	887a      	ldrh	r2, [r7, #2]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002634:	e003      	b.n	800263e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002636:	887b      	ldrh	r3, [r7, #2]
 8002638:	041a      	lsls	r2, r3, #16
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	619a      	str	r2, [r3, #24]
}
 800263e:	bf00      	nop
 8002640:	370c      	adds	r7, #12
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr
	...

0800264c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b084      	sub	sp, #16
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d101      	bne.n	800265e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e12b      	b.n	80028b6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002664:	b2db      	uxtb	r3, r3
 8002666:	2b00      	cmp	r3, #0
 8002668:	d106      	bne.n	8002678 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f7fe f874 	bl	8000760 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2224      	movs	r2, #36	; 0x24
 800267c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f022 0201 	bic.w	r2, r2, #1
 800268e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800269e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80026b0:	f001 fd4e 	bl	8004150 <HAL_RCC_GetPCLK1Freq>
 80026b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	4a81      	ldr	r2, [pc, #516]	; (80028c0 <HAL_I2C_Init+0x274>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d807      	bhi.n	80026d0 <HAL_I2C_Init+0x84>
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	4a80      	ldr	r2, [pc, #512]	; (80028c4 <HAL_I2C_Init+0x278>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	bf94      	ite	ls
 80026c8:	2301      	movls	r3, #1
 80026ca:	2300      	movhi	r3, #0
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	e006      	b.n	80026de <HAL_I2C_Init+0x92>
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	4a7d      	ldr	r2, [pc, #500]	; (80028c8 <HAL_I2C_Init+0x27c>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	bf94      	ite	ls
 80026d8:	2301      	movls	r3, #1
 80026da:	2300      	movhi	r3, #0
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d001      	beq.n	80026e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e0e7      	b.n	80028b6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	4a78      	ldr	r2, [pc, #480]	; (80028cc <HAL_I2C_Init+0x280>)
 80026ea:	fba2 2303 	umull	r2, r3, r2, r3
 80026ee:	0c9b      	lsrs	r3, r3, #18
 80026f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	68ba      	ldr	r2, [r7, #8]
 8002702:	430a      	orrs	r2, r1
 8002704:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	6a1b      	ldr	r3, [r3, #32]
 800270c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	4a6a      	ldr	r2, [pc, #424]	; (80028c0 <HAL_I2C_Init+0x274>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d802      	bhi.n	8002720 <HAL_I2C_Init+0xd4>
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	3301      	adds	r3, #1
 800271e:	e009      	b.n	8002734 <HAL_I2C_Init+0xe8>
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002726:	fb02 f303 	mul.w	r3, r2, r3
 800272a:	4a69      	ldr	r2, [pc, #420]	; (80028d0 <HAL_I2C_Init+0x284>)
 800272c:	fba2 2303 	umull	r2, r3, r2, r3
 8002730:	099b      	lsrs	r3, r3, #6
 8002732:	3301      	adds	r3, #1
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	6812      	ldr	r2, [r2, #0]
 8002738:	430b      	orrs	r3, r1
 800273a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	69db      	ldr	r3, [r3, #28]
 8002742:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002746:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	495c      	ldr	r1, [pc, #368]	; (80028c0 <HAL_I2C_Init+0x274>)
 8002750:	428b      	cmp	r3, r1
 8002752:	d819      	bhi.n	8002788 <HAL_I2C_Init+0x13c>
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	1e59      	subs	r1, r3, #1
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	005b      	lsls	r3, r3, #1
 800275e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002762:	1c59      	adds	r1, r3, #1
 8002764:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002768:	400b      	ands	r3, r1
 800276a:	2b00      	cmp	r3, #0
 800276c:	d00a      	beq.n	8002784 <HAL_I2C_Init+0x138>
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	1e59      	subs	r1, r3, #1
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	005b      	lsls	r3, r3, #1
 8002778:	fbb1 f3f3 	udiv	r3, r1, r3
 800277c:	3301      	adds	r3, #1
 800277e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002782:	e051      	b.n	8002828 <HAL_I2C_Init+0x1dc>
 8002784:	2304      	movs	r3, #4
 8002786:	e04f      	b.n	8002828 <HAL_I2C_Init+0x1dc>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d111      	bne.n	80027b4 <HAL_I2C_Init+0x168>
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	1e58      	subs	r0, r3, #1
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6859      	ldr	r1, [r3, #4]
 8002798:	460b      	mov	r3, r1
 800279a:	005b      	lsls	r3, r3, #1
 800279c:	440b      	add	r3, r1
 800279e:	fbb0 f3f3 	udiv	r3, r0, r3
 80027a2:	3301      	adds	r3, #1
 80027a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	bf0c      	ite	eq
 80027ac:	2301      	moveq	r3, #1
 80027ae:	2300      	movne	r3, #0
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	e012      	b.n	80027da <HAL_I2C_Init+0x18e>
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	1e58      	subs	r0, r3, #1
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6859      	ldr	r1, [r3, #4]
 80027bc:	460b      	mov	r3, r1
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	440b      	add	r3, r1
 80027c2:	0099      	lsls	r1, r3, #2
 80027c4:	440b      	add	r3, r1
 80027c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80027ca:	3301      	adds	r3, #1
 80027cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	bf0c      	ite	eq
 80027d4:	2301      	moveq	r3, #1
 80027d6:	2300      	movne	r3, #0
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d001      	beq.n	80027e2 <HAL_I2C_Init+0x196>
 80027de:	2301      	movs	r3, #1
 80027e0:	e022      	b.n	8002828 <HAL_I2C_Init+0x1dc>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d10e      	bne.n	8002808 <HAL_I2C_Init+0x1bc>
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	1e58      	subs	r0, r3, #1
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6859      	ldr	r1, [r3, #4]
 80027f2:	460b      	mov	r3, r1
 80027f4:	005b      	lsls	r3, r3, #1
 80027f6:	440b      	add	r3, r1
 80027f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80027fc:	3301      	adds	r3, #1
 80027fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002802:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002806:	e00f      	b.n	8002828 <HAL_I2C_Init+0x1dc>
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	1e58      	subs	r0, r3, #1
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6859      	ldr	r1, [r3, #4]
 8002810:	460b      	mov	r3, r1
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	440b      	add	r3, r1
 8002816:	0099      	lsls	r1, r3, #2
 8002818:	440b      	add	r3, r1
 800281a:	fbb0 f3f3 	udiv	r3, r0, r3
 800281e:	3301      	adds	r3, #1
 8002820:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002824:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002828:	6879      	ldr	r1, [r7, #4]
 800282a:	6809      	ldr	r1, [r1, #0]
 800282c:	4313      	orrs	r3, r2
 800282e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	69da      	ldr	r2, [r3, #28]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6a1b      	ldr	r3, [r3, #32]
 8002842:	431a      	orrs	r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	430a      	orrs	r2, r1
 800284a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002856:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	6911      	ldr	r1, [r2, #16]
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	68d2      	ldr	r2, [r2, #12]
 8002862:	4311      	orrs	r1, r2
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	6812      	ldr	r2, [r2, #0]
 8002868:	430b      	orrs	r3, r1
 800286a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	695a      	ldr	r2, [r3, #20]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	699b      	ldr	r3, [r3, #24]
 800287e:	431a      	orrs	r2, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	430a      	orrs	r2, r1
 8002886:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f042 0201 	orr.w	r2, r2, #1
 8002896:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2200      	movs	r2, #0
 800289c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2220      	movs	r2, #32
 80028a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2200      	movs	r2, #0
 80028b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3710      	adds	r7, #16
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	000186a0 	.word	0x000186a0
 80028c4:	001e847f 	.word	0x001e847f
 80028c8:	003d08ff 	.word	0x003d08ff
 80028cc:	431bde83 	.word	0x431bde83
 80028d0:	10624dd3 	.word	0x10624dd3

080028d4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b088      	sub	sp, #32
 80028d8:	af02      	add	r7, sp, #8
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	4608      	mov	r0, r1
 80028de:	4611      	mov	r1, r2
 80028e0:	461a      	mov	r2, r3
 80028e2:	4603      	mov	r3, r0
 80028e4:	817b      	strh	r3, [r7, #10]
 80028e6:	460b      	mov	r3, r1
 80028e8:	813b      	strh	r3, [r7, #8]
 80028ea:	4613      	mov	r3, r2
 80028ec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80028ee:	f7fe fd47 	bl	8001380 <HAL_GetTick>
 80028f2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	2b20      	cmp	r3, #32
 80028fe:	f040 80d9 	bne.w	8002ab4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	9300      	str	r3, [sp, #0]
 8002906:	2319      	movs	r3, #25
 8002908:	2201      	movs	r2, #1
 800290a:	496d      	ldr	r1, [pc, #436]	; (8002ac0 <HAL_I2C_Mem_Write+0x1ec>)
 800290c:	68f8      	ldr	r0, [r7, #12]
 800290e:	f000 fdb9 	bl	8003484 <I2C_WaitOnFlagUntilTimeout>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d001      	beq.n	800291c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002918:	2302      	movs	r3, #2
 800291a:	e0cc      	b.n	8002ab6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002922:	2b01      	cmp	r3, #1
 8002924:	d101      	bne.n	800292a <HAL_I2C_Mem_Write+0x56>
 8002926:	2302      	movs	r3, #2
 8002928:	e0c5      	b.n	8002ab6 <HAL_I2C_Mem_Write+0x1e2>
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2201      	movs	r2, #1
 800292e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0301 	and.w	r3, r3, #1
 800293c:	2b01      	cmp	r3, #1
 800293e:	d007      	beq.n	8002950 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f042 0201 	orr.w	r2, r2, #1
 800294e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800295e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2221      	movs	r2, #33	; 0x21
 8002964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2240      	movs	r2, #64	; 0x40
 800296c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2200      	movs	r2, #0
 8002974:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	6a3a      	ldr	r2, [r7, #32]
 800297a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002980:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002986:	b29a      	uxth	r2, r3
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	4a4d      	ldr	r2, [pc, #308]	; (8002ac4 <HAL_I2C_Mem_Write+0x1f0>)
 8002990:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002992:	88f8      	ldrh	r0, [r7, #6]
 8002994:	893a      	ldrh	r2, [r7, #8]
 8002996:	8979      	ldrh	r1, [r7, #10]
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	9301      	str	r3, [sp, #4]
 800299c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800299e:	9300      	str	r3, [sp, #0]
 80029a0:	4603      	mov	r3, r0
 80029a2:	68f8      	ldr	r0, [r7, #12]
 80029a4:	f000 fbf0 	bl	8003188 <I2C_RequestMemoryWrite>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d052      	beq.n	8002a54 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e081      	b.n	8002ab6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029b2:	697a      	ldr	r2, [r7, #20]
 80029b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80029b6:	68f8      	ldr	r0, [r7, #12]
 80029b8:	f000 fe7e 	bl	80036b8 <I2C_WaitOnTXEFlagUntilTimeout>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d00d      	beq.n	80029de <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c6:	2b04      	cmp	r3, #4
 80029c8:	d107      	bne.n	80029da <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029d8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e06b      	b.n	8002ab6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e2:	781a      	ldrb	r2, [r3, #0]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ee:	1c5a      	adds	r2, r3, #1
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029f8:	3b01      	subs	r3, #1
 80029fa:	b29a      	uxth	r2, r3
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	3b01      	subs	r3, #1
 8002a08:	b29a      	uxth	r2, r3
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	695b      	ldr	r3, [r3, #20]
 8002a14:	f003 0304 	and.w	r3, r3, #4
 8002a18:	2b04      	cmp	r3, #4
 8002a1a:	d11b      	bne.n	8002a54 <HAL_I2C_Mem_Write+0x180>
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d017      	beq.n	8002a54 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a28:	781a      	ldrb	r2, [r3, #0]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a34:	1c5a      	adds	r2, r3, #1
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a3e:	3b01      	subs	r3, #1
 8002a40:	b29a      	uxth	r2, r3
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	3b01      	subs	r3, #1
 8002a4e:	b29a      	uxth	r2, r3
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d1aa      	bne.n	80029b2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a5c:	697a      	ldr	r2, [r7, #20]
 8002a5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a60:	68f8      	ldr	r0, [r7, #12]
 8002a62:	f000 fe71 	bl	8003748 <I2C_WaitOnBTFFlagUntilTimeout>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d00d      	beq.n	8002a88 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a70:	2b04      	cmp	r3, #4
 8002a72:	d107      	bne.n	8002a84 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a82:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e016      	b.n	8002ab6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2220      	movs	r2, #32
 8002a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	e000      	b.n	8002ab6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002ab4:	2302      	movs	r3, #2
  }
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3718      	adds	r7, #24
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	00100002 	.word	0x00100002
 8002ac4:	ffff0000 	.word	0xffff0000

08002ac8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b08c      	sub	sp, #48	; 0x30
 8002acc:	af02      	add	r7, sp, #8
 8002ace:	60f8      	str	r0, [r7, #12]
 8002ad0:	4608      	mov	r0, r1
 8002ad2:	4611      	mov	r1, r2
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	817b      	strh	r3, [r7, #10]
 8002ada:	460b      	mov	r3, r1
 8002adc:	813b      	strh	r3, [r7, #8]
 8002ade:	4613      	mov	r3, r2
 8002ae0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ae2:	f7fe fc4d 	bl	8001380 <HAL_GetTick>
 8002ae6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	2b20      	cmp	r3, #32
 8002af2:	f040 8214 	bne.w	8002f1e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af8:	9300      	str	r3, [sp, #0]
 8002afa:	2319      	movs	r3, #25
 8002afc:	2201      	movs	r2, #1
 8002afe:	497b      	ldr	r1, [pc, #492]	; (8002cec <HAL_I2C_Mem_Read+0x224>)
 8002b00:	68f8      	ldr	r0, [r7, #12]
 8002b02:	f000 fcbf 	bl	8003484 <I2C_WaitOnFlagUntilTimeout>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d001      	beq.n	8002b10 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002b0c:	2302      	movs	r3, #2
 8002b0e:	e207      	b.n	8002f20 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d101      	bne.n	8002b1e <HAL_I2C_Mem_Read+0x56>
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	e200      	b.n	8002f20 <HAL_I2C_Mem_Read+0x458>
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2201      	movs	r2, #1
 8002b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0301 	and.w	r3, r3, #1
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d007      	beq.n	8002b44 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f042 0201 	orr.w	r2, r2, #1
 8002b42:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b52:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2222      	movs	r2, #34	; 0x22
 8002b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2240      	movs	r2, #64	; 0x40
 8002b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2200      	movs	r2, #0
 8002b68:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b6e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002b74:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b7a:	b29a      	uxth	r2, r3
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	4a5b      	ldr	r2, [pc, #364]	; (8002cf0 <HAL_I2C_Mem_Read+0x228>)
 8002b84:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b86:	88f8      	ldrh	r0, [r7, #6]
 8002b88:	893a      	ldrh	r2, [r7, #8]
 8002b8a:	8979      	ldrh	r1, [r7, #10]
 8002b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8e:	9301      	str	r3, [sp, #4]
 8002b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b92:	9300      	str	r3, [sp, #0]
 8002b94:	4603      	mov	r3, r0
 8002b96:	68f8      	ldr	r0, [r7, #12]
 8002b98:	f000 fb8c 	bl	80032b4 <I2C_RequestMemoryRead>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d001      	beq.n	8002ba6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e1bc      	b.n	8002f20 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d113      	bne.n	8002bd6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bae:	2300      	movs	r3, #0
 8002bb0:	623b      	str	r3, [r7, #32]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	695b      	ldr	r3, [r3, #20]
 8002bb8:	623b      	str	r3, [r7, #32]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	699b      	ldr	r3, [r3, #24]
 8002bc0:	623b      	str	r3, [r7, #32]
 8002bc2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bd2:	601a      	str	r2, [r3, #0]
 8002bd4:	e190      	b.n	8002ef8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d11b      	bne.n	8002c16 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bee:	2300      	movs	r3, #0
 8002bf0:	61fb      	str	r3, [r7, #28]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	695b      	ldr	r3, [r3, #20]
 8002bf8:	61fb      	str	r3, [r7, #28]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	699b      	ldr	r3, [r3, #24]
 8002c00:	61fb      	str	r3, [r7, #28]
 8002c02:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c12:	601a      	str	r2, [r3, #0]
 8002c14:	e170      	b.n	8002ef8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d11b      	bne.n	8002c56 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c2c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c3c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c3e:	2300      	movs	r3, #0
 8002c40:	61bb      	str	r3, [r7, #24]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	695b      	ldr	r3, [r3, #20]
 8002c48:	61bb      	str	r3, [r7, #24]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	699b      	ldr	r3, [r3, #24]
 8002c50:	61bb      	str	r3, [r7, #24]
 8002c52:	69bb      	ldr	r3, [r7, #24]
 8002c54:	e150      	b.n	8002ef8 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c56:	2300      	movs	r3, #0
 8002c58:	617b      	str	r3, [r7, #20]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	695b      	ldr	r3, [r3, #20]
 8002c60:	617b      	str	r3, [r7, #20]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	699b      	ldr	r3, [r3, #24]
 8002c68:	617b      	str	r3, [r7, #20]
 8002c6a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002c6c:	e144      	b.n	8002ef8 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c72:	2b03      	cmp	r3, #3
 8002c74:	f200 80f1 	bhi.w	8002e5a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d123      	bne.n	8002cc8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c82:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002c84:	68f8      	ldr	r0, [r7, #12]
 8002c86:	f000 fda7 	bl	80037d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d001      	beq.n	8002c94 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e145      	b.n	8002f20 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	691a      	ldr	r2, [r3, #16]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9e:	b2d2      	uxtb	r2, r2
 8002ca0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca6:	1c5a      	adds	r2, r3, #1
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cb0:	3b01      	subs	r3, #1
 8002cb2:	b29a      	uxth	r2, r3
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cbc:	b29b      	uxth	r3, r3
 8002cbe:	3b01      	subs	r3, #1
 8002cc0:	b29a      	uxth	r2, r3
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002cc6:	e117      	b.n	8002ef8 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d14e      	bne.n	8002d6e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd2:	9300      	str	r3, [sp, #0]
 8002cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	4906      	ldr	r1, [pc, #24]	; (8002cf4 <HAL_I2C_Mem_Read+0x22c>)
 8002cda:	68f8      	ldr	r0, [r7, #12]
 8002cdc:	f000 fbd2 	bl	8003484 <I2C_WaitOnFlagUntilTimeout>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d008      	beq.n	8002cf8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e11a      	b.n	8002f20 <HAL_I2C_Mem_Read+0x458>
 8002cea:	bf00      	nop
 8002cec:	00100002 	.word	0x00100002
 8002cf0:	ffff0000 	.word	0xffff0000
 8002cf4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d06:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	691a      	ldr	r2, [r3, #16]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d12:	b2d2      	uxtb	r2, r2
 8002d14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1a:	1c5a      	adds	r2, r3, #1
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d24:	3b01      	subs	r3, #1
 8002d26:	b29a      	uxth	r2, r3
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	3b01      	subs	r3, #1
 8002d34:	b29a      	uxth	r2, r3
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	691a      	ldr	r2, [r3, #16]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d44:	b2d2      	uxtb	r2, r2
 8002d46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4c:	1c5a      	adds	r2, r3, #1
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d56:	3b01      	subs	r3, #1
 8002d58:	b29a      	uxth	r2, r3
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	3b01      	subs	r3, #1
 8002d66:	b29a      	uxth	r2, r3
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d6c:	e0c4      	b.n	8002ef8 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d70:	9300      	str	r3, [sp, #0]
 8002d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d74:	2200      	movs	r2, #0
 8002d76:	496c      	ldr	r1, [pc, #432]	; (8002f28 <HAL_I2C_Mem_Read+0x460>)
 8002d78:	68f8      	ldr	r0, [r7, #12]
 8002d7a:	f000 fb83 	bl	8003484 <I2C_WaitOnFlagUntilTimeout>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d001      	beq.n	8002d88 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e0cb      	b.n	8002f20 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d96:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	691a      	ldr	r2, [r3, #16]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da2:	b2d2      	uxtb	r2, r2
 8002da4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002daa:	1c5a      	adds	r2, r3, #1
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002db4:	3b01      	subs	r3, #1
 8002db6:	b29a      	uxth	r2, r3
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	3b01      	subs	r3, #1
 8002dc4:	b29a      	uxth	r2, r3
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dcc:	9300      	str	r3, [sp, #0]
 8002dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	4955      	ldr	r1, [pc, #340]	; (8002f28 <HAL_I2C_Mem_Read+0x460>)
 8002dd4:	68f8      	ldr	r0, [r7, #12]
 8002dd6:	f000 fb55 	bl	8003484 <I2C_WaitOnFlagUntilTimeout>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d001      	beq.n	8002de4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e09d      	b.n	8002f20 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002df2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	691a      	ldr	r2, [r3, #16]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfe:	b2d2      	uxtb	r2, r2
 8002e00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e06:	1c5a      	adds	r2, r3, #1
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e10:	3b01      	subs	r3, #1
 8002e12:	b29a      	uxth	r2, r3
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	3b01      	subs	r3, #1
 8002e20:	b29a      	uxth	r2, r3
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	691a      	ldr	r2, [r3, #16]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e30:	b2d2      	uxtb	r2, r2
 8002e32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e38:	1c5a      	adds	r2, r3, #1
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e42:	3b01      	subs	r3, #1
 8002e44:	b29a      	uxth	r2, r3
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	3b01      	subs	r3, #1
 8002e52:	b29a      	uxth	r2, r3
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002e58:	e04e      	b.n	8002ef8 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e5c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002e5e:	68f8      	ldr	r0, [r7, #12]
 8002e60:	f000 fcba 	bl	80037d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d001      	beq.n	8002e6e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e058      	b.n	8002f20 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	691a      	ldr	r2, [r3, #16]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e78:	b2d2      	uxtb	r2, r2
 8002e7a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e80:	1c5a      	adds	r2, r3, #1
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e8a:	3b01      	subs	r3, #1
 8002e8c:	b29a      	uxth	r2, r3
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	3b01      	subs	r3, #1
 8002e9a:	b29a      	uxth	r2, r3
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	695b      	ldr	r3, [r3, #20]
 8002ea6:	f003 0304 	and.w	r3, r3, #4
 8002eaa:	2b04      	cmp	r3, #4
 8002eac:	d124      	bne.n	8002ef8 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eb2:	2b03      	cmp	r3, #3
 8002eb4:	d107      	bne.n	8002ec6 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ec4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	691a      	ldr	r2, [r3, #16]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed0:	b2d2      	uxtb	r2, r2
 8002ed2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed8:	1c5a      	adds	r2, r3, #1
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ee2:	3b01      	subs	r3, #1
 8002ee4:	b29a      	uxth	r2, r3
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	3b01      	subs	r3, #1
 8002ef2:	b29a      	uxth	r2, r3
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	f47f aeb6 	bne.w	8002c6e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2220      	movs	r2, #32
 8002f06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2200      	movs	r2, #0
 8002f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	e000      	b.n	8002f20 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002f1e:	2302      	movs	r3, #2
  }
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3728      	adds	r7, #40	; 0x28
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	00010004 	.word	0x00010004

08002f2c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b08a      	sub	sp, #40	; 0x28
 8002f30:	af02      	add	r7, sp, #8
 8002f32:	60f8      	str	r0, [r7, #12]
 8002f34:	607a      	str	r2, [r7, #4]
 8002f36:	603b      	str	r3, [r7, #0]
 8002f38:	460b      	mov	r3, r1
 8002f3a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002f3c:	f7fe fa20 	bl	8001380 <HAL_GetTick>
 8002f40:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002f42:	2300      	movs	r3, #0
 8002f44:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	2b20      	cmp	r3, #32
 8002f50:	f040 8111 	bne.w	8003176 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	9300      	str	r3, [sp, #0]
 8002f58:	2319      	movs	r3, #25
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	4988      	ldr	r1, [pc, #544]	; (8003180 <HAL_I2C_IsDeviceReady+0x254>)
 8002f5e:	68f8      	ldr	r0, [r7, #12]
 8002f60:	f000 fa90 	bl	8003484 <I2C_WaitOnFlagUntilTimeout>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d001      	beq.n	8002f6e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002f6a:	2302      	movs	r3, #2
 8002f6c:	e104      	b.n	8003178 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d101      	bne.n	8002f7c <HAL_I2C_IsDeviceReady+0x50>
 8002f78:	2302      	movs	r3, #2
 8002f7a:	e0fd      	b.n	8003178 <HAL_I2C_IsDeviceReady+0x24c>
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0301 	and.w	r3, r3, #1
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d007      	beq.n	8002fa2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f042 0201 	orr.w	r2, r2, #1
 8002fa0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fb0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2224      	movs	r2, #36	; 0x24
 8002fb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	4a70      	ldr	r2, [pc, #448]	; (8003184 <HAL_I2C_IsDeviceReady+0x258>)
 8002fc4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fd4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	9300      	str	r3, [sp, #0]
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002fe2:	68f8      	ldr	r0, [r7, #12]
 8002fe4:	f000 fa4e 	bl	8003484 <I2C_WaitOnFlagUntilTimeout>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d00d      	beq.n	800300a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ff8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ffc:	d103      	bne.n	8003006 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003004:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e0b6      	b.n	8003178 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800300a:	897b      	ldrh	r3, [r7, #10]
 800300c:	b2db      	uxtb	r3, r3
 800300e:	461a      	mov	r2, r3
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003018:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800301a:	f7fe f9b1 	bl	8001380 <HAL_GetTick>
 800301e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	695b      	ldr	r3, [r3, #20]
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	2b02      	cmp	r3, #2
 800302c:	bf0c      	ite	eq
 800302e:	2301      	moveq	r3, #1
 8003030:	2300      	movne	r3, #0
 8003032:	b2db      	uxtb	r3, r3
 8003034:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	695b      	ldr	r3, [r3, #20]
 800303c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003040:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003044:	bf0c      	ite	eq
 8003046:	2301      	moveq	r3, #1
 8003048:	2300      	movne	r3, #0
 800304a:	b2db      	uxtb	r3, r3
 800304c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800304e:	e025      	b.n	800309c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003050:	f7fe f996 	bl	8001380 <HAL_GetTick>
 8003054:	4602      	mov	r2, r0
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	683a      	ldr	r2, [r7, #0]
 800305c:	429a      	cmp	r2, r3
 800305e:	d302      	bcc.n	8003066 <HAL_I2C_IsDeviceReady+0x13a>
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d103      	bne.n	800306e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	22a0      	movs	r2, #160	; 0xa0
 800306a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	695b      	ldr	r3, [r3, #20]
 8003074:	f003 0302 	and.w	r3, r3, #2
 8003078:	2b02      	cmp	r3, #2
 800307a:	bf0c      	ite	eq
 800307c:	2301      	moveq	r3, #1
 800307e:	2300      	movne	r3, #0
 8003080:	b2db      	uxtb	r3, r3
 8003082:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	695b      	ldr	r3, [r3, #20]
 800308a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800308e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003092:	bf0c      	ite	eq
 8003094:	2301      	moveq	r3, #1
 8003096:	2300      	movne	r3, #0
 8003098:	b2db      	uxtb	r3, r3
 800309a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	2ba0      	cmp	r3, #160	; 0xa0
 80030a6:	d005      	beq.n	80030b4 <HAL_I2C_IsDeviceReady+0x188>
 80030a8:	7dfb      	ldrb	r3, [r7, #23]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d102      	bne.n	80030b4 <HAL_I2C_IsDeviceReady+0x188>
 80030ae:	7dbb      	ldrb	r3, [r7, #22]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d0cd      	beq.n	8003050 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2220      	movs	r2, #32
 80030b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	695b      	ldr	r3, [r3, #20]
 80030c2:	f003 0302 	and.w	r3, r3, #2
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d129      	bne.n	800311e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030d8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030da:	2300      	movs	r3, #0
 80030dc:	613b      	str	r3, [r7, #16]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	695b      	ldr	r3, [r3, #20]
 80030e4:	613b      	str	r3, [r7, #16]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	699b      	ldr	r3, [r3, #24]
 80030ec:	613b      	str	r3, [r7, #16]
 80030ee:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	9300      	str	r3, [sp, #0]
 80030f4:	2319      	movs	r3, #25
 80030f6:	2201      	movs	r2, #1
 80030f8:	4921      	ldr	r1, [pc, #132]	; (8003180 <HAL_I2C_IsDeviceReady+0x254>)
 80030fa:	68f8      	ldr	r0, [r7, #12]
 80030fc:	f000 f9c2 	bl	8003484 <I2C_WaitOnFlagUntilTimeout>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d001      	beq.n	800310a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e036      	b.n	8003178 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2220      	movs	r2, #32
 800310e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2200      	movs	r2, #0
 8003116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800311a:	2300      	movs	r3, #0
 800311c:	e02c      	b.n	8003178 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800312c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003136:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	9300      	str	r3, [sp, #0]
 800313c:	2319      	movs	r3, #25
 800313e:	2201      	movs	r2, #1
 8003140:	490f      	ldr	r1, [pc, #60]	; (8003180 <HAL_I2C_IsDeviceReady+0x254>)
 8003142:	68f8      	ldr	r0, [r7, #12]
 8003144:	f000 f99e 	bl	8003484 <I2C_WaitOnFlagUntilTimeout>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d001      	beq.n	8003152 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e012      	b.n	8003178 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	3301      	adds	r3, #1
 8003156:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003158:	69ba      	ldr	r2, [r7, #24]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	429a      	cmp	r2, r3
 800315e:	f4ff af32 	bcc.w	8002fc6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2220      	movs	r2, #32
 8003166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2200      	movs	r2, #0
 800316e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e000      	b.n	8003178 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003176:	2302      	movs	r3, #2
  }
}
 8003178:	4618      	mov	r0, r3
 800317a:	3720      	adds	r7, #32
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}
 8003180:	00100002 	.word	0x00100002
 8003184:	ffff0000 	.word	0xffff0000

08003188 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b088      	sub	sp, #32
 800318c:	af02      	add	r7, sp, #8
 800318e:	60f8      	str	r0, [r7, #12]
 8003190:	4608      	mov	r0, r1
 8003192:	4611      	mov	r1, r2
 8003194:	461a      	mov	r2, r3
 8003196:	4603      	mov	r3, r0
 8003198:	817b      	strh	r3, [r7, #10]
 800319a:	460b      	mov	r3, r1
 800319c:	813b      	strh	r3, [r7, #8]
 800319e:	4613      	mov	r3, r2
 80031a0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031b0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80031b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b4:	9300      	str	r3, [sp, #0]
 80031b6:	6a3b      	ldr	r3, [r7, #32]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80031be:	68f8      	ldr	r0, [r7, #12]
 80031c0:	f000 f960 	bl	8003484 <I2C_WaitOnFlagUntilTimeout>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d00d      	beq.n	80031e6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031d8:	d103      	bne.n	80031e2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031e0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e05f      	b.n	80032a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80031e6:	897b      	ldrh	r3, [r7, #10]
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	461a      	mov	r2, r3
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80031f4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80031f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f8:	6a3a      	ldr	r2, [r7, #32]
 80031fa:	492d      	ldr	r1, [pc, #180]	; (80032b0 <I2C_RequestMemoryWrite+0x128>)
 80031fc:	68f8      	ldr	r0, [r7, #12]
 80031fe:	f000 f9bb 	bl	8003578 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d001      	beq.n	800320c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e04c      	b.n	80032a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800320c:	2300      	movs	r3, #0
 800320e:	617b      	str	r3, [r7, #20]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	695b      	ldr	r3, [r3, #20]
 8003216:	617b      	str	r3, [r7, #20]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	699b      	ldr	r3, [r3, #24]
 800321e:	617b      	str	r3, [r7, #20]
 8003220:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003222:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003224:	6a39      	ldr	r1, [r7, #32]
 8003226:	68f8      	ldr	r0, [r7, #12]
 8003228:	f000 fa46 	bl	80036b8 <I2C_WaitOnTXEFlagUntilTimeout>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d00d      	beq.n	800324e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003236:	2b04      	cmp	r3, #4
 8003238:	d107      	bne.n	800324a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003248:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e02b      	b.n	80032a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800324e:	88fb      	ldrh	r3, [r7, #6]
 8003250:	2b01      	cmp	r3, #1
 8003252:	d105      	bne.n	8003260 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003254:	893b      	ldrh	r3, [r7, #8]
 8003256:	b2da      	uxtb	r2, r3
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	611a      	str	r2, [r3, #16]
 800325e:	e021      	b.n	80032a4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003260:	893b      	ldrh	r3, [r7, #8]
 8003262:	0a1b      	lsrs	r3, r3, #8
 8003264:	b29b      	uxth	r3, r3
 8003266:	b2da      	uxtb	r2, r3
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800326e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003270:	6a39      	ldr	r1, [r7, #32]
 8003272:	68f8      	ldr	r0, [r7, #12]
 8003274:	f000 fa20 	bl	80036b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d00d      	beq.n	800329a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003282:	2b04      	cmp	r3, #4
 8003284:	d107      	bne.n	8003296 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003294:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e005      	b.n	80032a6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800329a:	893b      	ldrh	r3, [r7, #8]
 800329c:	b2da      	uxtb	r2, r3
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80032a4:	2300      	movs	r3, #0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3718      	adds	r7, #24
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	00010002 	.word	0x00010002

080032b4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b088      	sub	sp, #32
 80032b8:	af02      	add	r7, sp, #8
 80032ba:	60f8      	str	r0, [r7, #12]
 80032bc:	4608      	mov	r0, r1
 80032be:	4611      	mov	r1, r2
 80032c0:	461a      	mov	r2, r3
 80032c2:	4603      	mov	r3, r0
 80032c4:	817b      	strh	r3, [r7, #10]
 80032c6:	460b      	mov	r3, r1
 80032c8:	813b      	strh	r3, [r7, #8]
 80032ca:	4613      	mov	r3, r2
 80032cc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80032dc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032ec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f0:	9300      	str	r3, [sp, #0]
 80032f2:	6a3b      	ldr	r3, [r7, #32]
 80032f4:	2200      	movs	r2, #0
 80032f6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80032fa:	68f8      	ldr	r0, [r7, #12]
 80032fc:	f000 f8c2 	bl	8003484 <I2C_WaitOnFlagUntilTimeout>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d00d      	beq.n	8003322 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003310:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003314:	d103      	bne.n	800331e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	f44f 7200 	mov.w	r2, #512	; 0x200
 800331c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e0aa      	b.n	8003478 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003322:	897b      	ldrh	r3, [r7, #10]
 8003324:	b2db      	uxtb	r3, r3
 8003326:	461a      	mov	r2, r3
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003330:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003334:	6a3a      	ldr	r2, [r7, #32]
 8003336:	4952      	ldr	r1, [pc, #328]	; (8003480 <I2C_RequestMemoryRead+0x1cc>)
 8003338:	68f8      	ldr	r0, [r7, #12]
 800333a:	f000 f91d 	bl	8003578 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800333e:	4603      	mov	r3, r0
 8003340:	2b00      	cmp	r3, #0
 8003342:	d001      	beq.n	8003348 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e097      	b.n	8003478 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003348:	2300      	movs	r3, #0
 800334a:	617b      	str	r3, [r7, #20]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	695b      	ldr	r3, [r3, #20]
 8003352:	617b      	str	r3, [r7, #20]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	699b      	ldr	r3, [r3, #24]
 800335a:	617b      	str	r3, [r7, #20]
 800335c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800335e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003360:	6a39      	ldr	r1, [r7, #32]
 8003362:	68f8      	ldr	r0, [r7, #12]
 8003364:	f000 f9a8 	bl	80036b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d00d      	beq.n	800338a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003372:	2b04      	cmp	r3, #4
 8003374:	d107      	bne.n	8003386 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003384:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e076      	b.n	8003478 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800338a:	88fb      	ldrh	r3, [r7, #6]
 800338c:	2b01      	cmp	r3, #1
 800338e:	d105      	bne.n	800339c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003390:	893b      	ldrh	r3, [r7, #8]
 8003392:	b2da      	uxtb	r2, r3
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	611a      	str	r2, [r3, #16]
 800339a:	e021      	b.n	80033e0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800339c:	893b      	ldrh	r3, [r7, #8]
 800339e:	0a1b      	lsrs	r3, r3, #8
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	b2da      	uxtb	r2, r3
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033ac:	6a39      	ldr	r1, [r7, #32]
 80033ae:	68f8      	ldr	r0, [r7, #12]
 80033b0:	f000 f982 	bl	80036b8 <I2C_WaitOnTXEFlagUntilTimeout>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d00d      	beq.n	80033d6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033be:	2b04      	cmp	r3, #4
 80033c0:	d107      	bne.n	80033d2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033d0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e050      	b.n	8003478 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80033d6:	893b      	ldrh	r3, [r7, #8]
 80033d8:	b2da      	uxtb	r2, r3
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033e2:	6a39      	ldr	r1, [r7, #32]
 80033e4:	68f8      	ldr	r0, [r7, #12]
 80033e6:	f000 f967 	bl	80036b8 <I2C_WaitOnTXEFlagUntilTimeout>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d00d      	beq.n	800340c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f4:	2b04      	cmp	r3, #4
 80033f6:	d107      	bne.n	8003408 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003406:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e035      	b.n	8003478 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800341a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800341c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341e:	9300      	str	r3, [sp, #0]
 8003420:	6a3b      	ldr	r3, [r7, #32]
 8003422:	2200      	movs	r2, #0
 8003424:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003428:	68f8      	ldr	r0, [r7, #12]
 800342a:	f000 f82b 	bl	8003484 <I2C_WaitOnFlagUntilTimeout>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d00d      	beq.n	8003450 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800343e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003442:	d103      	bne.n	800344c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f44f 7200 	mov.w	r2, #512	; 0x200
 800344a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800344c:	2303      	movs	r3, #3
 800344e:	e013      	b.n	8003478 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003450:	897b      	ldrh	r3, [r7, #10]
 8003452:	b2db      	uxtb	r3, r3
 8003454:	f043 0301 	orr.w	r3, r3, #1
 8003458:	b2da      	uxtb	r2, r3
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003462:	6a3a      	ldr	r2, [r7, #32]
 8003464:	4906      	ldr	r1, [pc, #24]	; (8003480 <I2C_RequestMemoryRead+0x1cc>)
 8003466:	68f8      	ldr	r0, [r7, #12]
 8003468:	f000 f886 	bl	8003578 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800346c:	4603      	mov	r3, r0
 800346e:	2b00      	cmp	r3, #0
 8003470:	d001      	beq.n	8003476 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e000      	b.n	8003478 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003476:	2300      	movs	r3, #0
}
 8003478:	4618      	mov	r0, r3
 800347a:	3718      	adds	r7, #24
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}
 8003480:	00010002 	.word	0x00010002

08003484 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	60f8      	str	r0, [r7, #12]
 800348c:	60b9      	str	r1, [r7, #8]
 800348e:	603b      	str	r3, [r7, #0]
 8003490:	4613      	mov	r3, r2
 8003492:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003494:	e048      	b.n	8003528 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800349c:	d044      	beq.n	8003528 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800349e:	f7fd ff6f 	bl	8001380 <HAL_GetTick>
 80034a2:	4602      	mov	r2, r0
 80034a4:	69bb      	ldr	r3, [r7, #24]
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	683a      	ldr	r2, [r7, #0]
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d302      	bcc.n	80034b4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d139      	bne.n	8003528 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	0c1b      	lsrs	r3, r3, #16
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d10d      	bne.n	80034da <I2C_WaitOnFlagUntilTimeout+0x56>
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	695b      	ldr	r3, [r3, #20]
 80034c4:	43da      	mvns	r2, r3
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	4013      	ands	r3, r2
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	bf0c      	ite	eq
 80034d0:	2301      	moveq	r3, #1
 80034d2:	2300      	movne	r3, #0
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	461a      	mov	r2, r3
 80034d8:	e00c      	b.n	80034f4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	699b      	ldr	r3, [r3, #24]
 80034e0:	43da      	mvns	r2, r3
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	4013      	ands	r3, r2
 80034e6:	b29b      	uxth	r3, r3
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	bf0c      	ite	eq
 80034ec:	2301      	moveq	r3, #1
 80034ee:	2300      	movne	r3, #0
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	461a      	mov	r2, r3
 80034f4:	79fb      	ldrb	r3, [r7, #7]
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d116      	bne.n	8003528 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2200      	movs	r2, #0
 80034fe:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2220      	movs	r2, #32
 8003504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2200      	movs	r2, #0
 800350c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003514:	f043 0220 	orr.w	r2, r3, #32
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2200      	movs	r2, #0
 8003520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e023      	b.n	8003570 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	0c1b      	lsrs	r3, r3, #16
 800352c:	b2db      	uxtb	r3, r3
 800352e:	2b01      	cmp	r3, #1
 8003530:	d10d      	bne.n	800354e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	695b      	ldr	r3, [r3, #20]
 8003538:	43da      	mvns	r2, r3
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	4013      	ands	r3, r2
 800353e:	b29b      	uxth	r3, r3
 8003540:	2b00      	cmp	r3, #0
 8003542:	bf0c      	ite	eq
 8003544:	2301      	moveq	r3, #1
 8003546:	2300      	movne	r3, #0
 8003548:	b2db      	uxtb	r3, r3
 800354a:	461a      	mov	r2, r3
 800354c:	e00c      	b.n	8003568 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	699b      	ldr	r3, [r3, #24]
 8003554:	43da      	mvns	r2, r3
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	4013      	ands	r3, r2
 800355a:	b29b      	uxth	r3, r3
 800355c:	2b00      	cmp	r3, #0
 800355e:	bf0c      	ite	eq
 8003560:	2301      	moveq	r3, #1
 8003562:	2300      	movne	r3, #0
 8003564:	b2db      	uxtb	r3, r3
 8003566:	461a      	mov	r2, r3
 8003568:	79fb      	ldrb	r3, [r7, #7]
 800356a:	429a      	cmp	r2, r3
 800356c:	d093      	beq.n	8003496 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800356e:	2300      	movs	r3, #0
}
 8003570:	4618      	mov	r0, r3
 8003572:	3710      	adds	r7, #16
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}

08003578 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	60b9      	str	r1, [r7, #8]
 8003582:	607a      	str	r2, [r7, #4]
 8003584:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003586:	e071      	b.n	800366c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	695b      	ldr	r3, [r3, #20]
 800358e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003592:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003596:	d123      	bne.n	80035e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035a6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80035b0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2200      	movs	r2, #0
 80035b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2220      	movs	r2, #32
 80035bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035cc:	f043 0204 	orr.w	r2, r3, #4
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2200      	movs	r2, #0
 80035d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e067      	b.n	80036b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035e6:	d041      	beq.n	800366c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035e8:	f7fd feca 	bl	8001380 <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d302      	bcc.n	80035fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d136      	bne.n	800366c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	0c1b      	lsrs	r3, r3, #16
 8003602:	b2db      	uxtb	r3, r3
 8003604:	2b01      	cmp	r3, #1
 8003606:	d10c      	bne.n	8003622 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	695b      	ldr	r3, [r3, #20]
 800360e:	43da      	mvns	r2, r3
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	4013      	ands	r3, r2
 8003614:	b29b      	uxth	r3, r3
 8003616:	2b00      	cmp	r3, #0
 8003618:	bf14      	ite	ne
 800361a:	2301      	movne	r3, #1
 800361c:	2300      	moveq	r3, #0
 800361e:	b2db      	uxtb	r3, r3
 8003620:	e00b      	b.n	800363a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	699b      	ldr	r3, [r3, #24]
 8003628:	43da      	mvns	r2, r3
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	4013      	ands	r3, r2
 800362e:	b29b      	uxth	r3, r3
 8003630:	2b00      	cmp	r3, #0
 8003632:	bf14      	ite	ne
 8003634:	2301      	movne	r3, #1
 8003636:	2300      	moveq	r3, #0
 8003638:	b2db      	uxtb	r3, r3
 800363a:	2b00      	cmp	r3, #0
 800363c:	d016      	beq.n	800366c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2200      	movs	r2, #0
 8003642:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2220      	movs	r2, #32
 8003648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2200      	movs	r2, #0
 8003650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003658:	f043 0220 	orr.w	r2, r3, #32
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e021      	b.n	80036b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	0c1b      	lsrs	r3, r3, #16
 8003670:	b2db      	uxtb	r3, r3
 8003672:	2b01      	cmp	r3, #1
 8003674:	d10c      	bne.n	8003690 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	695b      	ldr	r3, [r3, #20]
 800367c:	43da      	mvns	r2, r3
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	4013      	ands	r3, r2
 8003682:	b29b      	uxth	r3, r3
 8003684:	2b00      	cmp	r3, #0
 8003686:	bf14      	ite	ne
 8003688:	2301      	movne	r3, #1
 800368a:	2300      	moveq	r3, #0
 800368c:	b2db      	uxtb	r3, r3
 800368e:	e00b      	b.n	80036a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	699b      	ldr	r3, [r3, #24]
 8003696:	43da      	mvns	r2, r3
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	4013      	ands	r3, r2
 800369c:	b29b      	uxth	r3, r3
 800369e:	2b00      	cmp	r3, #0
 80036a0:	bf14      	ite	ne
 80036a2:	2301      	movne	r3, #1
 80036a4:	2300      	moveq	r3, #0
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	f47f af6d 	bne.w	8003588 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80036ae:	2300      	movs	r3, #0
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3710      	adds	r7, #16
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}

080036b8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af00      	add	r7, sp, #0
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036c4:	e034      	b.n	8003730 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80036c6:	68f8      	ldr	r0, [r7, #12]
 80036c8:	f000 f8e3 	bl	8003892 <I2C_IsAcknowledgeFailed>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d001      	beq.n	80036d6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e034      	b.n	8003740 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036dc:	d028      	beq.n	8003730 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036de:	f7fd fe4f 	bl	8001380 <HAL_GetTick>
 80036e2:	4602      	mov	r2, r0
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	68ba      	ldr	r2, [r7, #8]
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d302      	bcc.n	80036f4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d11d      	bne.n	8003730 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	695b      	ldr	r3, [r3, #20]
 80036fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036fe:	2b80      	cmp	r3, #128	; 0x80
 8003700:	d016      	beq.n	8003730 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2200      	movs	r2, #0
 8003706:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2220      	movs	r2, #32
 800370c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2200      	movs	r2, #0
 8003714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371c:	f043 0220 	orr.w	r2, r3, #32
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2200      	movs	r2, #0
 8003728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e007      	b.n	8003740 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	695b      	ldr	r3, [r3, #20]
 8003736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800373a:	2b80      	cmp	r3, #128	; 0x80
 800373c:	d1c3      	bne.n	80036c6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800373e:	2300      	movs	r3, #0
}
 8003740:	4618      	mov	r0, r3
 8003742:	3710      	adds	r7, #16
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	60b9      	str	r1, [r7, #8]
 8003752:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003754:	e034      	b.n	80037c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003756:	68f8      	ldr	r0, [r7, #12]
 8003758:	f000 f89b 	bl	8003892 <I2C_IsAcknowledgeFailed>
 800375c:	4603      	mov	r3, r0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d001      	beq.n	8003766 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e034      	b.n	80037d0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800376c:	d028      	beq.n	80037c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800376e:	f7fd fe07 	bl	8001380 <HAL_GetTick>
 8003772:	4602      	mov	r2, r0
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	68ba      	ldr	r2, [r7, #8]
 800377a:	429a      	cmp	r2, r3
 800377c:	d302      	bcc.n	8003784 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d11d      	bne.n	80037c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	695b      	ldr	r3, [r3, #20]
 800378a:	f003 0304 	and.w	r3, r3, #4
 800378e:	2b04      	cmp	r3, #4
 8003790:	d016      	beq.n	80037c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2200      	movs	r2, #0
 8003796:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2220      	movs	r2, #32
 800379c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2200      	movs	r2, #0
 80037a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ac:	f043 0220 	orr.w	r2, r3, #32
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2200      	movs	r2, #0
 80037b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e007      	b.n	80037d0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	695b      	ldr	r3, [r3, #20]
 80037c6:	f003 0304 	and.w	r3, r3, #4
 80037ca:	2b04      	cmp	r3, #4
 80037cc:	d1c3      	bne.n	8003756 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80037ce:	2300      	movs	r3, #0
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3710      	adds	r7, #16
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b084      	sub	sp, #16
 80037dc:	af00      	add	r7, sp, #0
 80037de:	60f8      	str	r0, [r7, #12]
 80037e0:	60b9      	str	r1, [r7, #8]
 80037e2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80037e4:	e049      	b.n	800387a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	695b      	ldr	r3, [r3, #20]
 80037ec:	f003 0310 	and.w	r3, r3, #16
 80037f0:	2b10      	cmp	r3, #16
 80037f2:	d119      	bne.n	8003828 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f06f 0210 	mvn.w	r2, #16
 80037fc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2200      	movs	r2, #0
 8003802:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2220      	movs	r2, #32
 8003808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2200      	movs	r2, #0
 8003810:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2200      	movs	r2, #0
 8003820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e030      	b.n	800388a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003828:	f7fd fdaa 	bl	8001380 <HAL_GetTick>
 800382c:	4602      	mov	r2, r0
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	68ba      	ldr	r2, [r7, #8]
 8003834:	429a      	cmp	r2, r3
 8003836:	d302      	bcc.n	800383e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d11d      	bne.n	800387a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	695b      	ldr	r3, [r3, #20]
 8003844:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003848:	2b40      	cmp	r3, #64	; 0x40
 800384a:	d016      	beq.n	800387a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2200      	movs	r2, #0
 8003850:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2220      	movs	r2, #32
 8003856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003866:	f043 0220 	orr.w	r2, r3, #32
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2200      	movs	r2, #0
 8003872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e007      	b.n	800388a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	695b      	ldr	r3, [r3, #20]
 8003880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003884:	2b40      	cmp	r3, #64	; 0x40
 8003886:	d1ae      	bne.n	80037e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003888:	2300      	movs	r3, #0
}
 800388a:	4618      	mov	r0, r3
 800388c:	3710      	adds	r7, #16
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}

08003892 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003892:	b480      	push	{r7}
 8003894:	b083      	sub	sp, #12
 8003896:	af00      	add	r7, sp, #0
 8003898:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	695b      	ldr	r3, [r3, #20]
 80038a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038a8:	d11b      	bne.n	80038e2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80038b2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2220      	movs	r2, #32
 80038be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ce:	f043 0204 	orr.w	r2, r3, #4
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e000      	b.n	80038e4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80038e2:	2300      	movs	r3, #0
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b086      	sub	sp, #24
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d101      	bne.n	8003902 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e267      	b.n	8003dd2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0301 	and.w	r3, r3, #1
 800390a:	2b00      	cmp	r3, #0
 800390c:	d075      	beq.n	80039fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800390e:	4b88      	ldr	r3, [pc, #544]	; (8003b30 <HAL_RCC_OscConfig+0x240>)
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	f003 030c 	and.w	r3, r3, #12
 8003916:	2b04      	cmp	r3, #4
 8003918:	d00c      	beq.n	8003934 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800391a:	4b85      	ldr	r3, [pc, #532]	; (8003b30 <HAL_RCC_OscConfig+0x240>)
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003922:	2b08      	cmp	r3, #8
 8003924:	d112      	bne.n	800394c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003926:	4b82      	ldr	r3, [pc, #520]	; (8003b30 <HAL_RCC_OscConfig+0x240>)
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800392e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003932:	d10b      	bne.n	800394c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003934:	4b7e      	ldr	r3, [pc, #504]	; (8003b30 <HAL_RCC_OscConfig+0x240>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d05b      	beq.n	80039f8 <HAL_RCC_OscConfig+0x108>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d157      	bne.n	80039f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e242      	b.n	8003dd2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003954:	d106      	bne.n	8003964 <HAL_RCC_OscConfig+0x74>
 8003956:	4b76      	ldr	r3, [pc, #472]	; (8003b30 <HAL_RCC_OscConfig+0x240>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a75      	ldr	r2, [pc, #468]	; (8003b30 <HAL_RCC_OscConfig+0x240>)
 800395c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003960:	6013      	str	r3, [r2, #0]
 8003962:	e01d      	b.n	80039a0 <HAL_RCC_OscConfig+0xb0>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800396c:	d10c      	bne.n	8003988 <HAL_RCC_OscConfig+0x98>
 800396e:	4b70      	ldr	r3, [pc, #448]	; (8003b30 <HAL_RCC_OscConfig+0x240>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a6f      	ldr	r2, [pc, #444]	; (8003b30 <HAL_RCC_OscConfig+0x240>)
 8003974:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003978:	6013      	str	r3, [r2, #0]
 800397a:	4b6d      	ldr	r3, [pc, #436]	; (8003b30 <HAL_RCC_OscConfig+0x240>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a6c      	ldr	r2, [pc, #432]	; (8003b30 <HAL_RCC_OscConfig+0x240>)
 8003980:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003984:	6013      	str	r3, [r2, #0]
 8003986:	e00b      	b.n	80039a0 <HAL_RCC_OscConfig+0xb0>
 8003988:	4b69      	ldr	r3, [pc, #420]	; (8003b30 <HAL_RCC_OscConfig+0x240>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a68      	ldr	r2, [pc, #416]	; (8003b30 <HAL_RCC_OscConfig+0x240>)
 800398e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003992:	6013      	str	r3, [r2, #0]
 8003994:	4b66      	ldr	r3, [pc, #408]	; (8003b30 <HAL_RCC_OscConfig+0x240>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a65      	ldr	r2, [pc, #404]	; (8003b30 <HAL_RCC_OscConfig+0x240>)
 800399a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800399e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d013      	beq.n	80039d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039a8:	f7fd fcea 	bl	8001380 <HAL_GetTick>
 80039ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039ae:	e008      	b.n	80039c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039b0:	f7fd fce6 	bl	8001380 <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	2b64      	cmp	r3, #100	; 0x64
 80039bc:	d901      	bls.n	80039c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e207      	b.n	8003dd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039c2:	4b5b      	ldr	r3, [pc, #364]	; (8003b30 <HAL_RCC_OscConfig+0x240>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d0f0      	beq.n	80039b0 <HAL_RCC_OscConfig+0xc0>
 80039ce:	e014      	b.n	80039fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039d0:	f7fd fcd6 	bl	8001380 <HAL_GetTick>
 80039d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039d6:	e008      	b.n	80039ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039d8:	f7fd fcd2 	bl	8001380 <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	2b64      	cmp	r3, #100	; 0x64
 80039e4:	d901      	bls.n	80039ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	e1f3      	b.n	8003dd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039ea:	4b51      	ldr	r3, [pc, #324]	; (8003b30 <HAL_RCC_OscConfig+0x240>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d1f0      	bne.n	80039d8 <HAL_RCC_OscConfig+0xe8>
 80039f6:	e000      	b.n	80039fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0302 	and.w	r3, r3, #2
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d063      	beq.n	8003ace <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a06:	4b4a      	ldr	r3, [pc, #296]	; (8003b30 <HAL_RCC_OscConfig+0x240>)
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	f003 030c 	and.w	r3, r3, #12
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d00b      	beq.n	8003a2a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a12:	4b47      	ldr	r3, [pc, #284]	; (8003b30 <HAL_RCC_OscConfig+0x240>)
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a1a:	2b08      	cmp	r3, #8
 8003a1c:	d11c      	bne.n	8003a58 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a1e:	4b44      	ldr	r3, [pc, #272]	; (8003b30 <HAL_RCC_OscConfig+0x240>)
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d116      	bne.n	8003a58 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a2a:	4b41      	ldr	r3, [pc, #260]	; (8003b30 <HAL_RCC_OscConfig+0x240>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0302 	and.w	r3, r3, #2
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d005      	beq.n	8003a42 <HAL_RCC_OscConfig+0x152>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d001      	beq.n	8003a42 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e1c7      	b.n	8003dd2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a42:	4b3b      	ldr	r3, [pc, #236]	; (8003b30 <HAL_RCC_OscConfig+0x240>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	691b      	ldr	r3, [r3, #16]
 8003a4e:	00db      	lsls	r3, r3, #3
 8003a50:	4937      	ldr	r1, [pc, #220]	; (8003b30 <HAL_RCC_OscConfig+0x240>)
 8003a52:	4313      	orrs	r3, r2
 8003a54:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a56:	e03a      	b.n	8003ace <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d020      	beq.n	8003aa2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a60:	4b34      	ldr	r3, [pc, #208]	; (8003b34 <HAL_RCC_OscConfig+0x244>)
 8003a62:	2201      	movs	r2, #1
 8003a64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a66:	f7fd fc8b 	bl	8001380 <HAL_GetTick>
 8003a6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a6c:	e008      	b.n	8003a80 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a6e:	f7fd fc87 	bl	8001380 <HAL_GetTick>
 8003a72:	4602      	mov	r2, r0
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	1ad3      	subs	r3, r2, r3
 8003a78:	2b02      	cmp	r3, #2
 8003a7a:	d901      	bls.n	8003a80 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a7c:	2303      	movs	r3, #3
 8003a7e:	e1a8      	b.n	8003dd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a80:	4b2b      	ldr	r3, [pc, #172]	; (8003b30 <HAL_RCC_OscConfig+0x240>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 0302 	and.w	r3, r3, #2
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d0f0      	beq.n	8003a6e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a8c:	4b28      	ldr	r3, [pc, #160]	; (8003b30 <HAL_RCC_OscConfig+0x240>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	691b      	ldr	r3, [r3, #16]
 8003a98:	00db      	lsls	r3, r3, #3
 8003a9a:	4925      	ldr	r1, [pc, #148]	; (8003b30 <HAL_RCC_OscConfig+0x240>)
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	600b      	str	r3, [r1, #0]
 8003aa0:	e015      	b.n	8003ace <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003aa2:	4b24      	ldr	r3, [pc, #144]	; (8003b34 <HAL_RCC_OscConfig+0x244>)
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aa8:	f7fd fc6a 	bl	8001380 <HAL_GetTick>
 8003aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003aae:	e008      	b.n	8003ac2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ab0:	f7fd fc66 	bl	8001380 <HAL_GetTick>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	2b02      	cmp	r3, #2
 8003abc:	d901      	bls.n	8003ac2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	e187      	b.n	8003dd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ac2:	4b1b      	ldr	r3, [pc, #108]	; (8003b30 <HAL_RCC_OscConfig+0x240>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0302 	and.w	r3, r3, #2
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d1f0      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0308 	and.w	r3, r3, #8
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d036      	beq.n	8003b48 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	695b      	ldr	r3, [r3, #20]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d016      	beq.n	8003b10 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ae2:	4b15      	ldr	r3, [pc, #84]	; (8003b38 <HAL_RCC_OscConfig+0x248>)
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ae8:	f7fd fc4a 	bl	8001380 <HAL_GetTick>
 8003aec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003aee:	e008      	b.n	8003b02 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003af0:	f7fd fc46 	bl	8001380 <HAL_GetTick>
 8003af4:	4602      	mov	r2, r0
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	2b02      	cmp	r3, #2
 8003afc:	d901      	bls.n	8003b02 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003afe:	2303      	movs	r3, #3
 8003b00:	e167      	b.n	8003dd2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b02:	4b0b      	ldr	r3, [pc, #44]	; (8003b30 <HAL_RCC_OscConfig+0x240>)
 8003b04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b06:	f003 0302 	and.w	r3, r3, #2
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d0f0      	beq.n	8003af0 <HAL_RCC_OscConfig+0x200>
 8003b0e:	e01b      	b.n	8003b48 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b10:	4b09      	ldr	r3, [pc, #36]	; (8003b38 <HAL_RCC_OscConfig+0x248>)
 8003b12:	2200      	movs	r2, #0
 8003b14:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b16:	f7fd fc33 	bl	8001380 <HAL_GetTick>
 8003b1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b1c:	e00e      	b.n	8003b3c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b1e:	f7fd fc2f 	bl	8001380 <HAL_GetTick>
 8003b22:	4602      	mov	r2, r0
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d907      	bls.n	8003b3c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	e150      	b.n	8003dd2 <HAL_RCC_OscConfig+0x4e2>
 8003b30:	40023800 	.word	0x40023800
 8003b34:	42470000 	.word	0x42470000
 8003b38:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b3c:	4b88      	ldr	r3, [pc, #544]	; (8003d60 <HAL_RCC_OscConfig+0x470>)
 8003b3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b40:	f003 0302 	and.w	r3, r3, #2
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d1ea      	bne.n	8003b1e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0304 	and.w	r3, r3, #4
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	f000 8097 	beq.w	8003c84 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b56:	2300      	movs	r3, #0
 8003b58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b5a:	4b81      	ldr	r3, [pc, #516]	; (8003d60 <HAL_RCC_OscConfig+0x470>)
 8003b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d10f      	bne.n	8003b86 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b66:	2300      	movs	r3, #0
 8003b68:	60bb      	str	r3, [r7, #8]
 8003b6a:	4b7d      	ldr	r3, [pc, #500]	; (8003d60 <HAL_RCC_OscConfig+0x470>)
 8003b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6e:	4a7c      	ldr	r2, [pc, #496]	; (8003d60 <HAL_RCC_OscConfig+0x470>)
 8003b70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b74:	6413      	str	r3, [r2, #64]	; 0x40
 8003b76:	4b7a      	ldr	r3, [pc, #488]	; (8003d60 <HAL_RCC_OscConfig+0x470>)
 8003b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b7e:	60bb      	str	r3, [r7, #8]
 8003b80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b82:	2301      	movs	r3, #1
 8003b84:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b86:	4b77      	ldr	r3, [pc, #476]	; (8003d64 <HAL_RCC_OscConfig+0x474>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d118      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b92:	4b74      	ldr	r3, [pc, #464]	; (8003d64 <HAL_RCC_OscConfig+0x474>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a73      	ldr	r2, [pc, #460]	; (8003d64 <HAL_RCC_OscConfig+0x474>)
 8003b98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b9e:	f7fd fbef 	bl	8001380 <HAL_GetTick>
 8003ba2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ba4:	e008      	b.n	8003bb8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ba6:	f7fd fbeb 	bl	8001380 <HAL_GetTick>
 8003baa:	4602      	mov	r2, r0
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	2b02      	cmp	r3, #2
 8003bb2:	d901      	bls.n	8003bb8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	e10c      	b.n	8003dd2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bb8:	4b6a      	ldr	r3, [pc, #424]	; (8003d64 <HAL_RCC_OscConfig+0x474>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d0f0      	beq.n	8003ba6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d106      	bne.n	8003bda <HAL_RCC_OscConfig+0x2ea>
 8003bcc:	4b64      	ldr	r3, [pc, #400]	; (8003d60 <HAL_RCC_OscConfig+0x470>)
 8003bce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bd0:	4a63      	ldr	r2, [pc, #396]	; (8003d60 <HAL_RCC_OscConfig+0x470>)
 8003bd2:	f043 0301 	orr.w	r3, r3, #1
 8003bd6:	6713      	str	r3, [r2, #112]	; 0x70
 8003bd8:	e01c      	b.n	8003c14 <HAL_RCC_OscConfig+0x324>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	2b05      	cmp	r3, #5
 8003be0:	d10c      	bne.n	8003bfc <HAL_RCC_OscConfig+0x30c>
 8003be2:	4b5f      	ldr	r3, [pc, #380]	; (8003d60 <HAL_RCC_OscConfig+0x470>)
 8003be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003be6:	4a5e      	ldr	r2, [pc, #376]	; (8003d60 <HAL_RCC_OscConfig+0x470>)
 8003be8:	f043 0304 	orr.w	r3, r3, #4
 8003bec:	6713      	str	r3, [r2, #112]	; 0x70
 8003bee:	4b5c      	ldr	r3, [pc, #368]	; (8003d60 <HAL_RCC_OscConfig+0x470>)
 8003bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bf2:	4a5b      	ldr	r2, [pc, #364]	; (8003d60 <HAL_RCC_OscConfig+0x470>)
 8003bf4:	f043 0301 	orr.w	r3, r3, #1
 8003bf8:	6713      	str	r3, [r2, #112]	; 0x70
 8003bfa:	e00b      	b.n	8003c14 <HAL_RCC_OscConfig+0x324>
 8003bfc:	4b58      	ldr	r3, [pc, #352]	; (8003d60 <HAL_RCC_OscConfig+0x470>)
 8003bfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c00:	4a57      	ldr	r2, [pc, #348]	; (8003d60 <HAL_RCC_OscConfig+0x470>)
 8003c02:	f023 0301 	bic.w	r3, r3, #1
 8003c06:	6713      	str	r3, [r2, #112]	; 0x70
 8003c08:	4b55      	ldr	r3, [pc, #340]	; (8003d60 <HAL_RCC_OscConfig+0x470>)
 8003c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c0c:	4a54      	ldr	r2, [pc, #336]	; (8003d60 <HAL_RCC_OscConfig+0x470>)
 8003c0e:	f023 0304 	bic.w	r3, r3, #4
 8003c12:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d015      	beq.n	8003c48 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c1c:	f7fd fbb0 	bl	8001380 <HAL_GetTick>
 8003c20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c22:	e00a      	b.n	8003c3a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c24:	f7fd fbac 	bl	8001380 <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d901      	bls.n	8003c3a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e0cb      	b.n	8003dd2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c3a:	4b49      	ldr	r3, [pc, #292]	; (8003d60 <HAL_RCC_OscConfig+0x470>)
 8003c3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c3e:	f003 0302 	and.w	r3, r3, #2
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d0ee      	beq.n	8003c24 <HAL_RCC_OscConfig+0x334>
 8003c46:	e014      	b.n	8003c72 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c48:	f7fd fb9a 	bl	8001380 <HAL_GetTick>
 8003c4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c4e:	e00a      	b.n	8003c66 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c50:	f7fd fb96 	bl	8001380 <HAL_GetTick>
 8003c54:	4602      	mov	r2, r0
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d901      	bls.n	8003c66 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e0b5      	b.n	8003dd2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c66:	4b3e      	ldr	r3, [pc, #248]	; (8003d60 <HAL_RCC_OscConfig+0x470>)
 8003c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c6a:	f003 0302 	and.w	r3, r3, #2
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d1ee      	bne.n	8003c50 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c72:	7dfb      	ldrb	r3, [r7, #23]
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d105      	bne.n	8003c84 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c78:	4b39      	ldr	r3, [pc, #228]	; (8003d60 <HAL_RCC_OscConfig+0x470>)
 8003c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7c:	4a38      	ldr	r2, [pc, #224]	; (8003d60 <HAL_RCC_OscConfig+0x470>)
 8003c7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c82:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	699b      	ldr	r3, [r3, #24]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	f000 80a1 	beq.w	8003dd0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c8e:	4b34      	ldr	r3, [pc, #208]	; (8003d60 <HAL_RCC_OscConfig+0x470>)
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	f003 030c 	and.w	r3, r3, #12
 8003c96:	2b08      	cmp	r3, #8
 8003c98:	d05c      	beq.n	8003d54 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	699b      	ldr	r3, [r3, #24]
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	d141      	bne.n	8003d26 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ca2:	4b31      	ldr	r3, [pc, #196]	; (8003d68 <HAL_RCC_OscConfig+0x478>)
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ca8:	f7fd fb6a 	bl	8001380 <HAL_GetTick>
 8003cac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cae:	e008      	b.n	8003cc2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cb0:	f7fd fb66 	bl	8001380 <HAL_GetTick>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	d901      	bls.n	8003cc2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e087      	b.n	8003dd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cc2:	4b27      	ldr	r3, [pc, #156]	; (8003d60 <HAL_RCC_OscConfig+0x470>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d1f0      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	69da      	ldr	r2, [r3, #28]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6a1b      	ldr	r3, [r3, #32]
 8003cd6:	431a      	orrs	r2, r3
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cdc:	019b      	lsls	r3, r3, #6
 8003cde:	431a      	orrs	r2, r3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce4:	085b      	lsrs	r3, r3, #1
 8003ce6:	3b01      	subs	r3, #1
 8003ce8:	041b      	lsls	r3, r3, #16
 8003cea:	431a      	orrs	r2, r3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf0:	061b      	lsls	r3, r3, #24
 8003cf2:	491b      	ldr	r1, [pc, #108]	; (8003d60 <HAL_RCC_OscConfig+0x470>)
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cf8:	4b1b      	ldr	r3, [pc, #108]	; (8003d68 <HAL_RCC_OscConfig+0x478>)
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cfe:	f7fd fb3f 	bl	8001380 <HAL_GetTick>
 8003d02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d04:	e008      	b.n	8003d18 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d06:	f7fd fb3b 	bl	8001380 <HAL_GetTick>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	1ad3      	subs	r3, r2, r3
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	d901      	bls.n	8003d18 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003d14:	2303      	movs	r3, #3
 8003d16:	e05c      	b.n	8003dd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d18:	4b11      	ldr	r3, [pc, #68]	; (8003d60 <HAL_RCC_OscConfig+0x470>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d0f0      	beq.n	8003d06 <HAL_RCC_OscConfig+0x416>
 8003d24:	e054      	b.n	8003dd0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d26:	4b10      	ldr	r3, [pc, #64]	; (8003d68 <HAL_RCC_OscConfig+0x478>)
 8003d28:	2200      	movs	r2, #0
 8003d2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d2c:	f7fd fb28 	bl	8001380 <HAL_GetTick>
 8003d30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d32:	e008      	b.n	8003d46 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d34:	f7fd fb24 	bl	8001380 <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	d901      	bls.n	8003d46 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e045      	b.n	8003dd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d46:	4b06      	ldr	r3, [pc, #24]	; (8003d60 <HAL_RCC_OscConfig+0x470>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d1f0      	bne.n	8003d34 <HAL_RCC_OscConfig+0x444>
 8003d52:	e03d      	b.n	8003dd0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	699b      	ldr	r3, [r3, #24]
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d107      	bne.n	8003d6c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e038      	b.n	8003dd2 <HAL_RCC_OscConfig+0x4e2>
 8003d60:	40023800 	.word	0x40023800
 8003d64:	40007000 	.word	0x40007000
 8003d68:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d6c:	4b1b      	ldr	r3, [pc, #108]	; (8003ddc <HAL_RCC_OscConfig+0x4ec>)
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	699b      	ldr	r3, [r3, #24]
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d028      	beq.n	8003dcc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d121      	bne.n	8003dcc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d11a      	bne.n	8003dcc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d96:	68fa      	ldr	r2, [r7, #12]
 8003d98:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003da2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d111      	bne.n	8003dcc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003db2:	085b      	lsrs	r3, r3, #1
 8003db4:	3b01      	subs	r3, #1
 8003db6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d107      	bne.n	8003dcc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d001      	beq.n	8003dd0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e000      	b.n	8003dd2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003dd0:	2300      	movs	r3, #0
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3718      	adds	r7, #24
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	40023800 	.word	0x40023800

08003de0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d101      	bne.n	8003df4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e0cc      	b.n	8003f8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003df4:	4b68      	ldr	r3, [pc, #416]	; (8003f98 <HAL_RCC_ClockConfig+0x1b8>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0307 	and.w	r3, r3, #7
 8003dfc:	683a      	ldr	r2, [r7, #0]
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d90c      	bls.n	8003e1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e02:	4b65      	ldr	r3, [pc, #404]	; (8003f98 <HAL_RCC_ClockConfig+0x1b8>)
 8003e04:	683a      	ldr	r2, [r7, #0]
 8003e06:	b2d2      	uxtb	r2, r2
 8003e08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e0a:	4b63      	ldr	r3, [pc, #396]	; (8003f98 <HAL_RCC_ClockConfig+0x1b8>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 0307 	and.w	r3, r3, #7
 8003e12:	683a      	ldr	r2, [r7, #0]
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d001      	beq.n	8003e1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e0b8      	b.n	8003f8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 0302 	and.w	r3, r3, #2
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d020      	beq.n	8003e6a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 0304 	and.w	r3, r3, #4
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d005      	beq.n	8003e40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e34:	4b59      	ldr	r3, [pc, #356]	; (8003f9c <HAL_RCC_ClockConfig+0x1bc>)
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	4a58      	ldr	r2, [pc, #352]	; (8003f9c <HAL_RCC_ClockConfig+0x1bc>)
 8003e3a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e3e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 0308 	and.w	r3, r3, #8
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d005      	beq.n	8003e58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e4c:	4b53      	ldr	r3, [pc, #332]	; (8003f9c <HAL_RCC_ClockConfig+0x1bc>)
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	4a52      	ldr	r2, [pc, #328]	; (8003f9c <HAL_RCC_ClockConfig+0x1bc>)
 8003e52:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e58:	4b50      	ldr	r3, [pc, #320]	; (8003f9c <HAL_RCC_ClockConfig+0x1bc>)
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	494d      	ldr	r1, [pc, #308]	; (8003f9c <HAL_RCC_ClockConfig+0x1bc>)
 8003e66:	4313      	orrs	r3, r2
 8003e68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 0301 	and.w	r3, r3, #1
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d044      	beq.n	8003f00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d107      	bne.n	8003e8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e7e:	4b47      	ldr	r3, [pc, #284]	; (8003f9c <HAL_RCC_ClockConfig+0x1bc>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d119      	bne.n	8003ebe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e07f      	b.n	8003f8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	d003      	beq.n	8003e9e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e9a:	2b03      	cmp	r3, #3
 8003e9c:	d107      	bne.n	8003eae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e9e:	4b3f      	ldr	r3, [pc, #252]	; (8003f9c <HAL_RCC_ClockConfig+0x1bc>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d109      	bne.n	8003ebe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e06f      	b.n	8003f8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eae:	4b3b      	ldr	r3, [pc, #236]	; (8003f9c <HAL_RCC_ClockConfig+0x1bc>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0302 	and.w	r3, r3, #2
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d101      	bne.n	8003ebe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e067      	b.n	8003f8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ebe:	4b37      	ldr	r3, [pc, #220]	; (8003f9c <HAL_RCC_ClockConfig+0x1bc>)
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	f023 0203 	bic.w	r2, r3, #3
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	4934      	ldr	r1, [pc, #208]	; (8003f9c <HAL_RCC_ClockConfig+0x1bc>)
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ed0:	f7fd fa56 	bl	8001380 <HAL_GetTick>
 8003ed4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ed6:	e00a      	b.n	8003eee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ed8:	f7fd fa52 	bl	8001380 <HAL_GetTick>
 8003edc:	4602      	mov	r2, r0
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d901      	bls.n	8003eee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	e04f      	b.n	8003f8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eee:	4b2b      	ldr	r3, [pc, #172]	; (8003f9c <HAL_RCC_ClockConfig+0x1bc>)
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	f003 020c 	and.w	r2, r3, #12
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d1eb      	bne.n	8003ed8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f00:	4b25      	ldr	r3, [pc, #148]	; (8003f98 <HAL_RCC_ClockConfig+0x1b8>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0307 	and.w	r3, r3, #7
 8003f08:	683a      	ldr	r2, [r7, #0]
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d20c      	bcs.n	8003f28 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f0e:	4b22      	ldr	r3, [pc, #136]	; (8003f98 <HAL_RCC_ClockConfig+0x1b8>)
 8003f10:	683a      	ldr	r2, [r7, #0]
 8003f12:	b2d2      	uxtb	r2, r2
 8003f14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f16:	4b20      	ldr	r3, [pc, #128]	; (8003f98 <HAL_RCC_ClockConfig+0x1b8>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0307 	and.w	r3, r3, #7
 8003f1e:	683a      	ldr	r2, [r7, #0]
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d001      	beq.n	8003f28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	e032      	b.n	8003f8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 0304 	and.w	r3, r3, #4
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d008      	beq.n	8003f46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f34:	4b19      	ldr	r3, [pc, #100]	; (8003f9c <HAL_RCC_ClockConfig+0x1bc>)
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	4916      	ldr	r1, [pc, #88]	; (8003f9c <HAL_RCC_ClockConfig+0x1bc>)
 8003f42:	4313      	orrs	r3, r2
 8003f44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 0308 	and.w	r3, r3, #8
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d009      	beq.n	8003f66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f52:	4b12      	ldr	r3, [pc, #72]	; (8003f9c <HAL_RCC_ClockConfig+0x1bc>)
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	691b      	ldr	r3, [r3, #16]
 8003f5e:	00db      	lsls	r3, r3, #3
 8003f60:	490e      	ldr	r1, [pc, #56]	; (8003f9c <HAL_RCC_ClockConfig+0x1bc>)
 8003f62:	4313      	orrs	r3, r2
 8003f64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f66:	f000 f821 	bl	8003fac <HAL_RCC_GetSysClockFreq>
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	4b0b      	ldr	r3, [pc, #44]	; (8003f9c <HAL_RCC_ClockConfig+0x1bc>)
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	091b      	lsrs	r3, r3, #4
 8003f72:	f003 030f 	and.w	r3, r3, #15
 8003f76:	490a      	ldr	r1, [pc, #40]	; (8003fa0 <HAL_RCC_ClockConfig+0x1c0>)
 8003f78:	5ccb      	ldrb	r3, [r1, r3]
 8003f7a:	fa22 f303 	lsr.w	r3, r2, r3
 8003f7e:	4a09      	ldr	r2, [pc, #36]	; (8003fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8003f80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003f82:	4b09      	ldr	r3, [pc, #36]	; (8003fa8 <HAL_RCC_ClockConfig+0x1c8>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4618      	mov	r0, r3
 8003f88:	f7fd f9b6 	bl	80012f8 <HAL_InitTick>

  return HAL_OK;
 8003f8c:	2300      	movs	r3, #0
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3710      	adds	r7, #16
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	40023c00 	.word	0x40023c00
 8003f9c:	40023800 	.word	0x40023800
 8003fa0:	0800add4 	.word	0x0800add4
 8003fa4:	20000000 	.word	0x20000000
 8003fa8:	20000004 	.word	0x20000004

08003fac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fb0:	b090      	sub	sp, #64	; 0x40
 8003fb2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	637b      	str	r3, [r7, #52]	; 0x34
 8003fb8:	2300      	movs	r3, #0
 8003fba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003fc4:	4b59      	ldr	r3, [pc, #356]	; (800412c <HAL_RCC_GetSysClockFreq+0x180>)
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	f003 030c 	and.w	r3, r3, #12
 8003fcc:	2b08      	cmp	r3, #8
 8003fce:	d00d      	beq.n	8003fec <HAL_RCC_GetSysClockFreq+0x40>
 8003fd0:	2b08      	cmp	r3, #8
 8003fd2:	f200 80a1 	bhi.w	8004118 <HAL_RCC_GetSysClockFreq+0x16c>
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d002      	beq.n	8003fe0 <HAL_RCC_GetSysClockFreq+0x34>
 8003fda:	2b04      	cmp	r3, #4
 8003fdc:	d003      	beq.n	8003fe6 <HAL_RCC_GetSysClockFreq+0x3a>
 8003fde:	e09b      	b.n	8004118 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003fe0:	4b53      	ldr	r3, [pc, #332]	; (8004130 <HAL_RCC_GetSysClockFreq+0x184>)
 8003fe2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003fe4:	e09b      	b.n	800411e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003fe6:	4b53      	ldr	r3, [pc, #332]	; (8004134 <HAL_RCC_GetSysClockFreq+0x188>)
 8003fe8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003fea:	e098      	b.n	800411e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003fec:	4b4f      	ldr	r3, [pc, #316]	; (800412c <HAL_RCC_GetSysClockFreq+0x180>)
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ff4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ff6:	4b4d      	ldr	r3, [pc, #308]	; (800412c <HAL_RCC_GetSysClockFreq+0x180>)
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d028      	beq.n	8004054 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004002:	4b4a      	ldr	r3, [pc, #296]	; (800412c <HAL_RCC_GetSysClockFreq+0x180>)
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	099b      	lsrs	r3, r3, #6
 8004008:	2200      	movs	r2, #0
 800400a:	623b      	str	r3, [r7, #32]
 800400c:	627a      	str	r2, [r7, #36]	; 0x24
 800400e:	6a3b      	ldr	r3, [r7, #32]
 8004010:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004014:	2100      	movs	r1, #0
 8004016:	4b47      	ldr	r3, [pc, #284]	; (8004134 <HAL_RCC_GetSysClockFreq+0x188>)
 8004018:	fb03 f201 	mul.w	r2, r3, r1
 800401c:	2300      	movs	r3, #0
 800401e:	fb00 f303 	mul.w	r3, r0, r3
 8004022:	4413      	add	r3, r2
 8004024:	4a43      	ldr	r2, [pc, #268]	; (8004134 <HAL_RCC_GetSysClockFreq+0x188>)
 8004026:	fba0 1202 	umull	r1, r2, r0, r2
 800402a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800402c:	460a      	mov	r2, r1
 800402e:	62ba      	str	r2, [r7, #40]	; 0x28
 8004030:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004032:	4413      	add	r3, r2
 8004034:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004036:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004038:	2200      	movs	r2, #0
 800403a:	61bb      	str	r3, [r7, #24]
 800403c:	61fa      	str	r2, [r7, #28]
 800403e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004042:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004046:	f7fc f933 	bl	80002b0 <__aeabi_uldivmod>
 800404a:	4602      	mov	r2, r0
 800404c:	460b      	mov	r3, r1
 800404e:	4613      	mov	r3, r2
 8004050:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004052:	e053      	b.n	80040fc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004054:	4b35      	ldr	r3, [pc, #212]	; (800412c <HAL_RCC_GetSysClockFreq+0x180>)
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	099b      	lsrs	r3, r3, #6
 800405a:	2200      	movs	r2, #0
 800405c:	613b      	str	r3, [r7, #16]
 800405e:	617a      	str	r2, [r7, #20]
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004066:	f04f 0b00 	mov.w	fp, #0
 800406a:	4652      	mov	r2, sl
 800406c:	465b      	mov	r3, fp
 800406e:	f04f 0000 	mov.w	r0, #0
 8004072:	f04f 0100 	mov.w	r1, #0
 8004076:	0159      	lsls	r1, r3, #5
 8004078:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800407c:	0150      	lsls	r0, r2, #5
 800407e:	4602      	mov	r2, r0
 8004080:	460b      	mov	r3, r1
 8004082:	ebb2 080a 	subs.w	r8, r2, sl
 8004086:	eb63 090b 	sbc.w	r9, r3, fp
 800408a:	f04f 0200 	mov.w	r2, #0
 800408e:	f04f 0300 	mov.w	r3, #0
 8004092:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004096:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800409a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800409e:	ebb2 0408 	subs.w	r4, r2, r8
 80040a2:	eb63 0509 	sbc.w	r5, r3, r9
 80040a6:	f04f 0200 	mov.w	r2, #0
 80040aa:	f04f 0300 	mov.w	r3, #0
 80040ae:	00eb      	lsls	r3, r5, #3
 80040b0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040b4:	00e2      	lsls	r2, r4, #3
 80040b6:	4614      	mov	r4, r2
 80040b8:	461d      	mov	r5, r3
 80040ba:	eb14 030a 	adds.w	r3, r4, sl
 80040be:	603b      	str	r3, [r7, #0]
 80040c0:	eb45 030b 	adc.w	r3, r5, fp
 80040c4:	607b      	str	r3, [r7, #4]
 80040c6:	f04f 0200 	mov.w	r2, #0
 80040ca:	f04f 0300 	mov.w	r3, #0
 80040ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80040d2:	4629      	mov	r1, r5
 80040d4:	028b      	lsls	r3, r1, #10
 80040d6:	4621      	mov	r1, r4
 80040d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80040dc:	4621      	mov	r1, r4
 80040de:	028a      	lsls	r2, r1, #10
 80040e0:	4610      	mov	r0, r2
 80040e2:	4619      	mov	r1, r3
 80040e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040e6:	2200      	movs	r2, #0
 80040e8:	60bb      	str	r3, [r7, #8]
 80040ea:	60fa      	str	r2, [r7, #12]
 80040ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80040f0:	f7fc f8de 	bl	80002b0 <__aeabi_uldivmod>
 80040f4:	4602      	mov	r2, r0
 80040f6:	460b      	mov	r3, r1
 80040f8:	4613      	mov	r3, r2
 80040fa:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80040fc:	4b0b      	ldr	r3, [pc, #44]	; (800412c <HAL_RCC_GetSysClockFreq+0x180>)
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	0c1b      	lsrs	r3, r3, #16
 8004102:	f003 0303 	and.w	r3, r3, #3
 8004106:	3301      	adds	r3, #1
 8004108:	005b      	lsls	r3, r3, #1
 800410a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800410c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800410e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004110:	fbb2 f3f3 	udiv	r3, r2, r3
 8004114:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004116:	e002      	b.n	800411e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004118:	4b05      	ldr	r3, [pc, #20]	; (8004130 <HAL_RCC_GetSysClockFreq+0x184>)
 800411a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800411c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800411e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004120:	4618      	mov	r0, r3
 8004122:	3740      	adds	r7, #64	; 0x40
 8004124:	46bd      	mov	sp, r7
 8004126:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800412a:	bf00      	nop
 800412c:	40023800 	.word	0x40023800
 8004130:	00f42400 	.word	0x00f42400
 8004134:	017d7840 	.word	0x017d7840

08004138 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004138:	b480      	push	{r7}
 800413a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800413c:	4b03      	ldr	r3, [pc, #12]	; (800414c <HAL_RCC_GetHCLKFreq+0x14>)
 800413e:	681b      	ldr	r3, [r3, #0]
}
 8004140:	4618      	mov	r0, r3
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr
 800414a:	bf00      	nop
 800414c:	20000000 	.word	0x20000000

08004150 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004154:	f7ff fff0 	bl	8004138 <HAL_RCC_GetHCLKFreq>
 8004158:	4602      	mov	r2, r0
 800415a:	4b05      	ldr	r3, [pc, #20]	; (8004170 <HAL_RCC_GetPCLK1Freq+0x20>)
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	0a9b      	lsrs	r3, r3, #10
 8004160:	f003 0307 	and.w	r3, r3, #7
 8004164:	4903      	ldr	r1, [pc, #12]	; (8004174 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004166:	5ccb      	ldrb	r3, [r1, r3]
 8004168:	fa22 f303 	lsr.w	r3, r2, r3
}
 800416c:	4618      	mov	r0, r3
 800416e:	bd80      	pop	{r7, pc}
 8004170:	40023800 	.word	0x40023800
 8004174:	0800ade4 	.word	0x0800ade4

08004178 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800417c:	f7ff ffdc 	bl	8004138 <HAL_RCC_GetHCLKFreq>
 8004180:	4602      	mov	r2, r0
 8004182:	4b05      	ldr	r3, [pc, #20]	; (8004198 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	0b5b      	lsrs	r3, r3, #13
 8004188:	f003 0307 	and.w	r3, r3, #7
 800418c:	4903      	ldr	r1, [pc, #12]	; (800419c <HAL_RCC_GetPCLK2Freq+0x24>)
 800418e:	5ccb      	ldrb	r3, [r1, r3]
 8004190:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004194:	4618      	mov	r0, r3
 8004196:	bd80      	pop	{r7, pc}
 8004198:	40023800 	.word	0x40023800
 800419c:	0800ade4 	.word	0x0800ade4

080041a0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b082      	sub	sp, #8
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d101      	bne.n	80041b2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e022      	b.n	80041f8 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d105      	bne.n	80041ca <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f7fc fe31 	bl	8000e2c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2203      	movs	r2, #3
 80041ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f000 f814 	bl	8004200 <HAL_SD_InitCard>
 80041d8:	4603      	mov	r3, r0
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d001      	beq.n	80041e2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e00a      	b.n	80041f8 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2201      	movs	r2, #1
 80041f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80041f6:	2300      	movs	r3, #0
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3708      	adds	r7, #8
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}

08004200 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004200:	b5b0      	push	{r4, r5, r7, lr}
 8004202:	b08e      	sub	sp, #56	; 0x38
 8004204:	af04      	add	r7, sp, #16
 8004206:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8004208:	2300      	movs	r3, #0
 800420a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800420c:	2300      	movs	r3, #0
 800420e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8004210:	2300      	movs	r3, #0
 8004212:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8004214:	2300      	movs	r3, #0
 8004216:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8004218:	2300      	movs	r3, #0
 800421a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800421c:	2376      	movs	r3, #118	; 0x76
 800421e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681d      	ldr	r5, [r3, #0]
 8004224:	466c      	mov	r4, sp
 8004226:	f107 0314 	add.w	r3, r7, #20
 800422a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800422e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004232:	f107 0308 	add.w	r3, r7, #8
 8004236:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004238:	4628      	mov	r0, r5
 800423a:	f001 fef7 	bl	800602c <SDIO_Init>
 800423e:	4603      	mov	r3, r0
 8004240:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8004244:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004248:	2b00      	cmp	r3, #0
 800424a:	d001      	beq.n	8004250 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	e04f      	b.n	80042f0 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8004250:	4b29      	ldr	r3, [pc, #164]	; (80042f8 <HAL_SD_InitCard+0xf8>)
 8004252:	2200      	movs	r2, #0
 8004254:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4618      	mov	r0, r3
 800425c:	f001 ff2f 	bl	80060be <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8004260:	4b25      	ldr	r3, [pc, #148]	; (80042f8 <HAL_SD_InitCard+0xf8>)
 8004262:	2201      	movs	r2, #1
 8004264:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8004266:	2002      	movs	r0, #2
 8004268:	f7fd f896 	bl	8001398 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f001 f805 	bl	800527c <SD_PowerON>
 8004272:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004274:	6a3b      	ldr	r3, [r7, #32]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d00b      	beq.n	8004292 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2201      	movs	r2, #1
 800427e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004286:	6a3b      	ldr	r3, [r7, #32]
 8004288:	431a      	orrs	r2, r3
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e02e      	b.n	80042f0 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f000 ff24 	bl	80050e0 <SD_InitCard>
 8004298:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800429a:	6a3b      	ldr	r3, [r7, #32]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d00b      	beq.n	80042b8 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2201      	movs	r2, #1
 80042a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042ac:	6a3b      	ldr	r3, [r7, #32]
 80042ae:	431a      	orrs	r2, r3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e01b      	b.n	80042f0 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80042c0:	4618      	mov	r0, r3
 80042c2:	f001 ff8e 	bl	80061e2 <SDMMC_CmdBlockLength>
 80042c6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80042c8:	6a3b      	ldr	r3, [r7, #32]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d00f      	beq.n	80042ee <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a0a      	ldr	r2, [pc, #40]	; (80042fc <HAL_SD_InitCard+0xfc>)
 80042d4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042da:	6a3b      	ldr	r3, [r7, #32]
 80042dc:	431a      	orrs	r2, r3
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2201      	movs	r2, #1
 80042e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e000      	b.n	80042f0 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 80042ee:	2300      	movs	r3, #0
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3728      	adds	r7, #40	; 0x28
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bdb0      	pop	{r4, r5, r7, pc}
 80042f8:	422580a0 	.word	0x422580a0
 80042fc:	004005ff 	.word	0x004005ff

08004300 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b08c      	sub	sp, #48	; 0x30
 8004304:	af00      	add	r7, sp, #0
 8004306:	60f8      	str	r0, [r7, #12]
 8004308:	60b9      	str	r1, [r7, #8]
 800430a:	607a      	str	r2, [r7, #4]
 800430c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d107      	bne.n	8004328 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800431c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	e0c0      	b.n	80044aa <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800432e:	b2db      	uxtb	r3, r3
 8004330:	2b01      	cmp	r3, #1
 8004332:	f040 80b9 	bne.w	80044a8 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2200      	movs	r2, #0
 800433a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800433c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	441a      	add	r2, r3
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004346:	429a      	cmp	r2, r3
 8004348:	d907      	bls.n	800435a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800434e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e0a7      	b.n	80044aa <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2203      	movs	r2, #3
 800435e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	2200      	movs	r2, #0
 8004368:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004370:	68fa      	ldr	r2, [r7, #12]
 8004372:	6812      	ldr	r2, [r2, #0]
 8004374:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8004378:	f043 0302 	orr.w	r3, r3, #2
 800437c:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004382:	4a4c      	ldr	r2, [pc, #304]	; (80044b4 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8004384:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438a:	4a4b      	ldr	r2, [pc, #300]	; (80044b8 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800438c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004392:	2200      	movs	r2, #0
 8004394:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439a:	2200      	movs	r2, #0
 800439c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ae:	689a      	ldr	r2, [r3, #8]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	430a      	orrs	r2, r1
 80043b8:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	3380      	adds	r3, #128	; 0x80
 80043c4:	4619      	mov	r1, r3
 80043c6:	68ba      	ldr	r2, [r7, #8]
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	025b      	lsls	r3, r3, #9
 80043cc:	089b      	lsrs	r3, r3, #2
 80043ce:	f7fd f9c7 	bl	8001760 <HAL_DMA_Start_IT>
 80043d2:	4603      	mov	r3, r0
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d017      	beq.n	8004408 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 80043e6:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a33      	ldr	r2, [pc, #204]	; (80044bc <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80043ee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043f4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	e050      	b.n	80044aa <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8004408:	4b2d      	ldr	r3, [pc, #180]	; (80044c0 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800440a:	2201      	movs	r2, #1
 800440c:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004412:	2b01      	cmp	r3, #1
 8004414:	d002      	beq.n	800441c <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 8004416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004418:	025b      	lsls	r3, r3, #9
 800441a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800441c:	f04f 33ff 	mov.w	r3, #4294967295
 8004420:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	025b      	lsls	r3, r3, #9
 8004426:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8004428:	2390      	movs	r3, #144	; 0x90
 800442a:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800442c:	2302      	movs	r3, #2
 800442e:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004430:	2300      	movs	r3, #0
 8004432:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8004434:	2301      	movs	r3, #1
 8004436:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f107 0210 	add.w	r2, r7, #16
 8004440:	4611      	mov	r1, r2
 8004442:	4618      	mov	r0, r3
 8004444:	f001 fea1 	bl	800618a <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	2b01      	cmp	r3, #1
 800444c:	d90a      	bls.n	8004464 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2282      	movs	r2, #130	; 0x82
 8004452:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800445a:	4618      	mov	r0, r3
 800445c:	f001 ff05 	bl	800626a <SDMMC_CmdReadMultiBlock>
 8004460:	62f8      	str	r0, [r7, #44]	; 0x2c
 8004462:	e009      	b.n	8004478 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2281      	movs	r2, #129	; 0x81
 8004468:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004470:	4618      	mov	r0, r3
 8004472:	f001 fed8 	bl	8006226 <SDMMC_CmdReadSingleBlock>
 8004476:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8004478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800447a:	2b00      	cmp	r3, #0
 800447c:	d012      	beq.n	80044a4 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a0e      	ldr	r2, [pc, #56]	; (80044bc <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8004484:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800448a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800448c:	431a      	orrs	r2, r3
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2201      	movs	r2, #1
 8004496:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2200      	movs	r2, #0
 800449e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e002      	b.n	80044aa <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 80044a4:	2300      	movs	r3, #0
 80044a6:	e000      	b.n	80044aa <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 80044a8:	2302      	movs	r3, #2
  }
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3730      	adds	r7, #48	; 0x30
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
 80044b2:	bf00      	nop
 80044b4:	08004eef 	.word	0x08004eef
 80044b8:	08004f61 	.word	0x08004f61
 80044bc:	004005ff 	.word	0x004005ff
 80044c0:	4225858c 	.word	0x4225858c

080044c4 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b08c      	sub	sp, #48	; 0x30
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	60f8      	str	r0, [r7, #12]
 80044cc:	60b9      	str	r1, [r7, #8]
 80044ce:	607a      	str	r2, [r7, #4]
 80044d0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d107      	bne.n	80044ec <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	e0c5      	b.n	8004678 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	f040 80be 	bne.w	8004676 <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2200      	movs	r2, #0
 80044fe:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004500:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	441a      	add	r2, r3
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800450a:	429a      	cmp	r2, r3
 800450c:	d907      	bls.n	800451e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004512:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e0ac      	b.n	8004678 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2203      	movs	r2, #3
 8004522:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	2200      	movs	r2, #0
 800452c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004534:	68fa      	ldr	r2, [r7, #12]
 8004536:	6812      	ldr	r2, [r2, #0]
 8004538:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 800453c:	f043 0302 	orr.w	r3, r3, #2
 8004540:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004546:	4a4e      	ldr	r2, [pc, #312]	; (8004680 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8004548:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800454e:	4a4d      	ldr	r2, [pc, #308]	; (8004684 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8004550:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004556:	2200      	movs	r2, #0
 8004558:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800455e:	2b01      	cmp	r3, #1
 8004560:	d002      	beq.n	8004568 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8004562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004564:	025b      	lsls	r3, r3, #9
 8004566:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	2b01      	cmp	r3, #1
 800456c:	d90a      	bls.n	8004584 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	22a0      	movs	r2, #160	; 0xa0
 8004572:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800457a:	4618      	mov	r0, r3
 800457c:	f001 feb9 	bl	80062f2 <SDMMC_CmdWriteMultiBlock>
 8004580:	62f8      	str	r0, [r7, #44]	; 0x2c
 8004582:	e009      	b.n	8004598 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2290      	movs	r2, #144	; 0x90
 8004588:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004590:	4618      	mov	r0, r3
 8004592:	f001 fe8c 	bl	80062ae <SDMMC_CmdWriteSingleBlock>
 8004596:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8004598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800459a:	2b00      	cmp	r3, #0
 800459c:	d012      	beq.n	80045c4 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a39      	ldr	r2, [pc, #228]	; (8004688 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80045a4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ac:	431a      	orrs	r2, r3
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2201      	movs	r2, #1
 80045b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2200      	movs	r2, #0
 80045be:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	e059      	b.n	8004678 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80045c4:	4b31      	ldr	r3, [pc, #196]	; (800468c <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80045c6:	2201      	movs	r2, #1
 80045c8:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ce:	2240      	movs	r2, #64	; 0x40
 80045d0:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045e2:	689a      	ldr	r2, [r3, #8]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	430a      	orrs	r2, r1
 80045ec:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80045f2:	68b9      	ldr	r1, [r7, #8]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	3380      	adds	r3, #128	; 0x80
 80045fa:	461a      	mov	r2, r3
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	025b      	lsls	r3, r3, #9
 8004600:	089b      	lsrs	r3, r3, #2
 8004602:	f7fd f8ad 	bl	8001760 <HAL_DMA_Start_IT>
 8004606:	4603      	mov	r3, r0
 8004608:	2b00      	cmp	r3, #0
 800460a:	d01c      	beq.n	8004646 <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004612:	68fa      	ldr	r2, [r7, #12]
 8004614:	6812      	ldr	r2, [r2, #0]
 8004616:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 800461a:	f023 0302 	bic.w	r3, r3, #2
 800461e:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a18      	ldr	r2, [pc, #96]	; (8004688 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8004626:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800462c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2200      	movs	r2, #0
 8004640:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e018      	b.n	8004678 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004646:	f04f 33ff 	mov.w	r3, #4294967295
 800464a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	025b      	lsls	r3, r3, #9
 8004650:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8004652:	2390      	movs	r3, #144	; 0x90
 8004654:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8004656:	2300      	movs	r3, #0
 8004658:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800465a:	2300      	movs	r3, #0
 800465c:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800465e:	2301      	movs	r3, #1
 8004660:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f107 0210 	add.w	r2, r7, #16
 800466a:	4611      	mov	r1, r2
 800466c:	4618      	mov	r0, r3
 800466e:	f001 fd8c 	bl	800618a <SDIO_ConfigData>

      return HAL_OK;
 8004672:	2300      	movs	r3, #0
 8004674:	e000      	b.n	8004678 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 8004676:	2302      	movs	r3, #2
  }
}
 8004678:	4618      	mov	r0, r3
 800467a:	3730      	adds	r7, #48	; 0x30
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}
 8004680:	08004ec5 	.word	0x08004ec5
 8004684:	08004f61 	.word	0x08004f61
 8004688:	004005ff 	.word	0x004005ff
 800468c:	4225858c 	.word	0x4225858c

08004690 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b084      	sub	sp, #16
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800469c:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d008      	beq.n	80046be <HAL_SD_IRQHandler+0x2e>
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f003 0308 	and.w	r3, r3, #8
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d003      	beq.n	80046be <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f001 f806 	bl	80056c8 <SD_Read_IT>
 80046bc:	e165      	b.n	800498a <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	f000 808f 	beq.w	80047ec <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80046d6:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	6812      	ldr	r2, [r2, #0]
 80046e2:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 80046e6:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 80046ea:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f022 0201 	bic.w	r2, r2, #1
 80046fa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f003 0308 	and.w	r3, r3, #8
 8004702:	2b00      	cmp	r3, #0
 8004704:	d039      	beq.n	800477a <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	f003 0302 	and.w	r3, r3, #2
 800470c:	2b00      	cmp	r3, #0
 800470e:	d104      	bne.n	800471a <HAL_SD_IRQHandler+0x8a>
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f003 0320 	and.w	r3, r3, #32
 8004716:	2b00      	cmp	r3, #0
 8004718:	d011      	beq.n	800473e <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4618      	mov	r0, r3
 8004720:	f001 fe0a 	bl	8006338 <SDMMC_CmdStopTransfer>
 8004724:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d008      	beq.n	800473e <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	431a      	orrs	r2, r3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f000 f92f 	bl	800499c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f240 523a 	movw	r2, #1338	; 0x53a
 8004746:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	f003 0301 	and.w	r3, r3, #1
 800475c:	2b00      	cmp	r3, #0
 800475e:	d104      	bne.n	800476a <HAL_SD_IRQHandler+0xda>
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f003 0302 	and.w	r3, r3, #2
 8004766:	2b00      	cmp	r3, #0
 8004768:	d003      	beq.n	8004772 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f002 fa78 	bl	8006c60 <HAL_SD_RxCpltCallback>
 8004770:	e10b      	b.n	800498a <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f002 fa6a 	bl	8006c4c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004778:	e107      	b.n	800498a <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004780:	2b00      	cmp	r3, #0
 8004782:	f000 8102 	beq.w	800498a <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	f003 0320 	and.w	r3, r3, #32
 800478c:	2b00      	cmp	r3, #0
 800478e:	d011      	beq.n	80047b4 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4618      	mov	r0, r3
 8004796:	f001 fdcf 	bl	8006338 <SDMMC_CmdStopTransfer>
 800479a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d008      	beq.n	80047b4 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	431a      	orrs	r2, r3
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f000 f8f4 	bl	800499c <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f003 0301 	and.w	r3, r3, #1
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	f040 80e5 	bne.w	800498a <HAL_SD_IRQHandler+0x2fa>
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f003 0302 	and.w	r3, r3, #2
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	f040 80df 	bne.w	800498a <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f022 0208 	bic.w	r2, r2, #8
 80047da:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f002 fa31 	bl	8006c4c <HAL_SD_TxCpltCallback>
}
 80047ea:	e0ce      	b.n	800498a <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d008      	beq.n	800480c <HAL_SD_IRQHandler+0x17c>
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	f003 0308 	and.w	r3, r3, #8
 8004800:	2b00      	cmp	r3, #0
 8004802:	d003      	beq.n	800480c <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f000 ffb0 	bl	800576a <SD_Write_IT>
 800480a:	e0be      	b.n	800498a <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004812:	f240 233a 	movw	r3, #570	; 0x23a
 8004816:	4013      	ands	r3, r2
 8004818:	2b00      	cmp	r3, #0
 800481a:	f000 80b6 	beq.w	800498a <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004824:	f003 0302 	and.w	r3, r3, #2
 8004828:	2b00      	cmp	r3, #0
 800482a:	d005      	beq.n	8004838 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004830:	f043 0202 	orr.w	r2, r3, #2
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800483e:	f003 0308 	and.w	r3, r3, #8
 8004842:	2b00      	cmp	r3, #0
 8004844:	d005      	beq.n	8004852 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800484a:	f043 0208 	orr.w	r2, r3, #8
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004858:	f003 0320 	and.w	r3, r3, #32
 800485c:	2b00      	cmp	r3, #0
 800485e:	d005      	beq.n	800486c <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004864:	f043 0220 	orr.w	r2, r3, #32
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004872:	f003 0310 	and.w	r3, r3, #16
 8004876:	2b00      	cmp	r3, #0
 8004878:	d005      	beq.n	8004886 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800487e:	f043 0210 	orr.w	r2, r3, #16
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800488c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004890:	2b00      	cmp	r3, #0
 8004892:	d005      	beq.n	80048a0 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004898:	f043 0208 	orr.w	r2, r3, #8
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f240 723a 	movw	r2, #1850	; 0x73a
 80048a8:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048b0:	687a      	ldr	r2, [r7, #4]
 80048b2:	6812      	ldr	r2, [r2, #0]
 80048b4:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 80048b8:	f023 0302 	bic.w	r3, r3, #2
 80048bc:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4618      	mov	r0, r3
 80048c4:	f001 fd38 	bl	8006338 <SDMMC_CmdStopTransfer>
 80048c8:	4602      	mov	r2, r0
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ce:	431a      	orrs	r2, r3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f003 0308 	and.w	r3, r3, #8
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d00a      	beq.n	80048f4 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2201      	movs	r2, #1
 80048e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2200      	movs	r2, #0
 80048ea:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f000 f855 	bl	800499c <HAL_SD_ErrorCallback>
}
 80048f2:	e04a      	b.n	800498a <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d045      	beq.n	800498a <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	f003 0310 	and.w	r3, r3, #16
 8004904:	2b00      	cmp	r3, #0
 8004906:	d104      	bne.n	8004912 <HAL_SD_IRQHandler+0x282>
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f003 0320 	and.w	r3, r3, #32
 800490e:	2b00      	cmp	r3, #0
 8004910:	d011      	beq.n	8004936 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004916:	4a1f      	ldr	r2, [pc, #124]	; (8004994 <HAL_SD_IRQHandler+0x304>)
 8004918:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800491e:	4618      	mov	r0, r3
 8004920:	f7fc ff76 	bl	8001810 <HAL_DMA_Abort_IT>
 8004924:	4603      	mov	r3, r0
 8004926:	2b00      	cmp	r3, #0
 8004928:	d02f      	beq.n	800498a <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800492e:	4618      	mov	r0, r3
 8004930:	f000 fb68 	bl	8005004 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8004934:	e029      	b.n	800498a <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	f003 0301 	and.w	r3, r3, #1
 800493c:	2b00      	cmp	r3, #0
 800493e:	d104      	bne.n	800494a <HAL_SD_IRQHandler+0x2ba>
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f003 0302 	and.w	r3, r3, #2
 8004946:	2b00      	cmp	r3, #0
 8004948:	d011      	beq.n	800496e <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494e:	4a12      	ldr	r2, [pc, #72]	; (8004998 <HAL_SD_IRQHandler+0x308>)
 8004950:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004956:	4618      	mov	r0, r3
 8004958:	f7fc ff5a 	bl	8001810 <HAL_DMA_Abort_IT>
 800495c:	4603      	mov	r3, r0
 800495e:	2b00      	cmp	r3, #0
 8004960:	d013      	beq.n	800498a <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004966:	4618      	mov	r0, r3
 8004968:	f000 fb83 	bl	8005072 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800496c:	e00d      	b.n	800498a <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2200      	movs	r2, #0
 8004980:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f002 f958 	bl	8006c38 <HAL_SD_AbortCallback>
}
 8004988:	e7ff      	b.n	800498a <HAL_SD_IRQHandler+0x2fa>
 800498a:	bf00      	nop
 800498c:	3710      	adds	r7, #16
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}
 8004992:	bf00      	nop
 8004994:	08005005 	.word	0x08005005
 8004998:	08005073 	.word	0x08005073

0800499c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800499c:	b480      	push	{r7}
 800499e:	b083      	sub	sp, #12
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80049a4:	bf00      	nop
 80049a6:	370c      	adds	r7, #12
 80049a8:	46bd      	mov	sp, r7
 80049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ae:	4770      	bx	lr

080049b0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b083      	sub	sp, #12
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049be:	0f9b      	lsrs	r3, r3, #30
 80049c0:	b2da      	uxtb	r2, r3
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049ca:	0e9b      	lsrs	r3, r3, #26
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	f003 030f 	and.w	r3, r3, #15
 80049d2:	b2da      	uxtb	r2, r3
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049dc:	0e1b      	lsrs	r3, r3, #24
 80049de:	b2db      	uxtb	r3, r3
 80049e0:	f003 0303 	and.w	r3, r3, #3
 80049e4:	b2da      	uxtb	r2, r3
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049ee:	0c1b      	lsrs	r3, r3, #16
 80049f0:	b2da      	uxtb	r2, r3
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049fa:	0a1b      	lsrs	r3, r3, #8
 80049fc:	b2da      	uxtb	r2, r3
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a06:	b2da      	uxtb	r2, r3
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a10:	0d1b      	lsrs	r3, r3, #20
 8004a12:	b29a      	uxth	r2, r3
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a1c:	0c1b      	lsrs	r3, r3, #16
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	f003 030f 	and.w	r3, r3, #15
 8004a24:	b2da      	uxtb	r2, r3
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a2e:	0bdb      	lsrs	r3, r3, #15
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	f003 0301 	and.w	r3, r3, #1
 8004a36:	b2da      	uxtb	r2, r3
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a40:	0b9b      	lsrs	r3, r3, #14
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	f003 0301 	and.w	r3, r3, #1
 8004a48:	b2da      	uxtb	r2, r3
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a52:	0b5b      	lsrs	r3, r3, #13
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	f003 0301 	and.w	r3, r3, #1
 8004a5a:	b2da      	uxtb	r2, r3
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a64:	0b1b      	lsrs	r3, r3, #12
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	f003 0301 	and.w	r3, r3, #1
 8004a6c:	b2da      	uxtb	r2, r3
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	2200      	movs	r2, #0
 8004a76:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d163      	bne.n	8004b48 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a84:	009a      	lsls	r2, r3, #2
 8004a86:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004a90:	0f92      	lsrs	r2, r2, #30
 8004a92:	431a      	orrs	r2, r3
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a9c:	0edb      	lsrs	r3, r3, #27
 8004a9e:	b2db      	uxtb	r3, r3
 8004aa0:	f003 0307 	and.w	r3, r3, #7
 8004aa4:	b2da      	uxtb	r2, r3
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004aae:	0e1b      	lsrs	r3, r3, #24
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	f003 0307 	and.w	r3, r3, #7
 8004ab6:	b2da      	uxtb	r2, r3
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ac0:	0d5b      	lsrs	r3, r3, #21
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	f003 0307 	and.w	r3, r3, #7
 8004ac8:	b2da      	uxtb	r2, r3
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ad2:	0c9b      	lsrs	r3, r3, #18
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	f003 0307 	and.w	r3, r3, #7
 8004ada:	b2da      	uxtb	r2, r3
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ae4:	0bdb      	lsrs	r3, r3, #15
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	f003 0307 	and.w	r3, r3, #7
 8004aec:	b2da      	uxtb	r2, r3
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	691b      	ldr	r3, [r3, #16]
 8004af6:	1c5a      	adds	r2, r3, #1
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	7e1b      	ldrb	r3, [r3, #24]
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	f003 0307 	and.w	r3, r3, #7
 8004b06:	3302      	adds	r3, #2
 8004b08:	2201      	movs	r2, #1
 8004b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004b12:	fb03 f202 	mul.w	r2, r3, r2
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	7a1b      	ldrb	r3, [r3, #8]
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	f003 030f 	and.w	r3, r3, #15
 8004b24:	2201      	movs	r2, #1
 8004b26:	409a      	lsls	r2, r3
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b30:	687a      	ldr	r2, [r7, #4]
 8004b32:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004b34:	0a52      	lsrs	r2, r2, #9
 8004b36:	fb03 f202 	mul.w	r2, r3, r2
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b44:	661a      	str	r2, [r3, #96]	; 0x60
 8004b46:	e031      	b.n	8004bac <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d11d      	bne.n	8004b8c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b54:	041b      	lsls	r3, r3, #16
 8004b56:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b5e:	0c1b      	lsrs	r3, r3, #16
 8004b60:	431a      	orrs	r2, r3
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	691b      	ldr	r3, [r3, #16]
 8004b6a:	3301      	adds	r3, #1
 8004b6c:	029a      	lsls	r2, r3, #10
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b80:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	661a      	str	r2, [r3, #96]	; 0x60
 8004b8a:	e00f      	b.n	8004bac <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a58      	ldr	r2, [pc, #352]	; (8004cf4 <HAL_SD_GetCardCSD+0x344>)
 8004b92:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b98:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	e09d      	b.n	8004ce8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bb0:	0b9b      	lsrs	r3, r3, #14
 8004bb2:	b2db      	uxtb	r3, r3
 8004bb4:	f003 0301 	and.w	r3, r3, #1
 8004bb8:	b2da      	uxtb	r2, r3
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bc2:	09db      	lsrs	r3, r3, #7
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bca:	b2da      	uxtb	r2, r3
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bda:	b2da      	uxtb	r2, r3
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004be4:	0fdb      	lsrs	r3, r3, #31
 8004be6:	b2da      	uxtb	r2, r3
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bf0:	0f5b      	lsrs	r3, r3, #29
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	f003 0303 	and.w	r3, r3, #3
 8004bf8:	b2da      	uxtb	r2, r3
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c02:	0e9b      	lsrs	r3, r3, #26
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	f003 0307 	and.w	r3, r3, #7
 8004c0a:	b2da      	uxtb	r2, r3
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c14:	0d9b      	lsrs	r3, r3, #22
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	f003 030f 	and.w	r3, r3, #15
 8004c1c:	b2da      	uxtb	r2, r3
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c26:	0d5b      	lsrs	r3, r3, #21
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	f003 0301 	and.w	r3, r3, #1
 8004c2e:	b2da      	uxtb	r2, r3
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c42:	0c1b      	lsrs	r3, r3, #16
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	f003 0301 	and.w	r3, r3, #1
 8004c4a:	b2da      	uxtb	r2, r3
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c56:	0bdb      	lsrs	r3, r3, #15
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	f003 0301 	and.w	r3, r3, #1
 8004c5e:	b2da      	uxtb	r2, r3
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c6a:	0b9b      	lsrs	r3, r3, #14
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	f003 0301 	and.w	r3, r3, #1
 8004c72:	b2da      	uxtb	r2, r3
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c7e:	0b5b      	lsrs	r3, r3, #13
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	f003 0301 	and.w	r3, r3, #1
 8004c86:	b2da      	uxtb	r2, r3
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c92:	0b1b      	lsrs	r3, r3, #12
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	f003 0301 	and.w	r3, r3, #1
 8004c9a:	b2da      	uxtb	r2, r3
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ca6:	0a9b      	lsrs	r3, r3, #10
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	f003 0303 	and.w	r3, r3, #3
 8004cae:	b2da      	uxtb	r2, r3
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cba:	0a1b      	lsrs	r3, r3, #8
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	f003 0303 	and.w	r3, r3, #3
 8004cc2:	b2da      	uxtb	r2, r3
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cce:	085b      	lsrs	r3, r3, #1
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cd6:	b2da      	uxtb	r2, r3
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8004ce6:	2300      	movs	r3, #0
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	370c      	adds	r7, #12
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr
 8004cf4:	004005ff 	.word	0x004005ff

08004cf8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b083      	sub	sp, #12
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8004d42:	2300      	movs	r3, #0
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	370c      	adds	r7, #12
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr

08004d50 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8004d50:	b5b0      	push	{r4, r5, r7, lr}
 8004d52:	b08e      	sub	sp, #56	; 0x38
 8004d54:	af04      	add	r7, sp, #16
 8004d56:	6078      	str	r0, [r7, #4]
 8004d58:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2203      	movs	r2, #3
 8004d64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d6c:	2b03      	cmp	r3, #3
 8004d6e:	d02e      	beq.n	8004dce <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d76:	d106      	bne.n	8004d86 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d7c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	639a      	str	r2, [r3, #56]	; 0x38
 8004d84:	e029      	b.n	8004dda <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d8c:	d10a      	bne.n	8004da4 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f000 fb2a 	bl	80053e8 <SD_WideBus_Enable>
 8004d94:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d9a:	6a3b      	ldr	r3, [r7, #32]
 8004d9c:	431a      	orrs	r2, r3
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	639a      	str	r2, [r3, #56]	; 0x38
 8004da2:	e01a      	b.n	8004dda <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d10a      	bne.n	8004dc0 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f000 fb67 	bl	800547e <SD_WideBus_Disable>
 8004db0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004db6:	6a3b      	ldr	r3, [r7, #32]
 8004db8:	431a      	orrs	r2, r3
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	639a      	str	r2, [r3, #56]	; 0x38
 8004dbe:	e00c      	b.n	8004dda <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	639a      	str	r2, [r3, #56]	; 0x38
 8004dcc:	e005      	b.n	8004dda <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d00b      	beq.n	8004dfa <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a26      	ldr	r2, [pc, #152]	; (8004e80 <HAL_SD_ConfigWideBusOperation+0x130>)
 8004de8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2201      	movs	r2, #1
 8004dee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004df8:	e01f      	b.n	8004e3a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	68db      	ldr	r3, [r3, #12]
 8004e0a:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	695b      	ldr	r3, [r3, #20]
 8004e14:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	699b      	ldr	r3, [r3, #24]
 8004e1a:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681d      	ldr	r5, [r3, #0]
 8004e20:	466c      	mov	r4, sp
 8004e22:	f107 0314 	add.w	r3, r7, #20
 8004e26:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004e2a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004e2e:	f107 0308 	add.w	r3, r7, #8
 8004e32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004e34:	4628      	mov	r0, r5
 8004e36:	f001 f8f9 	bl	800602c <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004e42:	4618      	mov	r0, r3
 8004e44:	f001 f9cd 	bl	80061e2 <SDMMC_CmdBlockLength>
 8004e48:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004e4a:	6a3b      	ldr	r3, [r7, #32]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d00c      	beq.n	8004e6a <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a0a      	ldr	r2, [pc, #40]	; (8004e80 <HAL_SD_ConfigWideBusOperation+0x130>)
 8004e56:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e5c:	6a3b      	ldr	r3, [r7, #32]
 8004e5e:	431a      	orrs	r2, r3
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8004e72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3728      	adds	r7, #40	; 0x28
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bdb0      	pop	{r4, r5, r7, pc}
 8004e7e:	bf00      	nop
 8004e80:	004005ff 	.word	0x004005ff

08004e84 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b086      	sub	sp, #24
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8004e90:	f107 030c 	add.w	r3, r7, #12
 8004e94:	4619      	mov	r1, r3
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f000 fa7e 	bl	8005398 <SD_SendStatus>
 8004e9c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d005      	beq.n	8004eb0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	431a      	orrs	r2, r3
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	0a5b      	lsrs	r3, r3, #9
 8004eb4:	f003 030f 	and.w	r3, r3, #15
 8004eb8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8004eba:	693b      	ldr	r3, [r7, #16]
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3718      	adds	r7, #24
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}

08004ec4 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b085      	sub	sp, #20
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed0:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ee0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8004ee2:	bf00      	nop
 8004ee4:	3714      	adds	r7, #20
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eec:	4770      	bx	lr

08004eee <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004eee:	b580      	push	{r7, lr}
 8004ef0:	b084      	sub	sp, #16
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004efa:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f00:	2b82      	cmp	r3, #130	; 0x82
 8004f02:	d111      	bne.n	8004f28 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f001 fa15 	bl	8006338 <SDMMC_CmdStopTransfer>
 8004f0e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d008      	beq.n	8004f28 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	431a      	orrs	r2, r3
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8004f22:	68f8      	ldr	r0, [r7, #12]
 8004f24:	f7ff fd3a 	bl	800499c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f022 0208 	bic.w	r2, r2, #8
 8004f36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f240 523a 	movw	r2, #1338	; 0x53a
 8004f40:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2201      	movs	r2, #1
 8004f46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8004f50:	68f8      	ldr	r0, [r7, #12]
 8004f52:	f001 fe85 	bl	8006c60 <HAL_SD_RxCpltCallback>
#endif
}
 8004f56:	bf00      	nop
 8004f58:	3710      	adds	r7, #16
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}
	...

08004f60 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b086      	sub	sp, #24
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f6c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f7fc fdfa 	bl	8001b68 <HAL_DMA_GetError>
 8004f74:	4603      	mov	r3, r0
 8004f76:	2b02      	cmp	r3, #2
 8004f78:	d03e      	beq.n	8004ff8 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f80:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f88:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d002      	beq.n	8004f96 <SD_DMAError+0x36>
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d12d      	bne.n	8004ff2 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a19      	ldr	r2, [pc, #100]	; (8005000 <SD_DMAError+0xa0>)
 8004f9c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8004fac:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8004fba:	6978      	ldr	r0, [r7, #20]
 8004fbc:	f7ff ff62 	bl	8004e84 <HAL_SD_GetCardState>
 8004fc0:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	2b06      	cmp	r3, #6
 8004fc6:	d002      	beq.n	8004fce <SD_DMAError+0x6e>
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	2b05      	cmp	r3, #5
 8004fcc:	d10a      	bne.n	8004fe4 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f001 f9b0 	bl	8006338 <SDMMC_CmdStopTransfer>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fde:	431a      	orrs	r2, r3
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8004ff2:	6978      	ldr	r0, [r7, #20]
 8004ff4:	f7ff fcd2 	bl	800499c <HAL_SD_ErrorCallback>
#endif
  }
}
 8004ff8:	bf00      	nop
 8004ffa:	3718      	adds	r7, #24
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}
 8005000:	004005ff 	.word	0x004005ff

08005004 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b084      	sub	sp, #16
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005010:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f240 523a 	movw	r2, #1338	; 0x53a
 800501a:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800501c:	68f8      	ldr	r0, [r7, #12]
 800501e:	f7ff ff31 	bl	8004e84 <HAL_SD_GetCardState>
 8005022:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2200      	movs	r2, #0
 8005030:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	2b06      	cmp	r3, #6
 8005036:	d002      	beq.n	800503e <SD_DMATxAbort+0x3a>
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	2b05      	cmp	r3, #5
 800503c:	d10a      	bne.n	8005054 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4618      	mov	r0, r3
 8005044:	f001 f978 	bl	8006338 <SDMMC_CmdStopTransfer>
 8005048:	4602      	mov	r2, r0
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800504e:	431a      	orrs	r2, r3
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005058:	2b00      	cmp	r3, #0
 800505a:	d103      	bne.n	8005064 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800505c:	68f8      	ldr	r0, [r7, #12]
 800505e:	f001 fdeb 	bl	8006c38 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8005062:	e002      	b.n	800506a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8005064:	68f8      	ldr	r0, [r7, #12]
 8005066:	f7ff fc99 	bl	800499c <HAL_SD_ErrorCallback>
}
 800506a:	bf00      	nop
 800506c:	3710      	adds	r7, #16
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}

08005072 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8005072:	b580      	push	{r7, lr}
 8005074:	b084      	sub	sp, #16
 8005076:	af00      	add	r7, sp, #0
 8005078:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800507e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f240 523a 	movw	r2, #1338	; 0x53a
 8005088:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800508a:	68f8      	ldr	r0, [r7, #12]
 800508c:	f7ff fefa 	bl	8004e84 <HAL_SD_GetCardState>
 8005090:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2201      	movs	r2, #1
 8005096:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2200      	movs	r2, #0
 800509e:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	2b06      	cmp	r3, #6
 80050a4:	d002      	beq.n	80050ac <SD_DMARxAbort+0x3a>
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	2b05      	cmp	r3, #5
 80050aa:	d10a      	bne.n	80050c2 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4618      	mov	r0, r3
 80050b2:	f001 f941 	bl	8006338 <SDMMC_CmdStopTransfer>
 80050b6:	4602      	mov	r2, r0
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050bc:	431a      	orrs	r2, r3
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d103      	bne.n	80050d2 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80050ca:	68f8      	ldr	r0, [r7, #12]
 80050cc:	f001 fdb4 	bl	8006c38 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80050d0:	e002      	b.n	80050d8 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80050d2:	68f8      	ldr	r0, [r7, #12]
 80050d4:	f7ff fc62 	bl	800499c <HAL_SD_ErrorCallback>
}
 80050d8:	bf00      	nop
 80050da:	3710      	adds	r7, #16
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}

080050e0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80050e0:	b5b0      	push	{r4, r5, r7, lr}
 80050e2:	b094      	sub	sp, #80	; 0x50
 80050e4:	af04      	add	r7, sp, #16
 80050e6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80050e8:	2301      	movs	r3, #1
 80050ea:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4618      	mov	r0, r3
 80050f2:	f000 fff2 	bl	80060da <SDIO_GetPowerState>
 80050f6:	4603      	mov	r3, r0
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d102      	bne.n	8005102 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80050fc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005100:	e0b8      	b.n	8005274 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005106:	2b03      	cmp	r3, #3
 8005108:	d02f      	beq.n	800516a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4618      	mov	r0, r3
 8005110:	f001 fa1c 	bl	800654c <SDMMC_CmdSendCID>
 8005114:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005116:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005118:	2b00      	cmp	r3, #0
 800511a:	d001      	beq.n	8005120 <SD_InitCard+0x40>
    {
      return errorstate;
 800511c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800511e:	e0a9      	b.n	8005274 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	2100      	movs	r1, #0
 8005126:	4618      	mov	r0, r3
 8005128:	f001 f81c 	bl	8006164 <SDIO_GetResponse>
 800512c:	4602      	mov	r2, r0
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	2104      	movs	r1, #4
 8005138:	4618      	mov	r0, r3
 800513a:	f001 f813 	bl	8006164 <SDIO_GetResponse>
 800513e:	4602      	mov	r2, r0
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	2108      	movs	r1, #8
 800514a:	4618      	mov	r0, r3
 800514c:	f001 f80a 	bl	8006164 <SDIO_GetResponse>
 8005150:	4602      	mov	r2, r0
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	210c      	movs	r1, #12
 800515c:	4618      	mov	r0, r3
 800515e:	f001 f801 	bl	8006164 <SDIO_GetResponse>
 8005162:	4602      	mov	r2, r0
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800516e:	2b03      	cmp	r3, #3
 8005170:	d00d      	beq.n	800518e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f107 020e 	add.w	r2, r7, #14
 800517a:	4611      	mov	r1, r2
 800517c:	4618      	mov	r0, r3
 800517e:	f001 fa22 	bl	80065c6 <SDMMC_CmdSetRelAdd>
 8005182:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005184:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005186:	2b00      	cmp	r3, #0
 8005188:	d001      	beq.n	800518e <SD_InitCard+0xae>
    {
      return errorstate;
 800518a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800518c:	e072      	b.n	8005274 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005192:	2b03      	cmp	r3, #3
 8005194:	d036      	beq.n	8005204 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8005196:	89fb      	ldrh	r3, [r7, #14]
 8005198:	461a      	mov	r2, r3
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051a6:	041b      	lsls	r3, r3, #16
 80051a8:	4619      	mov	r1, r3
 80051aa:	4610      	mov	r0, r2
 80051ac:	f001 f9ec 	bl	8006588 <SDMMC_CmdSendCSD>
 80051b0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80051b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d001      	beq.n	80051bc <SD_InitCard+0xdc>
    {
      return errorstate;
 80051b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051ba:	e05b      	b.n	8005274 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	2100      	movs	r1, #0
 80051c2:	4618      	mov	r0, r3
 80051c4:	f000 ffce 	bl	8006164 <SDIO_GetResponse>
 80051c8:	4602      	mov	r2, r0
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	2104      	movs	r1, #4
 80051d4:	4618      	mov	r0, r3
 80051d6:	f000 ffc5 	bl	8006164 <SDIO_GetResponse>
 80051da:	4602      	mov	r2, r0
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	2108      	movs	r1, #8
 80051e6:	4618      	mov	r0, r3
 80051e8:	f000 ffbc 	bl	8006164 <SDIO_GetResponse>
 80051ec:	4602      	mov	r2, r0
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	210c      	movs	r1, #12
 80051f8:	4618      	mov	r0, r3
 80051fa:	f000 ffb3 	bl	8006164 <SDIO_GetResponse>
 80051fe:	4602      	mov	r2, r0
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	2104      	movs	r1, #4
 800520a:	4618      	mov	r0, r3
 800520c:	f000 ffaa 	bl	8006164 <SDIO_GetResponse>
 8005210:	4603      	mov	r3, r0
 8005212:	0d1a      	lsrs	r2, r3, #20
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8005218:	f107 0310 	add.w	r3, r7, #16
 800521c:	4619      	mov	r1, r3
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f7ff fbc6 	bl	80049b0 <HAL_SD_GetCardCSD>
 8005224:	4603      	mov	r3, r0
 8005226:	2b00      	cmp	r3, #0
 8005228:	d002      	beq.n	8005230 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800522a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800522e:	e021      	b.n	8005274 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6819      	ldr	r1, [r3, #0]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005238:	041b      	lsls	r3, r3, #16
 800523a:	2200      	movs	r2, #0
 800523c:	461c      	mov	r4, r3
 800523e:	4615      	mov	r5, r2
 8005240:	4622      	mov	r2, r4
 8005242:	462b      	mov	r3, r5
 8005244:	4608      	mov	r0, r1
 8005246:	f001 f899 	bl	800637c <SDMMC_CmdSelDesel>
 800524a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800524c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800524e:	2b00      	cmp	r3, #0
 8005250:	d001      	beq.n	8005256 <SD_InitCard+0x176>
  {
    return errorstate;
 8005252:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005254:	e00e      	b.n	8005274 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681d      	ldr	r5, [r3, #0]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	466c      	mov	r4, sp
 800525e:	f103 0210 	add.w	r2, r3, #16
 8005262:	ca07      	ldmia	r2, {r0, r1, r2}
 8005264:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005268:	3304      	adds	r3, #4
 800526a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800526c:	4628      	mov	r0, r5
 800526e:	f000 fedd 	bl	800602c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8005272:	2300      	movs	r3, #0
}
 8005274:	4618      	mov	r0, r3
 8005276:	3740      	adds	r7, #64	; 0x40
 8005278:	46bd      	mov	sp, r7
 800527a:	bdb0      	pop	{r4, r5, r7, pc}

0800527c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b086      	sub	sp, #24
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005284:	2300      	movs	r3, #0
 8005286:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8005288:	2300      	movs	r3, #0
 800528a:	617b      	str	r3, [r7, #20]
 800528c:	2300      	movs	r3, #0
 800528e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4618      	mov	r0, r3
 8005296:	f001 f894 	bl	80063c2 <SDMMC_CmdGoIdleState>
 800529a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d001      	beq.n	80052a6 <SD_PowerON+0x2a>
  {
    return errorstate;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	e072      	b.n	800538c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4618      	mov	r0, r3
 80052ac:	f001 f8a7 	bl	80063fe <SDMMC_CmdOperCond>
 80052b0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d00d      	beq.n	80052d4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2200      	movs	r2, #0
 80052bc:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4618      	mov	r0, r3
 80052c4:	f001 f87d 	bl	80063c2 <SDMMC_CmdGoIdleState>
 80052c8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d004      	beq.n	80052da <SD_PowerON+0x5e>
    {
      return errorstate;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	e05b      	b.n	800538c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052de:	2b01      	cmp	r3, #1
 80052e0:	d137      	bne.n	8005352 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	2100      	movs	r1, #0
 80052e8:	4618      	mov	r0, r3
 80052ea:	f001 f8a7 	bl	800643c <SDMMC_CmdAppCommand>
 80052ee:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d02d      	beq.n	8005352 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80052f6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80052fa:	e047      	b.n	800538c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	2100      	movs	r1, #0
 8005302:	4618      	mov	r0, r3
 8005304:	f001 f89a 	bl	800643c <SDMMC_CmdAppCommand>
 8005308:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d001      	beq.n	8005314 <SD_PowerON+0x98>
    {
      return errorstate;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	e03b      	b.n	800538c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	491e      	ldr	r1, [pc, #120]	; (8005394 <SD_PowerON+0x118>)
 800531a:	4618      	mov	r0, r3
 800531c:	f001 f8b0 	bl	8006480 <SDMMC_CmdAppOperCommand>
 8005320:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d002      	beq.n	800532e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005328:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800532c:	e02e      	b.n	800538c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	2100      	movs	r1, #0
 8005334:	4618      	mov	r0, r3
 8005336:	f000 ff15 	bl	8006164 <SDIO_GetResponse>
 800533a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	0fdb      	lsrs	r3, r3, #31
 8005340:	2b01      	cmp	r3, #1
 8005342:	d101      	bne.n	8005348 <SD_PowerON+0xcc>
 8005344:	2301      	movs	r3, #1
 8005346:	e000      	b.n	800534a <SD_PowerON+0xce>
 8005348:	2300      	movs	r3, #0
 800534a:	613b      	str	r3, [r7, #16]

    count++;
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	3301      	adds	r3, #1
 8005350:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005358:	4293      	cmp	r3, r2
 800535a:	d802      	bhi.n	8005362 <SD_PowerON+0xe6>
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d0cc      	beq.n	80052fc <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005368:	4293      	cmp	r3, r2
 800536a:	d902      	bls.n	8005372 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800536c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005370:	e00c      	b.n	800538c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005378:	2b00      	cmp	r3, #0
 800537a:	d003      	beq.n	8005384 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2201      	movs	r2, #1
 8005380:	645a      	str	r2, [r3, #68]	; 0x44
 8005382:	e002      	b.n	800538a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2200      	movs	r2, #0
 8005388:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800538a:	2300      	movs	r3, #0
}
 800538c:	4618      	mov	r0, r3
 800538e:	3718      	adds	r7, #24
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}
 8005394:	c1100000 	.word	0xc1100000

08005398 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b084      	sub	sp, #16
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
 80053a0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d102      	bne.n	80053ae <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80053a8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80053ac:	e018      	b.n	80053e0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681a      	ldr	r2, [r3, #0]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053b6:	041b      	lsls	r3, r3, #16
 80053b8:	4619      	mov	r1, r3
 80053ba:	4610      	mov	r0, r2
 80053bc:	f001 f924 	bl	8006608 <SDMMC_CmdSendStatus>
 80053c0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d001      	beq.n	80053cc <SD_SendStatus+0x34>
  {
    return errorstate;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	e009      	b.n	80053e0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	2100      	movs	r1, #0
 80053d2:	4618      	mov	r0, r3
 80053d4:	f000 fec6 	bl	8006164 <SDIO_GetResponse>
 80053d8:	4602      	mov	r2, r0
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80053de:	2300      	movs	r3, #0
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3710      	adds	r7, #16
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}

080053e8 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b086      	sub	sp, #24
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80053f0:	2300      	movs	r3, #0
 80053f2:	60fb      	str	r3, [r7, #12]
 80053f4:	2300      	movs	r3, #0
 80053f6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	2100      	movs	r1, #0
 80053fe:	4618      	mov	r0, r3
 8005400:	f000 feb0 	bl	8006164 <SDIO_GetResponse>
 8005404:	4603      	mov	r3, r0
 8005406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800540a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800540e:	d102      	bne.n	8005416 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005410:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005414:	e02f      	b.n	8005476 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005416:	f107 030c 	add.w	r3, r7, #12
 800541a:	4619      	mov	r1, r3
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f000 f879 	bl	8005514 <SD_FindSCR>
 8005422:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d001      	beq.n	800542e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	e023      	b.n	8005476 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005434:	2b00      	cmp	r3, #0
 8005436:	d01c      	beq.n	8005472 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005440:	041b      	lsls	r3, r3, #16
 8005442:	4619      	mov	r1, r3
 8005444:	4610      	mov	r0, r2
 8005446:	f000 fff9 	bl	800643c <SDMMC_CmdAppCommand>
 800544a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d001      	beq.n	8005456 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	e00f      	b.n	8005476 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	2102      	movs	r1, #2
 800545c:	4618      	mov	r0, r3
 800545e:	f001 f832 	bl	80064c6 <SDMMC_CmdBusWidth>
 8005462:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d001      	beq.n	800546e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	e003      	b.n	8005476 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800546e:	2300      	movs	r3, #0
 8005470:	e001      	b.n	8005476 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005472:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8005476:	4618      	mov	r0, r3
 8005478:	3718      	adds	r7, #24
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}

0800547e <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800547e:	b580      	push	{r7, lr}
 8005480:	b086      	sub	sp, #24
 8005482:	af00      	add	r7, sp, #0
 8005484:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8005486:	2300      	movs	r3, #0
 8005488:	60fb      	str	r3, [r7, #12]
 800548a:	2300      	movs	r3, #0
 800548c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	2100      	movs	r1, #0
 8005494:	4618      	mov	r0, r3
 8005496:	f000 fe65 	bl	8006164 <SDIO_GetResponse>
 800549a:	4603      	mov	r3, r0
 800549c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80054a4:	d102      	bne.n	80054ac <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80054a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80054aa:	e02f      	b.n	800550c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80054ac:	f107 030c 	add.w	r3, r7, #12
 80054b0:	4619      	mov	r1, r3
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f000 f82e 	bl	8005514 <SD_FindSCR>
 80054b8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d001      	beq.n	80054c4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	e023      	b.n	800550c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d01c      	beq.n	8005508 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054d6:	041b      	lsls	r3, r3, #16
 80054d8:	4619      	mov	r1, r3
 80054da:	4610      	mov	r0, r2
 80054dc:	f000 ffae 	bl	800643c <SDMMC_CmdAppCommand>
 80054e0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d001      	beq.n	80054ec <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	e00f      	b.n	800550c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	2100      	movs	r1, #0
 80054f2:	4618      	mov	r0, r3
 80054f4:	f000 ffe7 	bl	80064c6 <SDMMC_CmdBusWidth>
 80054f8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d001      	beq.n	8005504 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	e003      	b.n	800550c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005504:	2300      	movs	r3, #0
 8005506:	e001      	b.n	800550c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005508:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800550c:	4618      	mov	r0, r3
 800550e:	3718      	adds	r7, #24
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}

08005514 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8005514:	b590      	push	{r4, r7, lr}
 8005516:	b08f      	sub	sp, #60	; 0x3c
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800551e:	f7fb ff2f 	bl	8001380 <HAL_GetTick>
 8005522:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8005524:	2300      	movs	r3, #0
 8005526:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8005528:	2300      	movs	r3, #0
 800552a:	60bb      	str	r3, [r7, #8]
 800552c:	2300      	movs	r3, #0
 800552e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	2108      	movs	r1, #8
 800553a:	4618      	mov	r0, r3
 800553c:	f000 fe51 	bl	80061e2 <SDMMC_CmdBlockLength>
 8005540:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005544:	2b00      	cmp	r3, #0
 8005546:	d001      	beq.n	800554c <SD_FindSCR+0x38>
  {
    return errorstate;
 8005548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800554a:	e0b9      	b.n	80056c0 <SD_FindSCR+0x1ac>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005554:	041b      	lsls	r3, r3, #16
 8005556:	4619      	mov	r1, r3
 8005558:	4610      	mov	r0, r2
 800555a:	f000 ff6f 	bl	800643c <SDMMC_CmdAppCommand>
 800555e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005562:	2b00      	cmp	r3, #0
 8005564:	d001      	beq.n	800556a <SD_FindSCR+0x56>
  {
    return errorstate;
 8005566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005568:	e0aa      	b.n	80056c0 <SD_FindSCR+0x1ac>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800556a:	f04f 33ff 	mov.w	r3, #4294967295
 800556e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8005570:	2308      	movs	r3, #8
 8005572:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8005574:	2330      	movs	r3, #48	; 0x30
 8005576:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8005578:	2302      	movs	r3, #2
 800557a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800557c:	2300      	movs	r3, #0
 800557e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8005580:	2301      	movs	r3, #1
 8005582:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f107 0210 	add.w	r2, r7, #16
 800558c:	4611      	mov	r1, r2
 800558e:	4618      	mov	r0, r3
 8005590:	f000 fdfb 	bl	800618a <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4618      	mov	r0, r3
 800559a:	f000 ffb6 	bl	800650a <SDMMC_CmdSendSCR>
 800559e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80055a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d02a      	beq.n	80055fc <SD_FindSCR+0xe8>
  {
    return errorstate;
 80055a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a8:	e08a      	b.n	80056c0 <SD_FindSCR+0x1ac>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d00f      	beq.n	80055d8 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6819      	ldr	r1, [r3, #0]
 80055bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055be:	009b      	lsls	r3, r3, #2
 80055c0:	f107 0208 	add.w	r2, r7, #8
 80055c4:	18d4      	adds	r4, r2, r3
 80055c6:	4608      	mov	r0, r1
 80055c8:	f000 fd5b 	bl	8006082 <SDIO_ReadFIFO>
 80055cc:	4603      	mov	r3, r0
 80055ce:	6023      	str	r3, [r4, #0]
      index++;
 80055d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055d2:	3301      	adds	r3, #1
 80055d4:	637b      	str	r3, [r7, #52]	; 0x34
 80055d6:	e006      	b.n	80055e6 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d012      	beq.n	800560c <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 80055e6:	f7fb fecb 	bl	8001380 <HAL_GetTick>
 80055ea:	4602      	mov	r2, r0
 80055ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ee:	1ad3      	subs	r3, r2, r3
 80055f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055f4:	d102      	bne.n	80055fc <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80055f6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80055fa:	e061      	b.n	80056c0 <SD_FindSCR+0x1ac>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005602:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8005606:	2b00      	cmp	r3, #0
 8005608:	d0cf      	beq.n	80055aa <SD_FindSCR+0x96>
 800560a:	e000      	b.n	800560e <SD_FindSCR+0xfa>
      break;
 800560c:	bf00      	nop
    }
  }

#if defined(SDIO_STA_STBITERR)
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005614:	f003 0308 	and.w	r3, r3, #8
 8005618:	2b00      	cmp	r3, #0
 800561a:	d106      	bne.n	800562a <SD_FindSCR+0x116>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005622:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005626:	2b00      	cmp	r3, #0
 8005628:	d005      	beq.n	8005636 <SD_FindSCR+0x122>
#else /* SDIO_STA_STBITERR not defined */
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	2208      	movs	r2, #8
 8005630:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8005632:	2308      	movs	r3, #8
 8005634:	e044      	b.n	80056c0 <SD_FindSCR+0x1ac>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800563c:	f003 0302 	and.w	r3, r3, #2
 8005640:	2b00      	cmp	r3, #0
 8005642:	d005      	beq.n	8005650 <SD_FindSCR+0x13c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	2202      	movs	r2, #2
 800564a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800564c:	2302      	movs	r3, #2
 800564e:	e037      	b.n	80056c0 <SD_FindSCR+0x1ac>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005656:	f003 0320 	and.w	r3, r3, #32
 800565a:	2b00      	cmp	r3, #0
 800565c:	d005      	beq.n	800566a <SD_FindSCR+0x156>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	2220      	movs	r2, #32
 8005664:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8005666:	2320      	movs	r3, #32
 8005668:	e02a      	b.n	80056c0 <SD_FindSCR+0x1ac>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f240 523a 	movw	r2, #1338	; 0x53a
 8005672:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	061a      	lsls	r2, r3, #24
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	021b      	lsls	r3, r3, #8
 800567c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005680:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	0a1b      	lsrs	r3, r3, #8
 8005686:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800568a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	0e1b      	lsrs	r3, r3, #24
 8005690:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005694:	601a      	str	r2, [r3, #0]
    scr++;
 8005696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005698:	3304      	adds	r3, #4
 800569a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	061a      	lsls	r2, r3, #24
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	021b      	lsls	r3, r3, #8
 80056a4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80056a8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	0a1b      	lsrs	r3, r3, #8
 80056ae:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80056b2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	0e1b      	lsrs	r3, r3, #24
 80056b8:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80056ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056bc:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80056be:	2300      	movs	r3, #0
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	373c      	adds	r7, #60	; 0x3c
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd90      	pop	{r4, r7, pc}

080056c8 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b086      	sub	sp, #24
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056d4:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056da:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d03f      	beq.n	8005762 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80056e2:	2300      	movs	r3, #0
 80056e4:	617b      	str	r3, [r7, #20]
 80056e6:	e033      	b.n	8005750 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4618      	mov	r0, r3
 80056ee:	f000 fcc8 	bl	8006082 <SDIO_ReadFIFO>
 80056f2:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	b2da      	uxtb	r2, r3
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	701a      	strb	r2, [r3, #0]
      tmp++;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	3301      	adds	r3, #1
 8005700:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	3b01      	subs	r3, #1
 8005706:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	0a1b      	lsrs	r3, r3, #8
 800570c:	b2da      	uxtb	r2, r3
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	3301      	adds	r3, #1
 8005716:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	3b01      	subs	r3, #1
 800571c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	0c1b      	lsrs	r3, r3, #16
 8005722:	b2da      	uxtb	r2, r3
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	3301      	adds	r3, #1
 800572c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	3b01      	subs	r3, #1
 8005732:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	0e1b      	lsrs	r3, r3, #24
 8005738:	b2da      	uxtb	r2, r3
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	3301      	adds	r3, #1
 8005742:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	3b01      	subs	r3, #1
 8005748:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	3301      	adds	r3, #1
 800574e:	617b      	str	r3, [r7, #20]
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	2b07      	cmp	r3, #7
 8005754:	d9c8      	bls.n	80056e8 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	68fa      	ldr	r2, [r7, #12]
 800575a:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	693a      	ldr	r2, [r7, #16]
 8005760:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8005762:	bf00      	nop
 8005764:	3718      	adds	r7, #24
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}

0800576a <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800576a:	b580      	push	{r7, lr}
 800576c:	b086      	sub	sp, #24
 800576e:	af00      	add	r7, sp, #0
 8005770:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6a1b      	ldr	r3, [r3, #32]
 8005776:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d043      	beq.n	800580c <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8005784:	2300      	movs	r3, #0
 8005786:	617b      	str	r3, [r7, #20]
 8005788:	e037      	b.n	80057fa <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	781b      	ldrb	r3, [r3, #0]
 800578e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	3301      	adds	r3, #1
 8005794:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	3b01      	subs	r3, #1
 800579a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	781b      	ldrb	r3, [r3, #0]
 80057a0:	021a      	lsls	r2, r3, #8
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	4313      	orrs	r3, r2
 80057a6:	60bb      	str	r3, [r7, #8]
      tmp++;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	3301      	adds	r3, #1
 80057ac:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	3b01      	subs	r3, #1
 80057b2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	781b      	ldrb	r3, [r3, #0]
 80057b8:	041a      	lsls	r2, r3, #16
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	4313      	orrs	r3, r2
 80057be:	60bb      	str	r3, [r7, #8]
      tmp++;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	3301      	adds	r3, #1
 80057c4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	3b01      	subs	r3, #1
 80057ca:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	781b      	ldrb	r3, [r3, #0]
 80057d0:	061a      	lsls	r2, r3, #24
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	4313      	orrs	r3, r2
 80057d6:	60bb      	str	r3, [r7, #8]
      tmp++;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	3301      	adds	r3, #1
 80057dc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	3b01      	subs	r3, #1
 80057e2:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f107 0208 	add.w	r2, r7, #8
 80057ec:	4611      	mov	r1, r2
 80057ee:	4618      	mov	r0, r3
 80057f0:	f000 fc54 	bl	800609c <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	3301      	adds	r3, #1
 80057f8:	617b      	str	r3, [r7, #20]
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	2b07      	cmp	r3, #7
 80057fe:	d9c4      	bls.n	800578a <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	68fa      	ldr	r2, [r7, #12]
 8005804:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	693a      	ldr	r2, [r7, #16]
 800580a:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800580c:	bf00      	nop
 800580e:	3718      	adds	r7, #24
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}

08005814 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b082      	sub	sp, #8
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d101      	bne.n	8005826 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	e042      	b.n	80058ac <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800582c:	b2db      	uxtb	r3, r3
 800582e:	2b00      	cmp	r3, #0
 8005830:	d106      	bne.n	8005840 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2200      	movs	r2, #0
 8005836:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f7fb fcc8 	bl	80011d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2224      	movs	r2, #36	; 0x24
 8005844:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	68da      	ldr	r2, [r3, #12]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005856:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f000 f973 	bl	8005b44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	691a      	ldr	r2, [r3, #16]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800586c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	695a      	ldr	r2, [r3, #20]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800587c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	68da      	ldr	r2, [r3, #12]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800588c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2220      	movs	r2, #32
 8005898:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2220      	movs	r2, #32
 80058a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80058aa:	2300      	movs	r3, #0
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	3708      	adds	r7, #8
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}

080058b4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b08a      	sub	sp, #40	; 0x28
 80058b8:	af02      	add	r7, sp, #8
 80058ba:	60f8      	str	r0, [r7, #12]
 80058bc:	60b9      	str	r1, [r7, #8]
 80058be:	603b      	str	r3, [r7, #0]
 80058c0:	4613      	mov	r3, r2
 80058c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80058c4:	2300      	movs	r3, #0
 80058c6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058ce:	b2db      	uxtb	r3, r3
 80058d0:	2b20      	cmp	r3, #32
 80058d2:	d175      	bne.n	80059c0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d002      	beq.n	80058e0 <HAL_UART_Transmit+0x2c>
 80058da:	88fb      	ldrh	r3, [r7, #6]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d101      	bne.n	80058e4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80058e0:	2301      	movs	r3, #1
 80058e2:	e06e      	b.n	80059c2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2200      	movs	r2, #0
 80058e8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2221      	movs	r2, #33	; 0x21
 80058ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80058f2:	f7fb fd45 	bl	8001380 <HAL_GetTick>
 80058f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	88fa      	ldrh	r2, [r7, #6]
 80058fc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	88fa      	ldrh	r2, [r7, #6]
 8005902:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800590c:	d108      	bne.n	8005920 <HAL_UART_Transmit+0x6c>
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	691b      	ldr	r3, [r3, #16]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d104      	bne.n	8005920 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005916:	2300      	movs	r3, #0
 8005918:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	61bb      	str	r3, [r7, #24]
 800591e:	e003      	b.n	8005928 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005924:	2300      	movs	r3, #0
 8005926:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005928:	e02e      	b.n	8005988 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	9300      	str	r3, [sp, #0]
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	2200      	movs	r2, #0
 8005932:	2180      	movs	r1, #128	; 0x80
 8005934:	68f8      	ldr	r0, [r7, #12]
 8005936:	f000 f848 	bl	80059ca <UART_WaitOnFlagUntilTimeout>
 800593a:	4603      	mov	r3, r0
 800593c:	2b00      	cmp	r3, #0
 800593e:	d005      	beq.n	800594c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2220      	movs	r2, #32
 8005944:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8005948:	2303      	movs	r3, #3
 800594a:	e03a      	b.n	80059c2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800594c:	69fb      	ldr	r3, [r7, #28]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d10b      	bne.n	800596a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005952:	69bb      	ldr	r3, [r7, #24]
 8005954:	881b      	ldrh	r3, [r3, #0]
 8005956:	461a      	mov	r2, r3
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005960:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005962:	69bb      	ldr	r3, [r7, #24]
 8005964:	3302      	adds	r3, #2
 8005966:	61bb      	str	r3, [r7, #24]
 8005968:	e007      	b.n	800597a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800596a:	69fb      	ldr	r3, [r7, #28]
 800596c:	781a      	ldrb	r2, [r3, #0]
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005974:	69fb      	ldr	r3, [r7, #28]
 8005976:	3301      	adds	r3, #1
 8005978:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800597e:	b29b      	uxth	r3, r3
 8005980:	3b01      	subs	r3, #1
 8005982:	b29a      	uxth	r2, r3
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800598c:	b29b      	uxth	r3, r3
 800598e:	2b00      	cmp	r3, #0
 8005990:	d1cb      	bne.n	800592a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	9300      	str	r3, [sp, #0]
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	2200      	movs	r2, #0
 800599a:	2140      	movs	r1, #64	; 0x40
 800599c:	68f8      	ldr	r0, [r7, #12]
 800599e:	f000 f814 	bl	80059ca <UART_WaitOnFlagUntilTimeout>
 80059a2:	4603      	mov	r3, r0
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d005      	beq.n	80059b4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2220      	movs	r2, #32
 80059ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80059b0:	2303      	movs	r3, #3
 80059b2:	e006      	b.n	80059c2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2220      	movs	r2, #32
 80059b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80059bc:	2300      	movs	r3, #0
 80059be:	e000      	b.n	80059c2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80059c0:	2302      	movs	r3, #2
  }
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3720      	adds	r7, #32
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}

080059ca <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80059ca:	b580      	push	{r7, lr}
 80059cc:	b086      	sub	sp, #24
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	60f8      	str	r0, [r7, #12]
 80059d2:	60b9      	str	r1, [r7, #8]
 80059d4:	603b      	str	r3, [r7, #0]
 80059d6:	4613      	mov	r3, r2
 80059d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059da:	e03b      	b.n	8005a54 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059dc:	6a3b      	ldr	r3, [r7, #32]
 80059de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059e2:	d037      	beq.n	8005a54 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059e4:	f7fb fccc 	bl	8001380 <HAL_GetTick>
 80059e8:	4602      	mov	r2, r0
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	1ad3      	subs	r3, r2, r3
 80059ee:	6a3a      	ldr	r2, [r7, #32]
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d302      	bcc.n	80059fa <UART_WaitOnFlagUntilTimeout+0x30>
 80059f4:	6a3b      	ldr	r3, [r7, #32]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d101      	bne.n	80059fe <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80059fa:	2303      	movs	r3, #3
 80059fc:	e03a      	b.n	8005a74 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	68db      	ldr	r3, [r3, #12]
 8005a04:	f003 0304 	and.w	r3, r3, #4
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d023      	beq.n	8005a54 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	2b80      	cmp	r3, #128	; 0x80
 8005a10:	d020      	beq.n	8005a54 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	2b40      	cmp	r3, #64	; 0x40
 8005a16:	d01d      	beq.n	8005a54 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f003 0308 	and.w	r3, r3, #8
 8005a22:	2b08      	cmp	r3, #8
 8005a24:	d116      	bne.n	8005a54 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005a26:	2300      	movs	r3, #0
 8005a28:	617b      	str	r3, [r7, #20]
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	617b      	str	r3, [r7, #20]
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	617b      	str	r3, [r7, #20]
 8005a3a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a3c:	68f8      	ldr	r0, [r7, #12]
 8005a3e:	f000 f81d 	bl	8005a7c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2208      	movs	r2, #8
 8005a46:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005a50:	2301      	movs	r3, #1
 8005a52:	e00f      	b.n	8005a74 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	68ba      	ldr	r2, [r7, #8]
 8005a60:	429a      	cmp	r2, r3
 8005a62:	bf0c      	ite	eq
 8005a64:	2301      	moveq	r3, #1
 8005a66:	2300      	movne	r3, #0
 8005a68:	b2db      	uxtb	r3, r3
 8005a6a:	461a      	mov	r2, r3
 8005a6c:	79fb      	ldrb	r3, [r7, #7]
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	d0b4      	beq.n	80059dc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a72:	2300      	movs	r3, #0
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	3718      	adds	r7, #24
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}

08005a7c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b095      	sub	sp, #84	; 0x54
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	330c      	adds	r3, #12
 8005a8a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a8e:	e853 3f00 	ldrex	r3, [r3]
 8005a92:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a96:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	330c      	adds	r3, #12
 8005aa2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005aa4:	643a      	str	r2, [r7, #64]	; 0x40
 8005aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aa8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005aaa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005aac:	e841 2300 	strex	r3, r2, [r1]
 8005ab0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d1e5      	bne.n	8005a84 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	3314      	adds	r3, #20
 8005abe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ac0:	6a3b      	ldr	r3, [r7, #32]
 8005ac2:	e853 3f00 	ldrex	r3, [r3]
 8005ac6:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ac8:	69fb      	ldr	r3, [r7, #28]
 8005aca:	f023 0301 	bic.w	r3, r3, #1
 8005ace:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	3314      	adds	r3, #20
 8005ad6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ad8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ada:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005adc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ade:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ae0:	e841 2300 	strex	r3, r2, [r1]
 8005ae4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d1e5      	bne.n	8005ab8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d119      	bne.n	8005b28 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	330c      	adds	r3, #12
 8005afa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	e853 3f00 	ldrex	r3, [r3]
 8005b02:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	f023 0310 	bic.w	r3, r3, #16
 8005b0a:	647b      	str	r3, [r7, #68]	; 0x44
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	330c      	adds	r3, #12
 8005b12:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b14:	61ba      	str	r2, [r7, #24]
 8005b16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b18:	6979      	ldr	r1, [r7, #20]
 8005b1a:	69ba      	ldr	r2, [r7, #24]
 8005b1c:	e841 2300 	strex	r3, r2, [r1]
 8005b20:	613b      	str	r3, [r7, #16]
   return(result);
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d1e5      	bne.n	8005af4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2220      	movs	r2, #32
 8005b2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2200      	movs	r2, #0
 8005b34:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005b36:	bf00      	nop
 8005b38:	3754      	adds	r7, #84	; 0x54
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr
	...

08005b44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b48:	b0c0      	sub	sp, #256	; 0x100
 8005b4a:	af00      	add	r7, sp, #0
 8005b4c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	691b      	ldr	r3, [r3, #16]
 8005b58:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b60:	68d9      	ldr	r1, [r3, #12]
 8005b62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	ea40 0301 	orr.w	r3, r0, r1
 8005b6c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005b6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b72:	689a      	ldr	r2, [r3, #8]
 8005b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b78:	691b      	ldr	r3, [r3, #16]
 8005b7a:	431a      	orrs	r2, r3
 8005b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b80:	695b      	ldr	r3, [r3, #20]
 8005b82:	431a      	orrs	r2, r3
 8005b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b88:	69db      	ldr	r3, [r3, #28]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	68db      	ldr	r3, [r3, #12]
 8005b98:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005b9c:	f021 010c 	bic.w	r1, r1, #12
 8005ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ba4:	681a      	ldr	r2, [r3, #0]
 8005ba6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005baa:	430b      	orrs	r3, r1
 8005bac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005bae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	695b      	ldr	r3, [r3, #20]
 8005bb6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005bba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bbe:	6999      	ldr	r1, [r3, #24]
 8005bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bc4:	681a      	ldr	r2, [r3, #0]
 8005bc6:	ea40 0301 	orr.w	r3, r0, r1
 8005bca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	4b8f      	ldr	r3, [pc, #572]	; (8005e10 <UART_SetConfig+0x2cc>)
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d005      	beq.n	8005be4 <UART_SetConfig+0xa0>
 8005bd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	4b8d      	ldr	r3, [pc, #564]	; (8005e14 <UART_SetConfig+0x2d0>)
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d104      	bne.n	8005bee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005be4:	f7fe fac8 	bl	8004178 <HAL_RCC_GetPCLK2Freq>
 8005be8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005bec:	e003      	b.n	8005bf6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005bee:	f7fe faaf 	bl	8004150 <HAL_RCC_GetPCLK1Freq>
 8005bf2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005bf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bfa:	69db      	ldr	r3, [r3, #28]
 8005bfc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c00:	f040 810c 	bne.w	8005e1c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005c04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c08:	2200      	movs	r2, #0
 8005c0a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005c0e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005c12:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005c16:	4622      	mov	r2, r4
 8005c18:	462b      	mov	r3, r5
 8005c1a:	1891      	adds	r1, r2, r2
 8005c1c:	65b9      	str	r1, [r7, #88]	; 0x58
 8005c1e:	415b      	adcs	r3, r3
 8005c20:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c22:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005c26:	4621      	mov	r1, r4
 8005c28:	eb12 0801 	adds.w	r8, r2, r1
 8005c2c:	4629      	mov	r1, r5
 8005c2e:	eb43 0901 	adc.w	r9, r3, r1
 8005c32:	f04f 0200 	mov.w	r2, #0
 8005c36:	f04f 0300 	mov.w	r3, #0
 8005c3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005c3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005c42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005c46:	4690      	mov	r8, r2
 8005c48:	4699      	mov	r9, r3
 8005c4a:	4623      	mov	r3, r4
 8005c4c:	eb18 0303 	adds.w	r3, r8, r3
 8005c50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005c54:	462b      	mov	r3, r5
 8005c56:	eb49 0303 	adc.w	r3, r9, r3
 8005c5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005c5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	2200      	movs	r2, #0
 8005c66:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005c6a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005c6e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005c72:	460b      	mov	r3, r1
 8005c74:	18db      	adds	r3, r3, r3
 8005c76:	653b      	str	r3, [r7, #80]	; 0x50
 8005c78:	4613      	mov	r3, r2
 8005c7a:	eb42 0303 	adc.w	r3, r2, r3
 8005c7e:	657b      	str	r3, [r7, #84]	; 0x54
 8005c80:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005c84:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005c88:	f7fa fb12 	bl	80002b0 <__aeabi_uldivmod>
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	460b      	mov	r3, r1
 8005c90:	4b61      	ldr	r3, [pc, #388]	; (8005e18 <UART_SetConfig+0x2d4>)
 8005c92:	fba3 2302 	umull	r2, r3, r3, r2
 8005c96:	095b      	lsrs	r3, r3, #5
 8005c98:	011c      	lsls	r4, r3, #4
 8005c9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005ca4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005ca8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005cac:	4642      	mov	r2, r8
 8005cae:	464b      	mov	r3, r9
 8005cb0:	1891      	adds	r1, r2, r2
 8005cb2:	64b9      	str	r1, [r7, #72]	; 0x48
 8005cb4:	415b      	adcs	r3, r3
 8005cb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005cb8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005cbc:	4641      	mov	r1, r8
 8005cbe:	eb12 0a01 	adds.w	sl, r2, r1
 8005cc2:	4649      	mov	r1, r9
 8005cc4:	eb43 0b01 	adc.w	fp, r3, r1
 8005cc8:	f04f 0200 	mov.w	r2, #0
 8005ccc:	f04f 0300 	mov.w	r3, #0
 8005cd0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005cd4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005cd8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005cdc:	4692      	mov	sl, r2
 8005cde:	469b      	mov	fp, r3
 8005ce0:	4643      	mov	r3, r8
 8005ce2:	eb1a 0303 	adds.w	r3, sl, r3
 8005ce6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005cea:	464b      	mov	r3, r9
 8005cec:	eb4b 0303 	adc.w	r3, fp, r3
 8005cf0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005d00:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005d04:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005d08:	460b      	mov	r3, r1
 8005d0a:	18db      	adds	r3, r3, r3
 8005d0c:	643b      	str	r3, [r7, #64]	; 0x40
 8005d0e:	4613      	mov	r3, r2
 8005d10:	eb42 0303 	adc.w	r3, r2, r3
 8005d14:	647b      	str	r3, [r7, #68]	; 0x44
 8005d16:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005d1a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005d1e:	f7fa fac7 	bl	80002b0 <__aeabi_uldivmod>
 8005d22:	4602      	mov	r2, r0
 8005d24:	460b      	mov	r3, r1
 8005d26:	4611      	mov	r1, r2
 8005d28:	4b3b      	ldr	r3, [pc, #236]	; (8005e18 <UART_SetConfig+0x2d4>)
 8005d2a:	fba3 2301 	umull	r2, r3, r3, r1
 8005d2e:	095b      	lsrs	r3, r3, #5
 8005d30:	2264      	movs	r2, #100	; 0x64
 8005d32:	fb02 f303 	mul.w	r3, r2, r3
 8005d36:	1acb      	subs	r3, r1, r3
 8005d38:	00db      	lsls	r3, r3, #3
 8005d3a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005d3e:	4b36      	ldr	r3, [pc, #216]	; (8005e18 <UART_SetConfig+0x2d4>)
 8005d40:	fba3 2302 	umull	r2, r3, r3, r2
 8005d44:	095b      	lsrs	r3, r3, #5
 8005d46:	005b      	lsls	r3, r3, #1
 8005d48:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005d4c:	441c      	add	r4, r3
 8005d4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d52:	2200      	movs	r2, #0
 8005d54:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005d58:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005d5c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005d60:	4642      	mov	r2, r8
 8005d62:	464b      	mov	r3, r9
 8005d64:	1891      	adds	r1, r2, r2
 8005d66:	63b9      	str	r1, [r7, #56]	; 0x38
 8005d68:	415b      	adcs	r3, r3
 8005d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d6c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005d70:	4641      	mov	r1, r8
 8005d72:	1851      	adds	r1, r2, r1
 8005d74:	6339      	str	r1, [r7, #48]	; 0x30
 8005d76:	4649      	mov	r1, r9
 8005d78:	414b      	adcs	r3, r1
 8005d7a:	637b      	str	r3, [r7, #52]	; 0x34
 8005d7c:	f04f 0200 	mov.w	r2, #0
 8005d80:	f04f 0300 	mov.w	r3, #0
 8005d84:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005d88:	4659      	mov	r1, fp
 8005d8a:	00cb      	lsls	r3, r1, #3
 8005d8c:	4651      	mov	r1, sl
 8005d8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d92:	4651      	mov	r1, sl
 8005d94:	00ca      	lsls	r2, r1, #3
 8005d96:	4610      	mov	r0, r2
 8005d98:	4619      	mov	r1, r3
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	4642      	mov	r2, r8
 8005d9e:	189b      	adds	r3, r3, r2
 8005da0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005da4:	464b      	mov	r3, r9
 8005da6:	460a      	mov	r2, r1
 8005da8:	eb42 0303 	adc.w	r3, r2, r3
 8005dac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	2200      	movs	r2, #0
 8005db8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005dbc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005dc0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005dc4:	460b      	mov	r3, r1
 8005dc6:	18db      	adds	r3, r3, r3
 8005dc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005dca:	4613      	mov	r3, r2
 8005dcc:	eb42 0303 	adc.w	r3, r2, r3
 8005dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005dd2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005dd6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005dda:	f7fa fa69 	bl	80002b0 <__aeabi_uldivmod>
 8005dde:	4602      	mov	r2, r0
 8005de0:	460b      	mov	r3, r1
 8005de2:	4b0d      	ldr	r3, [pc, #52]	; (8005e18 <UART_SetConfig+0x2d4>)
 8005de4:	fba3 1302 	umull	r1, r3, r3, r2
 8005de8:	095b      	lsrs	r3, r3, #5
 8005dea:	2164      	movs	r1, #100	; 0x64
 8005dec:	fb01 f303 	mul.w	r3, r1, r3
 8005df0:	1ad3      	subs	r3, r2, r3
 8005df2:	00db      	lsls	r3, r3, #3
 8005df4:	3332      	adds	r3, #50	; 0x32
 8005df6:	4a08      	ldr	r2, [pc, #32]	; (8005e18 <UART_SetConfig+0x2d4>)
 8005df8:	fba2 2303 	umull	r2, r3, r2, r3
 8005dfc:	095b      	lsrs	r3, r3, #5
 8005dfe:	f003 0207 	and.w	r2, r3, #7
 8005e02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4422      	add	r2, r4
 8005e0a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005e0c:	e106      	b.n	800601c <UART_SetConfig+0x4d8>
 8005e0e:	bf00      	nop
 8005e10:	40011000 	.word	0x40011000
 8005e14:	40011400 	.word	0x40011400
 8005e18:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005e1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e20:	2200      	movs	r2, #0
 8005e22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005e26:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005e2a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005e2e:	4642      	mov	r2, r8
 8005e30:	464b      	mov	r3, r9
 8005e32:	1891      	adds	r1, r2, r2
 8005e34:	6239      	str	r1, [r7, #32]
 8005e36:	415b      	adcs	r3, r3
 8005e38:	627b      	str	r3, [r7, #36]	; 0x24
 8005e3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005e3e:	4641      	mov	r1, r8
 8005e40:	1854      	adds	r4, r2, r1
 8005e42:	4649      	mov	r1, r9
 8005e44:	eb43 0501 	adc.w	r5, r3, r1
 8005e48:	f04f 0200 	mov.w	r2, #0
 8005e4c:	f04f 0300 	mov.w	r3, #0
 8005e50:	00eb      	lsls	r3, r5, #3
 8005e52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005e56:	00e2      	lsls	r2, r4, #3
 8005e58:	4614      	mov	r4, r2
 8005e5a:	461d      	mov	r5, r3
 8005e5c:	4643      	mov	r3, r8
 8005e5e:	18e3      	adds	r3, r4, r3
 8005e60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005e64:	464b      	mov	r3, r9
 8005e66:	eb45 0303 	adc.w	r3, r5, r3
 8005e6a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005e6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	2200      	movs	r2, #0
 8005e76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005e7a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005e7e:	f04f 0200 	mov.w	r2, #0
 8005e82:	f04f 0300 	mov.w	r3, #0
 8005e86:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005e8a:	4629      	mov	r1, r5
 8005e8c:	008b      	lsls	r3, r1, #2
 8005e8e:	4621      	mov	r1, r4
 8005e90:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e94:	4621      	mov	r1, r4
 8005e96:	008a      	lsls	r2, r1, #2
 8005e98:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005e9c:	f7fa fa08 	bl	80002b0 <__aeabi_uldivmod>
 8005ea0:	4602      	mov	r2, r0
 8005ea2:	460b      	mov	r3, r1
 8005ea4:	4b60      	ldr	r3, [pc, #384]	; (8006028 <UART_SetConfig+0x4e4>)
 8005ea6:	fba3 2302 	umull	r2, r3, r3, r2
 8005eaa:	095b      	lsrs	r3, r3, #5
 8005eac:	011c      	lsls	r4, r3, #4
 8005eae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005eb8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005ebc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005ec0:	4642      	mov	r2, r8
 8005ec2:	464b      	mov	r3, r9
 8005ec4:	1891      	adds	r1, r2, r2
 8005ec6:	61b9      	str	r1, [r7, #24]
 8005ec8:	415b      	adcs	r3, r3
 8005eca:	61fb      	str	r3, [r7, #28]
 8005ecc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ed0:	4641      	mov	r1, r8
 8005ed2:	1851      	adds	r1, r2, r1
 8005ed4:	6139      	str	r1, [r7, #16]
 8005ed6:	4649      	mov	r1, r9
 8005ed8:	414b      	adcs	r3, r1
 8005eda:	617b      	str	r3, [r7, #20]
 8005edc:	f04f 0200 	mov.w	r2, #0
 8005ee0:	f04f 0300 	mov.w	r3, #0
 8005ee4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005ee8:	4659      	mov	r1, fp
 8005eea:	00cb      	lsls	r3, r1, #3
 8005eec:	4651      	mov	r1, sl
 8005eee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ef2:	4651      	mov	r1, sl
 8005ef4:	00ca      	lsls	r2, r1, #3
 8005ef6:	4610      	mov	r0, r2
 8005ef8:	4619      	mov	r1, r3
 8005efa:	4603      	mov	r3, r0
 8005efc:	4642      	mov	r2, r8
 8005efe:	189b      	adds	r3, r3, r2
 8005f00:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005f04:	464b      	mov	r3, r9
 8005f06:	460a      	mov	r2, r1
 8005f08:	eb42 0303 	adc.w	r3, r2, r3
 8005f0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	2200      	movs	r2, #0
 8005f18:	67bb      	str	r3, [r7, #120]	; 0x78
 8005f1a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005f1c:	f04f 0200 	mov.w	r2, #0
 8005f20:	f04f 0300 	mov.w	r3, #0
 8005f24:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005f28:	4649      	mov	r1, r9
 8005f2a:	008b      	lsls	r3, r1, #2
 8005f2c:	4641      	mov	r1, r8
 8005f2e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f32:	4641      	mov	r1, r8
 8005f34:	008a      	lsls	r2, r1, #2
 8005f36:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005f3a:	f7fa f9b9 	bl	80002b0 <__aeabi_uldivmod>
 8005f3e:	4602      	mov	r2, r0
 8005f40:	460b      	mov	r3, r1
 8005f42:	4611      	mov	r1, r2
 8005f44:	4b38      	ldr	r3, [pc, #224]	; (8006028 <UART_SetConfig+0x4e4>)
 8005f46:	fba3 2301 	umull	r2, r3, r3, r1
 8005f4a:	095b      	lsrs	r3, r3, #5
 8005f4c:	2264      	movs	r2, #100	; 0x64
 8005f4e:	fb02 f303 	mul.w	r3, r2, r3
 8005f52:	1acb      	subs	r3, r1, r3
 8005f54:	011b      	lsls	r3, r3, #4
 8005f56:	3332      	adds	r3, #50	; 0x32
 8005f58:	4a33      	ldr	r2, [pc, #204]	; (8006028 <UART_SetConfig+0x4e4>)
 8005f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f5e:	095b      	lsrs	r3, r3, #5
 8005f60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f64:	441c      	add	r4, r3
 8005f66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	673b      	str	r3, [r7, #112]	; 0x70
 8005f6e:	677a      	str	r2, [r7, #116]	; 0x74
 8005f70:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005f74:	4642      	mov	r2, r8
 8005f76:	464b      	mov	r3, r9
 8005f78:	1891      	adds	r1, r2, r2
 8005f7a:	60b9      	str	r1, [r7, #8]
 8005f7c:	415b      	adcs	r3, r3
 8005f7e:	60fb      	str	r3, [r7, #12]
 8005f80:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005f84:	4641      	mov	r1, r8
 8005f86:	1851      	adds	r1, r2, r1
 8005f88:	6039      	str	r1, [r7, #0]
 8005f8a:	4649      	mov	r1, r9
 8005f8c:	414b      	adcs	r3, r1
 8005f8e:	607b      	str	r3, [r7, #4]
 8005f90:	f04f 0200 	mov.w	r2, #0
 8005f94:	f04f 0300 	mov.w	r3, #0
 8005f98:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005f9c:	4659      	mov	r1, fp
 8005f9e:	00cb      	lsls	r3, r1, #3
 8005fa0:	4651      	mov	r1, sl
 8005fa2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005fa6:	4651      	mov	r1, sl
 8005fa8:	00ca      	lsls	r2, r1, #3
 8005faa:	4610      	mov	r0, r2
 8005fac:	4619      	mov	r1, r3
 8005fae:	4603      	mov	r3, r0
 8005fb0:	4642      	mov	r2, r8
 8005fb2:	189b      	adds	r3, r3, r2
 8005fb4:	66bb      	str	r3, [r7, #104]	; 0x68
 8005fb6:	464b      	mov	r3, r9
 8005fb8:	460a      	mov	r2, r1
 8005fba:	eb42 0303 	adc.w	r3, r2, r3
 8005fbe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	663b      	str	r3, [r7, #96]	; 0x60
 8005fca:	667a      	str	r2, [r7, #100]	; 0x64
 8005fcc:	f04f 0200 	mov.w	r2, #0
 8005fd0:	f04f 0300 	mov.w	r3, #0
 8005fd4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005fd8:	4649      	mov	r1, r9
 8005fda:	008b      	lsls	r3, r1, #2
 8005fdc:	4641      	mov	r1, r8
 8005fde:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005fe2:	4641      	mov	r1, r8
 8005fe4:	008a      	lsls	r2, r1, #2
 8005fe6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005fea:	f7fa f961 	bl	80002b0 <__aeabi_uldivmod>
 8005fee:	4602      	mov	r2, r0
 8005ff0:	460b      	mov	r3, r1
 8005ff2:	4b0d      	ldr	r3, [pc, #52]	; (8006028 <UART_SetConfig+0x4e4>)
 8005ff4:	fba3 1302 	umull	r1, r3, r3, r2
 8005ff8:	095b      	lsrs	r3, r3, #5
 8005ffa:	2164      	movs	r1, #100	; 0x64
 8005ffc:	fb01 f303 	mul.w	r3, r1, r3
 8006000:	1ad3      	subs	r3, r2, r3
 8006002:	011b      	lsls	r3, r3, #4
 8006004:	3332      	adds	r3, #50	; 0x32
 8006006:	4a08      	ldr	r2, [pc, #32]	; (8006028 <UART_SetConfig+0x4e4>)
 8006008:	fba2 2303 	umull	r2, r3, r2, r3
 800600c:	095b      	lsrs	r3, r3, #5
 800600e:	f003 020f 	and.w	r2, r3, #15
 8006012:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4422      	add	r2, r4
 800601a:	609a      	str	r2, [r3, #8]
}
 800601c:	bf00      	nop
 800601e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006022:	46bd      	mov	sp, r7
 8006024:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006028:	51eb851f 	.word	0x51eb851f

0800602c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800602c:	b084      	sub	sp, #16
 800602e:	b480      	push	{r7}
 8006030:	b085      	sub	sp, #20
 8006032:	af00      	add	r7, sp, #0
 8006034:	6078      	str	r0, [r7, #4]
 8006036:	f107 001c 	add.w	r0, r7, #28
 800603a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800603e:	2300      	movs	r3, #0
 8006040:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8006042:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8006044:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8006046:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8006048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800604a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800604c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800604e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8006050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8006052:	431a      	orrs	r2, r3
             Init.ClockDiv
 8006054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8006056:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8006058:	68fa      	ldr	r2, [r7, #12]
 800605a:	4313      	orrs	r3, r2
 800605c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8006066:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800606a:	68fa      	ldr	r2, [r7, #12]
 800606c:	431a      	orrs	r2, r3
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006072:	2300      	movs	r3, #0
}
 8006074:	4618      	mov	r0, r3
 8006076:	3714      	adds	r7, #20
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	b004      	add	sp, #16
 8006080:	4770      	bx	lr

08006082 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8006082:	b480      	push	{r7}
 8006084:	b083      	sub	sp, #12
 8006086:	af00      	add	r7, sp, #0
 8006088:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8006090:	4618      	mov	r0, r3
 8006092:	370c      	adds	r7, #12
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr

0800609c <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800609c:	b480      	push	{r7}
 800609e:	b083      	sub	sp, #12
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
 80060a4:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	681a      	ldr	r2, [r3, #0]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80060b0:	2300      	movs	r3, #0
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	370c      	adds	r7, #12
 80060b6:	46bd      	mov	sp, r7
 80060b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060bc:	4770      	bx	lr

080060be <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80060be:	b480      	push	{r7}
 80060c0:	b083      	sub	sp, #12
 80060c2:	af00      	add	r7, sp, #0
 80060c4:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2203      	movs	r2, #3
 80060ca:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80060cc:	2300      	movs	r3, #0
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	370c      	adds	r7, #12
 80060d2:	46bd      	mov	sp, r7
 80060d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d8:	4770      	bx	lr

080060da <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80060da:	b480      	push	{r7}
 80060dc:	b083      	sub	sp, #12
 80060de:	af00      	add	r7, sp, #0
 80060e0:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f003 0303 	and.w	r3, r3, #3
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	370c      	adds	r7, #12
 80060ee:	46bd      	mov	sp, r7
 80060f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f4:	4770      	bx	lr

080060f6 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80060f6:	b480      	push	{r7}
 80060f8:	b085      	sub	sp, #20
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	6078      	str	r0, [r7, #4]
 80060fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006100:	2300      	movs	r3, #0
 8006102:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	681a      	ldr	r2, [r3, #0]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006114:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800611a:	431a      	orrs	r2, r3
                       Command->CPSM);
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8006120:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006122:	68fa      	ldr	r2, [r7, #12]
 8006124:	4313      	orrs	r3, r2
 8006126:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	68db      	ldr	r3, [r3, #12]
 800612c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006130:	f023 030f 	bic.w	r3, r3, #15
 8006134:	68fa      	ldr	r2, [r7, #12]
 8006136:	431a      	orrs	r2, r3
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800613c:	2300      	movs	r3, #0
}
 800613e:	4618      	mov	r0, r3
 8006140:	3714      	adds	r7, #20
 8006142:	46bd      	mov	sp, r7
 8006144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006148:	4770      	bx	lr

0800614a <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800614a:	b480      	push	{r7}
 800614c:	b083      	sub	sp, #12
 800614e:	af00      	add	r7, sp, #0
 8006150:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	691b      	ldr	r3, [r3, #16]
 8006156:	b2db      	uxtb	r3, r3
}
 8006158:	4618      	mov	r0, r3
 800615a:	370c      	adds	r7, #12
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr

08006164 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8006164:	b480      	push	{r7}
 8006166:	b085      	sub	sp, #20
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
 800616c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	3314      	adds	r3, #20
 8006172:	461a      	mov	r2, r3
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	4413      	add	r3, r2
 8006178:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
}  
 800617e:	4618      	mov	r0, r3
 8006180:	3714      	adds	r7, #20
 8006182:	46bd      	mov	sp, r7
 8006184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006188:	4770      	bx	lr

0800618a <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800618a:	b480      	push	{r7}
 800618c:	b085      	sub	sp, #20
 800618e:	af00      	add	r7, sp, #0
 8006190:	6078      	str	r0, [r7, #4]
 8006192:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006194:	2300      	movs	r3, #0
 8006196:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	685a      	ldr	r2, [r3, #4]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80061b0:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80061b6:	431a      	orrs	r2, r3
                       Data->DPSM);
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80061bc:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80061be:	68fa      	ldr	r2, [r7, #12]
 80061c0:	4313      	orrs	r3, r2
 80061c2:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061c8:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	431a      	orrs	r2, r3
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80061d4:	2300      	movs	r3, #0

}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3714      	adds	r7, #20
 80061da:	46bd      	mov	sp, r7
 80061dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e0:	4770      	bx	lr

080061e2 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80061e2:	b580      	push	{r7, lr}
 80061e4:	b088      	sub	sp, #32
 80061e6:	af00      	add	r7, sp, #0
 80061e8:	6078      	str	r0, [r7, #4]
 80061ea:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80061f0:	2310      	movs	r3, #16
 80061f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80061f4:	2340      	movs	r3, #64	; 0x40
 80061f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80061f8:	2300      	movs	r3, #0
 80061fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80061fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006200:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006202:	f107 0308 	add.w	r3, r7, #8
 8006206:	4619      	mov	r1, r3
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f7ff ff74 	bl	80060f6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800620e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006212:	2110      	movs	r1, #16
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f000 fa19 	bl	800664c <SDMMC_GetCmdResp1>
 800621a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800621c:	69fb      	ldr	r3, [r7, #28]
}
 800621e:	4618      	mov	r0, r3
 8006220:	3720      	adds	r7, #32
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}

08006226 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8006226:	b580      	push	{r7, lr}
 8006228:	b088      	sub	sp, #32
 800622a:	af00      	add	r7, sp, #0
 800622c:	6078      	str	r0, [r7, #4]
 800622e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8006234:	2311      	movs	r3, #17
 8006236:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006238:	2340      	movs	r3, #64	; 0x40
 800623a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800623c:	2300      	movs	r3, #0
 800623e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006240:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006244:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006246:	f107 0308 	add.w	r3, r7, #8
 800624a:	4619      	mov	r1, r3
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f7ff ff52 	bl	80060f6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8006252:	f241 3288 	movw	r2, #5000	; 0x1388
 8006256:	2111      	movs	r1, #17
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	f000 f9f7 	bl	800664c <SDMMC_GetCmdResp1>
 800625e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006260:	69fb      	ldr	r3, [r7, #28]
}
 8006262:	4618      	mov	r0, r3
 8006264:	3720      	adds	r7, #32
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}

0800626a <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800626a:	b580      	push	{r7, lr}
 800626c:	b088      	sub	sp, #32
 800626e:	af00      	add	r7, sp, #0
 8006270:	6078      	str	r0, [r7, #4]
 8006272:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8006278:	2312      	movs	r3, #18
 800627a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800627c:	2340      	movs	r3, #64	; 0x40
 800627e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006280:	2300      	movs	r3, #0
 8006282:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006284:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006288:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800628a:	f107 0308 	add.w	r3, r7, #8
 800628e:	4619      	mov	r1, r3
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f7ff ff30 	bl	80060f6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8006296:	f241 3288 	movw	r2, #5000	; 0x1388
 800629a:	2112      	movs	r1, #18
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	f000 f9d5 	bl	800664c <SDMMC_GetCmdResp1>
 80062a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80062a4:	69fb      	ldr	r3, [r7, #28]
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3720      	adds	r7, #32
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}

080062ae <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80062ae:	b580      	push	{r7, lr}
 80062b0:	b088      	sub	sp, #32
 80062b2:	af00      	add	r7, sp, #0
 80062b4:	6078      	str	r0, [r7, #4]
 80062b6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80062bc:	2318      	movs	r3, #24
 80062be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80062c0:	2340      	movs	r3, #64	; 0x40
 80062c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80062c4:	2300      	movs	r3, #0
 80062c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80062c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80062cc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80062ce:	f107 0308 	add.w	r3, r7, #8
 80062d2:	4619      	mov	r1, r3
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f7ff ff0e 	bl	80060f6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80062da:	f241 3288 	movw	r2, #5000	; 0x1388
 80062de:	2118      	movs	r1, #24
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	f000 f9b3 	bl	800664c <SDMMC_GetCmdResp1>
 80062e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80062e8:	69fb      	ldr	r3, [r7, #28]
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	3720      	adds	r7, #32
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}

080062f2 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80062f2:	b580      	push	{r7, lr}
 80062f4:	b088      	sub	sp, #32
 80062f6:	af00      	add	r7, sp, #0
 80062f8:	6078      	str	r0, [r7, #4]
 80062fa:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8006300:	2319      	movs	r3, #25
 8006302:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006304:	2340      	movs	r3, #64	; 0x40
 8006306:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006308:	2300      	movs	r3, #0
 800630a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800630c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006310:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006312:	f107 0308 	add.w	r3, r7, #8
 8006316:	4619      	mov	r1, r3
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	f7ff feec 	bl	80060f6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800631e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006322:	2119      	movs	r1, #25
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f000 f991 	bl	800664c <SDMMC_GetCmdResp1>
 800632a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800632c:	69fb      	ldr	r3, [r7, #28]
}
 800632e:	4618      	mov	r0, r3
 8006330:	3720      	adds	r7, #32
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}
	...

08006338 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b088      	sub	sp, #32
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8006340:	2300      	movs	r3, #0
 8006342:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8006344:	230c      	movs	r3, #12
 8006346:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006348:	2340      	movs	r3, #64	; 0x40
 800634a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800634c:	2300      	movs	r3, #0
 800634e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006350:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006354:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006356:	f107 0308 	add.w	r3, r7, #8
 800635a:	4619      	mov	r1, r3
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f7ff feca 	bl	80060f6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8006362:	4a05      	ldr	r2, [pc, #20]	; (8006378 <SDMMC_CmdStopTransfer+0x40>)
 8006364:	210c      	movs	r1, #12
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f000 f970 	bl	800664c <SDMMC_GetCmdResp1>
 800636c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800636e:	69fb      	ldr	r3, [r7, #28]
}
 8006370:	4618      	mov	r0, r3
 8006372:	3720      	adds	r7, #32
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}
 8006378:	05f5e100 	.word	0x05f5e100

0800637c <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b08a      	sub	sp, #40	; 0x28
 8006380:	af00      	add	r7, sp, #0
 8006382:	60f8      	str	r0, [r7, #12]
 8006384:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800638c:	2307      	movs	r3, #7
 800638e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006390:	2340      	movs	r3, #64	; 0x40
 8006392:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006394:	2300      	movs	r3, #0
 8006396:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006398:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800639c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800639e:	f107 0310 	add.w	r3, r7, #16
 80063a2:	4619      	mov	r1, r3
 80063a4:	68f8      	ldr	r0, [r7, #12]
 80063a6:	f7ff fea6 	bl	80060f6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80063aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80063ae:	2107      	movs	r1, #7
 80063b0:	68f8      	ldr	r0, [r7, #12]
 80063b2:	f000 f94b 	bl	800664c <SDMMC_GetCmdResp1>
 80063b6:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80063b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3728      	adds	r7, #40	; 0x28
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}

080063c2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80063c2:	b580      	push	{r7, lr}
 80063c4:	b088      	sub	sp, #32
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80063ca:	2300      	movs	r3, #0
 80063cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80063ce:	2300      	movs	r3, #0
 80063d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80063d2:	2300      	movs	r3, #0
 80063d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80063d6:	2300      	movs	r3, #0
 80063d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80063da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80063de:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80063e0:	f107 0308 	add.w	r3, r7, #8
 80063e4:	4619      	mov	r1, r3
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f7ff fe85 	bl	80060f6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f000 fb65 	bl	8006abc <SDMMC_GetCmdError>
 80063f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80063f4:	69fb      	ldr	r3, [r7, #28]
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	3720      	adds	r7, #32
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}

080063fe <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80063fe:	b580      	push	{r7, lr}
 8006400:	b088      	sub	sp, #32
 8006402:	af00      	add	r7, sp, #0
 8006404:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8006406:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800640a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800640c:	2308      	movs	r3, #8
 800640e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006410:	2340      	movs	r3, #64	; 0x40
 8006412:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006414:	2300      	movs	r3, #0
 8006416:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006418:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800641c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800641e:	f107 0308 	add.w	r3, r7, #8
 8006422:	4619      	mov	r1, r3
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f7ff fe66 	bl	80060f6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f000 faf8 	bl	8006a20 <SDMMC_GetCmdResp7>
 8006430:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006432:	69fb      	ldr	r3, [r7, #28]
}
 8006434:	4618      	mov	r0, r3
 8006436:	3720      	adds	r7, #32
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}

0800643c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b088      	sub	sp, #32
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
 8006444:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800644a:	2337      	movs	r3, #55	; 0x37
 800644c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800644e:	2340      	movs	r3, #64	; 0x40
 8006450:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006452:	2300      	movs	r3, #0
 8006454:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006456:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800645a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800645c:	f107 0308 	add.w	r3, r7, #8
 8006460:	4619      	mov	r1, r3
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f7ff fe47 	bl	80060f6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8006468:	f241 3288 	movw	r2, #5000	; 0x1388
 800646c:	2137      	movs	r1, #55	; 0x37
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f000 f8ec 	bl	800664c <SDMMC_GetCmdResp1>
 8006474:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006476:	69fb      	ldr	r3, [r7, #28]
}
 8006478:	4618      	mov	r0, r3
 800647a:	3720      	adds	r7, #32
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}

08006480 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b088      	sub	sp, #32
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006490:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006494:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8006496:	2329      	movs	r3, #41	; 0x29
 8006498:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800649a:	2340      	movs	r3, #64	; 0x40
 800649c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800649e:	2300      	movs	r3, #0
 80064a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80064a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80064a6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80064a8:	f107 0308 	add.w	r3, r7, #8
 80064ac:	4619      	mov	r1, r3
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f7ff fe21 	bl	80060f6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f000 f9ff 	bl	80068b8 <SDMMC_GetCmdResp3>
 80064ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80064bc:	69fb      	ldr	r3, [r7, #28]
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3720      	adds	r7, #32
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}

080064c6 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 80064c6:	b580      	push	{r7, lr}
 80064c8:	b088      	sub	sp, #32
 80064ca:	af00      	add	r7, sp, #0
 80064cc:	6078      	str	r0, [r7, #4]
 80064ce:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80064d4:	2306      	movs	r3, #6
 80064d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80064d8:	2340      	movs	r3, #64	; 0x40
 80064da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80064dc:	2300      	movs	r3, #0
 80064de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80064e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80064e4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80064e6:	f107 0308 	add.w	r3, r7, #8
 80064ea:	4619      	mov	r1, r3
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f7ff fe02 	bl	80060f6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80064f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80064f6:	2106      	movs	r1, #6
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f000 f8a7 	bl	800664c <SDMMC_GetCmdResp1>
 80064fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006500:	69fb      	ldr	r3, [r7, #28]
}
 8006502:	4618      	mov	r0, r3
 8006504:	3720      	adds	r7, #32
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}

0800650a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800650a:	b580      	push	{r7, lr}
 800650c:	b088      	sub	sp, #32
 800650e:	af00      	add	r7, sp, #0
 8006510:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8006512:	2300      	movs	r3, #0
 8006514:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8006516:	2333      	movs	r3, #51	; 0x33
 8006518:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800651a:	2340      	movs	r3, #64	; 0x40
 800651c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800651e:	2300      	movs	r3, #0
 8006520:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006522:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006526:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006528:	f107 0308 	add.w	r3, r7, #8
 800652c:	4619      	mov	r1, r3
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f7ff fde1 	bl	80060f6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8006534:	f241 3288 	movw	r2, #5000	; 0x1388
 8006538:	2133      	movs	r1, #51	; 0x33
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f000 f886 	bl	800664c <SDMMC_GetCmdResp1>
 8006540:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006542:	69fb      	ldr	r3, [r7, #28]
}
 8006544:	4618      	mov	r0, r3
 8006546:	3720      	adds	r7, #32
 8006548:	46bd      	mov	sp, r7
 800654a:	bd80      	pop	{r7, pc}

0800654c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b088      	sub	sp, #32
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8006554:	2300      	movs	r3, #0
 8006556:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8006558:	2302      	movs	r3, #2
 800655a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800655c:	23c0      	movs	r3, #192	; 0xc0
 800655e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006560:	2300      	movs	r3, #0
 8006562:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006564:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006568:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800656a:	f107 0308 	add.w	r3, r7, #8
 800656e:	4619      	mov	r1, r3
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f7ff fdc0 	bl	80060f6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f000 f956 	bl	8006828 <SDMMC_GetCmdResp2>
 800657c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800657e:	69fb      	ldr	r3, [r7, #28]
}
 8006580:	4618      	mov	r0, r3
 8006582:	3720      	adds	r7, #32
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}

08006588 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b088      	sub	sp, #32
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
 8006590:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8006596:	2309      	movs	r3, #9
 8006598:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800659a:	23c0      	movs	r3, #192	; 0xc0
 800659c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800659e:	2300      	movs	r3, #0
 80065a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80065a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80065a6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80065a8:	f107 0308 	add.w	r3, r7, #8
 80065ac:	4619      	mov	r1, r3
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f7ff fda1 	bl	80060f6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f000 f937 	bl	8006828 <SDMMC_GetCmdResp2>
 80065ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80065bc:	69fb      	ldr	r3, [r7, #28]
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3720      	adds	r7, #32
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}

080065c6 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80065c6:	b580      	push	{r7, lr}
 80065c8:	b088      	sub	sp, #32
 80065ca:	af00      	add	r7, sp, #0
 80065cc:	6078      	str	r0, [r7, #4]
 80065ce:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80065d0:	2300      	movs	r3, #0
 80065d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80065d4:	2303      	movs	r3, #3
 80065d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80065d8:	2340      	movs	r3, #64	; 0x40
 80065da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80065dc:	2300      	movs	r3, #0
 80065de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80065e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80065e4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80065e6:	f107 0308 	add.w	r3, r7, #8
 80065ea:	4619      	mov	r1, r3
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f7ff fd82 	bl	80060f6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80065f2:	683a      	ldr	r2, [r7, #0]
 80065f4:	2103      	movs	r1, #3
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f000 f99c 	bl	8006934 <SDMMC_GetCmdResp6>
 80065fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80065fe:	69fb      	ldr	r3, [r7, #28]
}
 8006600:	4618      	mov	r0, r3
 8006602:	3720      	adds	r7, #32
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}

08006608 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b088      	sub	sp, #32
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
 8006610:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8006616:	230d      	movs	r3, #13
 8006618:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800661a:	2340      	movs	r3, #64	; 0x40
 800661c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800661e:	2300      	movs	r3, #0
 8006620:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006622:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006626:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006628:	f107 0308 	add.w	r3, r7, #8
 800662c:	4619      	mov	r1, r3
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f7ff fd61 	bl	80060f6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8006634:	f241 3288 	movw	r2, #5000	; 0x1388
 8006638:	210d      	movs	r1, #13
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f000 f806 	bl	800664c <SDMMC_GetCmdResp1>
 8006640:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006642:	69fb      	ldr	r3, [r7, #28]
}
 8006644:	4618      	mov	r0, r3
 8006646:	3720      	adds	r7, #32
 8006648:	46bd      	mov	sp, r7
 800664a:	bd80      	pop	{r7, pc}

0800664c <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b088      	sub	sp, #32
 8006650:	af00      	add	r7, sp, #0
 8006652:	60f8      	str	r0, [r7, #12]
 8006654:	460b      	mov	r3, r1
 8006656:	607a      	str	r2, [r7, #4]
 8006658:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800665a:	4b70      	ldr	r3, [pc, #448]	; (800681c <SDMMC_GetCmdResp1+0x1d0>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a70      	ldr	r2, [pc, #448]	; (8006820 <SDMMC_GetCmdResp1+0x1d4>)
 8006660:	fba2 2303 	umull	r2, r3, r2, r3
 8006664:	0a5a      	lsrs	r2, r3, #9
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	fb02 f303 	mul.w	r3, r2, r3
 800666c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800666e:	69fb      	ldr	r3, [r7, #28]
 8006670:	1e5a      	subs	r2, r3, #1
 8006672:	61fa      	str	r2, [r7, #28]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d102      	bne.n	800667e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006678:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800667c:	e0c9      	b.n	8006812 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006682:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006684:	69bb      	ldr	r3, [r7, #24]
 8006686:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800668a:	2b00      	cmp	r3, #0
 800668c:	d0ef      	beq.n	800666e <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800668e:	69bb      	ldr	r3, [r7, #24]
 8006690:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006694:	2b00      	cmp	r3, #0
 8006696:	d1ea      	bne.n	800666e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800669c:	f003 0304 	and.w	r3, r3, #4
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d004      	beq.n	80066ae <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	2204      	movs	r2, #4
 80066a8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80066aa:	2304      	movs	r3, #4
 80066ac:	e0b1      	b.n	8006812 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066b2:	f003 0301 	and.w	r3, r3, #1
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d004      	beq.n	80066c4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	2201      	movs	r2, #1
 80066be:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80066c0:	2301      	movs	r3, #1
 80066c2:	e0a6      	b.n	8006812 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	22c5      	movs	r2, #197	; 0xc5
 80066c8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80066ca:	68f8      	ldr	r0, [r7, #12]
 80066cc:	f7ff fd3d 	bl	800614a <SDIO_GetCommandResponse>
 80066d0:	4603      	mov	r3, r0
 80066d2:	461a      	mov	r2, r3
 80066d4:	7afb      	ldrb	r3, [r7, #11]
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d001      	beq.n	80066de <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80066da:	2301      	movs	r3, #1
 80066dc:	e099      	b.n	8006812 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80066de:	2100      	movs	r1, #0
 80066e0:	68f8      	ldr	r0, [r7, #12]
 80066e2:	f7ff fd3f 	bl	8006164 <SDIO_GetResponse>
 80066e6:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80066e8:	697a      	ldr	r2, [r7, #20]
 80066ea:	4b4e      	ldr	r3, [pc, #312]	; (8006824 <SDMMC_GetCmdResp1+0x1d8>)
 80066ec:	4013      	ands	r3, r2
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d101      	bne.n	80066f6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80066f2:	2300      	movs	r3, #0
 80066f4:	e08d      	b.n	8006812 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	da02      	bge.n	8006702 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80066fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006700:	e087      	b.n	8006812 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006708:	2b00      	cmp	r3, #0
 800670a:	d001      	beq.n	8006710 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800670c:	2340      	movs	r3, #64	; 0x40
 800670e:	e080      	b.n	8006812 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006716:	2b00      	cmp	r3, #0
 8006718:	d001      	beq.n	800671e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800671a:	2380      	movs	r3, #128	; 0x80
 800671c:	e079      	b.n	8006812 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006724:	2b00      	cmp	r3, #0
 8006726:	d002      	beq.n	800672e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8006728:	f44f 7380 	mov.w	r3, #256	; 0x100
 800672c:	e071      	b.n	8006812 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006734:	2b00      	cmp	r3, #0
 8006736:	d002      	beq.n	800673e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8006738:	f44f 7300 	mov.w	r3, #512	; 0x200
 800673c:	e069      	b.n	8006812 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006744:	2b00      	cmp	r3, #0
 8006746:	d002      	beq.n	800674e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8006748:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800674c:	e061      	b.n	8006812 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006754:	2b00      	cmp	r3, #0
 8006756:	d002      	beq.n	800675e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8006758:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800675c:	e059      	b.n	8006812 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006764:	2b00      	cmp	r3, #0
 8006766:	d002      	beq.n	800676e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006768:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800676c:	e051      	b.n	8006812 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006774:	2b00      	cmp	r3, #0
 8006776:	d002      	beq.n	800677e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006778:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800677c:	e049      	b.n	8006812 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006784:	2b00      	cmp	r3, #0
 8006786:	d002      	beq.n	800678e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8006788:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800678c:	e041      	b.n	8006812 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006794:	2b00      	cmp	r3, #0
 8006796:	d002      	beq.n	800679e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8006798:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800679c:	e039      	b.n	8006812 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d002      	beq.n	80067ae <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80067a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80067ac:	e031      	b.n	8006812 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d002      	beq.n	80067be <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80067b8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80067bc:	e029      	b.n	8006812 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d002      	beq.n	80067ce <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80067c8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80067cc:	e021      	b.n	8006812 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80067ce:	697b      	ldr	r3, [r7, #20]
 80067d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d002      	beq.n	80067de <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80067d8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80067dc:	e019      	b.n	8006812 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d002      	beq.n	80067ee <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80067e8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80067ec:	e011      	b.n	8006812 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d002      	beq.n	80067fe <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80067f8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80067fc:	e009      	b.n	8006812 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	f003 0308 	and.w	r3, r3, #8
 8006804:	2b00      	cmp	r3, #0
 8006806:	d002      	beq.n	800680e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8006808:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800680c:	e001      	b.n	8006812 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800680e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8006812:	4618      	mov	r0, r3
 8006814:	3720      	adds	r7, #32
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}
 800681a:	bf00      	nop
 800681c:	20000000 	.word	0x20000000
 8006820:	10624dd3 	.word	0x10624dd3
 8006824:	fdffe008 	.word	0xfdffe008

08006828 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8006828:	b480      	push	{r7}
 800682a:	b085      	sub	sp, #20
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006830:	4b1f      	ldr	r3, [pc, #124]	; (80068b0 <SDMMC_GetCmdResp2+0x88>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a1f      	ldr	r2, [pc, #124]	; (80068b4 <SDMMC_GetCmdResp2+0x8c>)
 8006836:	fba2 2303 	umull	r2, r3, r2, r3
 800683a:	0a5b      	lsrs	r3, r3, #9
 800683c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006840:	fb02 f303 	mul.w	r3, r2, r3
 8006844:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	1e5a      	subs	r2, r3, #1
 800684a:	60fa      	str	r2, [r7, #12]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d102      	bne.n	8006856 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006850:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006854:	e026      	b.n	80068a4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800685a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8006862:	2b00      	cmp	r3, #0
 8006864:	d0ef      	beq.n	8006846 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800686c:	2b00      	cmp	r3, #0
 800686e:	d1ea      	bne.n	8006846 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006874:	f003 0304 	and.w	r3, r3, #4
 8006878:	2b00      	cmp	r3, #0
 800687a:	d004      	beq.n	8006886 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2204      	movs	r2, #4
 8006880:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006882:	2304      	movs	r3, #4
 8006884:	e00e      	b.n	80068a4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800688a:	f003 0301 	and.w	r3, r3, #1
 800688e:	2b00      	cmp	r3, #0
 8006890:	d004      	beq.n	800689c <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2201      	movs	r2, #1
 8006896:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006898:	2301      	movs	r3, #1
 800689a:	e003      	b.n	80068a4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	22c5      	movs	r2, #197	; 0xc5
 80068a0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80068a2:	2300      	movs	r3, #0
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	3714      	adds	r7, #20
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr
 80068b0:	20000000 	.word	0x20000000
 80068b4:	10624dd3 	.word	0x10624dd3

080068b8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b085      	sub	sp, #20
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80068c0:	4b1a      	ldr	r3, [pc, #104]	; (800692c <SDMMC_GetCmdResp3+0x74>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4a1a      	ldr	r2, [pc, #104]	; (8006930 <SDMMC_GetCmdResp3+0x78>)
 80068c6:	fba2 2303 	umull	r2, r3, r2, r3
 80068ca:	0a5b      	lsrs	r3, r3, #9
 80068cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80068d0:	fb02 f303 	mul.w	r3, r2, r3
 80068d4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	1e5a      	subs	r2, r3, #1
 80068da:	60fa      	str	r2, [r7, #12]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d102      	bne.n	80068e6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80068e0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80068e4:	e01b      	b.n	800691e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068ea:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d0ef      	beq.n	80068d6 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d1ea      	bne.n	80068d6 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006904:	f003 0304 	and.w	r3, r3, #4
 8006908:	2b00      	cmp	r3, #0
 800690a:	d004      	beq.n	8006916 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2204      	movs	r2, #4
 8006910:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006912:	2304      	movs	r3, #4
 8006914:	e003      	b.n	800691e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	22c5      	movs	r2, #197	; 0xc5
 800691a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800691c:	2300      	movs	r3, #0
}
 800691e:	4618      	mov	r0, r3
 8006920:	3714      	adds	r7, #20
 8006922:	46bd      	mov	sp, r7
 8006924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006928:	4770      	bx	lr
 800692a:	bf00      	nop
 800692c:	20000000 	.word	0x20000000
 8006930:	10624dd3 	.word	0x10624dd3

08006934 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b088      	sub	sp, #32
 8006938:	af00      	add	r7, sp, #0
 800693a:	60f8      	str	r0, [r7, #12]
 800693c:	460b      	mov	r3, r1
 800693e:	607a      	str	r2, [r7, #4]
 8006940:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006942:	4b35      	ldr	r3, [pc, #212]	; (8006a18 <SDMMC_GetCmdResp6+0xe4>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a35      	ldr	r2, [pc, #212]	; (8006a1c <SDMMC_GetCmdResp6+0xe8>)
 8006948:	fba2 2303 	umull	r2, r3, r2, r3
 800694c:	0a5b      	lsrs	r3, r3, #9
 800694e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006952:	fb02 f303 	mul.w	r3, r2, r3
 8006956:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8006958:	69fb      	ldr	r3, [r7, #28]
 800695a:	1e5a      	subs	r2, r3, #1
 800695c:	61fa      	str	r2, [r7, #28]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d102      	bne.n	8006968 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006962:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006966:	e052      	b.n	8006a0e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800696c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800696e:	69bb      	ldr	r3, [r7, #24]
 8006970:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8006974:	2b00      	cmp	r3, #0
 8006976:	d0ef      	beq.n	8006958 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006978:	69bb      	ldr	r3, [r7, #24]
 800697a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800697e:	2b00      	cmp	r3, #0
 8006980:	d1ea      	bne.n	8006958 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006986:	f003 0304 	and.w	r3, r3, #4
 800698a:	2b00      	cmp	r3, #0
 800698c:	d004      	beq.n	8006998 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	2204      	movs	r2, #4
 8006992:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006994:	2304      	movs	r3, #4
 8006996:	e03a      	b.n	8006a0e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800699c:	f003 0301 	and.w	r3, r3, #1
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d004      	beq.n	80069ae <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2201      	movs	r2, #1
 80069a8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80069aa:	2301      	movs	r3, #1
 80069ac:	e02f      	b.n	8006a0e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80069ae:	68f8      	ldr	r0, [r7, #12]
 80069b0:	f7ff fbcb 	bl	800614a <SDIO_GetCommandResponse>
 80069b4:	4603      	mov	r3, r0
 80069b6:	461a      	mov	r2, r3
 80069b8:	7afb      	ldrb	r3, [r7, #11]
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d001      	beq.n	80069c2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80069be:	2301      	movs	r3, #1
 80069c0:	e025      	b.n	8006a0e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	22c5      	movs	r2, #197	; 0xc5
 80069c6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80069c8:	2100      	movs	r1, #0
 80069ca:	68f8      	ldr	r0, [r7, #12]
 80069cc:	f7ff fbca 	bl	8006164 <SDIO_GetResponse>
 80069d0:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d106      	bne.n	80069ea <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	0c1b      	lsrs	r3, r3, #16
 80069e0:	b29a      	uxth	r2, r3
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80069e6:	2300      	movs	r3, #0
 80069e8:	e011      	b.n	8006a0e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d002      	beq.n	80069fa <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80069f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80069f8:	e009      	b.n	8006a0e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d002      	beq.n	8006a0a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006a04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006a08:	e001      	b.n	8006a0e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006a0a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	3720      	adds	r7, #32
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}
 8006a16:	bf00      	nop
 8006a18:	20000000 	.word	0x20000000
 8006a1c:	10624dd3 	.word	0x10624dd3

08006a20 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b085      	sub	sp, #20
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006a28:	4b22      	ldr	r3, [pc, #136]	; (8006ab4 <SDMMC_GetCmdResp7+0x94>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a22      	ldr	r2, [pc, #136]	; (8006ab8 <SDMMC_GetCmdResp7+0x98>)
 8006a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8006a32:	0a5b      	lsrs	r3, r3, #9
 8006a34:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a38:	fb02 f303 	mul.w	r3, r2, r3
 8006a3c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	1e5a      	subs	r2, r3, #1
 8006a42:	60fa      	str	r2, [r7, #12]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d102      	bne.n	8006a4e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006a48:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006a4c:	e02c      	b.n	8006aa8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a52:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d0ef      	beq.n	8006a3e <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d1ea      	bne.n	8006a3e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a6c:	f003 0304 	and.w	r3, r3, #4
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d004      	beq.n	8006a7e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2204      	movs	r2, #4
 8006a78:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006a7a:	2304      	movs	r3, #4
 8006a7c:	e014      	b.n	8006aa8 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a82:	f003 0301 	and.w	r3, r3, #1
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d004      	beq.n	8006a94 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2201      	movs	r2, #1
 8006a8e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006a90:	2301      	movs	r3, #1
 8006a92:	e009      	b.n	8006aa8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d002      	beq.n	8006aa6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2240      	movs	r2, #64	; 0x40
 8006aa4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8006aa6:	2300      	movs	r3, #0
  
}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	3714      	adds	r7, #20
 8006aac:	46bd      	mov	sp, r7
 8006aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab2:	4770      	bx	lr
 8006ab4:	20000000 	.word	0x20000000
 8006ab8:	10624dd3 	.word	0x10624dd3

08006abc <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b085      	sub	sp, #20
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006ac4:	4b11      	ldr	r3, [pc, #68]	; (8006b0c <SDMMC_GetCmdError+0x50>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a11      	ldr	r2, [pc, #68]	; (8006b10 <SDMMC_GetCmdError+0x54>)
 8006aca:	fba2 2303 	umull	r2, r3, r2, r3
 8006ace:	0a5b      	lsrs	r3, r3, #9
 8006ad0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ad4:	fb02 f303 	mul.w	r3, r2, r3
 8006ad8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	1e5a      	subs	r2, r3, #1
 8006ade:	60fa      	str	r2, [r7, #12]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d102      	bne.n	8006aea <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006ae4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006ae8:	e009      	b.n	8006afe <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006aee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d0f1      	beq.n	8006ada <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	22c5      	movs	r2, #197	; 0xc5
 8006afa:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8006afc:	2300      	movs	r3, #0
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3714      	adds	r7, #20
 8006b02:	46bd      	mov	sp, r7
 8006b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b08:	4770      	bx	lr
 8006b0a:	bf00      	nop
 8006b0c:	20000000 	.word	0x20000000
 8006b10:	10624dd3 	.word	0x10624dd3

08006b14 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8006b18:	4904      	ldr	r1, [pc, #16]	; (8006b2c <MX_FATFS_Init+0x18>)
 8006b1a:	4805      	ldr	r0, [pc, #20]	; (8006b30 <MX_FATFS_Init+0x1c>)
 8006b1c:	f003 fa28 	bl	8009f70 <FATFS_LinkDriver>
 8006b20:	4603      	mov	r3, r0
 8006b22:	461a      	mov	r2, r3
 8006b24:	4b03      	ldr	r3, [pc, #12]	; (8006b34 <MX_FATFS_Init+0x20>)
 8006b26:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006b28:	bf00      	nop
 8006b2a:	bd80      	pop	{r7, pc}
 8006b2c:	200028c0 	.word	0x200028c0
 8006b30:	0800adf4 	.word	0x0800adf4
 8006b34:	200028bc 	.word	0x200028bc

08006b38 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006b3c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	46bd      	mov	sp, r7
 8006b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b46:	4770      	bx	lr

08006b48 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b082      	sub	sp, #8
 8006b4c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8006b52:	f000 f896 	bl	8006c82 <BSP_SD_IsDetected>
 8006b56:	4603      	mov	r3, r0
 8006b58:	2b01      	cmp	r3, #1
 8006b5a:	d001      	beq.n	8006b60 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	e012      	b.n	8006b86 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8006b60:	480b      	ldr	r0, [pc, #44]	; (8006b90 <BSP_SD_Init+0x48>)
 8006b62:	f7fd fb1d 	bl	80041a0 <HAL_SD_Init>
 8006b66:	4603      	mov	r3, r0
 8006b68:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8006b6a:	79fb      	ldrb	r3, [r7, #7]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d109      	bne.n	8006b84 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8006b70:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006b74:	4806      	ldr	r0, [pc, #24]	; (8006b90 <BSP_SD_Init+0x48>)
 8006b76:	f7fe f8eb 	bl	8004d50 <HAL_SD_ConfigWideBusOperation>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d001      	beq.n	8006b84 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8006b80:	2301      	movs	r3, #1
 8006b82:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8006b84:	79fb      	ldrb	r3, [r7, #7]
}
 8006b86:	4618      	mov	r0, r3
 8006b88:	3708      	adds	r7, #8
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}
 8006b8e:	bf00      	nop
 8006b90:	20002708 	.word	0x20002708

08006b94 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b086      	sub	sp, #24
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	60f8      	str	r0, [r7, #12]
 8006b9c:	60b9      	str	r1, [r7, #8]
 8006b9e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	68ba      	ldr	r2, [r7, #8]
 8006ba8:	68f9      	ldr	r1, [r7, #12]
 8006baa:	4806      	ldr	r0, [pc, #24]	; (8006bc4 <BSP_SD_ReadBlocks_DMA+0x30>)
 8006bac:	f7fd fba8 	bl	8004300 <HAL_SD_ReadBlocks_DMA>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d001      	beq.n	8006bba <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8006bba:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	3718      	adds	r7, #24
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}
 8006bc4:	20002708 	.word	0x20002708

08006bc8 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b086      	sub	sp, #24
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	60f8      	str	r0, [r7, #12]
 8006bd0:	60b9      	str	r1, [r7, #8]
 8006bd2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	68ba      	ldr	r2, [r7, #8]
 8006bdc:	68f9      	ldr	r1, [r7, #12]
 8006bde:	4806      	ldr	r0, [pc, #24]	; (8006bf8 <BSP_SD_WriteBlocks_DMA+0x30>)
 8006be0:	f7fd fc70 	bl	80044c4 <HAL_SD_WriteBlocks_DMA>
 8006be4:	4603      	mov	r3, r0
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d001      	beq.n	8006bee <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8006bea:	2301      	movs	r3, #1
 8006bec:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8006bee:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	3718      	adds	r7, #24
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bd80      	pop	{r7, pc}
 8006bf8:	20002708 	.word	0x20002708

08006bfc <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8006c00:	4805      	ldr	r0, [pc, #20]	; (8006c18 <BSP_SD_GetCardState+0x1c>)
 8006c02:	f7fe f93f 	bl	8004e84 <HAL_SD_GetCardState>
 8006c06:	4603      	mov	r3, r0
 8006c08:	2b04      	cmp	r3, #4
 8006c0a:	bf14      	ite	ne
 8006c0c:	2301      	movne	r3, #1
 8006c0e:	2300      	moveq	r3, #0
 8006c10:	b2db      	uxtb	r3, r3
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	bd80      	pop	{r7, pc}
 8006c16:	bf00      	nop
 8006c18:	20002708 	.word	0x20002708

08006c1c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b082      	sub	sp, #8
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8006c24:	6879      	ldr	r1, [r7, #4]
 8006c26:	4803      	ldr	r0, [pc, #12]	; (8006c34 <BSP_SD_GetCardInfo+0x18>)
 8006c28:	f7fe f866 	bl	8004cf8 <HAL_SD_GetCardInfo>
}
 8006c2c:	bf00      	nop
 8006c2e:	3708      	adds	r7, #8
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}
 8006c34:	20002708 	.word	0x20002708

08006c38 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b082      	sub	sp, #8
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8006c40:	f000 f818 	bl	8006c74 <BSP_SD_AbortCallback>
}
 8006c44:	bf00      	nop
 8006c46:	3708      	adds	r7, #8
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}

08006c4c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b082      	sub	sp, #8
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8006c54:	f000 f98c 	bl	8006f70 <BSP_SD_WriteCpltCallback>
}
 8006c58:	bf00      	nop
 8006c5a:	3708      	adds	r7, #8
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}

08006c60 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b082      	sub	sp, #8
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8006c68:	f000 f98e 	bl	8006f88 <BSP_SD_ReadCpltCallback>
}
 8006c6c:	bf00      	nop
 8006c6e:	3708      	adds	r7, #8
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}

08006c74 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8006c74:	b480      	push	{r7}
 8006c76:	af00      	add	r7, sp, #0

}
 8006c78:	bf00      	nop
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c80:	4770      	bx	lr

08006c82 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8006c82:	b480      	push	{r7}
 8006c84:	b083      	sub	sp, #12
 8006c86:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8006c88:	2301      	movs	r3, #1
 8006c8a:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8006c8c:	79fb      	ldrb	r3, [r7, #7]
 8006c8e:	b2db      	uxtb	r3, r3
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	370c      	adds	r7, #12
 8006c94:	46bd      	mov	sp, r7
 8006c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9a:	4770      	bx	lr

08006c9c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b084      	sub	sp, #16
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8006ca4:	f7fa fb6c 	bl	8001380 <HAL_GetTick>
 8006ca8:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8006caa:	e006      	b.n	8006cba <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006cac:	f7ff ffa6 	bl	8006bfc <BSP_SD_GetCardState>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d101      	bne.n	8006cba <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	e009      	b.n	8006cce <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8006cba:	f7fa fb61 	bl	8001380 <HAL_GetTick>
 8006cbe:	4602      	mov	r2, r0
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	1ad3      	subs	r3, r2, r3
 8006cc4:	687a      	ldr	r2, [r7, #4]
 8006cc6:	429a      	cmp	r2, r3
 8006cc8:	d8f0      	bhi.n	8006cac <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8006cca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3710      	adds	r7, #16
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}
	...

08006cd8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b082      	sub	sp, #8
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	4603      	mov	r3, r0
 8006ce0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8006ce2:	4b0b      	ldr	r3, [pc, #44]	; (8006d10 <SD_CheckStatus+0x38>)
 8006ce4:	2201      	movs	r2, #1
 8006ce6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8006ce8:	f7ff ff88 	bl	8006bfc <BSP_SD_GetCardState>
 8006cec:	4603      	mov	r3, r0
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d107      	bne.n	8006d02 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8006cf2:	4b07      	ldr	r3, [pc, #28]	; (8006d10 <SD_CheckStatus+0x38>)
 8006cf4:	781b      	ldrb	r3, [r3, #0]
 8006cf6:	b2db      	uxtb	r3, r3
 8006cf8:	f023 0301 	bic.w	r3, r3, #1
 8006cfc:	b2da      	uxtb	r2, r3
 8006cfe:	4b04      	ldr	r3, [pc, #16]	; (8006d10 <SD_CheckStatus+0x38>)
 8006d00:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8006d02:	4b03      	ldr	r3, [pc, #12]	; (8006d10 <SD_CheckStatus+0x38>)
 8006d04:	781b      	ldrb	r3, [r3, #0]
 8006d06:	b2db      	uxtb	r3, r3
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	3708      	adds	r7, #8
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}
 8006d10:	20000009 	.word	0x20000009

08006d14 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b082      	sub	sp, #8
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8006d1e:	f7ff ff13 	bl	8006b48 <BSP_SD_Init>
 8006d22:	4603      	mov	r3, r0
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d107      	bne.n	8006d38 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8006d28:	79fb      	ldrb	r3, [r7, #7]
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f7ff ffd4 	bl	8006cd8 <SD_CheckStatus>
 8006d30:	4603      	mov	r3, r0
 8006d32:	461a      	mov	r2, r3
 8006d34:	4b04      	ldr	r3, [pc, #16]	; (8006d48 <SD_initialize+0x34>)
 8006d36:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8006d38:	4b03      	ldr	r3, [pc, #12]	; (8006d48 <SD_initialize+0x34>)
 8006d3a:	781b      	ldrb	r3, [r3, #0]
 8006d3c:	b2db      	uxtb	r3, r3
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	3708      	adds	r7, #8
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}
 8006d46:	bf00      	nop
 8006d48:	20000009 	.word	0x20000009

08006d4c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b082      	sub	sp, #8
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	4603      	mov	r3, r0
 8006d54:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8006d56:	79fb      	ldrb	r3, [r7, #7]
 8006d58:	4618      	mov	r0, r3
 8006d5a:	f7ff ffbd 	bl	8006cd8 <SD_CheckStatus>
 8006d5e:	4603      	mov	r3, r0
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	3708      	adds	r7, #8
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}

08006d68 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b086      	sub	sp, #24
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	60b9      	str	r1, [r7, #8]
 8006d70:	607a      	str	r2, [r7, #4]
 8006d72:	603b      	str	r3, [r7, #0]
 8006d74:	4603      	mov	r3, r0
 8006d76:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006d78:	2301      	movs	r3, #1
 8006d7a:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8006d7c:	f247 5030 	movw	r0, #30000	; 0x7530
 8006d80:	f7ff ff8c 	bl	8006c9c <SD_CheckStatusWithTimeout>
 8006d84:	4603      	mov	r3, r0
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	da01      	bge.n	8006d8e <SD_read+0x26>
  {
    return res;
 8006d8a:	7dfb      	ldrb	r3, [r7, #23]
 8006d8c:	e03b      	b.n	8006e06 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8006d8e:	683a      	ldr	r2, [r7, #0]
 8006d90:	6879      	ldr	r1, [r7, #4]
 8006d92:	68b8      	ldr	r0, [r7, #8]
 8006d94:	f7ff fefe 	bl	8006b94 <BSP_SD_ReadBlocks_DMA>
 8006d98:	4603      	mov	r3, r0
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d132      	bne.n	8006e04 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8006d9e:	4b1c      	ldr	r3, [pc, #112]	; (8006e10 <SD_read+0xa8>)
 8006da0:	2200      	movs	r2, #0
 8006da2:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8006da4:	f7fa faec 	bl	8001380 <HAL_GetTick>
 8006da8:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8006daa:	bf00      	nop
 8006dac:	4b18      	ldr	r3, [pc, #96]	; (8006e10 <SD_read+0xa8>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d108      	bne.n	8006dc6 <SD_read+0x5e>
 8006db4:	f7fa fae4 	bl	8001380 <HAL_GetTick>
 8006db8:	4602      	mov	r2, r0
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	1ad3      	subs	r3, r2, r3
 8006dbe:	f247 522f 	movw	r2, #29999	; 0x752f
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d9f2      	bls.n	8006dac <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8006dc6:	4b12      	ldr	r3, [pc, #72]	; (8006e10 <SD_read+0xa8>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d102      	bne.n	8006dd4 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8006dce:	2301      	movs	r3, #1
 8006dd0:	75fb      	strb	r3, [r7, #23]
 8006dd2:	e017      	b.n	8006e04 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8006dd4:	4b0e      	ldr	r3, [pc, #56]	; (8006e10 <SD_read+0xa8>)
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8006dda:	f7fa fad1 	bl	8001380 <HAL_GetTick>
 8006dde:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8006de0:	e007      	b.n	8006df2 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006de2:	f7ff ff0b 	bl	8006bfc <BSP_SD_GetCardState>
 8006de6:	4603      	mov	r3, r0
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d102      	bne.n	8006df2 <SD_read+0x8a>
          {
            res = RES_OK;
 8006dec:	2300      	movs	r3, #0
 8006dee:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8006df0:	e008      	b.n	8006e04 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8006df2:	f7fa fac5 	bl	8001380 <HAL_GetTick>
 8006df6:	4602      	mov	r2, r0
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	1ad3      	subs	r3, r2, r3
 8006dfc:	f247 522f 	movw	r2, #29999	; 0x752f
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d9ee      	bls.n	8006de2 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8006e04:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3718      	adds	r7, #24
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}
 8006e0e:	bf00      	nop
 8006e10:	200028c8 	.word	0x200028c8

08006e14 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b086      	sub	sp, #24
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	60b9      	str	r1, [r7, #8]
 8006e1c:	607a      	str	r2, [r7, #4]
 8006e1e:	603b      	str	r3, [r7, #0]
 8006e20:	4603      	mov	r3, r0
 8006e22:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006e24:	2301      	movs	r3, #1
 8006e26:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8006e28:	4b24      	ldr	r3, [pc, #144]	; (8006ebc <SD_write+0xa8>)
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8006e2e:	f247 5030 	movw	r0, #30000	; 0x7530
 8006e32:	f7ff ff33 	bl	8006c9c <SD_CheckStatusWithTimeout>
 8006e36:	4603      	mov	r3, r0
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	da01      	bge.n	8006e40 <SD_write+0x2c>
  {
    return res;
 8006e3c:	7dfb      	ldrb	r3, [r7, #23]
 8006e3e:	e038      	b.n	8006eb2 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8006e40:	683a      	ldr	r2, [r7, #0]
 8006e42:	6879      	ldr	r1, [r7, #4]
 8006e44:	68b8      	ldr	r0, [r7, #8]
 8006e46:	f7ff febf 	bl	8006bc8 <BSP_SD_WriteBlocks_DMA>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d12f      	bne.n	8006eb0 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8006e50:	f7fa fa96 	bl	8001380 <HAL_GetTick>
 8006e54:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8006e56:	bf00      	nop
 8006e58:	4b18      	ldr	r3, [pc, #96]	; (8006ebc <SD_write+0xa8>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d108      	bne.n	8006e72 <SD_write+0x5e>
 8006e60:	f7fa fa8e 	bl	8001380 <HAL_GetTick>
 8006e64:	4602      	mov	r2, r0
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	1ad3      	subs	r3, r2, r3
 8006e6a:	f247 522f 	movw	r2, #29999	; 0x752f
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d9f2      	bls.n	8006e58 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8006e72:	4b12      	ldr	r3, [pc, #72]	; (8006ebc <SD_write+0xa8>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d102      	bne.n	8006e80 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	75fb      	strb	r3, [r7, #23]
 8006e7e:	e017      	b.n	8006eb0 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8006e80:	4b0e      	ldr	r3, [pc, #56]	; (8006ebc <SD_write+0xa8>)
 8006e82:	2200      	movs	r2, #0
 8006e84:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8006e86:	f7fa fa7b 	bl	8001380 <HAL_GetTick>
 8006e8a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8006e8c:	e007      	b.n	8006e9e <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006e8e:	f7ff feb5 	bl	8006bfc <BSP_SD_GetCardState>
 8006e92:	4603      	mov	r3, r0
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d102      	bne.n	8006e9e <SD_write+0x8a>
          {
            res = RES_OK;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	75fb      	strb	r3, [r7, #23]
            break;
 8006e9c:	e008      	b.n	8006eb0 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8006e9e:	f7fa fa6f 	bl	8001380 <HAL_GetTick>
 8006ea2:	4602      	mov	r2, r0
 8006ea4:	693b      	ldr	r3, [r7, #16]
 8006ea6:	1ad3      	subs	r3, r2, r3
 8006ea8:	f247 522f 	movw	r2, #29999	; 0x752f
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d9ee      	bls.n	8006e8e <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8006eb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3718      	adds	r7, #24
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}
 8006eba:	bf00      	nop
 8006ebc:	200028c4 	.word	0x200028c4

08006ec0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b08c      	sub	sp, #48	; 0x30
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	603a      	str	r2, [r7, #0]
 8006eca:	71fb      	strb	r3, [r7, #7]
 8006ecc:	460b      	mov	r3, r1
 8006ece:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006ed6:	4b25      	ldr	r3, [pc, #148]	; (8006f6c <SD_ioctl+0xac>)
 8006ed8:	781b      	ldrb	r3, [r3, #0]
 8006eda:	b2db      	uxtb	r3, r3
 8006edc:	f003 0301 	and.w	r3, r3, #1
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d001      	beq.n	8006ee8 <SD_ioctl+0x28>
 8006ee4:	2303      	movs	r3, #3
 8006ee6:	e03c      	b.n	8006f62 <SD_ioctl+0xa2>

  switch (cmd)
 8006ee8:	79bb      	ldrb	r3, [r7, #6]
 8006eea:	2b03      	cmp	r3, #3
 8006eec:	d834      	bhi.n	8006f58 <SD_ioctl+0x98>
 8006eee:	a201      	add	r2, pc, #4	; (adr r2, 8006ef4 <SD_ioctl+0x34>)
 8006ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ef4:	08006f05 	.word	0x08006f05
 8006ef8:	08006f0d 	.word	0x08006f0d
 8006efc:	08006f25 	.word	0x08006f25
 8006f00:	08006f3f 	.word	0x08006f3f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8006f04:	2300      	movs	r3, #0
 8006f06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006f0a:	e028      	b.n	8006f5e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8006f0c:	f107 030c 	add.w	r3, r7, #12
 8006f10:	4618      	mov	r0, r3
 8006f12:	f7ff fe83 	bl	8006c1c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8006f16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006f22:	e01c      	b.n	8006f5e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006f24:	f107 030c 	add.w	r3, r7, #12
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f7ff fe77 	bl	8006c1c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8006f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f30:	b29a      	uxth	r2, r3
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8006f36:	2300      	movs	r3, #0
 8006f38:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006f3c:	e00f      	b.n	8006f5e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006f3e:	f107 030c 	add.w	r3, r7, #12
 8006f42:	4618      	mov	r0, r3
 8006f44:	f7ff fe6a 	bl	8006c1c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8006f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f4a:	0a5a      	lsrs	r2, r3, #9
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006f50:	2300      	movs	r3, #0
 8006f52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006f56:	e002      	b.n	8006f5e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8006f58:	2304      	movs	r3, #4
 8006f5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8006f5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	3730      	adds	r7, #48	; 0x30
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}
 8006f6a:	bf00      	nop
 8006f6c:	20000009 	.word	0x20000009

08006f70 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8006f70:	b480      	push	{r7}
 8006f72:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8006f74:	4b03      	ldr	r3, [pc, #12]	; (8006f84 <BSP_SD_WriteCpltCallback+0x14>)
 8006f76:	2201      	movs	r2, #1
 8006f78:	601a      	str	r2, [r3, #0]
}
 8006f7a:	bf00      	nop
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f82:	4770      	bx	lr
 8006f84:	200028c4 	.word	0x200028c4

08006f88 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8006f8c:	4b03      	ldr	r3, [pc, #12]	; (8006f9c <BSP_SD_ReadCpltCallback+0x14>)
 8006f8e:	2201      	movs	r2, #1
 8006f90:	601a      	str	r2, [r3, #0]
}
 8006f92:	bf00      	nop
 8006f94:	46bd      	mov	sp, r7
 8006f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9a:	4770      	bx	lr
 8006f9c:	200028c8 	.word	0x200028c8

08006fa0 <ee24_isConnected>:
#endif

uint8_t ee24_lock = 0;
//################################################################################################################
bool ee24_isConnected(void)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	af00      	add	r7, sp, #0
  #if (_EEPROM_USE_WP_PIN==1)
  HAL_GPIO_WritePin(_EEPROM_WP_GPIO,_EEPROM_WP_PIN,GPIO_PIN_SET);
 8006fa4:	2201      	movs	r2, #1
 8006fa6:	2120      	movs	r1, #32
 8006fa8:	4808      	ldr	r0, [pc, #32]	; (8006fcc <ee24_isConnected+0x2c>)
 8006faa:	f7fb fb35 	bl	8002618 <HAL_GPIO_WritePin>
  #endif
  if (HAL_I2C_IsDeviceReady(&_EEPROM_I2C, _EEPROM_ADDRESS, 2, 100)==HAL_OK)
 8006fae:	2364      	movs	r3, #100	; 0x64
 8006fb0:	2202      	movs	r2, #2
 8006fb2:	21a0      	movs	r1, #160	; 0xa0
 8006fb4:	4806      	ldr	r0, [pc, #24]	; (8006fd0 <ee24_isConnected+0x30>)
 8006fb6:	f7fb ffb9 	bl	8002f2c <HAL_I2C_IsDeviceReady>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d101      	bne.n	8006fc4 <ee24_isConnected+0x24>
    return true;
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	e000      	b.n	8006fc6 <ee24_isConnected+0x26>
  else
    return false;
 8006fc4:	2300      	movs	r3, #0
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	bd80      	pop	{r7, pc}
 8006fca:	bf00      	nop
 8006fcc:	40020400 	.word	0x40020400
 8006fd0:	20000078 	.word	0x20000078

08006fd4 <ee24_write>:
//################################################################################################################
bool ee24_write(uint16_t address, uint8_t *data, size_t len, uint32_t timeout)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b08a      	sub	sp, #40	; 0x28
 8006fd8:	af04      	add	r7, sp, #16
 8006fda:	60b9      	str	r1, [r7, #8]
 8006fdc:	607a      	str	r2, [r7, #4]
 8006fde:	603b      	str	r3, [r7, #0]
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	81fb      	strh	r3, [r7, #14]
  if (ee24_lock == 1)
 8006fe4:	4b31      	ldr	r3, [pc, #196]	; (80070ac <ee24_write+0xd8>)
 8006fe6:	781b      	ldrb	r3, [r3, #0]
 8006fe8:	2b01      	cmp	r3, #1
 8006fea:	d101      	bne.n	8006ff0 <ee24_write+0x1c>
    return false;
 8006fec:	2300      	movs	r3, #0
 8006fee:	e058      	b.n	80070a2 <ee24_write+0xce>
  ee24_lock = 1;
 8006ff0:	4b2e      	ldr	r3, [pc, #184]	; (80070ac <ee24_write+0xd8>)
 8006ff2:	2201      	movs	r2, #1
 8006ff4:	701a      	strb	r2, [r3, #0]
  uint16_t w;
  uint32_t startTime = HAL_GetTick();
 8006ff6:	f7fa f9c3 	bl	8001380 <HAL_GetTick>
 8006ffa:	6138      	str	r0, [r7, #16]
  #if	(_EEPROM_USE_WP_PIN==1)
  HAL_GPIO_WritePin(_EEPROM_WP_GPIO, _EEPROM_WP_PIN,GPIO_PIN_RESET);
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	2120      	movs	r1, #32
 8007000:	482b      	ldr	r0, [pc, #172]	; (80070b0 <ee24_write+0xdc>)
 8007002:	f7fb fb09 	bl	8002618 <HAL_GPIO_WritePin>
  #endif
  while (1)
  {
    w = _EEPROM_PSIZE - (address  % _EEPROM_PSIZE);
 8007006:	89fb      	ldrh	r3, [r7, #14]
 8007008:	f003 031f 	and.w	r3, r3, #31
 800700c:	b29b      	uxth	r3, r3
 800700e:	f1c3 0320 	rsb	r3, r3, #32
 8007012:	82fb      	strh	r3, [r7, #22]
    if (w > len)
 8007014:	8afb      	ldrh	r3, [r7, #22]
 8007016:	687a      	ldr	r2, [r7, #4]
 8007018:	429a      	cmp	r2, r3
 800701a:	d201      	bcs.n	8007020 <ee24_write+0x4c>
      w = len;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	82fb      	strh	r3, [r7, #22]
    #elif (_EEPROM_SIZE_KBIT==8)
    if (HAL_I2C_Mem_Write(&_EEPROM_I2C, _EEPROM_ADDRESS | ((address & 0x0300) >> 7), (address & 0xff), I2C_MEMADD_SIZE_8BIT, data, w, 100) == HAL_OK)
    #elif (_EEPROM_SIZE_KBIT==16)
    if (HAL_I2C_Mem_Write(&_EEPROM_I2C, _EEPROM_ADDRESS | ((address & 0x0700) >> 7), (address & 0xff), I2C_MEMADD_SIZE_8BIT, data, w, 100) == HAL_OK)
    #else
    if (HAL_I2C_Mem_Write(&_EEPROM_I2C, _EEPROM_ADDRESS, address, I2C_MEMADD_SIZE_16BIT, data, w, 100) == HAL_OK)
 8007020:	89fa      	ldrh	r2, [r7, #14]
 8007022:	2364      	movs	r3, #100	; 0x64
 8007024:	9302      	str	r3, [sp, #8]
 8007026:	8afb      	ldrh	r3, [r7, #22]
 8007028:	9301      	str	r3, [sp, #4]
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	9300      	str	r3, [sp, #0]
 800702e:	2310      	movs	r3, #16
 8007030:	21a0      	movs	r1, #160	; 0xa0
 8007032:	4820      	ldr	r0, [pc, #128]	; (80070b4 <ee24_write+0xe0>)
 8007034:	f7fb fc4e 	bl	80028d4 <HAL_I2C_Mem_Write>
 8007038:	4603      	mov	r3, r0
 800703a:	2b00      	cmp	r3, #0
 800703c:	d128      	bne.n	8007090 <ee24_write+0xbc>
    #endif
    {
      ee24_delay(10);
 800703e:	200a      	movs	r0, #10
 8007040:	f7fa f9aa 	bl	8001398 <HAL_Delay>
      len -= w;
 8007044:	8afb      	ldrh	r3, [r7, #22]
 8007046:	687a      	ldr	r2, [r7, #4]
 8007048:	1ad3      	subs	r3, r2, r3
 800704a:	607b      	str	r3, [r7, #4]
      data += w;
 800704c:	8afb      	ldrh	r3, [r7, #22]
 800704e:	68ba      	ldr	r2, [r7, #8]
 8007050:	4413      	add	r3, r2
 8007052:	60bb      	str	r3, [r7, #8]
      address += w;
 8007054:	89fa      	ldrh	r2, [r7, #14]
 8007056:	8afb      	ldrh	r3, [r7, #22]
 8007058:	4413      	add	r3, r2
 800705a:	81fb      	strh	r3, [r7, #14]
      if (len == 0)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d109      	bne.n	8007076 <ee24_write+0xa2>
      {
        #if (_EEPROM_USE_WP_PIN==1)
        HAL_GPIO_WritePin(_EEPROM_WP_GPIO, _EEPROM_WP_PIN, GPIO_PIN_SET);
 8007062:	2201      	movs	r2, #1
 8007064:	2120      	movs	r1, #32
 8007066:	4812      	ldr	r0, [pc, #72]	; (80070b0 <ee24_write+0xdc>)
 8007068:	f7fb fad6 	bl	8002618 <HAL_GPIO_WritePin>
        #endif
        ee24_lock = 0;
 800706c:	4b0f      	ldr	r3, [pc, #60]	; (80070ac <ee24_write+0xd8>)
 800706e:	2200      	movs	r2, #0
 8007070:	701a      	strb	r2, [r3, #0]
        return true;
 8007072:	2301      	movs	r3, #1
 8007074:	e015      	b.n	80070a2 <ee24_write+0xce>
      }
      if (HAL_GetTick() - startTime >= timeout)
 8007076:	f7fa f983 	bl	8001380 <HAL_GetTick>
 800707a:	4602      	mov	r2, r0
 800707c:	693b      	ldr	r3, [r7, #16]
 800707e:	1ad3      	subs	r3, r2, r3
 8007080:	683a      	ldr	r2, [r7, #0]
 8007082:	429a      	cmp	r2, r3
 8007084:	d8bf      	bhi.n	8007006 <ee24_write+0x32>
      {
        ee24_lock = 0;
 8007086:	4b09      	ldr	r3, [pc, #36]	; (80070ac <ee24_write+0xd8>)
 8007088:	2200      	movs	r2, #0
 800708a:	701a      	strb	r2, [r3, #0]
        return false;
 800708c:	2300      	movs	r3, #0
 800708e:	e008      	b.n	80070a2 <ee24_write+0xce>
      }
    }
    else
    {
      #if (_EEPROM_USE_WP_PIN==1)
      HAL_GPIO_WritePin(_EEPROM_WP_GPIO, _EEPROM_WP_PIN, GPIO_PIN_SET);
 8007090:	2201      	movs	r2, #1
 8007092:	2120      	movs	r1, #32
 8007094:	4806      	ldr	r0, [pc, #24]	; (80070b0 <ee24_write+0xdc>)
 8007096:	f7fb fabf 	bl	8002618 <HAL_GPIO_WritePin>
      #endif
      ee24_lock = 0;
 800709a:	4b04      	ldr	r3, [pc, #16]	; (80070ac <ee24_write+0xd8>)
 800709c:	2200      	movs	r2, #0
 800709e:	701a      	strb	r2, [r3, #0]
      return false;
 80070a0:	2300      	movs	r3, #0
    }
  }
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	3718      	adds	r7, #24
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}
 80070aa:	bf00      	nop
 80070ac:	200028cc 	.word	0x200028cc
 80070b0:	40020400 	.word	0x40020400
 80070b4:	20000078 	.word	0x20000078

080070b8 <ee24_read>:
//################################################################################################################
bool ee24_read(uint16_t address, uint8_t *data, size_t len, uint32_t timeout)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b088      	sub	sp, #32
 80070bc:	af04      	add	r7, sp, #16
 80070be:	60b9      	str	r1, [r7, #8]
 80070c0:	607a      	str	r2, [r7, #4]
 80070c2:	603b      	str	r3, [r7, #0]
 80070c4:	4603      	mov	r3, r0
 80070c6:	81fb      	strh	r3, [r7, #14]
  if (ee24_lock == 1)
 80070c8:	4b15      	ldr	r3, [pc, #84]	; (8007120 <ee24_read+0x68>)
 80070ca:	781b      	ldrb	r3, [r3, #0]
 80070cc:	2b01      	cmp	r3, #1
 80070ce:	d101      	bne.n	80070d4 <ee24_read+0x1c>
    return false;
 80070d0:	2300      	movs	r3, #0
 80070d2:	e021      	b.n	8007118 <ee24_read+0x60>
  ee24_lock = 1;
 80070d4:	4b12      	ldr	r3, [pc, #72]	; (8007120 <ee24_read+0x68>)
 80070d6:	2201      	movs	r2, #1
 80070d8:	701a      	strb	r2, [r3, #0]
  #if (_EEPROM_USE_WP_PIN==1)
  HAL_GPIO_WritePin(_EEPROM_WP_GPIO, _EEPROM_WP_PIN, GPIO_PIN_SET);
 80070da:	2201      	movs	r2, #1
 80070dc:	2120      	movs	r1, #32
 80070de:	4811      	ldr	r0, [pc, #68]	; (8007124 <ee24_read+0x6c>)
 80070e0:	f7fb fa9a 	bl	8002618 <HAL_GPIO_WritePin>
  #elif (_EEPROM_SIZE_KBIT == 8)
  if (HAL_I2C_Mem_Read(&_EEPROM_I2C, _EEPROM_ADDRESS | ((address & 0x0300) >> 7), (address & 0xff), I2C_MEMADD_SIZE_8BIT, data, len, 100) == HAL_OK)
  #elif (_EEPROM_SIZE_KBIT==16)
  if (HAL_I2C_Mem_Read(&_EEPROM_I2C, _EEPROM_ADDRESS | ((address & 0x0700) >> 7), (address & 0xff), I2C_MEMADD_SIZE_8BIT, data, len, 100) == HAL_OK)
  #else
  if (HAL_I2C_Mem_Read(&_EEPROM_I2C, _EEPROM_ADDRESS, address, I2C_MEMADD_SIZE_16BIT, data, len, timeout) == HAL_OK)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	b29b      	uxth	r3, r3
 80070e8:	89f9      	ldrh	r1, [r7, #14]
 80070ea:	683a      	ldr	r2, [r7, #0]
 80070ec:	9202      	str	r2, [sp, #8]
 80070ee:	9301      	str	r3, [sp, #4]
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	9300      	str	r3, [sp, #0]
 80070f4:	2310      	movs	r3, #16
 80070f6:	460a      	mov	r2, r1
 80070f8:	21a0      	movs	r1, #160	; 0xa0
 80070fa:	480b      	ldr	r0, [pc, #44]	; (8007128 <ee24_read+0x70>)
 80070fc:	f7fb fce4 	bl	8002ac8 <HAL_I2C_Mem_Read>
 8007100:	4603      	mov	r3, r0
 8007102:	2b00      	cmp	r3, #0
 8007104:	d104      	bne.n	8007110 <ee24_read+0x58>
  #endif
  {
    ee24_lock = 0;
 8007106:	4b06      	ldr	r3, [pc, #24]	; (8007120 <ee24_read+0x68>)
 8007108:	2200      	movs	r2, #0
 800710a:	701a      	strb	r2, [r3, #0]
    return true;
 800710c:	2301      	movs	r3, #1
 800710e:	e003      	b.n	8007118 <ee24_read+0x60>
  }
  else
  {
    ee24_lock = 0;
 8007110:	4b03      	ldr	r3, [pc, #12]	; (8007120 <ee24_read+0x68>)
 8007112:	2200      	movs	r2, #0
 8007114:	701a      	strb	r2, [r3, #0]
    return false;
 8007116:	2300      	movs	r3, #0
  }
}
 8007118:	4618      	mov	r0, r3
 800711a:	3710      	adds	r7, #16
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}
 8007120:	200028cc 	.word	0x200028cc
 8007124:	40020400 	.word	0x40020400
 8007128:	20000078 	.word	0x20000078

0800712c <sd_mount>:
 * If the file does not exist, it creates a new file.
 * The file pointer is set to the end of the file before each write operation.
 */
//---------------------------------------------------------------------------------------//
//=======================================================================================//
uint8_t sd_mount(sdcard_t *sdcard_type, const TCHAR parentPath[10]) {
 800712c:	b580      	push	{r7, lr}
 800712e:	b082      	sub	sp, #8
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
 8007134:	6039      	str	r1, [r7, #0]
	//Open the file system
	snprintf(sdcard_type->parentPath, 10, parentPath);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	3301      	adds	r3, #1
 800713a:	683a      	ldr	r2, [r7, #0]
 800713c:	210a      	movs	r1, #10
 800713e:	4618      	mov	r0, r3
 8007140:	f002 ff26 	bl	8009f90 <sniprintf>
	strcpy(sdcard_type->currentPath, sdcard_type->parentPath);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f103 020b 	add.w	r2, r3, #11
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	3301      	adds	r3, #1
 800714e:	4619      	mov	r1, r3
 8007150:	4610      	mov	r0, r2
 8007152:	f002 ffdf 	bl	800a114 <strcpy>

	sdcard_type->fres = f_mount(&sdcard_type->FatFs, sdcard_type->parentPath,
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	3301      	adds	r3, #1
 8007160:	2201      	movs	r2, #1
 8007162:	4619      	mov	r1, r3
 8007164:	f002 f842 	bl	80091ec <f_mount>
 8007168:	4603      	mov	r3, r0
 800716a:	461a      	mov	r2, r3
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007172:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
			1); //1=mount now
	return (sdcard_type->fres == FR_OK) ? 1 : 0;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800717c:	f893 30d4 	ldrb.w	r3, [r3, #212]	; 0xd4
 8007180:	2b00      	cmp	r3, #0
 8007182:	bf0c      	ite	eq
 8007184:	2301      	moveq	r3, #1
 8007186:	2300      	movne	r3, #0
 8007188:	b2db      	uxtb	r3, r3
}
 800718a:	4618      	mov	r0, r3
 800718c:	3708      	adds	r7, #8
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}

08007192 <sd_fileExists>:
				* getFreeFs->csize) / 2;
	}
	return (sdcard_type->fres == FR_OK) ? 1 : 0;
}

uint8_t sd_fileExists(sdcard_t *sdcard_type, char *filename) {
 8007192:	b580      	push	{r7, lr}
 8007194:	b082      	sub	sp, #8
 8007196:	af00      	add	r7, sp, #0
 8007198:	6078      	str	r0, [r7, #4]
 800719a:	6039      	str	r1, [r7, #0]
	//If your file exists
	sdcard_type->fres = f_stat(filename, &sdcard_type->fno);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80071a2:	3318      	adds	r3, #24
 80071a4:	4619      	mov	r1, r3
 80071a6:	6838      	ldr	r0, [r7, #0]
 80071a8:	f002 fe5d 	bl	8009e66 <f_stat>
 80071ac:	4603      	mov	r3, r0
 80071ae:	461a      	mov	r2, r3
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80071b6:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
	return (sdcard_type->fres == FR_OK) ? 1 : 0;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80071c0:	f893 30d4 	ldrb.w	r3, [r3, #212]	; 0xd4
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	bf0c      	ite	eq
 80071c8:	2301      	moveq	r3, #1
 80071ca:	2300      	movne	r3, #0
 80071cc:	b2db      	uxtb	r3, r3
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	3708      	adds	r7, #8
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}

080071d6 <sd_open>:
		sdcard_type->fres = f_unlink(filename);
	}
	return (sdcard_type->fres == FR_OK) ? 1 : 0;
}

static uint8_t sd_open(sdcard_t *sdcard_type, char *filename, BYTE mode) {
 80071d6:	b580      	push	{r7, lr}
 80071d8:	b084      	sub	sp, #16
 80071da:	af00      	add	r7, sp, #0
 80071dc:	60f8      	str	r0, [r7, #12]
 80071de:	60b9      	str	r1, [r7, #8]
 80071e0:	4613      	mov	r3, r2
 80071e2:	71fb      	strb	r3, [r7, #7]
	sdcard_type->fres = f_open(&sdcard_type->fil, filename, mode);
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	f503 5385 	add.w	r3, r3, #4256	; 0x10a0
 80071ea:	3304      	adds	r3, #4
 80071ec:	79fa      	ldrb	r2, [r7, #7]
 80071ee:	68b9      	ldr	r1, [r7, #8]
 80071f0:	4618      	mov	r0, r3
 80071f2:	f002 f841 	bl	8009278 <f_open>
 80071f6:	4603      	mov	r3, r0
 80071f8:	461a      	mov	r2, r3
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007200:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
	return (sdcard_type->fres == FR_OK) ? 1 : 0;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800720a:	f893 30d4 	ldrb.w	r3, [r3, #212]	; 0xd4
 800720e:	2b00      	cmp	r3, #0
 8007210:	bf0c      	ite	eq
 8007212:	2301      	moveq	r3, #1
 8007214:	2300      	movne	r3, #0
 8007216:	b2db      	uxtb	r3, r3
}
 8007218:	4618      	mov	r0, r3
 800721a:	3710      	adds	r7, #16
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}

08007220 <sd_close>:

static uint8_t sd_close(sdcard_t *sdcard_type) {
 8007220:	b580      	push	{r7, lr}
 8007222:	b082      	sub	sp, #8
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
	sdcard_type->fres = f_close(&sdcard_type->fil);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f503 5385 	add.w	r3, r3, #4256	; 0x10a0
 800722e:	3304      	adds	r3, #4
 8007230:	4618      	mov	r0, r3
 8007232:	f002 fbca 	bl	80099ca <f_close>
 8007236:	4603      	mov	r3, r0
 8007238:	461a      	mov	r2, r3
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007240:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
	return (sdcard_type->fres == FR_OK) ? 1 : 0;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800724a:	f893 30d4 	ldrb.w	r3, [r3, #212]	; 0xd4
 800724e:	2b00      	cmp	r3, #0
 8007250:	bf0c      	ite	eq
 8007252:	2301      	moveq	r3, #1
 8007254:	2300      	movne	r3, #0
 8007256:	b2db      	uxtb	r3, r3
}
 8007258:	4618      	mov	r0, r3
 800725a:	3708      	adds	r7, #8
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}

08007260 <sd_read>:

static uint8_t sd_read(sdcard_t *sdcard_type, char *buf, UINT btr) {
 8007260:	b580      	push	{r7, lr}
 8007262:	b084      	sub	sp, #16
 8007264:	af00      	add	r7, sp, #0
 8007266:	60f8      	str	r0, [r7, #12]
 8007268:	60b9      	str	r1, [r7, #8]
 800726a:	607a      	str	r2, [r7, #4]
	sdcard_type->fres = f_read(&sdcard_type->fil, buf, btr, &sdcard_type->br);
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	f503 5085 	add.w	r0, r3, #4256	; 0x10a0
 8007272:	3004      	adds	r0, #4
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800727a:	3330      	adds	r3, #48	; 0x30
 800727c:	687a      	ldr	r2, [r7, #4]
 800727e:	68b9      	ldr	r1, [r7, #8]
 8007280:	f002 f9c6 	bl	8009610 <f_read>
 8007284:	4603      	mov	r3, r0
 8007286:	461a      	mov	r2, r3
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800728e:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
	return (sdcard_type->fres == FR_OK) ? 1 : 0;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007298:	f893 30d4 	ldrb.w	r3, [r3, #212]	; 0xd4
 800729c:	2b00      	cmp	r3, #0
 800729e:	bf0c      	ite	eq
 80072a0:	2301      	moveq	r3, #1
 80072a2:	2300      	movne	r3, #0
 80072a4:	b2db      	uxtb	r3, r3
}
 80072a6:	4618      	mov	r0, r3
 80072a8:	3710      	adds	r7, #16
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bd80      	pop	{r7, pc}

080072ae <sd_seek>:
	sdcard_type->fres = f_write(&sdcard_type->fil, data, strlen(data),
			&sdcard_type->bw);
	return (sdcard_type->fres == FR_OK) ? 1 : 0;
}

static uint8_t sd_seek(sdcard_t *sdcard_type, DWORD offset) {
 80072ae:	b580      	push	{r7, lr}
 80072b0:	b082      	sub	sp, #8
 80072b2:	af00      	add	r7, sp, #0
 80072b4:	6078      	str	r0, [r7, #4]
 80072b6:	6039      	str	r1, [r7, #0]
	sdcard_type->fres = f_lseek(&sdcard_type->fil, offset);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f503 5385 	add.w	r3, r3, #4256	; 0x10a0
 80072be:	3304      	adds	r3, #4
 80072c0:	6839      	ldr	r1, [r7, #0]
 80072c2:	4618      	mov	r0, r3
 80072c4:	f002 fbab 	bl	8009a1e <f_lseek>
 80072c8:	4603      	mov	r3, r0
 80072ca:	461a      	mov	r2, r3
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80072d2:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
	return (sdcard_type->fres == FR_OK) ? 1 : 0;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80072dc:	f893 30d4 	ldrb.w	r3, [r3, #212]	; 0xd4
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	bf0c      	ite	eq
 80072e4:	2301      	moveq	r3, #1
 80072e6:	2300      	movne	r3, #0
 80072e8:	b2db      	uxtb	r3, r3
}
 80072ea:	4618      	mov	r0, r3
 80072ec:	3708      	adds	r7, #8
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}

080072f2 <sd_fileseekread>:
	}
	return false;
}

uint8_t sd_fileseekread(sdcard_t *sdcard_type, char *filename, DWORD offset,
		char *buf, UINT btr) {
 80072f2:	b580      	push	{r7, lr}
 80072f4:	b09e      	sub	sp, #120	; 0x78
 80072f6:	af00      	add	r7, sp, #0
 80072f8:	60f8      	str	r0, [r7, #12]
 80072fa:	60b9      	str	r1, [r7, #8]
 80072fc:	607a      	str	r2, [r7, #4]
 80072fe:	603b      	str	r3, [r7, #0]
	uint8_t fileLoc[100] = { 0 };
 8007300:	2300      	movs	r3, #0
 8007302:	617b      	str	r3, [r7, #20]
 8007304:	f107 0318 	add.w	r3, r7, #24
 8007308:	2260      	movs	r2, #96	; 0x60
 800730a:	2100      	movs	r1, #0
 800730c:	4618      	mov	r0, r3
 800730e:	f002 fecd 	bl	800a0ac <memset>
	sd_updatefileLoc(sdcard_type, filename, fileLoc);
 8007312:	f107 0314 	add.w	r3, r7, #20
 8007316:	461a      	mov	r2, r3
 8007318:	68b9      	ldr	r1, [r7, #8]
 800731a:	68f8      	ldr	r0, [r7, #12]
 800731c:	f000 f85e 	bl	80073dc <sd_updatefileLoc>
	if (sd_fileExists(sdcard_type, filename)) {
 8007320:	68b9      	ldr	r1, [r7, #8]
 8007322:	68f8      	ldr	r0, [r7, #12]
 8007324:	f7ff ff35 	bl	8007192 <sd_fileExists>
 8007328:	4603      	mov	r3, r0
 800732a:	2b00      	cmp	r3, #0
 800732c:	d01f      	beq.n	800736e <sd_fileseekread+0x7c>
		if (sd_open(sdcard_type, filename, FA_READ)) {
 800732e:	2201      	movs	r2, #1
 8007330:	68b9      	ldr	r1, [r7, #8]
 8007332:	68f8      	ldr	r0, [r7, #12]
 8007334:	f7ff ff4f 	bl	80071d6 <sd_open>
 8007338:	4603      	mov	r3, r0
 800733a:	2b00      	cmp	r3, #0
 800733c:	d017      	beq.n	800736e <sd_fileseekread+0x7c>
			if (sd_seek(sdcard_type, offset)) {
 800733e:	6879      	ldr	r1, [r7, #4]
 8007340:	68f8      	ldr	r0, [r7, #12]
 8007342:	f7ff ffb4 	bl	80072ae <sd_seek>
 8007346:	4603      	mov	r3, r0
 8007348:	2b00      	cmp	r3, #0
 800734a:	d010      	beq.n	800736e <sd_fileseekread+0x7c>
				if (sd_read(sdcard_type, buf, btr)) {
 800734c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007350:	6839      	ldr	r1, [r7, #0]
 8007352:	68f8      	ldr	r0, [r7, #12]
 8007354:	f7ff ff84 	bl	8007260 <sd_read>
 8007358:	4603      	mov	r3, r0
 800735a:	2b00      	cmp	r3, #0
 800735c:	d007      	beq.n	800736e <sd_fileseekread+0x7c>
					if (sd_close(sdcard_type)) {
 800735e:	68f8      	ldr	r0, [r7, #12]
 8007360:	f7ff ff5e 	bl	8007220 <sd_close>
 8007364:	4603      	mov	r3, r0
 8007366:	2b00      	cmp	r3, #0
 8007368:	d001      	beq.n	800736e <sd_fileseekread+0x7c>
						return true;
 800736a:	2301      	movs	r3, #1
 800736c:	e000      	b.n	8007370 <sd_fileseekread+0x7e>
					}
				}
			}
		}
	}
	return false;
 800736e:	2300      	movs	r3, #0
}
 8007370:	4618      	mov	r0, r3
 8007372:	3778      	adds	r7, #120	; 0x78
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}

08007378 <sd_getFileInfo>:

uint8_t sd_getFileInfo(sdcard_t *sdcard_type, char *filename){
 8007378:	b580      	push	{r7, lr}
 800737a:	b09c      	sub	sp, #112	; 0x70
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
 8007380:	6039      	str	r1, [r7, #0]
	uint8_t fileLoc[100] = { 0 };
 8007382:	2300      	movs	r3, #0
 8007384:	60fb      	str	r3, [r7, #12]
 8007386:	f107 0310 	add.w	r3, r7, #16
 800738a:	2260      	movs	r2, #96	; 0x60
 800738c:	2100      	movs	r1, #0
 800738e:	4618      	mov	r0, r3
 8007390:	f002 fe8c 	bl	800a0ac <memset>
	sd_updatefileLoc(sdcard_type, filename, fileLoc);
 8007394:	f107 030c 	add.w	r3, r7, #12
 8007398:	461a      	mov	r2, r3
 800739a:	6839      	ldr	r1, [r7, #0]
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f000 f81d 	bl	80073dc <sd_updatefileLoc>
	sdcard_type->fres = f_stat(filename, &sdcard_type->fno);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80073a8:	3318      	adds	r3, #24
 80073aa:	4619      	mov	r1, r3
 80073ac:	6838      	ldr	r0, [r7, #0]
 80073ae:	f002 fd5a 	bl	8009e66 <f_stat>
 80073b2:	4603      	mov	r3, r0
 80073b4:	461a      	mov	r2, r3
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80073bc:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
	return (sdcard_type->fres == FR_OK) ? 1 : 0;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80073c6:	f893 30d4 	ldrb.w	r3, [r3, #212]	; 0xd4
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	bf0c      	ite	eq
 80073ce:	2301      	moveq	r3, #1
 80073d0:	2300      	movne	r3, #0
 80073d2:	b2db      	uxtb	r3, r3
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	3770      	adds	r7, #112	; 0x70
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}

080073dc <sd_updatefileLoc>:
			sdcard_type->currentPath[1] = '\0'; // Keep only the '/' character
		}
	}
}

void sd_updatefileLoc(sdcard_t *sdcard_type, char *filename, char *buf) {
 80073dc:	b580      	push	{r7, lr}
 80073de:	b086      	sub	sp, #24
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	60f8      	str	r0, [r7, #12]
 80073e4:	60b9      	str	r1, [r7, #8]
 80073e6:	607a      	str	r2, [r7, #4]

	int rec = strcmp(sdcard_type->parentPath, sdcard_type->currentPath);
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	1c5a      	adds	r2, r3, #1
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	330b      	adds	r3, #11
 80073f0:	4619      	mov	r1, r3
 80073f2:	4610      	mov	r0, r2
 80073f4:	f7f8 fef4 	bl	80001e0 <strcmp>
 80073f8:	6178      	str	r0, [r7, #20]
	if (!rec) {
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d108      	bne.n	8007412 <sd_updatefileLoc+0x36>
		sprintf(buf, "%s%s", sdcard_type->currentPath, filename);
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	f103 020b 	add.w	r2, r3, #11
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	4908      	ldr	r1, [pc, #32]	; (800742c <sd_updatefileLoc+0x50>)
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f002 fdf4 	bl	8009ff8 <siprintf>
	} else {
		sprintf(buf, "%s/%s", sdcard_type->currentPath, filename);
	}
}
 8007410:	e007      	b.n	8007422 <sd_updatefileLoc+0x46>
		sprintf(buf, "%s/%s", sdcard_type->currentPath, filename);
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	f103 020b 	add.w	r2, r3, #11
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	4905      	ldr	r1, [pc, #20]	; (8007430 <sd_updatefileLoc+0x54>)
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f002 fdeb 	bl	8009ff8 <siprintf>
}
 8007422:	bf00      	nop
 8007424:	3718      	adds	r7, #24
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}
 800742a:	bf00      	nop
 800742c:	0800ad60 	.word	0x0800ad60
 8007430:	0800ad68 	.word	0x0800ad68

08007434 <execute_mem_write>:
		return 1;
	} else
		return 0;
}

uint8_t execute_mem_write(uint8_t *pBuffer, uint32_t mem_address, uint32_t len) {
 8007434:	b5b0      	push	{r4, r5, r7, lr}
 8007436:	b086      	sub	sp, #24
 8007438:	af00      	add	r7, sp, #0
 800743a:	60f8      	str	r0, [r7, #12]
 800743c:	60b9      	str	r1, [r7, #8]
 800743e:	607a      	str	r2, [r7, #4]
	uint8_t status = HAL_OK;
 8007440:	2300      	movs	r3, #0
 8007442:	75fb      	strb	r3, [r7, #23]

	//We have to unlock flash module to get control of registers
	HAL_FLASH_Unlock();
 8007444:	f7fa fcd0 	bl	8001de8 <HAL_FLASH_Unlock>

	for (uint32_t i = 0; i < len; i++) {
 8007448:	2300      	movs	r3, #0
 800744a:	613b      	str	r3, [r7, #16]
 800744c:	e014      	b.n	8007478 <execute_mem_write+0x44>
		//Here we program the flash byte by byte
		status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, mem_address + i,
 800744e:	68ba      	ldr	r2, [r7, #8]
 8007450:	693b      	ldr	r3, [r7, #16]
 8007452:	18d1      	adds	r1, r2, r3
				pBuffer[i]);
 8007454:	68fa      	ldr	r2, [r7, #12]
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	4413      	add	r3, r2
 800745a:	781b      	ldrb	r3, [r3, #0]
		status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, mem_address + i,
 800745c:	b2db      	uxtb	r3, r3
 800745e:	2200      	movs	r2, #0
 8007460:	461c      	mov	r4, r3
 8007462:	4615      	mov	r5, r2
 8007464:	4622      	mov	r2, r4
 8007466:	462b      	mov	r3, r5
 8007468:	2000      	movs	r0, #0
 800746a:	f7fa fc69 	bl	8001d40 <HAL_FLASH_Program>
 800746e:	4603      	mov	r3, r0
 8007470:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < len; i++) {
 8007472:	693b      	ldr	r3, [r7, #16]
 8007474:	3301      	adds	r3, #1
 8007476:	613b      	str	r3, [r7, #16]
 8007478:	693a      	ldr	r2, [r7, #16]
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	429a      	cmp	r2, r3
 800747e:	d3e6      	bcc.n	800744e <execute_mem_write+0x1a>
	}

	HAL_FLASH_Lock();
 8007480:	f7fa fcd4 	bl	8001e2c <HAL_FLASH_Lock>

	return (status == HAL_OK) ? 1 : 0;
 8007484:	7dfb      	ldrb	r3, [r7, #23]
 8007486:	2b00      	cmp	r3, #0
 8007488:	bf0c      	ite	eq
 800748a:	2301      	moveq	r3, #1
 800748c:	2300      	movne	r3, #0
 800748e:	b2db      	uxtb	r3, r3
}
 8007490:	4618      	mov	r0, r3
 8007492:	3718      	adds	r7, #24
 8007494:	46bd      	mov	sp, r7
 8007496:	bdb0      	pop	{r4, r5, r7, pc}

08007498 <execute_flash_erase>:

uint8_t execute_flash_erase(uint8_t sector_number, uint8_t number_of_sector) {
 8007498:	b580      	push	{r7, lr}
 800749a:	b08a      	sub	sp, #40	; 0x28
 800749c:	af00      	add	r7, sp, #0
 800749e:	4603      	mov	r3, r0
 80074a0:	460a      	mov	r2, r1
 80074a2:	71fb      	strb	r3, [r7, #7]
 80074a4:	4613      	mov	r3, r2
 80074a6:	71bb      	strb	r3, [r7, #6]
	uint8_t totalSectors = 5;
 80074a8:	2305      	movs	r3, #5
 80074aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	//Code needs to modified if your MCU supports more flash sectors
	FLASH_EraseInitTypeDef flashErase_handle;
	uint32_t sectorError;
	HAL_StatusTypeDef status;

	if (number_of_sector > totalSectors)
 80074ae:	79ba      	ldrb	r2, [r7, #6]
 80074b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80074b4:	429a      	cmp	r2, r3
 80074b6:	d901      	bls.n	80074bc <execute_flash_erase+0x24>
		return 0;
 80074b8:	2300      	movs	r3, #0
 80074ba:	e03d      	b.n	8007538 <execute_flash_erase+0xa0>

	if ((sector_number == 0xff) || (sector_number <= totalSectors - 1)) {
 80074bc:	79fb      	ldrb	r3, [r7, #7]
 80074be:	2bff      	cmp	r3, #255	; 0xff
 80074c0:	d004      	beq.n	80074cc <execute_flash_erase+0x34>
 80074c2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80074c6:	79fb      	ldrb	r3, [r7, #7]
 80074c8:	429a      	cmp	r2, r3
 80074ca:	d934      	bls.n	8007536 <execute_flash_erase+0x9e>
		if (sector_number == (uint8_t) 0xff) {
 80074cc:	79fb      	ldrb	r3, [r7, #7]
 80074ce:	2bff      	cmp	r3, #255	; 0xff
 80074d0:	d102      	bne.n	80074d8 <execute_flash_erase+0x40>
			flashErase_handle.TypeErase = FLASH_TYPEERASE_MASSERASE;
 80074d2:	2301      	movs	r3, #1
 80074d4:	613b      	str	r3, [r7, #16]
 80074d6:	e013      	b.n	8007500 <execute_flash_erase+0x68>
		} else {
			/*Here we are just calculating how many sectors needs to erased */
			uint8_t remanining_sector = totalSectors - sector_number;
 80074d8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80074dc:	79fb      	ldrb	r3, [r7, #7]
 80074de:	1ad3      	subs	r3, r2, r3
 80074e0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			if (number_of_sector > remanining_sector) {
 80074e4:	79ba      	ldrb	r2, [r7, #6]
 80074e6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80074ea:	429a      	cmp	r2, r3
 80074ec:	d902      	bls.n	80074f4 <execute_flash_erase+0x5c>
				number_of_sector = remanining_sector;
 80074ee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80074f2:	71bb      	strb	r3, [r7, #6]
			}
			flashErase_handle.TypeErase = FLASH_TYPEERASE_SECTORS;
 80074f4:	2300      	movs	r3, #0
 80074f6:	613b      	str	r3, [r7, #16]
			flashErase_handle.Sector = sector_number; // this is the initial sector
 80074f8:	79fb      	ldrb	r3, [r7, #7]
 80074fa:	61bb      	str	r3, [r7, #24]
			flashErase_handle.NbSectors = number_of_sector;
 80074fc:	79bb      	ldrb	r3, [r7, #6]
 80074fe:	61fb      	str	r3, [r7, #28]
		}
		flashErase_handle.Banks = FLASH_BANK_1;
 8007500:	2301      	movs	r3, #1
 8007502:	617b      	str	r3, [r7, #20]

		/*Get access to touch the flash registers */
		HAL_FLASH_Unlock();
 8007504:	f7fa fc70 	bl	8001de8 <HAL_FLASH_Unlock>
		flashErase_handle.VoltageRange = FLASH_VOLTAGE_RANGE_3; // our mcu will work on this voltage range
 8007508:	2302      	movs	r3, #2
 800750a:	623b      	str	r3, [r7, #32]
		status = (uint8_t) HAL_FLASHEx_Erase(&flashErase_handle, &sectorError);
 800750c:	f107 020c 	add.w	r2, r7, #12
 8007510:	f107 0310 	add.w	r3, r7, #16
 8007514:	4611      	mov	r1, r2
 8007516:	4618      	mov	r0, r3
 8007518:	f7fa fdd8 	bl	80020cc <HAL_FLASHEx_Erase>
 800751c:	4603      	mov	r3, r0
 800751e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		HAL_FLASH_Lock();
 8007522:	f7fa fc83 	bl	8001e2c <HAL_FLASH_Lock>

		return (status == HAL_OK) ? 1 : 0;
 8007526:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800752a:	2b00      	cmp	r3, #0
 800752c:	bf0c      	ite	eq
 800752e:	2301      	moveq	r3, #1
 8007530:	2300      	movne	r3, #0
 8007532:	b2db      	uxtb	r3, r3
 8007534:	e000      	b.n	8007538 <execute_flash_erase+0xa0>
	}

	return 0;
 8007536:	2300      	movs	r3, #0
}
 8007538:	4618      	mov	r0, r3
 800753a:	3728      	adds	r7, #40	; 0x28
 800753c:	46bd      	mov	sp, r7
 800753e:	bd80      	pop	{r7, pc}

08007540 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b084      	sub	sp, #16
 8007544:	af00      	add	r7, sp, #0
 8007546:	4603      	mov	r3, r0
 8007548:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800754a:	79fb      	ldrb	r3, [r7, #7]
 800754c:	4a08      	ldr	r2, [pc, #32]	; (8007570 <disk_status+0x30>)
 800754e:	009b      	lsls	r3, r3, #2
 8007550:	4413      	add	r3, r2
 8007552:	685b      	ldr	r3, [r3, #4]
 8007554:	685b      	ldr	r3, [r3, #4]
 8007556:	79fa      	ldrb	r2, [r7, #7]
 8007558:	4905      	ldr	r1, [pc, #20]	; (8007570 <disk_status+0x30>)
 800755a:	440a      	add	r2, r1
 800755c:	7a12      	ldrb	r2, [r2, #8]
 800755e:	4610      	mov	r0, r2
 8007560:	4798      	blx	r3
 8007562:	4603      	mov	r3, r0
 8007564:	73fb      	strb	r3, [r7, #15]
  return stat;
 8007566:	7bfb      	ldrb	r3, [r7, #15]
}
 8007568:	4618      	mov	r0, r3
 800756a:	3710      	adds	r7, #16
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}
 8007570:	200028f8 	.word	0x200028f8

08007574 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b084      	sub	sp, #16
 8007578:	af00      	add	r7, sp, #0
 800757a:	4603      	mov	r3, r0
 800757c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800757e:	2300      	movs	r3, #0
 8007580:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8007582:	79fb      	ldrb	r3, [r7, #7]
 8007584:	4a0e      	ldr	r2, [pc, #56]	; (80075c0 <disk_initialize+0x4c>)
 8007586:	5cd3      	ldrb	r3, [r2, r3]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d114      	bne.n	80075b6 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800758c:	79fb      	ldrb	r3, [r7, #7]
 800758e:	4a0c      	ldr	r2, [pc, #48]	; (80075c0 <disk_initialize+0x4c>)
 8007590:	009b      	lsls	r3, r3, #2
 8007592:	4413      	add	r3, r2
 8007594:	685b      	ldr	r3, [r3, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	79fa      	ldrb	r2, [r7, #7]
 800759a:	4909      	ldr	r1, [pc, #36]	; (80075c0 <disk_initialize+0x4c>)
 800759c:	440a      	add	r2, r1
 800759e:	7a12      	ldrb	r2, [r2, #8]
 80075a0:	4610      	mov	r0, r2
 80075a2:	4798      	blx	r3
 80075a4:	4603      	mov	r3, r0
 80075a6:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 80075a8:	7bfb      	ldrb	r3, [r7, #15]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d103      	bne.n	80075b6 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 80075ae:	79fb      	ldrb	r3, [r7, #7]
 80075b0:	4a03      	ldr	r2, [pc, #12]	; (80075c0 <disk_initialize+0x4c>)
 80075b2:	2101      	movs	r1, #1
 80075b4:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 80075b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	3710      	adds	r7, #16
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}
 80075c0:	200028f8 	.word	0x200028f8

080075c4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80075c4:	b590      	push	{r4, r7, lr}
 80075c6:	b087      	sub	sp, #28
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	60b9      	str	r1, [r7, #8]
 80075cc:	607a      	str	r2, [r7, #4]
 80075ce:	603b      	str	r3, [r7, #0]
 80075d0:	4603      	mov	r3, r0
 80075d2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80075d4:	7bfb      	ldrb	r3, [r7, #15]
 80075d6:	4a0a      	ldr	r2, [pc, #40]	; (8007600 <disk_read+0x3c>)
 80075d8:	009b      	lsls	r3, r3, #2
 80075da:	4413      	add	r3, r2
 80075dc:	685b      	ldr	r3, [r3, #4]
 80075de:	689c      	ldr	r4, [r3, #8]
 80075e0:	7bfb      	ldrb	r3, [r7, #15]
 80075e2:	4a07      	ldr	r2, [pc, #28]	; (8007600 <disk_read+0x3c>)
 80075e4:	4413      	add	r3, r2
 80075e6:	7a18      	ldrb	r0, [r3, #8]
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	687a      	ldr	r2, [r7, #4]
 80075ec:	68b9      	ldr	r1, [r7, #8]
 80075ee:	47a0      	blx	r4
 80075f0:	4603      	mov	r3, r0
 80075f2:	75fb      	strb	r3, [r7, #23]
  return res;
 80075f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	371c      	adds	r7, #28
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd90      	pop	{r4, r7, pc}
 80075fe:	bf00      	nop
 8007600:	200028f8 	.word	0x200028f8

08007604 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007604:	b590      	push	{r4, r7, lr}
 8007606:	b087      	sub	sp, #28
 8007608:	af00      	add	r7, sp, #0
 800760a:	60b9      	str	r1, [r7, #8]
 800760c:	607a      	str	r2, [r7, #4]
 800760e:	603b      	str	r3, [r7, #0]
 8007610:	4603      	mov	r3, r0
 8007612:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007614:	7bfb      	ldrb	r3, [r7, #15]
 8007616:	4a0a      	ldr	r2, [pc, #40]	; (8007640 <disk_write+0x3c>)
 8007618:	009b      	lsls	r3, r3, #2
 800761a:	4413      	add	r3, r2
 800761c:	685b      	ldr	r3, [r3, #4]
 800761e:	68dc      	ldr	r4, [r3, #12]
 8007620:	7bfb      	ldrb	r3, [r7, #15]
 8007622:	4a07      	ldr	r2, [pc, #28]	; (8007640 <disk_write+0x3c>)
 8007624:	4413      	add	r3, r2
 8007626:	7a18      	ldrb	r0, [r3, #8]
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	687a      	ldr	r2, [r7, #4]
 800762c:	68b9      	ldr	r1, [r7, #8]
 800762e:	47a0      	blx	r4
 8007630:	4603      	mov	r3, r0
 8007632:	75fb      	strb	r3, [r7, #23]
  return res;
 8007634:	7dfb      	ldrb	r3, [r7, #23]
}
 8007636:	4618      	mov	r0, r3
 8007638:	371c      	adds	r7, #28
 800763a:	46bd      	mov	sp, r7
 800763c:	bd90      	pop	{r4, r7, pc}
 800763e:	bf00      	nop
 8007640:	200028f8 	.word	0x200028f8

08007644 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b084      	sub	sp, #16
 8007648:	af00      	add	r7, sp, #0
 800764a:	4603      	mov	r3, r0
 800764c:	603a      	str	r2, [r7, #0]
 800764e:	71fb      	strb	r3, [r7, #7]
 8007650:	460b      	mov	r3, r1
 8007652:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007654:	79fb      	ldrb	r3, [r7, #7]
 8007656:	4a09      	ldr	r2, [pc, #36]	; (800767c <disk_ioctl+0x38>)
 8007658:	009b      	lsls	r3, r3, #2
 800765a:	4413      	add	r3, r2
 800765c:	685b      	ldr	r3, [r3, #4]
 800765e:	691b      	ldr	r3, [r3, #16]
 8007660:	79fa      	ldrb	r2, [r7, #7]
 8007662:	4906      	ldr	r1, [pc, #24]	; (800767c <disk_ioctl+0x38>)
 8007664:	440a      	add	r2, r1
 8007666:	7a10      	ldrb	r0, [r2, #8]
 8007668:	79b9      	ldrb	r1, [r7, #6]
 800766a:	683a      	ldr	r2, [r7, #0]
 800766c:	4798      	blx	r3
 800766e:	4603      	mov	r3, r0
 8007670:	73fb      	strb	r3, [r7, #15]
  return res;
 8007672:	7bfb      	ldrb	r3, [r7, #15]
}
 8007674:	4618      	mov	r0, r3
 8007676:	3710      	adds	r7, #16
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}
 800767c:	200028f8 	.word	0x200028f8

08007680 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8007680:	b480      	push	{r7}
 8007682:	b085      	sub	sp, #20
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	3301      	adds	r3, #1
 800768c:	781b      	ldrb	r3, [r3, #0]
 800768e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8007690:	89fb      	ldrh	r3, [r7, #14]
 8007692:	021b      	lsls	r3, r3, #8
 8007694:	b21a      	sxth	r2, r3
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	781b      	ldrb	r3, [r3, #0]
 800769a:	b21b      	sxth	r3, r3
 800769c:	4313      	orrs	r3, r2
 800769e:	b21b      	sxth	r3, r3
 80076a0:	81fb      	strh	r3, [r7, #14]
	return rv;
 80076a2:	89fb      	ldrh	r3, [r7, #14]
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	3714      	adds	r7, #20
 80076a8:	46bd      	mov	sp, r7
 80076aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ae:	4770      	bx	lr

080076b0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80076b0:	b480      	push	{r7}
 80076b2:	b085      	sub	sp, #20
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	3303      	adds	r3, #3
 80076bc:	781b      	ldrb	r3, [r3, #0]
 80076be:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	021b      	lsls	r3, r3, #8
 80076c4:	687a      	ldr	r2, [r7, #4]
 80076c6:	3202      	adds	r2, #2
 80076c8:	7812      	ldrb	r2, [r2, #0]
 80076ca:	4313      	orrs	r3, r2
 80076cc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	021b      	lsls	r3, r3, #8
 80076d2:	687a      	ldr	r2, [r7, #4]
 80076d4:	3201      	adds	r2, #1
 80076d6:	7812      	ldrb	r2, [r2, #0]
 80076d8:	4313      	orrs	r3, r2
 80076da:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	021b      	lsls	r3, r3, #8
 80076e0:	687a      	ldr	r2, [r7, #4]
 80076e2:	7812      	ldrb	r2, [r2, #0]
 80076e4:	4313      	orrs	r3, r2
 80076e6:	60fb      	str	r3, [r7, #12]
	return rv;
 80076e8:	68fb      	ldr	r3, [r7, #12]
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	3714      	adds	r7, #20
 80076ee:	46bd      	mov	sp, r7
 80076f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f4:	4770      	bx	lr

080076f6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80076f6:	b480      	push	{r7}
 80076f8:	b083      	sub	sp, #12
 80076fa:	af00      	add	r7, sp, #0
 80076fc:	6078      	str	r0, [r7, #4]
 80076fe:	460b      	mov	r3, r1
 8007700:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	1c5a      	adds	r2, r3, #1
 8007706:	607a      	str	r2, [r7, #4]
 8007708:	887a      	ldrh	r2, [r7, #2]
 800770a:	b2d2      	uxtb	r2, r2
 800770c:	701a      	strb	r2, [r3, #0]
 800770e:	887b      	ldrh	r3, [r7, #2]
 8007710:	0a1b      	lsrs	r3, r3, #8
 8007712:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	1c5a      	adds	r2, r3, #1
 8007718:	607a      	str	r2, [r7, #4]
 800771a:	887a      	ldrh	r2, [r7, #2]
 800771c:	b2d2      	uxtb	r2, r2
 800771e:	701a      	strb	r2, [r3, #0]
}
 8007720:	bf00      	nop
 8007722:	370c      	adds	r7, #12
 8007724:	46bd      	mov	sp, r7
 8007726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772a:	4770      	bx	lr

0800772c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800772c:	b480      	push	{r7}
 800772e:	b083      	sub	sp, #12
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
 8007734:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	1c5a      	adds	r2, r3, #1
 800773a:	607a      	str	r2, [r7, #4]
 800773c:	683a      	ldr	r2, [r7, #0]
 800773e:	b2d2      	uxtb	r2, r2
 8007740:	701a      	strb	r2, [r3, #0]
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	0a1b      	lsrs	r3, r3, #8
 8007746:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	1c5a      	adds	r2, r3, #1
 800774c:	607a      	str	r2, [r7, #4]
 800774e:	683a      	ldr	r2, [r7, #0]
 8007750:	b2d2      	uxtb	r2, r2
 8007752:	701a      	strb	r2, [r3, #0]
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	0a1b      	lsrs	r3, r3, #8
 8007758:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	1c5a      	adds	r2, r3, #1
 800775e:	607a      	str	r2, [r7, #4]
 8007760:	683a      	ldr	r2, [r7, #0]
 8007762:	b2d2      	uxtb	r2, r2
 8007764:	701a      	strb	r2, [r3, #0]
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	0a1b      	lsrs	r3, r3, #8
 800776a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	1c5a      	adds	r2, r3, #1
 8007770:	607a      	str	r2, [r7, #4]
 8007772:	683a      	ldr	r2, [r7, #0]
 8007774:	b2d2      	uxtb	r2, r2
 8007776:	701a      	strb	r2, [r3, #0]
}
 8007778:	bf00      	nop
 800777a:	370c      	adds	r7, #12
 800777c:	46bd      	mov	sp, r7
 800777e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007782:	4770      	bx	lr

08007784 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8007784:	b480      	push	{r7}
 8007786:	b087      	sub	sp, #28
 8007788:	af00      	add	r7, sp, #0
 800778a:	60f8      	str	r0, [r7, #12]
 800778c:	60b9      	str	r1, [r7, #8]
 800778e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d00d      	beq.n	80077ba <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800779e:	693a      	ldr	r2, [r7, #16]
 80077a0:	1c53      	adds	r3, r2, #1
 80077a2:	613b      	str	r3, [r7, #16]
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	1c59      	adds	r1, r3, #1
 80077a8:	6179      	str	r1, [r7, #20]
 80077aa:	7812      	ldrb	r2, [r2, #0]
 80077ac:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	3b01      	subs	r3, #1
 80077b2:	607b      	str	r3, [r7, #4]
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d1f1      	bne.n	800779e <mem_cpy+0x1a>
	}
}
 80077ba:	bf00      	nop
 80077bc:	371c      	adds	r7, #28
 80077be:	46bd      	mov	sp, r7
 80077c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c4:	4770      	bx	lr

080077c6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80077c6:	b480      	push	{r7}
 80077c8:	b087      	sub	sp, #28
 80077ca:	af00      	add	r7, sp, #0
 80077cc:	60f8      	str	r0, [r7, #12]
 80077ce:	60b9      	str	r1, [r7, #8]
 80077d0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80077d6:	697b      	ldr	r3, [r7, #20]
 80077d8:	1c5a      	adds	r2, r3, #1
 80077da:	617a      	str	r2, [r7, #20]
 80077dc:	68ba      	ldr	r2, [r7, #8]
 80077de:	b2d2      	uxtb	r2, r2
 80077e0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	3b01      	subs	r3, #1
 80077e6:	607b      	str	r3, [r7, #4]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d1f3      	bne.n	80077d6 <mem_set+0x10>
}
 80077ee:	bf00      	nop
 80077f0:	bf00      	nop
 80077f2:	371c      	adds	r7, #28
 80077f4:	46bd      	mov	sp, r7
 80077f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fa:	4770      	bx	lr

080077fc <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80077fc:	b480      	push	{r7}
 80077fe:	b089      	sub	sp, #36	; 0x24
 8007800:	af00      	add	r7, sp, #0
 8007802:	60f8      	str	r0, [r7, #12]
 8007804:	60b9      	str	r1, [r7, #8]
 8007806:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	61fb      	str	r3, [r7, #28]
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8007810:	2300      	movs	r3, #0
 8007812:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8007814:	69fb      	ldr	r3, [r7, #28]
 8007816:	1c5a      	adds	r2, r3, #1
 8007818:	61fa      	str	r2, [r7, #28]
 800781a:	781b      	ldrb	r3, [r3, #0]
 800781c:	4619      	mov	r1, r3
 800781e:	69bb      	ldr	r3, [r7, #24]
 8007820:	1c5a      	adds	r2, r3, #1
 8007822:	61ba      	str	r2, [r7, #24]
 8007824:	781b      	ldrb	r3, [r3, #0]
 8007826:	1acb      	subs	r3, r1, r3
 8007828:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	3b01      	subs	r3, #1
 800782e:	607b      	str	r3, [r7, #4]
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d002      	beq.n	800783c <mem_cmp+0x40>
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d0eb      	beq.n	8007814 <mem_cmp+0x18>

	return r;
 800783c:	697b      	ldr	r3, [r7, #20]
}
 800783e:	4618      	mov	r0, r3
 8007840:	3724      	adds	r7, #36	; 0x24
 8007842:	46bd      	mov	sp, r7
 8007844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007848:	4770      	bx	lr

0800784a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800784a:	b480      	push	{r7}
 800784c:	b083      	sub	sp, #12
 800784e:	af00      	add	r7, sp, #0
 8007850:	6078      	str	r0, [r7, #4]
 8007852:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007854:	e002      	b.n	800785c <chk_chr+0x12>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	3301      	adds	r3, #1
 800785a:	607b      	str	r3, [r7, #4]
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	781b      	ldrb	r3, [r3, #0]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d005      	beq.n	8007870 <chk_chr+0x26>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	781b      	ldrb	r3, [r3, #0]
 8007868:	461a      	mov	r2, r3
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	4293      	cmp	r3, r2
 800786e:	d1f2      	bne.n	8007856 <chk_chr+0xc>
	return *str;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	781b      	ldrb	r3, [r3, #0]
}
 8007874:	4618      	mov	r0, r3
 8007876:	370c      	adds	r7, #12
 8007878:	46bd      	mov	sp, r7
 800787a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787e:	4770      	bx	lr

08007880 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007880:	b480      	push	{r7}
 8007882:	b085      	sub	sp, #20
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
 8007888:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800788a:	2300      	movs	r3, #0
 800788c:	60bb      	str	r3, [r7, #8]
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	60fb      	str	r3, [r7, #12]
 8007892:	e029      	b.n	80078e8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8007894:	4a27      	ldr	r2, [pc, #156]	; (8007934 <chk_lock+0xb4>)
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	011b      	lsls	r3, r3, #4
 800789a:	4413      	add	r3, r2
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d01d      	beq.n	80078de <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80078a2:	4a24      	ldr	r2, [pc, #144]	; (8007934 <chk_lock+0xb4>)
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	011b      	lsls	r3, r3, #4
 80078a8:	4413      	add	r3, r2
 80078aa:	681a      	ldr	r2, [r3, #0]
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	429a      	cmp	r2, r3
 80078b2:	d116      	bne.n	80078e2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80078b4:	4a1f      	ldr	r2, [pc, #124]	; (8007934 <chk_lock+0xb4>)
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	011b      	lsls	r3, r3, #4
 80078ba:	4413      	add	r3, r2
 80078bc:	3304      	adds	r3, #4
 80078be:	681a      	ldr	r2, [r3, #0]
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80078c4:	429a      	cmp	r2, r3
 80078c6:	d10c      	bne.n	80078e2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80078c8:	4a1a      	ldr	r2, [pc, #104]	; (8007934 <chk_lock+0xb4>)
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	011b      	lsls	r3, r3, #4
 80078ce:	4413      	add	r3, r2
 80078d0:	3308      	adds	r3, #8
 80078d2:	681a      	ldr	r2, [r3, #0]
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80078d8:	429a      	cmp	r2, r3
 80078da:	d102      	bne.n	80078e2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80078dc:	e007      	b.n	80078ee <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80078de:	2301      	movs	r3, #1
 80078e0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	3301      	adds	r3, #1
 80078e6:	60fb      	str	r3, [r7, #12]
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	2b01      	cmp	r3, #1
 80078ec:	d9d2      	bls.n	8007894 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	2b02      	cmp	r3, #2
 80078f2:	d109      	bne.n	8007908 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d102      	bne.n	8007900 <chk_lock+0x80>
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	2b02      	cmp	r3, #2
 80078fe:	d101      	bne.n	8007904 <chk_lock+0x84>
 8007900:	2300      	movs	r3, #0
 8007902:	e010      	b.n	8007926 <chk_lock+0xa6>
 8007904:	2312      	movs	r3, #18
 8007906:	e00e      	b.n	8007926 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d108      	bne.n	8007920 <chk_lock+0xa0>
 800790e:	4a09      	ldr	r2, [pc, #36]	; (8007934 <chk_lock+0xb4>)
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	011b      	lsls	r3, r3, #4
 8007914:	4413      	add	r3, r2
 8007916:	330c      	adds	r3, #12
 8007918:	881b      	ldrh	r3, [r3, #0]
 800791a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800791e:	d101      	bne.n	8007924 <chk_lock+0xa4>
 8007920:	2310      	movs	r3, #16
 8007922:	e000      	b.n	8007926 <chk_lock+0xa6>
 8007924:	2300      	movs	r3, #0
}
 8007926:	4618      	mov	r0, r3
 8007928:	3714      	adds	r7, #20
 800792a:	46bd      	mov	sp, r7
 800792c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007930:	4770      	bx	lr
 8007932:	bf00      	nop
 8007934:	200028d8 	.word	0x200028d8

08007938 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8007938:	b480      	push	{r7}
 800793a:	b083      	sub	sp, #12
 800793c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800793e:	2300      	movs	r3, #0
 8007940:	607b      	str	r3, [r7, #4]
 8007942:	e002      	b.n	800794a <enq_lock+0x12>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	3301      	adds	r3, #1
 8007948:	607b      	str	r3, [r7, #4]
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2b01      	cmp	r3, #1
 800794e:	d806      	bhi.n	800795e <enq_lock+0x26>
 8007950:	4a09      	ldr	r2, [pc, #36]	; (8007978 <enq_lock+0x40>)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	011b      	lsls	r3, r3, #4
 8007956:	4413      	add	r3, r2
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d1f2      	bne.n	8007944 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2b02      	cmp	r3, #2
 8007962:	bf14      	ite	ne
 8007964:	2301      	movne	r3, #1
 8007966:	2300      	moveq	r3, #0
 8007968:	b2db      	uxtb	r3, r3
}
 800796a:	4618      	mov	r0, r3
 800796c:	370c      	adds	r7, #12
 800796e:	46bd      	mov	sp, r7
 8007970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007974:	4770      	bx	lr
 8007976:	bf00      	nop
 8007978:	200028d8 	.word	0x200028d8

0800797c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800797c:	b480      	push	{r7}
 800797e:	b085      	sub	sp, #20
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
 8007984:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007986:	2300      	movs	r3, #0
 8007988:	60fb      	str	r3, [r7, #12]
 800798a:	e01f      	b.n	80079cc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800798c:	4a41      	ldr	r2, [pc, #260]	; (8007a94 <inc_lock+0x118>)
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	011b      	lsls	r3, r3, #4
 8007992:	4413      	add	r3, r2
 8007994:	681a      	ldr	r2, [r3, #0]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	429a      	cmp	r2, r3
 800799c:	d113      	bne.n	80079c6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800799e:	4a3d      	ldr	r2, [pc, #244]	; (8007a94 <inc_lock+0x118>)
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	011b      	lsls	r3, r3, #4
 80079a4:	4413      	add	r3, r2
 80079a6:	3304      	adds	r3, #4
 80079a8:	681a      	ldr	r2, [r3, #0]
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80079ae:	429a      	cmp	r2, r3
 80079b0:	d109      	bne.n	80079c6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80079b2:	4a38      	ldr	r2, [pc, #224]	; (8007a94 <inc_lock+0x118>)
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	011b      	lsls	r3, r3, #4
 80079b8:	4413      	add	r3, r2
 80079ba:	3308      	adds	r3, #8
 80079bc:	681a      	ldr	r2, [r3, #0]
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80079c2:	429a      	cmp	r2, r3
 80079c4:	d006      	beq.n	80079d4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	3301      	adds	r3, #1
 80079ca:	60fb      	str	r3, [r7, #12]
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	2b01      	cmp	r3, #1
 80079d0:	d9dc      	bls.n	800798c <inc_lock+0x10>
 80079d2:	e000      	b.n	80079d6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80079d4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	2b02      	cmp	r3, #2
 80079da:	d132      	bne.n	8007a42 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80079dc:	2300      	movs	r3, #0
 80079de:	60fb      	str	r3, [r7, #12]
 80079e0:	e002      	b.n	80079e8 <inc_lock+0x6c>
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	3301      	adds	r3, #1
 80079e6:	60fb      	str	r3, [r7, #12]
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	2b01      	cmp	r3, #1
 80079ec:	d806      	bhi.n	80079fc <inc_lock+0x80>
 80079ee:	4a29      	ldr	r2, [pc, #164]	; (8007a94 <inc_lock+0x118>)
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	011b      	lsls	r3, r3, #4
 80079f4:	4413      	add	r3, r2
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d1f2      	bne.n	80079e2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	2b02      	cmp	r3, #2
 8007a00:	d101      	bne.n	8007a06 <inc_lock+0x8a>
 8007a02:	2300      	movs	r3, #0
 8007a04:	e040      	b.n	8007a88 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681a      	ldr	r2, [r3, #0]
 8007a0a:	4922      	ldr	r1, [pc, #136]	; (8007a94 <inc_lock+0x118>)
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	011b      	lsls	r3, r3, #4
 8007a10:	440b      	add	r3, r1
 8007a12:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	689a      	ldr	r2, [r3, #8]
 8007a18:	491e      	ldr	r1, [pc, #120]	; (8007a94 <inc_lock+0x118>)
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	011b      	lsls	r3, r3, #4
 8007a1e:	440b      	add	r3, r1
 8007a20:	3304      	adds	r3, #4
 8007a22:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	695a      	ldr	r2, [r3, #20]
 8007a28:	491a      	ldr	r1, [pc, #104]	; (8007a94 <inc_lock+0x118>)
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	011b      	lsls	r3, r3, #4
 8007a2e:	440b      	add	r3, r1
 8007a30:	3308      	adds	r3, #8
 8007a32:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8007a34:	4a17      	ldr	r2, [pc, #92]	; (8007a94 <inc_lock+0x118>)
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	011b      	lsls	r3, r3, #4
 8007a3a:	4413      	add	r3, r2
 8007a3c:	330c      	adds	r3, #12
 8007a3e:	2200      	movs	r2, #0
 8007a40:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d009      	beq.n	8007a5c <inc_lock+0xe0>
 8007a48:	4a12      	ldr	r2, [pc, #72]	; (8007a94 <inc_lock+0x118>)
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	011b      	lsls	r3, r3, #4
 8007a4e:	4413      	add	r3, r2
 8007a50:	330c      	adds	r3, #12
 8007a52:	881b      	ldrh	r3, [r3, #0]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d001      	beq.n	8007a5c <inc_lock+0xe0>
 8007a58:	2300      	movs	r3, #0
 8007a5a:	e015      	b.n	8007a88 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d108      	bne.n	8007a74 <inc_lock+0xf8>
 8007a62:	4a0c      	ldr	r2, [pc, #48]	; (8007a94 <inc_lock+0x118>)
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	011b      	lsls	r3, r3, #4
 8007a68:	4413      	add	r3, r2
 8007a6a:	330c      	adds	r3, #12
 8007a6c:	881b      	ldrh	r3, [r3, #0]
 8007a6e:	3301      	adds	r3, #1
 8007a70:	b29a      	uxth	r2, r3
 8007a72:	e001      	b.n	8007a78 <inc_lock+0xfc>
 8007a74:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007a78:	4906      	ldr	r1, [pc, #24]	; (8007a94 <inc_lock+0x118>)
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	011b      	lsls	r3, r3, #4
 8007a7e:	440b      	add	r3, r1
 8007a80:	330c      	adds	r3, #12
 8007a82:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	3301      	adds	r3, #1
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	3714      	adds	r7, #20
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a92:	4770      	bx	lr
 8007a94:	200028d8 	.word	0x200028d8

08007a98 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b085      	sub	sp, #20
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	3b01      	subs	r3, #1
 8007aa4:	607b      	str	r3, [r7, #4]
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2b01      	cmp	r3, #1
 8007aaa:	d825      	bhi.n	8007af8 <dec_lock+0x60>
		n = Files[i].ctr;
 8007aac:	4a17      	ldr	r2, [pc, #92]	; (8007b0c <dec_lock+0x74>)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	011b      	lsls	r3, r3, #4
 8007ab2:	4413      	add	r3, r2
 8007ab4:	330c      	adds	r3, #12
 8007ab6:	881b      	ldrh	r3, [r3, #0]
 8007ab8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8007aba:	89fb      	ldrh	r3, [r7, #14]
 8007abc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ac0:	d101      	bne.n	8007ac6 <dec_lock+0x2e>
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8007ac6:	89fb      	ldrh	r3, [r7, #14]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d002      	beq.n	8007ad2 <dec_lock+0x3a>
 8007acc:	89fb      	ldrh	r3, [r7, #14]
 8007ace:	3b01      	subs	r3, #1
 8007ad0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8007ad2:	4a0e      	ldr	r2, [pc, #56]	; (8007b0c <dec_lock+0x74>)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	011b      	lsls	r3, r3, #4
 8007ad8:	4413      	add	r3, r2
 8007ada:	330c      	adds	r3, #12
 8007adc:	89fa      	ldrh	r2, [r7, #14]
 8007ade:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007ae0:	89fb      	ldrh	r3, [r7, #14]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d105      	bne.n	8007af2 <dec_lock+0x5a>
 8007ae6:	4a09      	ldr	r2, [pc, #36]	; (8007b0c <dec_lock+0x74>)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	011b      	lsls	r3, r3, #4
 8007aec:	4413      	add	r3, r2
 8007aee:	2200      	movs	r2, #0
 8007af0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8007af2:	2300      	movs	r3, #0
 8007af4:	737b      	strb	r3, [r7, #13]
 8007af6:	e001      	b.n	8007afc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8007af8:	2302      	movs	r3, #2
 8007afa:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8007afc:	7b7b      	ldrb	r3, [r7, #13]
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	3714      	adds	r7, #20
 8007b02:	46bd      	mov	sp, r7
 8007b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b08:	4770      	bx	lr
 8007b0a:	bf00      	nop
 8007b0c:	200028d8 	.word	0x200028d8

08007b10 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007b10:	b480      	push	{r7}
 8007b12:	b085      	sub	sp, #20
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8007b18:	2300      	movs	r3, #0
 8007b1a:	60fb      	str	r3, [r7, #12]
 8007b1c:	e010      	b.n	8007b40 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8007b1e:	4a0d      	ldr	r2, [pc, #52]	; (8007b54 <clear_lock+0x44>)
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	011b      	lsls	r3, r3, #4
 8007b24:	4413      	add	r3, r2
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	687a      	ldr	r2, [r7, #4]
 8007b2a:	429a      	cmp	r2, r3
 8007b2c:	d105      	bne.n	8007b3a <clear_lock+0x2a>
 8007b2e:	4a09      	ldr	r2, [pc, #36]	; (8007b54 <clear_lock+0x44>)
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	011b      	lsls	r3, r3, #4
 8007b34:	4413      	add	r3, r2
 8007b36:	2200      	movs	r2, #0
 8007b38:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	3301      	adds	r3, #1
 8007b3e:	60fb      	str	r3, [r7, #12]
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	2b01      	cmp	r3, #1
 8007b44:	d9eb      	bls.n	8007b1e <clear_lock+0xe>
	}
}
 8007b46:	bf00      	nop
 8007b48:	bf00      	nop
 8007b4a:	3714      	adds	r7, #20
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b52:	4770      	bx	lr
 8007b54:	200028d8 	.word	0x200028d8

08007b58 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b086      	sub	sp, #24
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8007b60:	2300      	movs	r3, #0
 8007b62:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	78db      	ldrb	r3, [r3, #3]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d034      	beq.n	8007bd6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b70:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	7858      	ldrb	r0, [r3, #1]
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	697a      	ldr	r2, [r7, #20]
 8007b80:	f7ff fd40 	bl	8007604 <disk_write>
 8007b84:	4603      	mov	r3, r0
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d002      	beq.n	8007b90 <sync_window+0x38>
			res = FR_DISK_ERR;
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	73fb      	strb	r3, [r7, #15]
 8007b8e:	e022      	b.n	8007bd6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2200      	movs	r2, #0
 8007b94:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b9a:	697a      	ldr	r2, [r7, #20]
 8007b9c:	1ad2      	subs	r2, r2, r3
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	69db      	ldr	r3, [r3, #28]
 8007ba2:	429a      	cmp	r2, r3
 8007ba4:	d217      	bcs.n	8007bd6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	789b      	ldrb	r3, [r3, #2]
 8007baa:	613b      	str	r3, [r7, #16]
 8007bac:	e010      	b.n	8007bd0 <sync_window+0x78>
					wsect += fs->fsize;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	69db      	ldr	r3, [r3, #28]
 8007bb2:	697a      	ldr	r2, [r7, #20]
 8007bb4:	4413      	add	r3, r2
 8007bb6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	7858      	ldrb	r0, [r3, #1]
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	697a      	ldr	r2, [r7, #20]
 8007bc6:	f7ff fd1d 	bl	8007604 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007bca:	693b      	ldr	r3, [r7, #16]
 8007bcc:	3b01      	subs	r3, #1
 8007bce:	613b      	str	r3, [r7, #16]
 8007bd0:	693b      	ldr	r3, [r7, #16]
 8007bd2:	2b01      	cmp	r3, #1
 8007bd4:	d8eb      	bhi.n	8007bae <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8007bd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bd8:	4618      	mov	r0, r3
 8007bda:	3718      	adds	r7, #24
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bd80      	pop	{r7, pc}

08007be0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b084      	sub	sp, #16
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
 8007be8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8007bea:	2300      	movs	r3, #0
 8007bec:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bf2:	683a      	ldr	r2, [r7, #0]
 8007bf4:	429a      	cmp	r2, r3
 8007bf6:	d01b      	beq.n	8007c30 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f7ff ffad 	bl	8007b58 <sync_window>
 8007bfe:	4603      	mov	r3, r0
 8007c00:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007c02:	7bfb      	ldrb	r3, [r7, #15]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d113      	bne.n	8007c30 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	7858      	ldrb	r0, [r3, #1]
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007c12:	2301      	movs	r3, #1
 8007c14:	683a      	ldr	r2, [r7, #0]
 8007c16:	f7ff fcd5 	bl	80075c4 <disk_read>
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d004      	beq.n	8007c2a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007c20:	f04f 33ff 	mov.w	r3, #4294967295
 8007c24:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8007c26:	2301      	movs	r3, #1
 8007c28:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	683a      	ldr	r2, [r7, #0]
 8007c2e:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8007c30:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3710      	adds	r7, #16
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}
	...

08007c3c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b084      	sub	sp, #16
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f7ff ff87 	bl	8007b58 <sync_window>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007c4e:	7bfb      	ldrb	r3, [r7, #15]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d159      	bne.n	8007d08 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	781b      	ldrb	r3, [r3, #0]
 8007c58:	2b03      	cmp	r3, #3
 8007c5a:	d149      	bne.n	8007cf0 <sync_fs+0xb4>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	791b      	ldrb	r3, [r3, #4]
 8007c60:	2b01      	cmp	r3, #1
 8007c62:	d145      	bne.n	8007cf0 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	899b      	ldrh	r3, [r3, #12]
 8007c6e:	461a      	mov	r2, r3
 8007c70:	2100      	movs	r1, #0
 8007c72:	f7ff fda8 	bl	80077c6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	3334      	adds	r3, #52	; 0x34
 8007c7a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007c7e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8007c82:	4618      	mov	r0, r3
 8007c84:	f7ff fd37 	bl	80076f6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	3334      	adds	r3, #52	; 0x34
 8007c8c:	4921      	ldr	r1, [pc, #132]	; (8007d14 <sync_fs+0xd8>)
 8007c8e:	4618      	mov	r0, r3
 8007c90:	f7ff fd4c 	bl	800772c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	3334      	adds	r3, #52	; 0x34
 8007c98:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007c9c:	491e      	ldr	r1, [pc, #120]	; (8007d18 <sync_fs+0xdc>)
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	f7ff fd44 	bl	800772c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	3334      	adds	r3, #52	; 0x34
 8007ca8:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	695b      	ldr	r3, [r3, #20]
 8007cb0:	4619      	mov	r1, r3
 8007cb2:	4610      	mov	r0, r2
 8007cb4:	f7ff fd3a 	bl	800772c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	3334      	adds	r3, #52	; 0x34
 8007cbc:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	691b      	ldr	r3, [r3, #16]
 8007cc4:	4619      	mov	r1, r3
 8007cc6:	4610      	mov	r0, r2
 8007cc8:	f7ff fd30 	bl	800772c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6a1b      	ldr	r3, [r3, #32]
 8007cd0:	1c5a      	adds	r2, r3, #1
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	7858      	ldrb	r0, [r3, #1]
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	f7ff fc8d 	bl	8007604 <disk_write>
			fs->fsi_flag = 0;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2200      	movs	r2, #0
 8007cee:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	785b      	ldrb	r3, [r3, #1]
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	2100      	movs	r1, #0
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	f7ff fca3 	bl	8007644 <disk_ioctl>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d001      	beq.n	8007d08 <sync_fs+0xcc>
 8007d04:	2301      	movs	r3, #1
 8007d06:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8007d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	3710      	adds	r7, #16
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}
 8007d12:	bf00      	nop
 8007d14:	41615252 	.word	0x41615252
 8007d18:	61417272 	.word	0x61417272

08007d1c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b083      	sub	sp, #12
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
 8007d24:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	3b02      	subs	r3, #2
 8007d2a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	699b      	ldr	r3, [r3, #24]
 8007d30:	3b02      	subs	r3, #2
 8007d32:	683a      	ldr	r2, [r7, #0]
 8007d34:	429a      	cmp	r2, r3
 8007d36:	d301      	bcc.n	8007d3c <clust2sect+0x20>
 8007d38:	2300      	movs	r3, #0
 8007d3a:	e008      	b.n	8007d4e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	895b      	ldrh	r3, [r3, #10]
 8007d40:	461a      	mov	r2, r3
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	fb03 f202 	mul.w	r2, r3, r2
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d4c:	4413      	add	r3, r2
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	370c      	adds	r7, #12
 8007d52:	46bd      	mov	sp, r7
 8007d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d58:	4770      	bx	lr

08007d5a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8007d5a:	b580      	push	{r7, lr}
 8007d5c:	b086      	sub	sp, #24
 8007d5e:	af00      	add	r7, sp, #0
 8007d60:	6078      	str	r0, [r7, #4]
 8007d62:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	2b01      	cmp	r3, #1
 8007d6e:	d904      	bls.n	8007d7a <get_fat+0x20>
 8007d70:	693b      	ldr	r3, [r7, #16]
 8007d72:	699b      	ldr	r3, [r3, #24]
 8007d74:	683a      	ldr	r2, [r7, #0]
 8007d76:	429a      	cmp	r2, r3
 8007d78:	d302      	bcc.n	8007d80 <get_fat+0x26>
		val = 1;	/* Internal error */
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	617b      	str	r3, [r7, #20]
 8007d7e:	e0bb      	b.n	8007ef8 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007d80:	f04f 33ff 	mov.w	r3, #4294967295
 8007d84:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8007d86:	693b      	ldr	r3, [r7, #16]
 8007d88:	781b      	ldrb	r3, [r3, #0]
 8007d8a:	2b03      	cmp	r3, #3
 8007d8c:	f000 8083 	beq.w	8007e96 <get_fat+0x13c>
 8007d90:	2b03      	cmp	r3, #3
 8007d92:	f300 80a7 	bgt.w	8007ee4 <get_fat+0x18a>
 8007d96:	2b01      	cmp	r3, #1
 8007d98:	d002      	beq.n	8007da0 <get_fat+0x46>
 8007d9a:	2b02      	cmp	r3, #2
 8007d9c:	d056      	beq.n	8007e4c <get_fat+0xf2>
 8007d9e:	e0a1      	b.n	8007ee4 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	60fb      	str	r3, [r7, #12]
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	085b      	lsrs	r3, r3, #1
 8007da8:	68fa      	ldr	r2, [r7, #12]
 8007daa:	4413      	add	r3, r2
 8007dac:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007dae:	693b      	ldr	r3, [r7, #16]
 8007db0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007db2:	693b      	ldr	r3, [r7, #16]
 8007db4:	899b      	ldrh	r3, [r3, #12]
 8007db6:	4619      	mov	r1, r3
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	fbb3 f3f1 	udiv	r3, r3, r1
 8007dbe:	4413      	add	r3, r2
 8007dc0:	4619      	mov	r1, r3
 8007dc2:	6938      	ldr	r0, [r7, #16]
 8007dc4:	f7ff ff0c 	bl	8007be0 <move_window>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	f040 808d 	bne.w	8007eea <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	1c5a      	adds	r2, r3, #1
 8007dd4:	60fa      	str	r2, [r7, #12]
 8007dd6:	693a      	ldr	r2, [r7, #16]
 8007dd8:	8992      	ldrh	r2, [r2, #12]
 8007dda:	fbb3 f1f2 	udiv	r1, r3, r2
 8007dde:	fb01 f202 	mul.w	r2, r1, r2
 8007de2:	1a9b      	subs	r3, r3, r2
 8007de4:	693a      	ldr	r2, [r7, #16]
 8007de6:	4413      	add	r3, r2
 8007de8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007dec:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007dee:	693b      	ldr	r3, [r7, #16]
 8007df0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007df2:	693b      	ldr	r3, [r7, #16]
 8007df4:	899b      	ldrh	r3, [r3, #12]
 8007df6:	4619      	mov	r1, r3
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8007dfe:	4413      	add	r3, r2
 8007e00:	4619      	mov	r1, r3
 8007e02:	6938      	ldr	r0, [r7, #16]
 8007e04:	f7ff feec 	bl	8007be0 <move_window>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d16f      	bne.n	8007eee <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007e0e:	693b      	ldr	r3, [r7, #16]
 8007e10:	899b      	ldrh	r3, [r3, #12]
 8007e12:	461a      	mov	r2, r3
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	fbb3 f1f2 	udiv	r1, r3, r2
 8007e1a:	fb01 f202 	mul.w	r2, r1, r2
 8007e1e:	1a9b      	subs	r3, r3, r2
 8007e20:	693a      	ldr	r2, [r7, #16]
 8007e22:	4413      	add	r3, r2
 8007e24:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007e28:	021b      	lsls	r3, r3, #8
 8007e2a:	461a      	mov	r2, r3
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	4313      	orrs	r3, r2
 8007e30:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	f003 0301 	and.w	r3, r3, #1
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d002      	beq.n	8007e42 <get_fat+0xe8>
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	091b      	lsrs	r3, r3, #4
 8007e40:	e002      	b.n	8007e48 <get_fat+0xee>
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e48:	617b      	str	r3, [r7, #20]
			break;
 8007e4a:	e055      	b.n	8007ef8 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007e4c:	693b      	ldr	r3, [r7, #16]
 8007e4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007e50:	693b      	ldr	r3, [r7, #16]
 8007e52:	899b      	ldrh	r3, [r3, #12]
 8007e54:	085b      	lsrs	r3, r3, #1
 8007e56:	b29b      	uxth	r3, r3
 8007e58:	4619      	mov	r1, r3
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	fbb3 f3f1 	udiv	r3, r3, r1
 8007e60:	4413      	add	r3, r2
 8007e62:	4619      	mov	r1, r3
 8007e64:	6938      	ldr	r0, [r7, #16]
 8007e66:	f7ff febb 	bl	8007be0 <move_window>
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d140      	bne.n	8007ef2 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007e70:	693b      	ldr	r3, [r7, #16]
 8007e72:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	005b      	lsls	r3, r3, #1
 8007e7a:	693a      	ldr	r2, [r7, #16]
 8007e7c:	8992      	ldrh	r2, [r2, #12]
 8007e7e:	fbb3 f0f2 	udiv	r0, r3, r2
 8007e82:	fb00 f202 	mul.w	r2, r0, r2
 8007e86:	1a9b      	subs	r3, r3, r2
 8007e88:	440b      	add	r3, r1
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	f7ff fbf8 	bl	8007680 <ld_word>
 8007e90:	4603      	mov	r3, r0
 8007e92:	617b      	str	r3, [r7, #20]
			break;
 8007e94:	e030      	b.n	8007ef8 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007e96:	693b      	ldr	r3, [r7, #16]
 8007e98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007e9a:	693b      	ldr	r3, [r7, #16]
 8007e9c:	899b      	ldrh	r3, [r3, #12]
 8007e9e:	089b      	lsrs	r3, r3, #2
 8007ea0:	b29b      	uxth	r3, r3
 8007ea2:	4619      	mov	r1, r3
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	fbb3 f3f1 	udiv	r3, r3, r1
 8007eaa:	4413      	add	r3, r2
 8007eac:	4619      	mov	r1, r3
 8007eae:	6938      	ldr	r0, [r7, #16]
 8007eb0:	f7ff fe96 	bl	8007be0 <move_window>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d11d      	bne.n	8007ef6 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007eba:	693b      	ldr	r3, [r7, #16]
 8007ebc:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	009b      	lsls	r3, r3, #2
 8007ec4:	693a      	ldr	r2, [r7, #16]
 8007ec6:	8992      	ldrh	r2, [r2, #12]
 8007ec8:	fbb3 f0f2 	udiv	r0, r3, r2
 8007ecc:	fb00 f202 	mul.w	r2, r0, r2
 8007ed0:	1a9b      	subs	r3, r3, r2
 8007ed2:	440b      	add	r3, r1
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	f7ff fbeb 	bl	80076b0 <ld_dword>
 8007eda:	4603      	mov	r3, r0
 8007edc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007ee0:	617b      	str	r3, [r7, #20]
			break;
 8007ee2:	e009      	b.n	8007ef8 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	617b      	str	r3, [r7, #20]
 8007ee8:	e006      	b.n	8007ef8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007eea:	bf00      	nop
 8007eec:	e004      	b.n	8007ef8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007eee:	bf00      	nop
 8007ef0:	e002      	b.n	8007ef8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007ef2:	bf00      	nop
 8007ef4:	e000      	b.n	8007ef8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007ef6:	bf00      	nop
		}
	}

	return val;
 8007ef8:	697b      	ldr	r3, [r7, #20]
}
 8007efa:	4618      	mov	r0, r3
 8007efc:	3718      	adds	r7, #24
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}

08007f02 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8007f02:	b590      	push	{r4, r7, lr}
 8007f04:	b089      	sub	sp, #36	; 0x24
 8007f06:	af00      	add	r7, sp, #0
 8007f08:	60f8      	str	r0, [r7, #12]
 8007f0a:	60b9      	str	r1, [r7, #8]
 8007f0c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8007f0e:	2302      	movs	r3, #2
 8007f10:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	2b01      	cmp	r3, #1
 8007f16:	f240 8109 	bls.w	800812c <put_fat+0x22a>
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	699b      	ldr	r3, [r3, #24]
 8007f1e:	68ba      	ldr	r2, [r7, #8]
 8007f20:	429a      	cmp	r2, r3
 8007f22:	f080 8103 	bcs.w	800812c <put_fat+0x22a>
		switch (fs->fs_type) {
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	781b      	ldrb	r3, [r3, #0]
 8007f2a:	2b03      	cmp	r3, #3
 8007f2c:	f000 80b6 	beq.w	800809c <put_fat+0x19a>
 8007f30:	2b03      	cmp	r3, #3
 8007f32:	f300 80fb 	bgt.w	800812c <put_fat+0x22a>
 8007f36:	2b01      	cmp	r3, #1
 8007f38:	d003      	beq.n	8007f42 <put_fat+0x40>
 8007f3a:	2b02      	cmp	r3, #2
 8007f3c:	f000 8083 	beq.w	8008046 <put_fat+0x144>
 8007f40:	e0f4      	b.n	800812c <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	61bb      	str	r3, [r7, #24]
 8007f46:	69bb      	ldr	r3, [r7, #24]
 8007f48:	085b      	lsrs	r3, r3, #1
 8007f4a:	69ba      	ldr	r2, [r7, #24]
 8007f4c:	4413      	add	r3, r2
 8007f4e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	899b      	ldrh	r3, [r3, #12]
 8007f58:	4619      	mov	r1, r3
 8007f5a:	69bb      	ldr	r3, [r7, #24]
 8007f5c:	fbb3 f3f1 	udiv	r3, r3, r1
 8007f60:	4413      	add	r3, r2
 8007f62:	4619      	mov	r1, r3
 8007f64:	68f8      	ldr	r0, [r7, #12]
 8007f66:	f7ff fe3b 	bl	8007be0 <move_window>
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007f6e:	7ffb      	ldrb	r3, [r7, #31]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	f040 80d4 	bne.w	800811e <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007f7c:	69bb      	ldr	r3, [r7, #24]
 8007f7e:	1c5a      	adds	r2, r3, #1
 8007f80:	61ba      	str	r2, [r7, #24]
 8007f82:	68fa      	ldr	r2, [r7, #12]
 8007f84:	8992      	ldrh	r2, [r2, #12]
 8007f86:	fbb3 f0f2 	udiv	r0, r3, r2
 8007f8a:	fb00 f202 	mul.w	r2, r0, r2
 8007f8e:	1a9b      	subs	r3, r3, r2
 8007f90:	440b      	add	r3, r1
 8007f92:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	f003 0301 	and.w	r3, r3, #1
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d00d      	beq.n	8007fba <put_fat+0xb8>
 8007f9e:	697b      	ldr	r3, [r7, #20]
 8007fa0:	781b      	ldrb	r3, [r3, #0]
 8007fa2:	b25b      	sxtb	r3, r3
 8007fa4:	f003 030f 	and.w	r3, r3, #15
 8007fa8:	b25a      	sxtb	r2, r3
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	b2db      	uxtb	r3, r3
 8007fae:	011b      	lsls	r3, r3, #4
 8007fb0:	b25b      	sxtb	r3, r3
 8007fb2:	4313      	orrs	r3, r2
 8007fb4:	b25b      	sxtb	r3, r3
 8007fb6:	b2db      	uxtb	r3, r3
 8007fb8:	e001      	b.n	8007fbe <put_fat+0xbc>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	b2db      	uxtb	r3, r3
 8007fbe:	697a      	ldr	r2, [r7, #20]
 8007fc0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	2201      	movs	r2, #1
 8007fc6:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	899b      	ldrh	r3, [r3, #12]
 8007fd0:	4619      	mov	r1, r3
 8007fd2:	69bb      	ldr	r3, [r7, #24]
 8007fd4:	fbb3 f3f1 	udiv	r3, r3, r1
 8007fd8:	4413      	add	r3, r2
 8007fda:	4619      	mov	r1, r3
 8007fdc:	68f8      	ldr	r0, [r7, #12]
 8007fde:	f7ff fdff 	bl	8007be0 <move_window>
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007fe6:	7ffb      	ldrb	r3, [r7, #31]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	f040 809a 	bne.w	8008122 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	899b      	ldrh	r3, [r3, #12]
 8007ff8:	461a      	mov	r2, r3
 8007ffa:	69bb      	ldr	r3, [r7, #24]
 8007ffc:	fbb3 f0f2 	udiv	r0, r3, r2
 8008000:	fb00 f202 	mul.w	r2, r0, r2
 8008004:	1a9b      	subs	r3, r3, r2
 8008006:	440b      	add	r3, r1
 8008008:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800800a:	68bb      	ldr	r3, [r7, #8]
 800800c:	f003 0301 	and.w	r3, r3, #1
 8008010:	2b00      	cmp	r3, #0
 8008012:	d003      	beq.n	800801c <put_fat+0x11a>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	091b      	lsrs	r3, r3, #4
 8008018:	b2db      	uxtb	r3, r3
 800801a:	e00e      	b.n	800803a <put_fat+0x138>
 800801c:	697b      	ldr	r3, [r7, #20]
 800801e:	781b      	ldrb	r3, [r3, #0]
 8008020:	b25b      	sxtb	r3, r3
 8008022:	f023 030f 	bic.w	r3, r3, #15
 8008026:	b25a      	sxtb	r2, r3
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	0a1b      	lsrs	r3, r3, #8
 800802c:	b25b      	sxtb	r3, r3
 800802e:	f003 030f 	and.w	r3, r3, #15
 8008032:	b25b      	sxtb	r3, r3
 8008034:	4313      	orrs	r3, r2
 8008036:	b25b      	sxtb	r3, r3
 8008038:	b2db      	uxtb	r3, r3
 800803a:	697a      	ldr	r2, [r7, #20]
 800803c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	2201      	movs	r2, #1
 8008042:	70da      	strb	r2, [r3, #3]
			break;
 8008044:	e072      	b.n	800812c <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	899b      	ldrh	r3, [r3, #12]
 800804e:	085b      	lsrs	r3, r3, #1
 8008050:	b29b      	uxth	r3, r3
 8008052:	4619      	mov	r1, r3
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	fbb3 f3f1 	udiv	r3, r3, r1
 800805a:	4413      	add	r3, r2
 800805c:	4619      	mov	r1, r3
 800805e:	68f8      	ldr	r0, [r7, #12]
 8008060:	f7ff fdbe 	bl	8007be0 <move_window>
 8008064:	4603      	mov	r3, r0
 8008066:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008068:	7ffb      	ldrb	r3, [r7, #31]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d15b      	bne.n	8008126 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	005b      	lsls	r3, r3, #1
 8008078:	68fa      	ldr	r2, [r7, #12]
 800807a:	8992      	ldrh	r2, [r2, #12]
 800807c:	fbb3 f0f2 	udiv	r0, r3, r2
 8008080:	fb00 f202 	mul.w	r2, r0, r2
 8008084:	1a9b      	subs	r3, r3, r2
 8008086:	440b      	add	r3, r1
 8008088:	687a      	ldr	r2, [r7, #4]
 800808a:	b292      	uxth	r2, r2
 800808c:	4611      	mov	r1, r2
 800808e:	4618      	mov	r0, r3
 8008090:	f7ff fb31 	bl	80076f6 <st_word>
			fs->wflag = 1;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	2201      	movs	r2, #1
 8008098:	70da      	strb	r2, [r3, #3]
			break;
 800809a:	e047      	b.n	800812c <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	899b      	ldrh	r3, [r3, #12]
 80080a4:	089b      	lsrs	r3, r3, #2
 80080a6:	b29b      	uxth	r3, r3
 80080a8:	4619      	mov	r1, r3
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	fbb3 f3f1 	udiv	r3, r3, r1
 80080b0:	4413      	add	r3, r2
 80080b2:	4619      	mov	r1, r3
 80080b4:	68f8      	ldr	r0, [r7, #12]
 80080b6:	f7ff fd93 	bl	8007be0 <move_window>
 80080ba:	4603      	mov	r3, r0
 80080bc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80080be:	7ffb      	ldrb	r3, [r7, #31]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d132      	bne.n	800812a <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	009b      	lsls	r3, r3, #2
 80080d4:	68fa      	ldr	r2, [r7, #12]
 80080d6:	8992      	ldrh	r2, [r2, #12]
 80080d8:	fbb3 f0f2 	udiv	r0, r3, r2
 80080dc:	fb00 f202 	mul.w	r2, r0, r2
 80080e0:	1a9b      	subs	r3, r3, r2
 80080e2:	440b      	add	r3, r1
 80080e4:	4618      	mov	r0, r3
 80080e6:	f7ff fae3 	bl	80076b0 <ld_dword>
 80080ea:	4603      	mov	r3, r0
 80080ec:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80080f0:	4323      	orrs	r3, r4
 80080f2:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	009b      	lsls	r3, r3, #2
 80080fe:	68fa      	ldr	r2, [r7, #12]
 8008100:	8992      	ldrh	r2, [r2, #12]
 8008102:	fbb3 f0f2 	udiv	r0, r3, r2
 8008106:	fb00 f202 	mul.w	r2, r0, r2
 800810a:	1a9b      	subs	r3, r3, r2
 800810c:	440b      	add	r3, r1
 800810e:	6879      	ldr	r1, [r7, #4]
 8008110:	4618      	mov	r0, r3
 8008112:	f7ff fb0b 	bl	800772c <st_dword>
			fs->wflag = 1;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	2201      	movs	r2, #1
 800811a:	70da      	strb	r2, [r3, #3]
			break;
 800811c:	e006      	b.n	800812c <put_fat+0x22a>
			if (res != FR_OK) break;
 800811e:	bf00      	nop
 8008120:	e004      	b.n	800812c <put_fat+0x22a>
			if (res != FR_OK) break;
 8008122:	bf00      	nop
 8008124:	e002      	b.n	800812c <put_fat+0x22a>
			if (res != FR_OK) break;
 8008126:	bf00      	nop
 8008128:	e000      	b.n	800812c <put_fat+0x22a>
			if (res != FR_OK) break;
 800812a:	bf00      	nop
		}
	}
	return res;
 800812c:	7ffb      	ldrb	r3, [r7, #31]
}
 800812e:	4618      	mov	r0, r3
 8008130:	3724      	adds	r7, #36	; 0x24
 8008132:	46bd      	mov	sp, r7
 8008134:	bd90      	pop	{r4, r7, pc}

08008136 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8008136:	b580      	push	{r7, lr}
 8008138:	b088      	sub	sp, #32
 800813a:	af00      	add	r7, sp, #0
 800813c:	60f8      	str	r0, [r7, #12]
 800813e:	60b9      	str	r1, [r7, #8]
 8008140:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8008142:	2300      	movs	r3, #0
 8008144:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	2b01      	cmp	r3, #1
 8008150:	d904      	bls.n	800815c <remove_chain+0x26>
 8008152:	69bb      	ldr	r3, [r7, #24]
 8008154:	699b      	ldr	r3, [r3, #24]
 8008156:	68ba      	ldr	r2, [r7, #8]
 8008158:	429a      	cmp	r2, r3
 800815a:	d301      	bcc.n	8008160 <remove_chain+0x2a>
 800815c:	2302      	movs	r3, #2
 800815e:	e04b      	b.n	80081f8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d00c      	beq.n	8008180 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8008166:	f04f 32ff 	mov.w	r2, #4294967295
 800816a:	6879      	ldr	r1, [r7, #4]
 800816c:	69b8      	ldr	r0, [r7, #24]
 800816e:	f7ff fec8 	bl	8007f02 <put_fat>
 8008172:	4603      	mov	r3, r0
 8008174:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8008176:	7ffb      	ldrb	r3, [r7, #31]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d001      	beq.n	8008180 <remove_chain+0x4a>
 800817c:	7ffb      	ldrb	r3, [r7, #31]
 800817e:	e03b      	b.n	80081f8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8008180:	68b9      	ldr	r1, [r7, #8]
 8008182:	68f8      	ldr	r0, [r7, #12]
 8008184:	f7ff fde9 	bl	8007d5a <get_fat>
 8008188:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800818a:	697b      	ldr	r3, [r7, #20]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d031      	beq.n	80081f4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8008190:	697b      	ldr	r3, [r7, #20]
 8008192:	2b01      	cmp	r3, #1
 8008194:	d101      	bne.n	800819a <remove_chain+0x64>
 8008196:	2302      	movs	r3, #2
 8008198:	e02e      	b.n	80081f8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800819a:	697b      	ldr	r3, [r7, #20]
 800819c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081a0:	d101      	bne.n	80081a6 <remove_chain+0x70>
 80081a2:	2301      	movs	r3, #1
 80081a4:	e028      	b.n	80081f8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80081a6:	2200      	movs	r2, #0
 80081a8:	68b9      	ldr	r1, [r7, #8]
 80081aa:	69b8      	ldr	r0, [r7, #24]
 80081ac:	f7ff fea9 	bl	8007f02 <put_fat>
 80081b0:	4603      	mov	r3, r0
 80081b2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80081b4:	7ffb      	ldrb	r3, [r7, #31]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d001      	beq.n	80081be <remove_chain+0x88>
 80081ba:	7ffb      	ldrb	r3, [r7, #31]
 80081bc:	e01c      	b.n	80081f8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80081be:	69bb      	ldr	r3, [r7, #24]
 80081c0:	695a      	ldr	r2, [r3, #20]
 80081c2:	69bb      	ldr	r3, [r7, #24]
 80081c4:	699b      	ldr	r3, [r3, #24]
 80081c6:	3b02      	subs	r3, #2
 80081c8:	429a      	cmp	r2, r3
 80081ca:	d20b      	bcs.n	80081e4 <remove_chain+0xae>
			fs->free_clst++;
 80081cc:	69bb      	ldr	r3, [r7, #24]
 80081ce:	695b      	ldr	r3, [r3, #20]
 80081d0:	1c5a      	adds	r2, r3, #1
 80081d2:	69bb      	ldr	r3, [r7, #24]
 80081d4:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80081d6:	69bb      	ldr	r3, [r7, #24]
 80081d8:	791b      	ldrb	r3, [r3, #4]
 80081da:	f043 0301 	orr.w	r3, r3, #1
 80081de:	b2da      	uxtb	r2, r3
 80081e0:	69bb      	ldr	r3, [r7, #24]
 80081e2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80081e4:	697b      	ldr	r3, [r7, #20]
 80081e6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80081e8:	69bb      	ldr	r3, [r7, #24]
 80081ea:	699b      	ldr	r3, [r3, #24]
 80081ec:	68ba      	ldr	r2, [r7, #8]
 80081ee:	429a      	cmp	r2, r3
 80081f0:	d3c6      	bcc.n	8008180 <remove_chain+0x4a>
 80081f2:	e000      	b.n	80081f6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80081f4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80081f6:	2300      	movs	r3, #0
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	3720      	adds	r7, #32
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bd80      	pop	{r7, pc}

08008200 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b088      	sub	sp, #32
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
 8008208:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d10d      	bne.n	8008232 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8008216:	693b      	ldr	r3, [r7, #16]
 8008218:	691b      	ldr	r3, [r3, #16]
 800821a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800821c:	69bb      	ldr	r3, [r7, #24]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d004      	beq.n	800822c <create_chain+0x2c>
 8008222:	693b      	ldr	r3, [r7, #16]
 8008224:	699b      	ldr	r3, [r3, #24]
 8008226:	69ba      	ldr	r2, [r7, #24]
 8008228:	429a      	cmp	r2, r3
 800822a:	d31b      	bcc.n	8008264 <create_chain+0x64>
 800822c:	2301      	movs	r3, #1
 800822e:	61bb      	str	r3, [r7, #24]
 8008230:	e018      	b.n	8008264 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8008232:	6839      	ldr	r1, [r7, #0]
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f7ff fd90 	bl	8007d5a <get_fat>
 800823a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	2b01      	cmp	r3, #1
 8008240:	d801      	bhi.n	8008246 <create_chain+0x46>
 8008242:	2301      	movs	r3, #1
 8008244:	e070      	b.n	8008328 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800824c:	d101      	bne.n	8008252 <create_chain+0x52>
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	e06a      	b.n	8008328 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8008252:	693b      	ldr	r3, [r7, #16]
 8008254:	699b      	ldr	r3, [r3, #24]
 8008256:	68fa      	ldr	r2, [r7, #12]
 8008258:	429a      	cmp	r2, r3
 800825a:	d201      	bcs.n	8008260 <create_chain+0x60>
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	e063      	b.n	8008328 <create_chain+0x128>
		scl = clst;
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8008264:	69bb      	ldr	r3, [r7, #24]
 8008266:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8008268:	69fb      	ldr	r3, [r7, #28]
 800826a:	3301      	adds	r3, #1
 800826c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800826e:	693b      	ldr	r3, [r7, #16]
 8008270:	699b      	ldr	r3, [r3, #24]
 8008272:	69fa      	ldr	r2, [r7, #28]
 8008274:	429a      	cmp	r2, r3
 8008276:	d307      	bcc.n	8008288 <create_chain+0x88>
				ncl = 2;
 8008278:	2302      	movs	r3, #2
 800827a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800827c:	69fa      	ldr	r2, [r7, #28]
 800827e:	69bb      	ldr	r3, [r7, #24]
 8008280:	429a      	cmp	r2, r3
 8008282:	d901      	bls.n	8008288 <create_chain+0x88>
 8008284:	2300      	movs	r3, #0
 8008286:	e04f      	b.n	8008328 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008288:	69f9      	ldr	r1, [r7, #28]
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f7ff fd65 	bl	8007d5a <get_fat>
 8008290:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d00e      	beq.n	80082b6 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	2b01      	cmp	r3, #1
 800829c:	d003      	beq.n	80082a6 <create_chain+0xa6>
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082a4:	d101      	bne.n	80082aa <create_chain+0xaa>
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	e03e      	b.n	8008328 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80082aa:	69fa      	ldr	r2, [r7, #28]
 80082ac:	69bb      	ldr	r3, [r7, #24]
 80082ae:	429a      	cmp	r2, r3
 80082b0:	d1da      	bne.n	8008268 <create_chain+0x68>
 80082b2:	2300      	movs	r3, #0
 80082b4:	e038      	b.n	8008328 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80082b6:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80082b8:	f04f 32ff 	mov.w	r2, #4294967295
 80082bc:	69f9      	ldr	r1, [r7, #28]
 80082be:	6938      	ldr	r0, [r7, #16]
 80082c0:	f7ff fe1f 	bl	8007f02 <put_fat>
 80082c4:	4603      	mov	r3, r0
 80082c6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80082c8:	7dfb      	ldrb	r3, [r7, #23]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d109      	bne.n	80082e2 <create_chain+0xe2>
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d006      	beq.n	80082e2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80082d4:	69fa      	ldr	r2, [r7, #28]
 80082d6:	6839      	ldr	r1, [r7, #0]
 80082d8:	6938      	ldr	r0, [r7, #16]
 80082da:	f7ff fe12 	bl	8007f02 <put_fat>
 80082de:	4603      	mov	r3, r0
 80082e0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80082e2:	7dfb      	ldrb	r3, [r7, #23]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d116      	bne.n	8008316 <create_chain+0x116>
		fs->last_clst = ncl;
 80082e8:	693b      	ldr	r3, [r7, #16]
 80082ea:	69fa      	ldr	r2, [r7, #28]
 80082ec:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80082ee:	693b      	ldr	r3, [r7, #16]
 80082f0:	695a      	ldr	r2, [r3, #20]
 80082f2:	693b      	ldr	r3, [r7, #16]
 80082f4:	699b      	ldr	r3, [r3, #24]
 80082f6:	3b02      	subs	r3, #2
 80082f8:	429a      	cmp	r2, r3
 80082fa:	d804      	bhi.n	8008306 <create_chain+0x106>
 80082fc:	693b      	ldr	r3, [r7, #16]
 80082fe:	695b      	ldr	r3, [r3, #20]
 8008300:	1e5a      	subs	r2, r3, #1
 8008302:	693b      	ldr	r3, [r7, #16]
 8008304:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8008306:	693b      	ldr	r3, [r7, #16]
 8008308:	791b      	ldrb	r3, [r3, #4]
 800830a:	f043 0301 	orr.w	r3, r3, #1
 800830e:	b2da      	uxtb	r2, r3
 8008310:	693b      	ldr	r3, [r7, #16]
 8008312:	711a      	strb	r2, [r3, #4]
 8008314:	e007      	b.n	8008326 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8008316:	7dfb      	ldrb	r3, [r7, #23]
 8008318:	2b01      	cmp	r3, #1
 800831a:	d102      	bne.n	8008322 <create_chain+0x122>
 800831c:	f04f 33ff 	mov.w	r3, #4294967295
 8008320:	e000      	b.n	8008324 <create_chain+0x124>
 8008322:	2301      	movs	r3, #1
 8008324:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8008326:	69fb      	ldr	r3, [r7, #28]
}
 8008328:	4618      	mov	r0, r3
 800832a:	3720      	adds	r7, #32
 800832c:	46bd      	mov	sp, r7
 800832e:	bd80      	pop	{r7, pc}

08008330 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8008330:	b480      	push	{r7}
 8008332:	b087      	sub	sp, #28
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
 8008338:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008344:	3304      	adds	r3, #4
 8008346:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	899b      	ldrh	r3, [r3, #12]
 800834c:	461a      	mov	r2, r3
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	fbb3 f3f2 	udiv	r3, r3, r2
 8008354:	68fa      	ldr	r2, [r7, #12]
 8008356:	8952      	ldrh	r2, [r2, #10]
 8008358:	fbb3 f3f2 	udiv	r3, r3, r2
 800835c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800835e:	693b      	ldr	r3, [r7, #16]
 8008360:	1d1a      	adds	r2, r3, #4
 8008362:	613a      	str	r2, [r7, #16]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d101      	bne.n	8008372 <clmt_clust+0x42>
 800836e:	2300      	movs	r3, #0
 8008370:	e010      	b.n	8008394 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8008372:	697a      	ldr	r2, [r7, #20]
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	429a      	cmp	r2, r3
 8008378:	d307      	bcc.n	800838a <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800837a:	697a      	ldr	r2, [r7, #20]
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	1ad3      	subs	r3, r2, r3
 8008380:	617b      	str	r3, [r7, #20]
 8008382:	693b      	ldr	r3, [r7, #16]
 8008384:	3304      	adds	r3, #4
 8008386:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008388:	e7e9      	b.n	800835e <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800838a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800838c:	693b      	ldr	r3, [r7, #16]
 800838e:	681a      	ldr	r2, [r3, #0]
 8008390:	697b      	ldr	r3, [r7, #20]
 8008392:	4413      	add	r3, r2
}
 8008394:	4618      	mov	r0, r3
 8008396:	371c      	adds	r7, #28
 8008398:	46bd      	mov	sp, r7
 800839a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839e:	4770      	bx	lr

080083a0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b086      	sub	sp, #24
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
 80083a8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80083b6:	d204      	bcs.n	80083c2 <dir_sdi+0x22>
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	f003 031f 	and.w	r3, r3, #31
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d001      	beq.n	80083c6 <dir_sdi+0x26>
		return FR_INT_ERR;
 80083c2:	2302      	movs	r3, #2
 80083c4:	e071      	b.n	80084aa <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	683a      	ldr	r2, [r7, #0]
 80083ca:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	689b      	ldr	r3, [r3, #8]
 80083d0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80083d2:	697b      	ldr	r3, [r7, #20]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d106      	bne.n	80083e6 <dir_sdi+0x46>
 80083d8:	693b      	ldr	r3, [r7, #16]
 80083da:	781b      	ldrb	r3, [r3, #0]
 80083dc:	2b02      	cmp	r3, #2
 80083de:	d902      	bls.n	80083e6 <dir_sdi+0x46>
		clst = fs->dirbase;
 80083e0:	693b      	ldr	r3, [r7, #16]
 80083e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083e4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80083e6:	697b      	ldr	r3, [r7, #20]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d10c      	bne.n	8008406 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	095b      	lsrs	r3, r3, #5
 80083f0:	693a      	ldr	r2, [r7, #16]
 80083f2:	8912      	ldrh	r2, [r2, #8]
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d301      	bcc.n	80083fc <dir_sdi+0x5c>
 80083f8:	2302      	movs	r3, #2
 80083fa:	e056      	b.n	80084aa <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80083fc:	693b      	ldr	r3, [r7, #16]
 80083fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	61da      	str	r2, [r3, #28]
 8008404:	e02d      	b.n	8008462 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8008406:	693b      	ldr	r3, [r7, #16]
 8008408:	895b      	ldrh	r3, [r3, #10]
 800840a:	461a      	mov	r2, r3
 800840c:	693b      	ldr	r3, [r7, #16]
 800840e:	899b      	ldrh	r3, [r3, #12]
 8008410:	fb02 f303 	mul.w	r3, r2, r3
 8008414:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008416:	e019      	b.n	800844c <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6979      	ldr	r1, [r7, #20]
 800841c:	4618      	mov	r0, r3
 800841e:	f7ff fc9c 	bl	8007d5a <get_fat>
 8008422:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008424:	697b      	ldr	r3, [r7, #20]
 8008426:	f1b3 3fff 	cmp.w	r3, #4294967295
 800842a:	d101      	bne.n	8008430 <dir_sdi+0x90>
 800842c:	2301      	movs	r3, #1
 800842e:	e03c      	b.n	80084aa <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008430:	697b      	ldr	r3, [r7, #20]
 8008432:	2b01      	cmp	r3, #1
 8008434:	d904      	bls.n	8008440 <dir_sdi+0xa0>
 8008436:	693b      	ldr	r3, [r7, #16]
 8008438:	699b      	ldr	r3, [r3, #24]
 800843a:	697a      	ldr	r2, [r7, #20]
 800843c:	429a      	cmp	r2, r3
 800843e:	d301      	bcc.n	8008444 <dir_sdi+0xa4>
 8008440:	2302      	movs	r3, #2
 8008442:	e032      	b.n	80084aa <dir_sdi+0x10a>
			ofs -= csz;
 8008444:	683a      	ldr	r2, [r7, #0]
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	1ad3      	subs	r3, r2, r3
 800844a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800844c:	683a      	ldr	r2, [r7, #0]
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	429a      	cmp	r2, r3
 8008452:	d2e1      	bcs.n	8008418 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8008454:	6979      	ldr	r1, [r7, #20]
 8008456:	6938      	ldr	r0, [r7, #16]
 8008458:	f7ff fc60 	bl	8007d1c <clust2sect>
 800845c:	4602      	mov	r2, r0
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	697a      	ldr	r2, [r7, #20]
 8008466:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	69db      	ldr	r3, [r3, #28]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d101      	bne.n	8008474 <dir_sdi+0xd4>
 8008470:	2302      	movs	r3, #2
 8008472:	e01a      	b.n	80084aa <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	69da      	ldr	r2, [r3, #28]
 8008478:	693b      	ldr	r3, [r7, #16]
 800847a:	899b      	ldrh	r3, [r3, #12]
 800847c:	4619      	mov	r1, r3
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	fbb3 f3f1 	udiv	r3, r3, r1
 8008484:	441a      	add	r2, r3
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800848a:	693b      	ldr	r3, [r7, #16]
 800848c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008490:	693b      	ldr	r3, [r7, #16]
 8008492:	899b      	ldrh	r3, [r3, #12]
 8008494:	461a      	mov	r2, r3
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	fbb3 f0f2 	udiv	r0, r3, r2
 800849c:	fb00 f202 	mul.w	r2, r0, r2
 80084a0:	1a9b      	subs	r3, r3, r2
 80084a2:	18ca      	adds	r2, r1, r3
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80084a8:	2300      	movs	r3, #0
}
 80084aa:	4618      	mov	r0, r3
 80084ac:	3718      	adds	r7, #24
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}

080084b2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80084b2:	b580      	push	{r7, lr}
 80084b4:	b086      	sub	sp, #24
 80084b6:	af00      	add	r7, sp, #0
 80084b8:	6078      	str	r0, [r7, #4]
 80084ba:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	695b      	ldr	r3, [r3, #20]
 80084c6:	3320      	adds	r3, #32
 80084c8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	69db      	ldr	r3, [r3, #28]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d003      	beq.n	80084da <dir_next+0x28>
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80084d8:	d301      	bcc.n	80084de <dir_next+0x2c>
 80084da:	2304      	movs	r3, #4
 80084dc:	e0bb      	b.n	8008656 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	899b      	ldrh	r3, [r3, #12]
 80084e2:	461a      	mov	r2, r3
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	fbb3 f1f2 	udiv	r1, r3, r2
 80084ea:	fb01 f202 	mul.w	r2, r1, r2
 80084ee:	1a9b      	subs	r3, r3, r2
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	f040 809d 	bne.w	8008630 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	69db      	ldr	r3, [r3, #28]
 80084fa:	1c5a      	adds	r2, r3, #1
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	699b      	ldr	r3, [r3, #24]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d10b      	bne.n	8008520 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	095b      	lsrs	r3, r3, #5
 800850c:	68fa      	ldr	r2, [r7, #12]
 800850e:	8912      	ldrh	r2, [r2, #8]
 8008510:	4293      	cmp	r3, r2
 8008512:	f0c0 808d 	bcc.w	8008630 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2200      	movs	r2, #0
 800851a:	61da      	str	r2, [r3, #28]
 800851c:	2304      	movs	r3, #4
 800851e:	e09a      	b.n	8008656 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	899b      	ldrh	r3, [r3, #12]
 8008524:	461a      	mov	r2, r3
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	fbb3 f3f2 	udiv	r3, r3, r2
 800852c:	68fa      	ldr	r2, [r7, #12]
 800852e:	8952      	ldrh	r2, [r2, #10]
 8008530:	3a01      	subs	r2, #1
 8008532:	4013      	ands	r3, r2
 8008534:	2b00      	cmp	r3, #0
 8008536:	d17b      	bne.n	8008630 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008538:	687a      	ldr	r2, [r7, #4]
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	699b      	ldr	r3, [r3, #24]
 800853e:	4619      	mov	r1, r3
 8008540:	4610      	mov	r0, r2
 8008542:	f7ff fc0a 	bl	8007d5a <get_fat>
 8008546:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008548:	697b      	ldr	r3, [r7, #20]
 800854a:	2b01      	cmp	r3, #1
 800854c:	d801      	bhi.n	8008552 <dir_next+0xa0>
 800854e:	2302      	movs	r3, #2
 8008550:	e081      	b.n	8008656 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008552:	697b      	ldr	r3, [r7, #20]
 8008554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008558:	d101      	bne.n	800855e <dir_next+0xac>
 800855a:	2301      	movs	r3, #1
 800855c:	e07b      	b.n	8008656 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	699b      	ldr	r3, [r3, #24]
 8008562:	697a      	ldr	r2, [r7, #20]
 8008564:	429a      	cmp	r2, r3
 8008566:	d359      	bcc.n	800861c <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d104      	bne.n	8008578 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2200      	movs	r2, #0
 8008572:	61da      	str	r2, [r3, #28]
 8008574:	2304      	movs	r3, #4
 8008576:	e06e      	b.n	8008656 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8008578:	687a      	ldr	r2, [r7, #4]
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	699b      	ldr	r3, [r3, #24]
 800857e:	4619      	mov	r1, r3
 8008580:	4610      	mov	r0, r2
 8008582:	f7ff fe3d 	bl	8008200 <create_chain>
 8008586:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008588:	697b      	ldr	r3, [r7, #20]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d101      	bne.n	8008592 <dir_next+0xe0>
 800858e:	2307      	movs	r3, #7
 8008590:	e061      	b.n	8008656 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8008592:	697b      	ldr	r3, [r7, #20]
 8008594:	2b01      	cmp	r3, #1
 8008596:	d101      	bne.n	800859c <dir_next+0xea>
 8008598:	2302      	movs	r3, #2
 800859a:	e05c      	b.n	8008656 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800859c:	697b      	ldr	r3, [r7, #20]
 800859e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085a2:	d101      	bne.n	80085a8 <dir_next+0xf6>
 80085a4:	2301      	movs	r3, #1
 80085a6:	e056      	b.n	8008656 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80085a8:	68f8      	ldr	r0, [r7, #12]
 80085aa:	f7ff fad5 	bl	8007b58 <sync_window>
 80085ae:	4603      	mov	r3, r0
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d001      	beq.n	80085b8 <dir_next+0x106>
 80085b4:	2301      	movs	r3, #1
 80085b6:	e04e      	b.n	8008656 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	f103 0034 	add.w	r0, r3, #52	; 0x34
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	899b      	ldrh	r3, [r3, #12]
 80085c2:	461a      	mov	r2, r3
 80085c4:	2100      	movs	r1, #0
 80085c6:	f7ff f8fe 	bl	80077c6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80085ca:	2300      	movs	r3, #0
 80085cc:	613b      	str	r3, [r7, #16]
 80085ce:	6979      	ldr	r1, [r7, #20]
 80085d0:	68f8      	ldr	r0, [r7, #12]
 80085d2:	f7ff fba3 	bl	8007d1c <clust2sect>
 80085d6:	4602      	mov	r2, r0
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	631a      	str	r2, [r3, #48]	; 0x30
 80085dc:	e012      	b.n	8008604 <dir_next+0x152>
						fs->wflag = 1;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	2201      	movs	r2, #1
 80085e2:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80085e4:	68f8      	ldr	r0, [r7, #12]
 80085e6:	f7ff fab7 	bl	8007b58 <sync_window>
 80085ea:	4603      	mov	r3, r0
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d001      	beq.n	80085f4 <dir_next+0x142>
 80085f0:	2301      	movs	r3, #1
 80085f2:	e030      	b.n	8008656 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80085f4:	693b      	ldr	r3, [r7, #16]
 80085f6:	3301      	adds	r3, #1
 80085f8:	613b      	str	r3, [r7, #16]
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085fe:	1c5a      	adds	r2, r3, #1
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	631a      	str	r2, [r3, #48]	; 0x30
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	895b      	ldrh	r3, [r3, #10]
 8008608:	461a      	mov	r2, r3
 800860a:	693b      	ldr	r3, [r7, #16]
 800860c:	4293      	cmp	r3, r2
 800860e:	d3e6      	bcc.n	80085de <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008614:	693b      	ldr	r3, [r7, #16]
 8008616:	1ad2      	subs	r2, r2, r3
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	697a      	ldr	r2, [r7, #20]
 8008620:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8008622:	6979      	ldr	r1, [r7, #20]
 8008624:	68f8      	ldr	r0, [r7, #12]
 8008626:	f7ff fb79 	bl	8007d1c <clust2sect>
 800862a:	4602      	mov	r2, r0
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	68ba      	ldr	r2, [r7, #8]
 8008634:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	899b      	ldrh	r3, [r3, #12]
 8008640:	461a      	mov	r2, r3
 8008642:	68bb      	ldr	r3, [r7, #8]
 8008644:	fbb3 f0f2 	udiv	r0, r3, r2
 8008648:	fb00 f202 	mul.w	r2, r0, r2
 800864c:	1a9b      	subs	r3, r3, r2
 800864e:	18ca      	adds	r2, r1, r3
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008654:	2300      	movs	r3, #0
}
 8008656:	4618      	mov	r0, r3
 8008658:	3718      	adds	r7, #24
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}

0800865e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800865e:	b580      	push	{r7, lr}
 8008660:	b086      	sub	sp, #24
 8008662:	af00      	add	r7, sp, #0
 8008664:	6078      	str	r0, [r7, #4]
 8008666:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800866e:	2100      	movs	r1, #0
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f7ff fe95 	bl	80083a0 <dir_sdi>
 8008676:	4603      	mov	r3, r0
 8008678:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800867a:	7dfb      	ldrb	r3, [r7, #23]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d12b      	bne.n	80086d8 <dir_alloc+0x7a>
		n = 0;
 8008680:	2300      	movs	r3, #0
 8008682:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	69db      	ldr	r3, [r3, #28]
 8008688:	4619      	mov	r1, r3
 800868a:	68f8      	ldr	r0, [r7, #12]
 800868c:	f7ff faa8 	bl	8007be0 <move_window>
 8008690:	4603      	mov	r3, r0
 8008692:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008694:	7dfb      	ldrb	r3, [r7, #23]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d11d      	bne.n	80086d6 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6a1b      	ldr	r3, [r3, #32]
 800869e:	781b      	ldrb	r3, [r3, #0]
 80086a0:	2be5      	cmp	r3, #229	; 0xe5
 80086a2:	d004      	beq.n	80086ae <dir_alloc+0x50>
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6a1b      	ldr	r3, [r3, #32]
 80086a8:	781b      	ldrb	r3, [r3, #0]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d107      	bne.n	80086be <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80086ae:	693b      	ldr	r3, [r7, #16]
 80086b0:	3301      	adds	r3, #1
 80086b2:	613b      	str	r3, [r7, #16]
 80086b4:	693a      	ldr	r2, [r7, #16]
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	429a      	cmp	r2, r3
 80086ba:	d102      	bne.n	80086c2 <dir_alloc+0x64>
 80086bc:	e00c      	b.n	80086d8 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80086be:	2300      	movs	r3, #0
 80086c0:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80086c2:	2101      	movs	r1, #1
 80086c4:	6878      	ldr	r0, [r7, #4]
 80086c6:	f7ff fef4 	bl	80084b2 <dir_next>
 80086ca:	4603      	mov	r3, r0
 80086cc:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80086ce:	7dfb      	ldrb	r3, [r7, #23]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d0d7      	beq.n	8008684 <dir_alloc+0x26>
 80086d4:	e000      	b.n	80086d8 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80086d6:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80086d8:	7dfb      	ldrb	r3, [r7, #23]
 80086da:	2b04      	cmp	r3, #4
 80086dc:	d101      	bne.n	80086e2 <dir_alloc+0x84>
 80086de:	2307      	movs	r3, #7
 80086e0:	75fb      	strb	r3, [r7, #23]
	return res;
 80086e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80086e4:	4618      	mov	r0, r3
 80086e6:	3718      	adds	r7, #24
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bd80      	pop	{r7, pc}

080086ec <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b084      	sub	sp, #16
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
 80086f4:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	331a      	adds	r3, #26
 80086fa:	4618      	mov	r0, r3
 80086fc:	f7fe ffc0 	bl	8007680 <ld_word>
 8008700:	4603      	mov	r3, r0
 8008702:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	781b      	ldrb	r3, [r3, #0]
 8008708:	2b03      	cmp	r3, #3
 800870a:	d109      	bne.n	8008720 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	3314      	adds	r3, #20
 8008710:	4618      	mov	r0, r3
 8008712:	f7fe ffb5 	bl	8007680 <ld_word>
 8008716:	4603      	mov	r3, r0
 8008718:	041b      	lsls	r3, r3, #16
 800871a:	68fa      	ldr	r2, [r7, #12]
 800871c:	4313      	orrs	r3, r2
 800871e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8008720:	68fb      	ldr	r3, [r7, #12]
}
 8008722:	4618      	mov	r0, r3
 8008724:	3710      	adds	r7, #16
 8008726:	46bd      	mov	sp, r7
 8008728:	bd80      	pop	{r7, pc}

0800872a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800872a:	b580      	push	{r7, lr}
 800872c:	b084      	sub	sp, #16
 800872e:	af00      	add	r7, sp, #0
 8008730:	60f8      	str	r0, [r7, #12]
 8008732:	60b9      	str	r1, [r7, #8]
 8008734:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	331a      	adds	r3, #26
 800873a:	687a      	ldr	r2, [r7, #4]
 800873c:	b292      	uxth	r2, r2
 800873e:	4611      	mov	r1, r2
 8008740:	4618      	mov	r0, r3
 8008742:	f7fe ffd8 	bl	80076f6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	781b      	ldrb	r3, [r3, #0]
 800874a:	2b03      	cmp	r3, #3
 800874c:	d109      	bne.n	8008762 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800874e:	68bb      	ldr	r3, [r7, #8]
 8008750:	f103 0214 	add.w	r2, r3, #20
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	0c1b      	lsrs	r3, r3, #16
 8008758:	b29b      	uxth	r3, r3
 800875a:	4619      	mov	r1, r3
 800875c:	4610      	mov	r0, r2
 800875e:	f7fe ffca 	bl	80076f6 <st_word>
	}
}
 8008762:	bf00      	nop
 8008764:	3710      	adds	r7, #16
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}

0800876a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800876a:	b580      	push	{r7, lr}
 800876c:	b086      	sub	sp, #24
 800876e:	af00      	add	r7, sp, #0
 8008770:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008778:	2100      	movs	r1, #0
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f7ff fe10 	bl	80083a0 <dir_sdi>
 8008780:	4603      	mov	r3, r0
 8008782:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8008784:	7dfb      	ldrb	r3, [r7, #23]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d001      	beq.n	800878e <dir_find+0x24>
 800878a:	7dfb      	ldrb	r3, [r7, #23]
 800878c:	e03e      	b.n	800880c <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	69db      	ldr	r3, [r3, #28]
 8008792:	4619      	mov	r1, r3
 8008794:	6938      	ldr	r0, [r7, #16]
 8008796:	f7ff fa23 	bl	8007be0 <move_window>
 800879a:	4603      	mov	r3, r0
 800879c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800879e:	7dfb      	ldrb	r3, [r7, #23]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d12f      	bne.n	8008804 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	6a1b      	ldr	r3, [r3, #32]
 80087a8:	781b      	ldrb	r3, [r3, #0]
 80087aa:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80087ac:	7bfb      	ldrb	r3, [r7, #15]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d102      	bne.n	80087b8 <dir_find+0x4e>
 80087b2:	2304      	movs	r3, #4
 80087b4:	75fb      	strb	r3, [r7, #23]
 80087b6:	e028      	b.n	800880a <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	6a1b      	ldr	r3, [r3, #32]
 80087bc:	330b      	adds	r3, #11
 80087be:	781b      	ldrb	r3, [r3, #0]
 80087c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80087c4:	b2da      	uxtb	r2, r3
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6a1b      	ldr	r3, [r3, #32]
 80087ce:	330b      	adds	r3, #11
 80087d0:	781b      	ldrb	r3, [r3, #0]
 80087d2:	f003 0308 	and.w	r3, r3, #8
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d10a      	bne.n	80087f0 <dir_find+0x86>
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6a18      	ldr	r0, [r3, #32]
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	3324      	adds	r3, #36	; 0x24
 80087e2:	220b      	movs	r2, #11
 80087e4:	4619      	mov	r1, r3
 80087e6:	f7ff f809 	bl	80077fc <mem_cmp>
 80087ea:	4603      	mov	r3, r0
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d00b      	beq.n	8008808 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80087f0:	2100      	movs	r1, #0
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f7ff fe5d 	bl	80084b2 <dir_next>
 80087f8:	4603      	mov	r3, r0
 80087fa:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80087fc:	7dfb      	ldrb	r3, [r7, #23]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d0c5      	beq.n	800878e <dir_find+0x24>
 8008802:	e002      	b.n	800880a <dir_find+0xa0>
		if (res != FR_OK) break;
 8008804:	bf00      	nop
 8008806:	e000      	b.n	800880a <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008808:	bf00      	nop

	return res;
 800880a:	7dfb      	ldrb	r3, [r7, #23]
}
 800880c:	4618      	mov	r0, r3
 800880e:	3718      	adds	r7, #24
 8008810:	46bd      	mov	sp, r7
 8008812:	bd80      	pop	{r7, pc}

08008814 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b084      	sub	sp, #16
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8008822:	2101      	movs	r1, #1
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	f7ff ff1a 	bl	800865e <dir_alloc>
 800882a:	4603      	mov	r3, r0
 800882c:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800882e:	7bfb      	ldrb	r3, [r7, #15]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d11c      	bne.n	800886e <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	69db      	ldr	r3, [r3, #28]
 8008838:	4619      	mov	r1, r3
 800883a:	68b8      	ldr	r0, [r7, #8]
 800883c:	f7ff f9d0 	bl	8007be0 <move_window>
 8008840:	4603      	mov	r3, r0
 8008842:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008844:	7bfb      	ldrb	r3, [r7, #15]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d111      	bne.n	800886e <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	6a1b      	ldr	r3, [r3, #32]
 800884e:	2220      	movs	r2, #32
 8008850:	2100      	movs	r1, #0
 8008852:	4618      	mov	r0, r3
 8008854:	f7fe ffb7 	bl	80077c6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	6a18      	ldr	r0, [r3, #32]
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	3324      	adds	r3, #36	; 0x24
 8008860:	220b      	movs	r2, #11
 8008862:	4619      	mov	r1, r3
 8008864:	f7fe ff8e 	bl	8007784 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	2201      	movs	r2, #1
 800886c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800886e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008870:	4618      	mov	r0, r3
 8008872:	3710      	adds	r7, #16
 8008874:	46bd      	mov	sp, r7
 8008876:	bd80      	pop	{r7, pc}

08008878 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b086      	sub	sp, #24
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
 8008880:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	2200      	movs	r2, #0
 8008886:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	69db      	ldr	r3, [r3, #28]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d04e      	beq.n	800892e <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8008890:	2300      	movs	r3, #0
 8008892:	613b      	str	r3, [r7, #16]
 8008894:	693b      	ldr	r3, [r7, #16]
 8008896:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8008898:	e021      	b.n	80088de <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6a1a      	ldr	r2, [r3, #32]
 800889e:	697b      	ldr	r3, [r7, #20]
 80088a0:	1c59      	adds	r1, r3, #1
 80088a2:	6179      	str	r1, [r7, #20]
 80088a4:	4413      	add	r3, r2
 80088a6:	781b      	ldrb	r3, [r3, #0]
 80088a8:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 80088aa:	7bfb      	ldrb	r3, [r7, #15]
 80088ac:	2b20      	cmp	r3, #32
 80088ae:	d100      	bne.n	80088b2 <get_fileinfo+0x3a>
 80088b0:	e015      	b.n	80088de <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 80088b2:	7bfb      	ldrb	r3, [r7, #15]
 80088b4:	2b05      	cmp	r3, #5
 80088b6:	d101      	bne.n	80088bc <get_fileinfo+0x44>
 80088b8:	23e5      	movs	r3, #229	; 0xe5
 80088ba:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 80088bc:	697b      	ldr	r3, [r7, #20]
 80088be:	2b09      	cmp	r3, #9
 80088c0:	d106      	bne.n	80088d0 <get_fileinfo+0x58>
 80088c2:	693b      	ldr	r3, [r7, #16]
 80088c4:	1c5a      	adds	r2, r3, #1
 80088c6:	613a      	str	r2, [r7, #16]
 80088c8:	683a      	ldr	r2, [r7, #0]
 80088ca:	4413      	add	r3, r2
 80088cc:	222e      	movs	r2, #46	; 0x2e
 80088ce:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 80088d0:	693b      	ldr	r3, [r7, #16]
 80088d2:	1c5a      	adds	r2, r3, #1
 80088d4:	613a      	str	r2, [r7, #16]
 80088d6:	683a      	ldr	r2, [r7, #0]
 80088d8:	4413      	add	r3, r2
 80088da:	7bfa      	ldrb	r2, [r7, #15]
 80088dc:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 80088de:	697b      	ldr	r3, [r7, #20]
 80088e0:	2b0a      	cmp	r3, #10
 80088e2:	d9da      	bls.n	800889a <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 80088e4:	683a      	ldr	r2, [r7, #0]
 80088e6:	693b      	ldr	r3, [r7, #16]
 80088e8:	4413      	add	r3, r2
 80088ea:	3309      	adds	r3, #9
 80088ec:	2200      	movs	r2, #0
 80088ee:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	6a1b      	ldr	r3, [r3, #32]
 80088f4:	7ada      	ldrb	r2, [r3, #11]
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6a1b      	ldr	r3, [r3, #32]
 80088fe:	331c      	adds	r3, #28
 8008900:	4618      	mov	r0, r3
 8008902:	f7fe fed5 	bl	80076b0 <ld_dword>
 8008906:	4602      	mov	r2, r0
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	6a1b      	ldr	r3, [r3, #32]
 8008910:	3316      	adds	r3, #22
 8008912:	4618      	mov	r0, r3
 8008914:	f7fe fecc 	bl	80076b0 <ld_dword>
 8008918:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800891a:	68bb      	ldr	r3, [r7, #8]
 800891c:	b29a      	uxth	r2, r3
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	80da      	strh	r2, [r3, #6]
 8008922:	68bb      	ldr	r3, [r7, #8]
 8008924:	0c1b      	lsrs	r3, r3, #16
 8008926:	b29a      	uxth	r2, r3
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	809a      	strh	r2, [r3, #4]
 800892c:	e000      	b.n	8008930 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800892e:	bf00      	nop
}
 8008930:	3718      	adds	r7, #24
 8008932:	46bd      	mov	sp, r7
 8008934:	bd80      	pop	{r7, pc}
	...

08008938 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b088      	sub	sp, #32
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
 8008940:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	60fb      	str	r3, [r7, #12]
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	3324      	adds	r3, #36	; 0x24
 800894c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800894e:	220b      	movs	r2, #11
 8008950:	2120      	movs	r1, #32
 8008952:	68b8      	ldr	r0, [r7, #8]
 8008954:	f7fe ff37 	bl	80077c6 <mem_set>
	si = i = 0; ni = 8;
 8008958:	2300      	movs	r3, #0
 800895a:	613b      	str	r3, [r7, #16]
 800895c:	693b      	ldr	r3, [r7, #16]
 800895e:	61fb      	str	r3, [r7, #28]
 8008960:	2308      	movs	r3, #8
 8008962:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8008964:	69fb      	ldr	r3, [r7, #28]
 8008966:	1c5a      	adds	r2, r3, #1
 8008968:	61fa      	str	r2, [r7, #28]
 800896a:	68fa      	ldr	r2, [r7, #12]
 800896c:	4413      	add	r3, r2
 800896e:	781b      	ldrb	r3, [r3, #0]
 8008970:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8008972:	7efb      	ldrb	r3, [r7, #27]
 8008974:	2b20      	cmp	r3, #32
 8008976:	d94e      	bls.n	8008a16 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8008978:	7efb      	ldrb	r3, [r7, #27]
 800897a:	2b2f      	cmp	r3, #47	; 0x2f
 800897c:	d006      	beq.n	800898c <create_name+0x54>
 800897e:	7efb      	ldrb	r3, [r7, #27]
 8008980:	2b5c      	cmp	r3, #92	; 0x5c
 8008982:	d110      	bne.n	80089a6 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8008984:	e002      	b.n	800898c <create_name+0x54>
 8008986:	69fb      	ldr	r3, [r7, #28]
 8008988:	3301      	adds	r3, #1
 800898a:	61fb      	str	r3, [r7, #28]
 800898c:	68fa      	ldr	r2, [r7, #12]
 800898e:	69fb      	ldr	r3, [r7, #28]
 8008990:	4413      	add	r3, r2
 8008992:	781b      	ldrb	r3, [r3, #0]
 8008994:	2b2f      	cmp	r3, #47	; 0x2f
 8008996:	d0f6      	beq.n	8008986 <create_name+0x4e>
 8008998:	68fa      	ldr	r2, [r7, #12]
 800899a:	69fb      	ldr	r3, [r7, #28]
 800899c:	4413      	add	r3, r2
 800899e:	781b      	ldrb	r3, [r3, #0]
 80089a0:	2b5c      	cmp	r3, #92	; 0x5c
 80089a2:	d0f0      	beq.n	8008986 <create_name+0x4e>
			break;
 80089a4:	e038      	b.n	8008a18 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80089a6:	7efb      	ldrb	r3, [r7, #27]
 80089a8:	2b2e      	cmp	r3, #46	; 0x2e
 80089aa:	d003      	beq.n	80089b4 <create_name+0x7c>
 80089ac:	693a      	ldr	r2, [r7, #16]
 80089ae:	697b      	ldr	r3, [r7, #20]
 80089b0:	429a      	cmp	r2, r3
 80089b2:	d30c      	bcc.n	80089ce <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80089b4:	697b      	ldr	r3, [r7, #20]
 80089b6:	2b0b      	cmp	r3, #11
 80089b8:	d002      	beq.n	80089c0 <create_name+0x88>
 80089ba:	7efb      	ldrb	r3, [r7, #27]
 80089bc:	2b2e      	cmp	r3, #46	; 0x2e
 80089be:	d001      	beq.n	80089c4 <create_name+0x8c>
 80089c0:	2306      	movs	r3, #6
 80089c2:	e044      	b.n	8008a4e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80089c4:	2308      	movs	r3, #8
 80089c6:	613b      	str	r3, [r7, #16]
 80089c8:	230b      	movs	r3, #11
 80089ca:	617b      	str	r3, [r7, #20]
			continue;
 80089cc:	e022      	b.n	8008a14 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80089ce:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	da04      	bge.n	80089e0 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80089d6:	7efb      	ldrb	r3, [r7, #27]
 80089d8:	3b80      	subs	r3, #128	; 0x80
 80089da:	4a1f      	ldr	r2, [pc, #124]	; (8008a58 <create_name+0x120>)
 80089dc:	5cd3      	ldrb	r3, [r2, r3]
 80089de:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80089e0:	7efb      	ldrb	r3, [r7, #27]
 80089e2:	4619      	mov	r1, r3
 80089e4:	481d      	ldr	r0, [pc, #116]	; (8008a5c <create_name+0x124>)
 80089e6:	f7fe ff30 	bl	800784a <chk_chr>
 80089ea:	4603      	mov	r3, r0
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d001      	beq.n	80089f4 <create_name+0xbc>
 80089f0:	2306      	movs	r3, #6
 80089f2:	e02c      	b.n	8008a4e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80089f4:	7efb      	ldrb	r3, [r7, #27]
 80089f6:	2b60      	cmp	r3, #96	; 0x60
 80089f8:	d905      	bls.n	8008a06 <create_name+0xce>
 80089fa:	7efb      	ldrb	r3, [r7, #27]
 80089fc:	2b7a      	cmp	r3, #122	; 0x7a
 80089fe:	d802      	bhi.n	8008a06 <create_name+0xce>
 8008a00:	7efb      	ldrb	r3, [r7, #27]
 8008a02:	3b20      	subs	r3, #32
 8008a04:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8008a06:	693b      	ldr	r3, [r7, #16]
 8008a08:	1c5a      	adds	r2, r3, #1
 8008a0a:	613a      	str	r2, [r7, #16]
 8008a0c:	68ba      	ldr	r2, [r7, #8]
 8008a0e:	4413      	add	r3, r2
 8008a10:	7efa      	ldrb	r2, [r7, #27]
 8008a12:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8008a14:	e7a6      	b.n	8008964 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8008a16:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8008a18:	68fa      	ldr	r2, [r7, #12]
 8008a1a:	69fb      	ldr	r3, [r7, #28]
 8008a1c:	441a      	add	r2, r3
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8008a22:	693b      	ldr	r3, [r7, #16]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d101      	bne.n	8008a2c <create_name+0xf4>
 8008a28:	2306      	movs	r3, #6
 8008a2a:	e010      	b.n	8008a4e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	781b      	ldrb	r3, [r3, #0]
 8008a30:	2be5      	cmp	r3, #229	; 0xe5
 8008a32:	d102      	bne.n	8008a3a <create_name+0x102>
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	2205      	movs	r2, #5
 8008a38:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8008a3a:	7efb      	ldrb	r3, [r7, #27]
 8008a3c:	2b20      	cmp	r3, #32
 8008a3e:	d801      	bhi.n	8008a44 <create_name+0x10c>
 8008a40:	2204      	movs	r2, #4
 8008a42:	e000      	b.n	8008a46 <create_name+0x10e>
 8008a44:	2200      	movs	r2, #0
 8008a46:	68bb      	ldr	r3, [r7, #8]
 8008a48:	330b      	adds	r3, #11
 8008a4a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8008a4c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3720      	adds	r7, #32
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}
 8008a56:	bf00      	nop
 8008a58:	0800ae08 	.word	0x0800ae08
 8008a5c:	0800ad70 	.word	0x0800ad70

08008a60 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b086      	sub	sp, #24
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
 8008a68:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8008a6e:	693b      	ldr	r3, [r7, #16]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8008a74:	e002      	b.n	8008a7c <follow_path+0x1c>
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	3301      	adds	r3, #1
 8008a7a:	603b      	str	r3, [r7, #0]
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	781b      	ldrb	r3, [r3, #0]
 8008a80:	2b2f      	cmp	r3, #47	; 0x2f
 8008a82:	d0f8      	beq.n	8008a76 <follow_path+0x16>
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	781b      	ldrb	r3, [r3, #0]
 8008a88:	2b5c      	cmp	r3, #92	; 0x5c
 8008a8a:	d0f4      	beq.n	8008a76 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8008a8c:	693b      	ldr	r3, [r7, #16]
 8008a8e:	2200      	movs	r2, #0
 8008a90:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	781b      	ldrb	r3, [r3, #0]
 8008a96:	2b1f      	cmp	r3, #31
 8008a98:	d80a      	bhi.n	8008ab0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2280      	movs	r2, #128	; 0x80
 8008a9e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8008aa2:	2100      	movs	r1, #0
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f7ff fc7b 	bl	80083a0 <dir_sdi>
 8008aaa:	4603      	mov	r3, r0
 8008aac:	75fb      	strb	r3, [r7, #23]
 8008aae:	e048      	b.n	8008b42 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008ab0:	463b      	mov	r3, r7
 8008ab2:	4619      	mov	r1, r3
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	f7ff ff3f 	bl	8008938 <create_name>
 8008aba:	4603      	mov	r3, r0
 8008abc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008abe:	7dfb      	ldrb	r3, [r7, #23]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d139      	bne.n	8008b38 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f7ff fe50 	bl	800876a <dir_find>
 8008aca:	4603      	mov	r3, r0
 8008acc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008ad4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8008ad6:	7dfb      	ldrb	r3, [r7, #23]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d00a      	beq.n	8008af2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008adc:	7dfb      	ldrb	r3, [r7, #23]
 8008ade:	2b04      	cmp	r3, #4
 8008ae0:	d12c      	bne.n	8008b3c <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8008ae2:	7afb      	ldrb	r3, [r7, #11]
 8008ae4:	f003 0304 	and.w	r3, r3, #4
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d127      	bne.n	8008b3c <follow_path+0xdc>
 8008aec:	2305      	movs	r3, #5
 8008aee:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8008af0:	e024      	b.n	8008b3c <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008af2:	7afb      	ldrb	r3, [r7, #11]
 8008af4:	f003 0304 	and.w	r3, r3, #4
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d121      	bne.n	8008b40 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008afc:	693b      	ldr	r3, [r7, #16]
 8008afe:	799b      	ldrb	r3, [r3, #6]
 8008b00:	f003 0310 	and.w	r3, r3, #16
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d102      	bne.n	8008b0e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8008b08:	2305      	movs	r3, #5
 8008b0a:	75fb      	strb	r3, [r7, #23]
 8008b0c:	e019      	b.n	8008b42 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	695b      	ldr	r3, [r3, #20]
 8008b18:	68fa      	ldr	r2, [r7, #12]
 8008b1a:	8992      	ldrh	r2, [r2, #12]
 8008b1c:	fbb3 f0f2 	udiv	r0, r3, r2
 8008b20:	fb00 f202 	mul.w	r2, r0, r2
 8008b24:	1a9b      	subs	r3, r3, r2
 8008b26:	440b      	add	r3, r1
 8008b28:	4619      	mov	r1, r3
 8008b2a:	68f8      	ldr	r0, [r7, #12]
 8008b2c:	f7ff fdde 	bl	80086ec <ld_clust>
 8008b30:	4602      	mov	r2, r0
 8008b32:	693b      	ldr	r3, [r7, #16]
 8008b34:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008b36:	e7bb      	b.n	8008ab0 <follow_path+0x50>
			if (res != FR_OK) break;
 8008b38:	bf00      	nop
 8008b3a:	e002      	b.n	8008b42 <follow_path+0xe2>
				break;
 8008b3c:	bf00      	nop
 8008b3e:	e000      	b.n	8008b42 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008b40:	bf00      	nop
			}
		}
	}

	return res;
 8008b42:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b44:	4618      	mov	r0, r3
 8008b46:	3718      	adds	r7, #24
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bd80      	pop	{r7, pc}

08008b4c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	b087      	sub	sp, #28
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8008b54:	f04f 33ff 	mov.w	r3, #4294967295
 8008b58:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d031      	beq.n	8008bc6 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	617b      	str	r3, [r7, #20]
 8008b68:	e002      	b.n	8008b70 <get_ldnumber+0x24>
 8008b6a:	697b      	ldr	r3, [r7, #20]
 8008b6c:	3301      	adds	r3, #1
 8008b6e:	617b      	str	r3, [r7, #20]
 8008b70:	697b      	ldr	r3, [r7, #20]
 8008b72:	781b      	ldrb	r3, [r3, #0]
 8008b74:	2b20      	cmp	r3, #32
 8008b76:	d903      	bls.n	8008b80 <get_ldnumber+0x34>
 8008b78:	697b      	ldr	r3, [r7, #20]
 8008b7a:	781b      	ldrb	r3, [r3, #0]
 8008b7c:	2b3a      	cmp	r3, #58	; 0x3a
 8008b7e:	d1f4      	bne.n	8008b6a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8008b80:	697b      	ldr	r3, [r7, #20]
 8008b82:	781b      	ldrb	r3, [r3, #0]
 8008b84:	2b3a      	cmp	r3, #58	; 0x3a
 8008b86:	d11c      	bne.n	8008bc2 <get_ldnumber+0x76>
			tp = *path;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	1c5a      	adds	r2, r3, #1
 8008b92:	60fa      	str	r2, [r7, #12]
 8008b94:	781b      	ldrb	r3, [r3, #0]
 8008b96:	3b30      	subs	r3, #48	; 0x30
 8008b98:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008b9a:	68bb      	ldr	r3, [r7, #8]
 8008b9c:	2b09      	cmp	r3, #9
 8008b9e:	d80e      	bhi.n	8008bbe <get_ldnumber+0x72>
 8008ba0:	68fa      	ldr	r2, [r7, #12]
 8008ba2:	697b      	ldr	r3, [r7, #20]
 8008ba4:	429a      	cmp	r2, r3
 8008ba6:	d10a      	bne.n	8008bbe <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008ba8:	68bb      	ldr	r3, [r7, #8]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d107      	bne.n	8008bbe <get_ldnumber+0x72>
					vol = (int)i;
 8008bae:	68bb      	ldr	r3, [r7, #8]
 8008bb0:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8008bb2:	697b      	ldr	r3, [r7, #20]
 8008bb4:	3301      	adds	r3, #1
 8008bb6:	617b      	str	r3, [r7, #20]
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	697a      	ldr	r2, [r7, #20]
 8008bbc:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8008bbe:	693b      	ldr	r3, [r7, #16]
 8008bc0:	e002      	b.n	8008bc8 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008bc6:	693b      	ldr	r3, [r7, #16]
}
 8008bc8:	4618      	mov	r0, r3
 8008bca:	371c      	adds	r7, #28
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd2:	4770      	bx	lr

08008bd4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b082      	sub	sp, #8
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
 8008bdc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2200      	movs	r2, #0
 8008be2:	70da      	strb	r2, [r3, #3]
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f04f 32ff 	mov.w	r2, #4294967295
 8008bea:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008bec:	6839      	ldr	r1, [r7, #0]
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	f7fe fff6 	bl	8007be0 <move_window>
 8008bf4:	4603      	mov	r3, r0
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d001      	beq.n	8008bfe <check_fs+0x2a>
 8008bfa:	2304      	movs	r3, #4
 8008bfc:	e038      	b.n	8008c70 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	3334      	adds	r3, #52	; 0x34
 8008c02:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008c06:	4618      	mov	r0, r3
 8008c08:	f7fe fd3a 	bl	8007680 <ld_word>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	461a      	mov	r2, r3
 8008c10:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008c14:	429a      	cmp	r2, r3
 8008c16:	d001      	beq.n	8008c1c <check_fs+0x48>
 8008c18:	2303      	movs	r3, #3
 8008c1a:	e029      	b.n	8008c70 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008c22:	2be9      	cmp	r3, #233	; 0xe9
 8008c24:	d009      	beq.n	8008c3a <check_fs+0x66>
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008c2c:	2beb      	cmp	r3, #235	; 0xeb
 8008c2e:	d11e      	bne.n	8008c6e <check_fs+0x9a>
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8008c36:	2b90      	cmp	r3, #144	; 0x90
 8008c38:	d119      	bne.n	8008c6e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	3334      	adds	r3, #52	; 0x34
 8008c3e:	3336      	adds	r3, #54	; 0x36
 8008c40:	4618      	mov	r0, r3
 8008c42:	f7fe fd35 	bl	80076b0 <ld_dword>
 8008c46:	4603      	mov	r3, r0
 8008c48:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008c4c:	4a0a      	ldr	r2, [pc, #40]	; (8008c78 <check_fs+0xa4>)
 8008c4e:	4293      	cmp	r3, r2
 8008c50:	d101      	bne.n	8008c56 <check_fs+0x82>
 8008c52:	2300      	movs	r3, #0
 8008c54:	e00c      	b.n	8008c70 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	3334      	adds	r3, #52	; 0x34
 8008c5a:	3352      	adds	r3, #82	; 0x52
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	f7fe fd27 	bl	80076b0 <ld_dword>
 8008c62:	4603      	mov	r3, r0
 8008c64:	4a05      	ldr	r2, [pc, #20]	; (8008c7c <check_fs+0xa8>)
 8008c66:	4293      	cmp	r3, r2
 8008c68:	d101      	bne.n	8008c6e <check_fs+0x9a>
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	e000      	b.n	8008c70 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8008c6e:	2302      	movs	r3, #2
}
 8008c70:	4618      	mov	r0, r3
 8008c72:	3708      	adds	r7, #8
 8008c74:	46bd      	mov	sp, r7
 8008c76:	bd80      	pop	{r7, pc}
 8008c78:	00544146 	.word	0x00544146
 8008c7c:	33544146 	.word	0x33544146

08008c80 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b096      	sub	sp, #88	; 0x58
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	60f8      	str	r0, [r7, #12]
 8008c88:	60b9      	str	r1, [r7, #8]
 8008c8a:	4613      	mov	r3, r2
 8008c8c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8008c8e:	68bb      	ldr	r3, [r7, #8]
 8008c90:	2200      	movs	r2, #0
 8008c92:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008c94:	68f8      	ldr	r0, [r7, #12]
 8008c96:	f7ff ff59 	bl	8008b4c <get_ldnumber>
 8008c9a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008c9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	da01      	bge.n	8008ca6 <find_volume+0x26>
 8008ca2:	230b      	movs	r3, #11
 8008ca4:	e262      	b.n	800916c <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008ca6:	4a9f      	ldr	r2, [pc, #636]	; (8008f24 <find_volume+0x2a4>)
 8008ca8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008caa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008cae:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d101      	bne.n	8008cba <find_volume+0x3a>
 8008cb6:	230c      	movs	r3, #12
 8008cb8:	e258      	b.n	800916c <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8008cba:	68bb      	ldr	r3, [r7, #8]
 8008cbc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008cbe:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008cc0:	79fb      	ldrb	r3, [r7, #7]
 8008cc2:	f023 0301 	bic.w	r3, r3, #1
 8008cc6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cca:	781b      	ldrb	r3, [r3, #0]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d01a      	beq.n	8008d06 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8008cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cd2:	785b      	ldrb	r3, [r3, #1]
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	f7fe fc33 	bl	8007540 <disk_status>
 8008cda:	4603      	mov	r3, r0
 8008cdc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008ce0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008ce4:	f003 0301 	and.w	r3, r3, #1
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d10c      	bne.n	8008d06 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008cec:	79fb      	ldrb	r3, [r7, #7]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d007      	beq.n	8008d02 <find_volume+0x82>
 8008cf2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008cf6:	f003 0304 	and.w	r3, r3, #4
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d001      	beq.n	8008d02 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8008cfe:	230a      	movs	r3, #10
 8008d00:	e234      	b.n	800916c <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 8008d02:	2300      	movs	r3, #0
 8008d04:	e232      	b.n	800916c <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d08:	2200      	movs	r2, #0
 8008d0a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008d0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d0e:	b2da      	uxtb	r2, r3
 8008d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d12:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d16:	785b      	ldrb	r3, [r3, #1]
 8008d18:	4618      	mov	r0, r3
 8008d1a:	f7fe fc2b 	bl	8007574 <disk_initialize>
 8008d1e:	4603      	mov	r3, r0
 8008d20:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008d24:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008d28:	f003 0301 	and.w	r3, r3, #1
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d001      	beq.n	8008d34 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008d30:	2303      	movs	r3, #3
 8008d32:	e21b      	b.n	800916c <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008d34:	79fb      	ldrb	r3, [r7, #7]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d007      	beq.n	8008d4a <find_volume+0xca>
 8008d3a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008d3e:	f003 0304 	and.w	r3, r3, #4
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d001      	beq.n	8008d4a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8008d46:	230a      	movs	r3, #10
 8008d48:	e210      	b.n	800916c <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8008d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d4c:	7858      	ldrb	r0, [r3, #1]
 8008d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d50:	330c      	adds	r3, #12
 8008d52:	461a      	mov	r2, r3
 8008d54:	2102      	movs	r1, #2
 8008d56:	f7fe fc75 	bl	8007644 <disk_ioctl>
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d001      	beq.n	8008d64 <find_volume+0xe4>
 8008d60:	2301      	movs	r3, #1
 8008d62:	e203      	b.n	800916c <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8008d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d66:	899b      	ldrh	r3, [r3, #12]
 8008d68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d6c:	d80d      	bhi.n	8008d8a <find_volume+0x10a>
 8008d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d70:	899b      	ldrh	r3, [r3, #12]
 8008d72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d76:	d308      	bcc.n	8008d8a <find_volume+0x10a>
 8008d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d7a:	899b      	ldrh	r3, [r3, #12]
 8008d7c:	461a      	mov	r2, r3
 8008d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d80:	899b      	ldrh	r3, [r3, #12]
 8008d82:	3b01      	subs	r3, #1
 8008d84:	4013      	ands	r3, r2
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d001      	beq.n	8008d8e <find_volume+0x10e>
 8008d8a:	2301      	movs	r3, #1
 8008d8c:	e1ee      	b.n	800916c <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8008d8e:	2300      	movs	r3, #0
 8008d90:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8008d92:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008d94:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008d96:	f7ff ff1d 	bl	8008bd4 <check_fs>
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8008da0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008da4:	2b02      	cmp	r3, #2
 8008da6:	d149      	bne.n	8008e3c <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008da8:	2300      	movs	r3, #0
 8008daa:	643b      	str	r3, [r7, #64]	; 0x40
 8008dac:	e01e      	b.n	8008dec <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8008dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008db0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008db4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008db6:	011b      	lsls	r3, r3, #4
 8008db8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8008dbc:	4413      	add	r3, r2
 8008dbe:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dc2:	3304      	adds	r3, #4
 8008dc4:	781b      	ldrb	r3, [r3, #0]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d006      	beq.n	8008dd8 <find_volume+0x158>
 8008dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dcc:	3308      	adds	r3, #8
 8008dce:	4618      	mov	r0, r3
 8008dd0:	f7fe fc6e 	bl	80076b0 <ld_dword>
 8008dd4:	4602      	mov	r2, r0
 8008dd6:	e000      	b.n	8008dda <find_volume+0x15a>
 8008dd8:	2200      	movs	r2, #0
 8008dda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ddc:	009b      	lsls	r3, r3, #2
 8008dde:	3358      	adds	r3, #88	; 0x58
 8008de0:	443b      	add	r3, r7
 8008de2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008de6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008de8:	3301      	adds	r3, #1
 8008dea:	643b      	str	r3, [r7, #64]	; 0x40
 8008dec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008dee:	2b03      	cmp	r3, #3
 8008df0:	d9dd      	bls.n	8008dae <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8008df2:	2300      	movs	r3, #0
 8008df4:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8008df6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d002      	beq.n	8008e02 <find_volume+0x182>
 8008dfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008dfe:	3b01      	subs	r3, #1
 8008e00:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8008e02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e04:	009b      	lsls	r3, r3, #2
 8008e06:	3358      	adds	r3, #88	; 0x58
 8008e08:	443b      	add	r3, r7
 8008e0a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008e0e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008e10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d005      	beq.n	8008e22 <find_volume+0x1a2>
 8008e16:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008e18:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008e1a:	f7ff fedb 	bl	8008bd4 <check_fs>
 8008e1e:	4603      	mov	r3, r0
 8008e20:	e000      	b.n	8008e24 <find_volume+0x1a4>
 8008e22:	2303      	movs	r3, #3
 8008e24:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008e28:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008e2c:	2b01      	cmp	r3, #1
 8008e2e:	d905      	bls.n	8008e3c <find_volume+0x1bc>
 8008e30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e32:	3301      	adds	r3, #1
 8008e34:	643b      	str	r3, [r7, #64]	; 0x40
 8008e36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e38:	2b03      	cmp	r3, #3
 8008e3a:	d9e2      	bls.n	8008e02 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008e3c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008e40:	2b04      	cmp	r3, #4
 8008e42:	d101      	bne.n	8008e48 <find_volume+0x1c8>
 8008e44:	2301      	movs	r3, #1
 8008e46:	e191      	b.n	800916c <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008e48:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008e4c:	2b01      	cmp	r3, #1
 8008e4e:	d901      	bls.n	8008e54 <find_volume+0x1d4>
 8008e50:	230d      	movs	r3, #13
 8008e52:	e18b      	b.n	800916c <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e56:	3334      	adds	r3, #52	; 0x34
 8008e58:	330b      	adds	r3, #11
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	f7fe fc10 	bl	8007680 <ld_word>
 8008e60:	4603      	mov	r3, r0
 8008e62:	461a      	mov	r2, r3
 8008e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e66:	899b      	ldrh	r3, [r3, #12]
 8008e68:	429a      	cmp	r2, r3
 8008e6a:	d001      	beq.n	8008e70 <find_volume+0x1f0>
 8008e6c:	230d      	movs	r3, #13
 8008e6e:	e17d      	b.n	800916c <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8008e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e72:	3334      	adds	r3, #52	; 0x34
 8008e74:	3316      	adds	r3, #22
 8008e76:	4618      	mov	r0, r3
 8008e78:	f7fe fc02 	bl	8007680 <ld_word>
 8008e7c:	4603      	mov	r3, r0
 8008e7e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008e80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d106      	bne.n	8008e94 <find_volume+0x214>
 8008e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e88:	3334      	adds	r3, #52	; 0x34
 8008e8a:	3324      	adds	r3, #36	; 0x24
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	f7fe fc0f 	bl	80076b0 <ld_dword>
 8008e92:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8008e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e96:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008e98:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8008e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e9c:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8008ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ea2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ea6:	789b      	ldrb	r3, [r3, #2]
 8008ea8:	2b01      	cmp	r3, #1
 8008eaa:	d005      	beq.n	8008eb8 <find_volume+0x238>
 8008eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eae:	789b      	ldrb	r3, [r3, #2]
 8008eb0:	2b02      	cmp	r3, #2
 8008eb2:	d001      	beq.n	8008eb8 <find_volume+0x238>
 8008eb4:	230d      	movs	r3, #13
 8008eb6:	e159      	b.n	800916c <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eba:	789b      	ldrb	r3, [r3, #2]
 8008ebc:	461a      	mov	r2, r3
 8008ebe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ec0:	fb02 f303 	mul.w	r3, r2, r3
 8008ec4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ec8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008ecc:	b29a      	uxth	r2, r3
 8008ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ed0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ed4:	895b      	ldrh	r3, [r3, #10]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d008      	beq.n	8008eec <find_volume+0x26c>
 8008eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008edc:	895b      	ldrh	r3, [r3, #10]
 8008ede:	461a      	mov	r2, r3
 8008ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ee2:	895b      	ldrh	r3, [r3, #10]
 8008ee4:	3b01      	subs	r3, #1
 8008ee6:	4013      	ands	r3, r2
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d001      	beq.n	8008ef0 <find_volume+0x270>
 8008eec:	230d      	movs	r3, #13
 8008eee:	e13d      	b.n	800916c <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ef2:	3334      	adds	r3, #52	; 0x34
 8008ef4:	3311      	adds	r3, #17
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	f7fe fbc2 	bl	8007680 <ld_word>
 8008efc:	4603      	mov	r3, r0
 8008efe:	461a      	mov	r2, r3
 8008f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f02:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f06:	891b      	ldrh	r3, [r3, #8]
 8008f08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008f0a:	8992      	ldrh	r2, [r2, #12]
 8008f0c:	0952      	lsrs	r2, r2, #5
 8008f0e:	b292      	uxth	r2, r2
 8008f10:	fbb3 f1f2 	udiv	r1, r3, r2
 8008f14:	fb01 f202 	mul.w	r2, r1, r2
 8008f18:	1a9b      	subs	r3, r3, r2
 8008f1a:	b29b      	uxth	r3, r3
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d003      	beq.n	8008f28 <find_volume+0x2a8>
 8008f20:	230d      	movs	r3, #13
 8008f22:	e123      	b.n	800916c <find_volume+0x4ec>
 8008f24:	200028d0 	.word	0x200028d0

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8008f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f2a:	3334      	adds	r3, #52	; 0x34
 8008f2c:	3313      	adds	r3, #19
 8008f2e:	4618      	mov	r0, r3
 8008f30:	f7fe fba6 	bl	8007680 <ld_word>
 8008f34:	4603      	mov	r3, r0
 8008f36:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8008f38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d106      	bne.n	8008f4c <find_volume+0x2cc>
 8008f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f40:	3334      	adds	r3, #52	; 0x34
 8008f42:	3320      	adds	r3, #32
 8008f44:	4618      	mov	r0, r3
 8008f46:	f7fe fbb3 	bl	80076b0 <ld_dword>
 8008f4a:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8008f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f4e:	3334      	adds	r3, #52	; 0x34
 8008f50:	330e      	adds	r3, #14
 8008f52:	4618      	mov	r0, r3
 8008f54:	f7fe fb94 	bl	8007680 <ld_word>
 8008f58:	4603      	mov	r3, r0
 8008f5a:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008f5c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d101      	bne.n	8008f66 <find_volume+0x2e6>
 8008f62:	230d      	movs	r3, #13
 8008f64:	e102      	b.n	800916c <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8008f66:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008f68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f6a:	4413      	add	r3, r2
 8008f6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008f6e:	8911      	ldrh	r1, [r2, #8]
 8008f70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008f72:	8992      	ldrh	r2, [r2, #12]
 8008f74:	0952      	lsrs	r2, r2, #5
 8008f76:	b292      	uxth	r2, r2
 8008f78:	fbb1 f2f2 	udiv	r2, r1, r2
 8008f7c:	b292      	uxth	r2, r2
 8008f7e:	4413      	add	r3, r2
 8008f80:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8008f82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f86:	429a      	cmp	r2, r3
 8008f88:	d201      	bcs.n	8008f8e <find_volume+0x30e>
 8008f8a:	230d      	movs	r3, #13
 8008f8c:	e0ee      	b.n	800916c <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8008f8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f92:	1ad3      	subs	r3, r2, r3
 8008f94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008f96:	8952      	ldrh	r2, [r2, #10]
 8008f98:	fbb3 f3f2 	udiv	r3, r3, r2
 8008f9c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d101      	bne.n	8008fa8 <find_volume+0x328>
 8008fa4:	230d      	movs	r3, #13
 8008fa6:	e0e1      	b.n	800916c <find_volume+0x4ec>
		fmt = FS_FAT32;
 8008fa8:	2303      	movs	r3, #3
 8008faa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fb0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8008fb4:	4293      	cmp	r3, r2
 8008fb6:	d802      	bhi.n	8008fbe <find_volume+0x33e>
 8008fb8:	2302      	movs	r3, #2
 8008fba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fc0:	f640 72f5 	movw	r2, #4085	; 0xff5
 8008fc4:	4293      	cmp	r3, r2
 8008fc6:	d802      	bhi.n	8008fce <find_volume+0x34e>
 8008fc8:	2301      	movs	r3, #1
 8008fca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fd0:	1c9a      	adds	r2, r3, #2
 8008fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fd4:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8008fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fd8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008fda:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008fdc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008fde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008fe0:	441a      	add	r2, r3
 8008fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fe4:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8008fe6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fea:	441a      	add	r2, r3
 8008fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fee:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8008ff0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008ff4:	2b03      	cmp	r3, #3
 8008ff6:	d11e      	bne.n	8009036 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ffa:	3334      	adds	r3, #52	; 0x34
 8008ffc:	332a      	adds	r3, #42	; 0x2a
 8008ffe:	4618      	mov	r0, r3
 8009000:	f7fe fb3e 	bl	8007680 <ld_word>
 8009004:	4603      	mov	r3, r0
 8009006:	2b00      	cmp	r3, #0
 8009008:	d001      	beq.n	800900e <find_volume+0x38e>
 800900a:	230d      	movs	r3, #13
 800900c:	e0ae      	b.n	800916c <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800900e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009010:	891b      	ldrh	r3, [r3, #8]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d001      	beq.n	800901a <find_volume+0x39a>
 8009016:	230d      	movs	r3, #13
 8009018:	e0a8      	b.n	800916c <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800901a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800901c:	3334      	adds	r3, #52	; 0x34
 800901e:	332c      	adds	r3, #44	; 0x2c
 8009020:	4618      	mov	r0, r3
 8009022:	f7fe fb45 	bl	80076b0 <ld_dword>
 8009026:	4602      	mov	r2, r0
 8009028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800902a:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800902c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800902e:	699b      	ldr	r3, [r3, #24]
 8009030:	009b      	lsls	r3, r3, #2
 8009032:	647b      	str	r3, [r7, #68]	; 0x44
 8009034:	e01f      	b.n	8009076 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8009036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009038:	891b      	ldrh	r3, [r3, #8]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d101      	bne.n	8009042 <find_volume+0x3c2>
 800903e:	230d      	movs	r3, #13
 8009040:	e094      	b.n	800916c <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8009042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009044:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009046:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009048:	441a      	add	r2, r3
 800904a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800904c:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800904e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009052:	2b02      	cmp	r3, #2
 8009054:	d103      	bne.n	800905e <find_volume+0x3de>
 8009056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009058:	699b      	ldr	r3, [r3, #24]
 800905a:	005b      	lsls	r3, r3, #1
 800905c:	e00a      	b.n	8009074 <find_volume+0x3f4>
 800905e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009060:	699a      	ldr	r2, [r3, #24]
 8009062:	4613      	mov	r3, r2
 8009064:	005b      	lsls	r3, r3, #1
 8009066:	4413      	add	r3, r2
 8009068:	085a      	lsrs	r2, r3, #1
 800906a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800906c:	699b      	ldr	r3, [r3, #24]
 800906e:	f003 0301 	and.w	r3, r3, #1
 8009072:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8009074:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8009076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009078:	69da      	ldr	r2, [r3, #28]
 800907a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800907c:	899b      	ldrh	r3, [r3, #12]
 800907e:	4619      	mov	r1, r3
 8009080:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009082:	440b      	add	r3, r1
 8009084:	3b01      	subs	r3, #1
 8009086:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009088:	8989      	ldrh	r1, [r1, #12]
 800908a:	fbb3 f3f1 	udiv	r3, r3, r1
 800908e:	429a      	cmp	r2, r3
 8009090:	d201      	bcs.n	8009096 <find_volume+0x416>
 8009092:	230d      	movs	r3, #13
 8009094:	e06a      	b.n	800916c <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8009096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009098:	f04f 32ff 	mov.w	r2, #4294967295
 800909c:	615a      	str	r2, [r3, #20]
 800909e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090a0:	695a      	ldr	r2, [r3, #20]
 80090a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090a4:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 80090a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090a8:	2280      	movs	r2, #128	; 0x80
 80090aa:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80090ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80090b0:	2b03      	cmp	r3, #3
 80090b2:	d149      	bne.n	8009148 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80090b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090b6:	3334      	adds	r3, #52	; 0x34
 80090b8:	3330      	adds	r3, #48	; 0x30
 80090ba:	4618      	mov	r0, r3
 80090bc:	f7fe fae0 	bl	8007680 <ld_word>
 80090c0:	4603      	mov	r3, r0
 80090c2:	2b01      	cmp	r3, #1
 80090c4:	d140      	bne.n	8009148 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 80090c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80090c8:	3301      	adds	r3, #1
 80090ca:	4619      	mov	r1, r3
 80090cc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80090ce:	f7fe fd87 	bl	8007be0 <move_window>
 80090d2:	4603      	mov	r3, r0
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d137      	bne.n	8009148 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 80090d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090da:	2200      	movs	r2, #0
 80090dc:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80090de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090e0:	3334      	adds	r3, #52	; 0x34
 80090e2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80090e6:	4618      	mov	r0, r3
 80090e8:	f7fe faca 	bl	8007680 <ld_word>
 80090ec:	4603      	mov	r3, r0
 80090ee:	461a      	mov	r2, r3
 80090f0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80090f4:	429a      	cmp	r2, r3
 80090f6:	d127      	bne.n	8009148 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80090f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090fa:	3334      	adds	r3, #52	; 0x34
 80090fc:	4618      	mov	r0, r3
 80090fe:	f7fe fad7 	bl	80076b0 <ld_dword>
 8009102:	4603      	mov	r3, r0
 8009104:	4a1b      	ldr	r2, [pc, #108]	; (8009174 <find_volume+0x4f4>)
 8009106:	4293      	cmp	r3, r2
 8009108:	d11e      	bne.n	8009148 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800910a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800910c:	3334      	adds	r3, #52	; 0x34
 800910e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009112:	4618      	mov	r0, r3
 8009114:	f7fe facc 	bl	80076b0 <ld_dword>
 8009118:	4603      	mov	r3, r0
 800911a:	4a17      	ldr	r2, [pc, #92]	; (8009178 <find_volume+0x4f8>)
 800911c:	4293      	cmp	r3, r2
 800911e:	d113      	bne.n	8009148 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8009120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009122:	3334      	adds	r3, #52	; 0x34
 8009124:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8009128:	4618      	mov	r0, r3
 800912a:	f7fe fac1 	bl	80076b0 <ld_dword>
 800912e:	4602      	mov	r2, r0
 8009130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009132:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8009134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009136:	3334      	adds	r3, #52	; 0x34
 8009138:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800913c:	4618      	mov	r0, r3
 800913e:	f7fe fab7 	bl	80076b0 <ld_dword>
 8009142:	4602      	mov	r2, r0
 8009144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009146:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8009148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800914a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800914e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8009150:	4b0a      	ldr	r3, [pc, #40]	; (800917c <find_volume+0x4fc>)
 8009152:	881b      	ldrh	r3, [r3, #0]
 8009154:	3301      	adds	r3, #1
 8009156:	b29a      	uxth	r2, r3
 8009158:	4b08      	ldr	r3, [pc, #32]	; (800917c <find_volume+0x4fc>)
 800915a:	801a      	strh	r2, [r3, #0]
 800915c:	4b07      	ldr	r3, [pc, #28]	; (800917c <find_volume+0x4fc>)
 800915e:	881a      	ldrh	r2, [r3, #0]
 8009160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009162:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8009164:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009166:	f7fe fcd3 	bl	8007b10 <clear_lock>
#endif
	return FR_OK;
 800916a:	2300      	movs	r3, #0
}
 800916c:	4618      	mov	r0, r3
 800916e:	3758      	adds	r7, #88	; 0x58
 8009170:	46bd      	mov	sp, r7
 8009172:	bd80      	pop	{r7, pc}
 8009174:	41615252 	.word	0x41615252
 8009178:	61417272 	.word	0x61417272
 800917c:	200028d4 	.word	0x200028d4

08009180 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b084      	sub	sp, #16
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
 8009188:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800918a:	2309      	movs	r3, #9
 800918c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d01c      	beq.n	80091ce <validate+0x4e>
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d018      	beq.n	80091ce <validate+0x4e>
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	781b      	ldrb	r3, [r3, #0]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d013      	beq.n	80091ce <validate+0x4e>
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	889a      	ldrh	r2, [r3, #4]
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	88db      	ldrh	r3, [r3, #6]
 80091b0:	429a      	cmp	r2, r3
 80091b2:	d10c      	bne.n	80091ce <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	785b      	ldrb	r3, [r3, #1]
 80091ba:	4618      	mov	r0, r3
 80091bc:	f7fe f9c0 	bl	8007540 <disk_status>
 80091c0:	4603      	mov	r3, r0
 80091c2:	f003 0301 	and.w	r3, r3, #1
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d101      	bne.n	80091ce <validate+0x4e>
			res = FR_OK;
 80091ca:	2300      	movs	r3, #0
 80091cc:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80091ce:	7bfb      	ldrb	r3, [r7, #15]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d102      	bne.n	80091da <validate+0x5a>
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	e000      	b.n	80091dc <validate+0x5c>
 80091da:	2300      	movs	r3, #0
 80091dc:	683a      	ldr	r2, [r7, #0]
 80091de:	6013      	str	r3, [r2, #0]
	return res;
 80091e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80091e2:	4618      	mov	r0, r3
 80091e4:	3710      	adds	r7, #16
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}
	...

080091ec <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b088      	sub	sp, #32
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	60f8      	str	r0, [r7, #12]
 80091f4:	60b9      	str	r1, [r7, #8]
 80091f6:	4613      	mov	r3, r2
 80091f8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80091fa:	68bb      	ldr	r3, [r7, #8]
 80091fc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80091fe:	f107 0310 	add.w	r3, r7, #16
 8009202:	4618      	mov	r0, r3
 8009204:	f7ff fca2 	bl	8008b4c <get_ldnumber>
 8009208:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800920a:	69fb      	ldr	r3, [r7, #28]
 800920c:	2b00      	cmp	r3, #0
 800920e:	da01      	bge.n	8009214 <f_mount+0x28>
 8009210:	230b      	movs	r3, #11
 8009212:	e02b      	b.n	800926c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009214:	4a17      	ldr	r2, [pc, #92]	; (8009274 <f_mount+0x88>)
 8009216:	69fb      	ldr	r3, [r7, #28]
 8009218:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800921c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800921e:	69bb      	ldr	r3, [r7, #24]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d005      	beq.n	8009230 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8009224:	69b8      	ldr	r0, [r7, #24]
 8009226:	f7fe fc73 	bl	8007b10 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800922a:	69bb      	ldr	r3, [r7, #24]
 800922c:	2200      	movs	r2, #0
 800922e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d002      	beq.n	800923c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	2200      	movs	r2, #0
 800923a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800923c:	68fa      	ldr	r2, [r7, #12]
 800923e:	490d      	ldr	r1, [pc, #52]	; (8009274 <f_mount+0x88>)
 8009240:	69fb      	ldr	r3, [r7, #28]
 8009242:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d002      	beq.n	8009252 <f_mount+0x66>
 800924c:	79fb      	ldrb	r3, [r7, #7]
 800924e:	2b01      	cmp	r3, #1
 8009250:	d001      	beq.n	8009256 <f_mount+0x6a>
 8009252:	2300      	movs	r3, #0
 8009254:	e00a      	b.n	800926c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8009256:	f107 010c 	add.w	r1, r7, #12
 800925a:	f107 0308 	add.w	r3, r7, #8
 800925e:	2200      	movs	r2, #0
 8009260:	4618      	mov	r0, r3
 8009262:	f7ff fd0d 	bl	8008c80 <find_volume>
 8009266:	4603      	mov	r3, r0
 8009268:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800926a:	7dfb      	ldrb	r3, [r7, #23]
}
 800926c:	4618      	mov	r0, r3
 800926e:	3720      	adds	r7, #32
 8009270:	46bd      	mov	sp, r7
 8009272:	bd80      	pop	{r7, pc}
 8009274:	200028d0 	.word	0x200028d0

08009278 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b098      	sub	sp, #96	; 0x60
 800927c:	af00      	add	r7, sp, #0
 800927e:	60f8      	str	r0, [r7, #12]
 8009280:	60b9      	str	r1, [r7, #8]
 8009282:	4613      	mov	r3, r2
 8009284:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d101      	bne.n	8009290 <f_open+0x18>
 800928c:	2309      	movs	r3, #9
 800928e:	e1bb      	b.n	8009608 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8009290:	79fb      	ldrb	r3, [r7, #7]
 8009292:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009296:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8009298:	79fa      	ldrb	r2, [r7, #7]
 800929a:	f107 0110 	add.w	r1, r7, #16
 800929e:	f107 0308 	add.w	r3, r7, #8
 80092a2:	4618      	mov	r0, r3
 80092a4:	f7ff fcec 	bl	8008c80 <find_volume>
 80092a8:	4603      	mov	r3, r0
 80092aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80092ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	f040 819f 	bne.w	80095f6 <f_open+0x37e>
		dj.obj.fs = fs;
 80092b8:	693b      	ldr	r3, [r7, #16]
 80092ba:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80092bc:	68ba      	ldr	r2, [r7, #8]
 80092be:	f107 0314 	add.w	r3, r7, #20
 80092c2:	4611      	mov	r1, r2
 80092c4:	4618      	mov	r0, r3
 80092c6:	f7ff fbcb 	bl	8008a60 <follow_path>
 80092ca:	4603      	mov	r3, r0
 80092cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80092d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d11a      	bne.n	800930e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80092d8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80092dc:	b25b      	sxtb	r3, r3
 80092de:	2b00      	cmp	r3, #0
 80092e0:	da03      	bge.n	80092ea <f_open+0x72>
				res = FR_INVALID_NAME;
 80092e2:	2306      	movs	r3, #6
 80092e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80092e8:	e011      	b.n	800930e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80092ea:	79fb      	ldrb	r3, [r7, #7]
 80092ec:	f023 0301 	bic.w	r3, r3, #1
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	bf14      	ite	ne
 80092f4:	2301      	movne	r3, #1
 80092f6:	2300      	moveq	r3, #0
 80092f8:	b2db      	uxtb	r3, r3
 80092fa:	461a      	mov	r2, r3
 80092fc:	f107 0314 	add.w	r3, r7, #20
 8009300:	4611      	mov	r1, r2
 8009302:	4618      	mov	r0, r3
 8009304:	f7fe fabc 	bl	8007880 <chk_lock>
 8009308:	4603      	mov	r3, r0
 800930a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800930e:	79fb      	ldrb	r3, [r7, #7]
 8009310:	f003 031c 	and.w	r3, r3, #28
 8009314:	2b00      	cmp	r3, #0
 8009316:	d07f      	beq.n	8009418 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8009318:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800931c:	2b00      	cmp	r3, #0
 800931e:	d017      	beq.n	8009350 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009320:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009324:	2b04      	cmp	r3, #4
 8009326:	d10e      	bne.n	8009346 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009328:	f7fe fb06 	bl	8007938 <enq_lock>
 800932c:	4603      	mov	r3, r0
 800932e:	2b00      	cmp	r3, #0
 8009330:	d006      	beq.n	8009340 <f_open+0xc8>
 8009332:	f107 0314 	add.w	r3, r7, #20
 8009336:	4618      	mov	r0, r3
 8009338:	f7ff fa6c 	bl	8008814 <dir_register>
 800933c:	4603      	mov	r3, r0
 800933e:	e000      	b.n	8009342 <f_open+0xca>
 8009340:	2312      	movs	r3, #18
 8009342:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8009346:	79fb      	ldrb	r3, [r7, #7]
 8009348:	f043 0308 	orr.w	r3, r3, #8
 800934c:	71fb      	strb	r3, [r7, #7]
 800934e:	e010      	b.n	8009372 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009350:	7ebb      	ldrb	r3, [r7, #26]
 8009352:	f003 0311 	and.w	r3, r3, #17
 8009356:	2b00      	cmp	r3, #0
 8009358:	d003      	beq.n	8009362 <f_open+0xea>
					res = FR_DENIED;
 800935a:	2307      	movs	r3, #7
 800935c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009360:	e007      	b.n	8009372 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8009362:	79fb      	ldrb	r3, [r7, #7]
 8009364:	f003 0304 	and.w	r3, r3, #4
 8009368:	2b00      	cmp	r3, #0
 800936a:	d002      	beq.n	8009372 <f_open+0xfa>
 800936c:	2308      	movs	r3, #8
 800936e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8009372:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009376:	2b00      	cmp	r3, #0
 8009378:	d168      	bne.n	800944c <f_open+0x1d4>
 800937a:	79fb      	ldrb	r3, [r7, #7]
 800937c:	f003 0308 	and.w	r3, r3, #8
 8009380:	2b00      	cmp	r3, #0
 8009382:	d063      	beq.n	800944c <f_open+0x1d4>
				dw = GET_FATTIME();
 8009384:	f7fd fbd8 	bl	8006b38 <get_fattime>
 8009388:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800938a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800938c:	330e      	adds	r3, #14
 800938e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009390:	4618      	mov	r0, r3
 8009392:	f7fe f9cb 	bl	800772c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8009396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009398:	3316      	adds	r3, #22
 800939a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800939c:	4618      	mov	r0, r3
 800939e:	f7fe f9c5 	bl	800772c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80093a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093a4:	330b      	adds	r3, #11
 80093a6:	2220      	movs	r2, #32
 80093a8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80093aa:	693b      	ldr	r3, [r7, #16]
 80093ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80093ae:	4611      	mov	r1, r2
 80093b0:	4618      	mov	r0, r3
 80093b2:	f7ff f99b 	bl	80086ec <ld_clust>
 80093b6:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80093b8:	693b      	ldr	r3, [r7, #16]
 80093ba:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80093bc:	2200      	movs	r2, #0
 80093be:	4618      	mov	r0, r3
 80093c0:	f7ff f9b3 	bl	800872a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80093c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093c6:	331c      	adds	r3, #28
 80093c8:	2100      	movs	r1, #0
 80093ca:	4618      	mov	r0, r3
 80093cc:	f7fe f9ae 	bl	800772c <st_dword>
					fs->wflag = 1;
 80093d0:	693b      	ldr	r3, [r7, #16]
 80093d2:	2201      	movs	r2, #1
 80093d4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80093d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d037      	beq.n	800944c <f_open+0x1d4>
						dw = fs->winsect;
 80093dc:	693b      	ldr	r3, [r7, #16]
 80093de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093e0:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80093e2:	f107 0314 	add.w	r3, r7, #20
 80093e6:	2200      	movs	r2, #0
 80093e8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80093ea:	4618      	mov	r0, r3
 80093ec:	f7fe fea3 	bl	8008136 <remove_chain>
 80093f0:	4603      	mov	r3, r0
 80093f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80093f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d126      	bne.n	800944c <f_open+0x1d4>
							res = move_window(fs, dw);
 80093fe:	693b      	ldr	r3, [r7, #16]
 8009400:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009402:	4618      	mov	r0, r3
 8009404:	f7fe fbec 	bl	8007be0 <move_window>
 8009408:	4603      	mov	r3, r0
 800940a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800940e:	693b      	ldr	r3, [r7, #16]
 8009410:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009412:	3a01      	subs	r2, #1
 8009414:	611a      	str	r2, [r3, #16]
 8009416:	e019      	b.n	800944c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8009418:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800941c:	2b00      	cmp	r3, #0
 800941e:	d115      	bne.n	800944c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009420:	7ebb      	ldrb	r3, [r7, #26]
 8009422:	f003 0310 	and.w	r3, r3, #16
 8009426:	2b00      	cmp	r3, #0
 8009428:	d003      	beq.n	8009432 <f_open+0x1ba>
					res = FR_NO_FILE;
 800942a:	2304      	movs	r3, #4
 800942c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009430:	e00c      	b.n	800944c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8009432:	79fb      	ldrb	r3, [r7, #7]
 8009434:	f003 0302 	and.w	r3, r3, #2
 8009438:	2b00      	cmp	r3, #0
 800943a:	d007      	beq.n	800944c <f_open+0x1d4>
 800943c:	7ebb      	ldrb	r3, [r7, #26]
 800943e:	f003 0301 	and.w	r3, r3, #1
 8009442:	2b00      	cmp	r3, #0
 8009444:	d002      	beq.n	800944c <f_open+0x1d4>
						res = FR_DENIED;
 8009446:	2307      	movs	r3, #7
 8009448:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800944c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009450:	2b00      	cmp	r3, #0
 8009452:	d128      	bne.n	80094a6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009454:	79fb      	ldrb	r3, [r7, #7]
 8009456:	f003 0308 	and.w	r3, r3, #8
 800945a:	2b00      	cmp	r3, #0
 800945c:	d003      	beq.n	8009466 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800945e:	79fb      	ldrb	r3, [r7, #7]
 8009460:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009464:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009466:	693b      	ldr	r3, [r7, #16]
 8009468:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800946e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009474:	79fb      	ldrb	r3, [r7, #7]
 8009476:	f023 0301 	bic.w	r3, r3, #1
 800947a:	2b00      	cmp	r3, #0
 800947c:	bf14      	ite	ne
 800947e:	2301      	movne	r3, #1
 8009480:	2300      	moveq	r3, #0
 8009482:	b2db      	uxtb	r3, r3
 8009484:	461a      	mov	r2, r3
 8009486:	f107 0314 	add.w	r3, r7, #20
 800948a:	4611      	mov	r1, r2
 800948c:	4618      	mov	r0, r3
 800948e:	f7fe fa75 	bl	800797c <inc_lock>
 8009492:	4602      	mov	r2, r0
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	691b      	ldr	r3, [r3, #16]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d102      	bne.n	80094a6 <f_open+0x22e>
 80094a0:	2302      	movs	r3, #2
 80094a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80094a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	f040 80a3 	bne.w	80095f6 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80094b0:	693b      	ldr	r3, [r7, #16]
 80094b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80094b4:	4611      	mov	r1, r2
 80094b6:	4618      	mov	r0, r3
 80094b8:	f7ff f918 	bl	80086ec <ld_clust>
 80094bc:	4602      	mov	r2, r0
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80094c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094c4:	331c      	adds	r3, #28
 80094c6:	4618      	mov	r0, r3
 80094c8:	f7fe f8f2 	bl	80076b0 <ld_dword>
 80094cc:	4602      	mov	r2, r0
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	2200      	movs	r2, #0
 80094d6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80094d8:	693a      	ldr	r2, [r7, #16]
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80094de:	693b      	ldr	r3, [r7, #16]
 80094e0:	88da      	ldrh	r2, [r3, #6]
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	79fa      	ldrb	r2, [r7, #7]
 80094ea:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	2200      	movs	r2, #0
 80094f0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	2200      	movs	r2, #0
 80094f6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	2200      	movs	r2, #0
 80094fc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	3330      	adds	r3, #48	; 0x30
 8009502:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009506:	2100      	movs	r1, #0
 8009508:	4618      	mov	r0, r3
 800950a:	f7fe f95c 	bl	80077c6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800950e:	79fb      	ldrb	r3, [r7, #7]
 8009510:	f003 0320 	and.w	r3, r3, #32
 8009514:	2b00      	cmp	r3, #0
 8009516:	d06e      	beq.n	80095f6 <f_open+0x37e>
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	68db      	ldr	r3, [r3, #12]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d06a      	beq.n	80095f6 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	68da      	ldr	r2, [r3, #12]
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009528:	693b      	ldr	r3, [r7, #16]
 800952a:	895b      	ldrh	r3, [r3, #10]
 800952c:	461a      	mov	r2, r3
 800952e:	693b      	ldr	r3, [r7, #16]
 8009530:	899b      	ldrh	r3, [r3, #12]
 8009532:	fb02 f303 	mul.w	r3, r2, r3
 8009536:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	689b      	ldr	r3, [r3, #8]
 800953c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	68db      	ldr	r3, [r3, #12]
 8009542:	657b      	str	r3, [r7, #84]	; 0x54
 8009544:	e016      	b.n	8009574 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800954a:	4618      	mov	r0, r3
 800954c:	f7fe fc05 	bl	8007d5a <get_fat>
 8009550:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8009552:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009554:	2b01      	cmp	r3, #1
 8009556:	d802      	bhi.n	800955e <f_open+0x2e6>
 8009558:	2302      	movs	r3, #2
 800955a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800955e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009564:	d102      	bne.n	800956c <f_open+0x2f4>
 8009566:	2301      	movs	r3, #1
 8009568:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800956c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800956e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009570:	1ad3      	subs	r3, r2, r3
 8009572:	657b      	str	r3, [r7, #84]	; 0x54
 8009574:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009578:	2b00      	cmp	r3, #0
 800957a:	d103      	bne.n	8009584 <f_open+0x30c>
 800957c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800957e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009580:	429a      	cmp	r2, r3
 8009582:	d8e0      	bhi.n	8009546 <f_open+0x2ce>
				}
				fp->clust = clst;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009588:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800958a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800958e:	2b00      	cmp	r3, #0
 8009590:	d131      	bne.n	80095f6 <f_open+0x37e>
 8009592:	693b      	ldr	r3, [r7, #16]
 8009594:	899b      	ldrh	r3, [r3, #12]
 8009596:	461a      	mov	r2, r3
 8009598:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800959a:	fbb3 f1f2 	udiv	r1, r3, r2
 800959e:	fb01 f202 	mul.w	r2, r1, r2
 80095a2:	1a9b      	subs	r3, r3, r2
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d026      	beq.n	80095f6 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80095a8:	693b      	ldr	r3, [r7, #16]
 80095aa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80095ac:	4618      	mov	r0, r3
 80095ae:	f7fe fbb5 	bl	8007d1c <clust2sect>
 80095b2:	6478      	str	r0, [r7, #68]	; 0x44
 80095b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d103      	bne.n	80095c2 <f_open+0x34a>
						res = FR_INT_ERR;
 80095ba:	2302      	movs	r3, #2
 80095bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80095c0:	e019      	b.n	80095f6 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80095c2:	693b      	ldr	r3, [r7, #16]
 80095c4:	899b      	ldrh	r3, [r3, #12]
 80095c6:	461a      	mov	r2, r3
 80095c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80095ca:	fbb3 f2f2 	udiv	r2, r3, r2
 80095ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80095d0:	441a      	add	r2, r3
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80095d6:	693b      	ldr	r3, [r7, #16]
 80095d8:	7858      	ldrb	r0, [r3, #1]
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	6a1a      	ldr	r2, [r3, #32]
 80095e4:	2301      	movs	r3, #1
 80095e6:	f7fd ffed 	bl	80075c4 <disk_read>
 80095ea:	4603      	mov	r3, r0
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d002      	beq.n	80095f6 <f_open+0x37e>
 80095f0:	2301      	movs	r3, #1
 80095f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80095f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d002      	beq.n	8009604 <f_open+0x38c>
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	2200      	movs	r2, #0
 8009602:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009604:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8009608:	4618      	mov	r0, r3
 800960a:	3760      	adds	r7, #96	; 0x60
 800960c:	46bd      	mov	sp, r7
 800960e:	bd80      	pop	{r7, pc}

08009610 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b08e      	sub	sp, #56	; 0x38
 8009614:	af00      	add	r7, sp, #0
 8009616:	60f8      	str	r0, [r7, #12]
 8009618:	60b9      	str	r1, [r7, #8]
 800961a:	607a      	str	r2, [r7, #4]
 800961c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800961e:	68bb      	ldr	r3, [r7, #8]
 8009620:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	2200      	movs	r2, #0
 8009626:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	f107 0214 	add.w	r2, r7, #20
 800962e:	4611      	mov	r1, r2
 8009630:	4618      	mov	r0, r3
 8009632:	f7ff fda5 	bl	8009180 <validate>
 8009636:	4603      	mov	r3, r0
 8009638:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800963c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009640:	2b00      	cmp	r3, #0
 8009642:	d107      	bne.n	8009654 <f_read+0x44>
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	7d5b      	ldrb	r3, [r3, #21]
 8009648:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800964c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009650:	2b00      	cmp	r3, #0
 8009652:	d002      	beq.n	800965a <f_read+0x4a>
 8009654:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009658:	e135      	b.n	80098c6 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	7d1b      	ldrb	r3, [r3, #20]
 800965e:	f003 0301 	and.w	r3, r3, #1
 8009662:	2b00      	cmp	r3, #0
 8009664:	d101      	bne.n	800966a <f_read+0x5a>
 8009666:	2307      	movs	r3, #7
 8009668:	e12d      	b.n	80098c6 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	68da      	ldr	r2, [r3, #12]
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	699b      	ldr	r3, [r3, #24]
 8009672:	1ad3      	subs	r3, r2, r3
 8009674:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8009676:	687a      	ldr	r2, [r7, #4]
 8009678:	6a3b      	ldr	r3, [r7, #32]
 800967a:	429a      	cmp	r2, r3
 800967c:	f240 811e 	bls.w	80098bc <f_read+0x2ac>
 8009680:	6a3b      	ldr	r3, [r7, #32]
 8009682:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8009684:	e11a      	b.n	80098bc <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	699b      	ldr	r3, [r3, #24]
 800968a:	697a      	ldr	r2, [r7, #20]
 800968c:	8992      	ldrh	r2, [r2, #12]
 800968e:	fbb3 f1f2 	udiv	r1, r3, r2
 8009692:	fb01 f202 	mul.w	r2, r1, r2
 8009696:	1a9b      	subs	r3, r3, r2
 8009698:	2b00      	cmp	r3, #0
 800969a:	f040 80d5 	bne.w	8009848 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	699b      	ldr	r3, [r3, #24]
 80096a2:	697a      	ldr	r2, [r7, #20]
 80096a4:	8992      	ldrh	r2, [r2, #12]
 80096a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80096aa:	697a      	ldr	r2, [r7, #20]
 80096ac:	8952      	ldrh	r2, [r2, #10]
 80096ae:	3a01      	subs	r2, #1
 80096b0:	4013      	ands	r3, r2
 80096b2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80096b4:	69fb      	ldr	r3, [r7, #28]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d12f      	bne.n	800971a <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	699b      	ldr	r3, [r3, #24]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d103      	bne.n	80096ca <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	689b      	ldr	r3, [r3, #8]
 80096c6:	633b      	str	r3, [r7, #48]	; 0x30
 80096c8:	e013      	b.n	80096f2 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d007      	beq.n	80096e2 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	699b      	ldr	r3, [r3, #24]
 80096d6:	4619      	mov	r1, r3
 80096d8:	68f8      	ldr	r0, [r7, #12]
 80096da:	f7fe fe29 	bl	8008330 <clmt_clust>
 80096de:	6338      	str	r0, [r7, #48]	; 0x30
 80096e0:	e007      	b.n	80096f2 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80096e2:	68fa      	ldr	r2, [r7, #12]
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	69db      	ldr	r3, [r3, #28]
 80096e8:	4619      	mov	r1, r3
 80096ea:	4610      	mov	r0, r2
 80096ec:	f7fe fb35 	bl	8007d5a <get_fat>
 80096f0:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80096f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096f4:	2b01      	cmp	r3, #1
 80096f6:	d804      	bhi.n	8009702 <f_read+0xf2>
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	2202      	movs	r2, #2
 80096fc:	755a      	strb	r2, [r3, #21]
 80096fe:	2302      	movs	r3, #2
 8009700:	e0e1      	b.n	80098c6 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009704:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009708:	d104      	bne.n	8009714 <f_read+0x104>
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	2201      	movs	r2, #1
 800970e:	755a      	strb	r2, [r3, #21]
 8009710:	2301      	movs	r3, #1
 8009712:	e0d8      	b.n	80098c6 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009718:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800971a:	697a      	ldr	r2, [r7, #20]
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	69db      	ldr	r3, [r3, #28]
 8009720:	4619      	mov	r1, r3
 8009722:	4610      	mov	r0, r2
 8009724:	f7fe fafa 	bl	8007d1c <clust2sect>
 8009728:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800972a:	69bb      	ldr	r3, [r7, #24]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d104      	bne.n	800973a <f_read+0x12a>
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	2202      	movs	r2, #2
 8009734:	755a      	strb	r2, [r3, #21]
 8009736:	2302      	movs	r3, #2
 8009738:	e0c5      	b.n	80098c6 <f_read+0x2b6>
			sect += csect;
 800973a:	69ba      	ldr	r2, [r7, #24]
 800973c:	69fb      	ldr	r3, [r7, #28]
 800973e:	4413      	add	r3, r2
 8009740:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8009742:	697b      	ldr	r3, [r7, #20]
 8009744:	899b      	ldrh	r3, [r3, #12]
 8009746:	461a      	mov	r2, r3
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	fbb3 f3f2 	udiv	r3, r3, r2
 800974e:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8009750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009752:	2b00      	cmp	r3, #0
 8009754:	d041      	beq.n	80097da <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009756:	69fa      	ldr	r2, [r7, #28]
 8009758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800975a:	4413      	add	r3, r2
 800975c:	697a      	ldr	r2, [r7, #20]
 800975e:	8952      	ldrh	r2, [r2, #10]
 8009760:	4293      	cmp	r3, r2
 8009762:	d905      	bls.n	8009770 <f_read+0x160>
					cc = fs->csize - csect;
 8009764:	697b      	ldr	r3, [r7, #20]
 8009766:	895b      	ldrh	r3, [r3, #10]
 8009768:	461a      	mov	r2, r3
 800976a:	69fb      	ldr	r3, [r7, #28]
 800976c:	1ad3      	subs	r3, r2, r3
 800976e:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009770:	697b      	ldr	r3, [r7, #20]
 8009772:	7858      	ldrb	r0, [r3, #1]
 8009774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009776:	69ba      	ldr	r2, [r7, #24]
 8009778:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800977a:	f7fd ff23 	bl	80075c4 <disk_read>
 800977e:	4603      	mov	r3, r0
 8009780:	2b00      	cmp	r3, #0
 8009782:	d004      	beq.n	800978e <f_read+0x17e>
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	2201      	movs	r2, #1
 8009788:	755a      	strb	r2, [r3, #21]
 800978a:	2301      	movs	r3, #1
 800978c:	e09b      	b.n	80098c6 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	7d1b      	ldrb	r3, [r3, #20]
 8009792:	b25b      	sxtb	r3, r3
 8009794:	2b00      	cmp	r3, #0
 8009796:	da18      	bge.n	80097ca <f_read+0x1ba>
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	6a1a      	ldr	r2, [r3, #32]
 800979c:	69bb      	ldr	r3, [r7, #24]
 800979e:	1ad3      	subs	r3, r2, r3
 80097a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80097a2:	429a      	cmp	r2, r3
 80097a4:	d911      	bls.n	80097ca <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	6a1a      	ldr	r2, [r3, #32]
 80097aa:	69bb      	ldr	r3, [r7, #24]
 80097ac:	1ad3      	subs	r3, r2, r3
 80097ae:	697a      	ldr	r2, [r7, #20]
 80097b0:	8992      	ldrh	r2, [r2, #12]
 80097b2:	fb02 f303 	mul.w	r3, r2, r3
 80097b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097b8:	18d0      	adds	r0, r2, r3
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80097c0:	697b      	ldr	r3, [r7, #20]
 80097c2:	899b      	ldrh	r3, [r3, #12]
 80097c4:	461a      	mov	r2, r3
 80097c6:	f7fd ffdd 	bl	8007784 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80097ca:	697b      	ldr	r3, [r7, #20]
 80097cc:	899b      	ldrh	r3, [r3, #12]
 80097ce:	461a      	mov	r2, r3
 80097d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097d2:	fb02 f303 	mul.w	r3, r2, r3
 80097d6:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 80097d8:	e05c      	b.n	8009894 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	6a1b      	ldr	r3, [r3, #32]
 80097de:	69ba      	ldr	r2, [r7, #24]
 80097e0:	429a      	cmp	r2, r3
 80097e2:	d02e      	beq.n	8009842 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	7d1b      	ldrb	r3, [r3, #20]
 80097e8:	b25b      	sxtb	r3, r3
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	da18      	bge.n	8009820 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80097ee:	697b      	ldr	r3, [r7, #20]
 80097f0:	7858      	ldrb	r0, [r3, #1]
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	6a1a      	ldr	r2, [r3, #32]
 80097fc:	2301      	movs	r3, #1
 80097fe:	f7fd ff01 	bl	8007604 <disk_write>
 8009802:	4603      	mov	r3, r0
 8009804:	2b00      	cmp	r3, #0
 8009806:	d004      	beq.n	8009812 <f_read+0x202>
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	2201      	movs	r2, #1
 800980c:	755a      	strb	r2, [r3, #21]
 800980e:	2301      	movs	r3, #1
 8009810:	e059      	b.n	80098c6 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	7d1b      	ldrb	r3, [r3, #20]
 8009816:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800981a:	b2da      	uxtb	r2, r3
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8009820:	697b      	ldr	r3, [r7, #20]
 8009822:	7858      	ldrb	r0, [r3, #1]
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800982a:	2301      	movs	r3, #1
 800982c:	69ba      	ldr	r2, [r7, #24]
 800982e:	f7fd fec9 	bl	80075c4 <disk_read>
 8009832:	4603      	mov	r3, r0
 8009834:	2b00      	cmp	r3, #0
 8009836:	d004      	beq.n	8009842 <f_read+0x232>
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	2201      	movs	r2, #1
 800983c:	755a      	strb	r2, [r3, #21]
 800983e:	2301      	movs	r3, #1
 8009840:	e041      	b.n	80098c6 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	69ba      	ldr	r2, [r7, #24]
 8009846:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009848:	697b      	ldr	r3, [r7, #20]
 800984a:	899b      	ldrh	r3, [r3, #12]
 800984c:	4618      	mov	r0, r3
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	699b      	ldr	r3, [r3, #24]
 8009852:	697a      	ldr	r2, [r7, #20]
 8009854:	8992      	ldrh	r2, [r2, #12]
 8009856:	fbb3 f1f2 	udiv	r1, r3, r2
 800985a:	fb01 f202 	mul.w	r2, r1, r2
 800985e:	1a9b      	subs	r3, r3, r2
 8009860:	1ac3      	subs	r3, r0, r3
 8009862:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8009864:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	429a      	cmp	r2, r3
 800986a:	d901      	bls.n	8009870 <f_read+0x260>
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	699b      	ldr	r3, [r3, #24]
 800987a:	697a      	ldr	r2, [r7, #20]
 800987c:	8992      	ldrh	r2, [r2, #12]
 800987e:	fbb3 f0f2 	udiv	r0, r3, r2
 8009882:	fb00 f202 	mul.w	r2, r0, r2
 8009886:	1a9b      	subs	r3, r3, r2
 8009888:	440b      	add	r3, r1
 800988a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800988c:	4619      	mov	r1, r3
 800988e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009890:	f7fd ff78 	bl	8007784 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8009894:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009898:	4413      	add	r3, r2
 800989a:	627b      	str	r3, [r7, #36]	; 0x24
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	699a      	ldr	r2, [r3, #24]
 80098a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098a2:	441a      	add	r2, r3
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	619a      	str	r2, [r3, #24]
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	681a      	ldr	r2, [r3, #0]
 80098ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098ae:	441a      	add	r2, r3
 80098b0:	683b      	ldr	r3, [r7, #0]
 80098b2:	601a      	str	r2, [r3, #0]
 80098b4:	687a      	ldr	r2, [r7, #4]
 80098b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098b8:	1ad3      	subs	r3, r2, r3
 80098ba:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	f47f aee1 	bne.w	8009686 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80098c4:	2300      	movs	r3, #0
}
 80098c6:	4618      	mov	r0, r3
 80098c8:	3738      	adds	r7, #56	; 0x38
 80098ca:	46bd      	mov	sp, r7
 80098cc:	bd80      	pop	{r7, pc}

080098ce <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80098ce:	b580      	push	{r7, lr}
 80098d0:	b086      	sub	sp, #24
 80098d2:	af00      	add	r7, sp, #0
 80098d4:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	f107 0208 	add.w	r2, r7, #8
 80098dc:	4611      	mov	r1, r2
 80098de:	4618      	mov	r0, r3
 80098e0:	f7ff fc4e 	bl	8009180 <validate>
 80098e4:	4603      	mov	r3, r0
 80098e6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80098e8:	7dfb      	ldrb	r3, [r7, #23]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d168      	bne.n	80099c0 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	7d1b      	ldrb	r3, [r3, #20]
 80098f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d062      	beq.n	80099c0 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	7d1b      	ldrb	r3, [r3, #20]
 80098fe:	b25b      	sxtb	r3, r3
 8009900:	2b00      	cmp	r3, #0
 8009902:	da15      	bge.n	8009930 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009904:	68bb      	ldr	r3, [r7, #8]
 8009906:	7858      	ldrb	r0, [r3, #1]
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6a1a      	ldr	r2, [r3, #32]
 8009912:	2301      	movs	r3, #1
 8009914:	f7fd fe76 	bl	8007604 <disk_write>
 8009918:	4603      	mov	r3, r0
 800991a:	2b00      	cmp	r3, #0
 800991c:	d001      	beq.n	8009922 <f_sync+0x54>
 800991e:	2301      	movs	r3, #1
 8009920:	e04f      	b.n	80099c2 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	7d1b      	ldrb	r3, [r3, #20]
 8009926:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800992a:	b2da      	uxtb	r2, r3
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8009930:	f7fd f902 	bl	8006b38 <get_fattime>
 8009934:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8009936:	68ba      	ldr	r2, [r7, #8]
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800993c:	4619      	mov	r1, r3
 800993e:	4610      	mov	r0, r2
 8009940:	f7fe f94e 	bl	8007be0 <move_window>
 8009944:	4603      	mov	r3, r0
 8009946:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8009948:	7dfb      	ldrb	r3, [r7, #23]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d138      	bne.n	80099c0 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009952:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	330b      	adds	r3, #11
 8009958:	781a      	ldrb	r2, [r3, #0]
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	330b      	adds	r3, #11
 800995e:	f042 0220 	orr.w	r2, r2, #32
 8009962:	b2d2      	uxtb	r2, r2
 8009964:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	6818      	ldr	r0, [r3, #0]
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	689b      	ldr	r3, [r3, #8]
 800996e:	461a      	mov	r2, r3
 8009970:	68f9      	ldr	r1, [r7, #12]
 8009972:	f7fe feda 	bl	800872a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	f103 021c 	add.w	r2, r3, #28
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	68db      	ldr	r3, [r3, #12]
 8009980:	4619      	mov	r1, r3
 8009982:	4610      	mov	r0, r2
 8009984:	f7fd fed2 	bl	800772c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	3316      	adds	r3, #22
 800998c:	6939      	ldr	r1, [r7, #16]
 800998e:	4618      	mov	r0, r3
 8009990:	f7fd fecc 	bl	800772c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	3312      	adds	r3, #18
 8009998:	2100      	movs	r1, #0
 800999a:	4618      	mov	r0, r3
 800999c:	f7fd feab 	bl	80076f6 <st_word>
					fs->wflag = 1;
 80099a0:	68bb      	ldr	r3, [r7, #8]
 80099a2:	2201      	movs	r2, #1
 80099a4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80099a6:	68bb      	ldr	r3, [r7, #8]
 80099a8:	4618      	mov	r0, r3
 80099aa:	f7fe f947 	bl	8007c3c <sync_fs>
 80099ae:	4603      	mov	r3, r0
 80099b0:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	7d1b      	ldrb	r3, [r3, #20]
 80099b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80099ba:	b2da      	uxtb	r2, r3
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80099c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80099c2:	4618      	mov	r0, r3
 80099c4:	3718      	adds	r7, #24
 80099c6:	46bd      	mov	sp, r7
 80099c8:	bd80      	pop	{r7, pc}

080099ca <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80099ca:	b580      	push	{r7, lr}
 80099cc:	b084      	sub	sp, #16
 80099ce:	af00      	add	r7, sp, #0
 80099d0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80099d2:	6878      	ldr	r0, [r7, #4]
 80099d4:	f7ff ff7b 	bl	80098ce <f_sync>
 80099d8:	4603      	mov	r3, r0
 80099da:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80099dc:	7bfb      	ldrb	r3, [r7, #15]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d118      	bne.n	8009a14 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	f107 0208 	add.w	r2, r7, #8
 80099e8:	4611      	mov	r1, r2
 80099ea:	4618      	mov	r0, r3
 80099ec:	f7ff fbc8 	bl	8009180 <validate>
 80099f0:	4603      	mov	r3, r0
 80099f2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80099f4:	7bfb      	ldrb	r3, [r7, #15]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d10c      	bne.n	8009a14 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	691b      	ldr	r3, [r3, #16]
 80099fe:	4618      	mov	r0, r3
 8009a00:	f7fe f84a 	bl	8007a98 <dec_lock>
 8009a04:	4603      	mov	r3, r0
 8009a06:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8009a08:	7bfb      	ldrb	r3, [r7, #15]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d102      	bne.n	8009a14 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	2200      	movs	r2, #0
 8009a12:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8009a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a16:	4618      	mov	r0, r3
 8009a18:	3710      	adds	r7, #16
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bd80      	pop	{r7, pc}

08009a1e <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8009a1e:	b580      	push	{r7, lr}
 8009a20:	b090      	sub	sp, #64	; 0x40
 8009a22:	af00      	add	r7, sp, #0
 8009a24:	6078      	str	r0, [r7, #4]
 8009a26:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	f107 0208 	add.w	r2, r7, #8
 8009a2e:	4611      	mov	r1, r2
 8009a30:	4618      	mov	r0, r3
 8009a32:	f7ff fba5 	bl	8009180 <validate>
 8009a36:	4603      	mov	r3, r0
 8009a38:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8009a3c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d103      	bne.n	8009a4c <f_lseek+0x2e>
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	7d5b      	ldrb	r3, [r3, #21]
 8009a48:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8009a4c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d002      	beq.n	8009a5a <f_lseek+0x3c>
 8009a54:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009a58:	e201      	b.n	8009e5e <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	f000 80d9 	beq.w	8009c16 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a6a:	d15a      	bne.n	8009b22 <f_lseek+0x104>
			tbl = fp->cltbl;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a70:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8009a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a74:	1d1a      	adds	r2, r3, #4
 8009a76:	627a      	str	r2, [r7, #36]	; 0x24
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	617b      	str	r3, [r7, #20]
 8009a7c:	2302      	movs	r3, #2
 8009a7e:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	689b      	ldr	r3, [r3, #8]
 8009a84:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8009a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d03a      	beq.n	8009b02 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8009a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a8e:	613b      	str	r3, [r7, #16]
 8009a90:	2300      	movs	r3, #0
 8009a92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a96:	3302      	adds	r3, #2
 8009a98:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8009a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a9c:	60fb      	str	r3, [r7, #12]
 8009a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aa0:	3301      	adds	r3, #1
 8009aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	f7fe f956 	bl	8007d5a <get_fat>
 8009aae:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8009ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ab2:	2b01      	cmp	r3, #1
 8009ab4:	d804      	bhi.n	8009ac0 <f_lseek+0xa2>
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	2202      	movs	r2, #2
 8009aba:	755a      	strb	r2, [r3, #21]
 8009abc:	2302      	movs	r3, #2
 8009abe:	e1ce      	b.n	8009e5e <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ac6:	d104      	bne.n	8009ad2 <f_lseek+0xb4>
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2201      	movs	r2, #1
 8009acc:	755a      	strb	r2, [r3, #21]
 8009ace:	2301      	movs	r3, #1
 8009ad0:	e1c5      	b.n	8009e5e <f_lseek+0x440>
					} while (cl == pcl + 1);
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	3301      	adds	r3, #1
 8009ad6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ad8:	429a      	cmp	r2, r3
 8009ada:	d0de      	beq.n	8009a9a <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8009adc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009ade:	697b      	ldr	r3, [r7, #20]
 8009ae0:	429a      	cmp	r2, r3
 8009ae2:	d809      	bhi.n	8009af8 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8009ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ae6:	1d1a      	adds	r2, r3, #4
 8009ae8:	627a      	str	r2, [r7, #36]	; 0x24
 8009aea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009aec:	601a      	str	r2, [r3, #0]
 8009aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009af0:	1d1a      	adds	r2, r3, #4
 8009af2:	627a      	str	r2, [r7, #36]	; 0x24
 8009af4:	693a      	ldr	r2, [r7, #16]
 8009af6:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8009af8:	68bb      	ldr	r3, [r7, #8]
 8009afa:	699b      	ldr	r3, [r3, #24]
 8009afc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009afe:	429a      	cmp	r2, r3
 8009b00:	d3c4      	bcc.n	8009a8c <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b08:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8009b0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b0c:	697b      	ldr	r3, [r7, #20]
 8009b0e:	429a      	cmp	r2, r3
 8009b10:	d803      	bhi.n	8009b1a <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8009b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b14:	2200      	movs	r2, #0
 8009b16:	601a      	str	r2, [r3, #0]
 8009b18:	e19f      	b.n	8009e5a <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8009b1a:	2311      	movs	r3, #17
 8009b1c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8009b20:	e19b      	b.n	8009e5a <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	68db      	ldr	r3, [r3, #12]
 8009b26:	683a      	ldr	r2, [r7, #0]
 8009b28:	429a      	cmp	r2, r3
 8009b2a:	d902      	bls.n	8009b32 <f_lseek+0x114>
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	68db      	ldr	r3, [r3, #12]
 8009b30:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	683a      	ldr	r2, [r7, #0]
 8009b36:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	f000 818d 	beq.w	8009e5a <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	3b01      	subs	r3, #1
 8009b44:	4619      	mov	r1, r3
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	f7fe fbf2 	bl	8008330 <clmt_clust>
 8009b4c:	4602      	mov	r2, r0
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8009b52:	68ba      	ldr	r2, [r7, #8]
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	69db      	ldr	r3, [r3, #28]
 8009b58:	4619      	mov	r1, r3
 8009b5a:	4610      	mov	r0, r2
 8009b5c:	f7fe f8de 	bl	8007d1c <clust2sect>
 8009b60:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8009b62:	69bb      	ldr	r3, [r7, #24]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d104      	bne.n	8009b72 <f_lseek+0x154>
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2202      	movs	r2, #2
 8009b6c:	755a      	strb	r2, [r3, #21]
 8009b6e:	2302      	movs	r3, #2
 8009b70:	e175      	b.n	8009e5e <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	3b01      	subs	r3, #1
 8009b76:	68ba      	ldr	r2, [r7, #8]
 8009b78:	8992      	ldrh	r2, [r2, #12]
 8009b7a:	fbb3 f3f2 	udiv	r3, r3, r2
 8009b7e:	68ba      	ldr	r2, [r7, #8]
 8009b80:	8952      	ldrh	r2, [r2, #10]
 8009b82:	3a01      	subs	r2, #1
 8009b84:	4013      	ands	r3, r2
 8009b86:	69ba      	ldr	r2, [r7, #24]
 8009b88:	4413      	add	r3, r2
 8009b8a:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	699b      	ldr	r3, [r3, #24]
 8009b90:	68ba      	ldr	r2, [r7, #8]
 8009b92:	8992      	ldrh	r2, [r2, #12]
 8009b94:	fbb3 f1f2 	udiv	r1, r3, r2
 8009b98:	fb01 f202 	mul.w	r2, r1, r2
 8009b9c:	1a9b      	subs	r3, r3, r2
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	f000 815b 	beq.w	8009e5a <f_lseek+0x43c>
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	6a1b      	ldr	r3, [r3, #32]
 8009ba8:	69ba      	ldr	r2, [r7, #24]
 8009baa:	429a      	cmp	r2, r3
 8009bac:	f000 8155 	beq.w	8009e5a <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	7d1b      	ldrb	r3, [r3, #20]
 8009bb4:	b25b      	sxtb	r3, r3
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	da18      	bge.n	8009bec <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009bba:	68bb      	ldr	r3, [r7, #8]
 8009bbc:	7858      	ldrb	r0, [r3, #1]
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	6a1a      	ldr	r2, [r3, #32]
 8009bc8:	2301      	movs	r3, #1
 8009bca:	f7fd fd1b 	bl	8007604 <disk_write>
 8009bce:	4603      	mov	r3, r0
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d004      	beq.n	8009bde <f_lseek+0x1c0>
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2201      	movs	r2, #1
 8009bd8:	755a      	strb	r2, [r3, #21]
 8009bda:	2301      	movs	r3, #1
 8009bdc:	e13f      	b.n	8009e5e <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	7d1b      	ldrb	r3, [r3, #20]
 8009be2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009be6:	b2da      	uxtb	r2, r3
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8009bec:	68bb      	ldr	r3, [r7, #8]
 8009bee:	7858      	ldrb	r0, [r3, #1]
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009bf6:	2301      	movs	r3, #1
 8009bf8:	69ba      	ldr	r2, [r7, #24]
 8009bfa:	f7fd fce3 	bl	80075c4 <disk_read>
 8009bfe:	4603      	mov	r3, r0
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d004      	beq.n	8009c0e <f_lseek+0x1f0>
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2201      	movs	r2, #1
 8009c08:	755a      	strb	r2, [r3, #21]
 8009c0a:	2301      	movs	r3, #1
 8009c0c:	e127      	b.n	8009e5e <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	69ba      	ldr	r2, [r7, #24]
 8009c12:	621a      	str	r2, [r3, #32]
 8009c14:	e121      	b.n	8009e5a <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	68db      	ldr	r3, [r3, #12]
 8009c1a:	683a      	ldr	r2, [r7, #0]
 8009c1c:	429a      	cmp	r2, r3
 8009c1e:	d908      	bls.n	8009c32 <f_lseek+0x214>
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	7d1b      	ldrb	r3, [r3, #20]
 8009c24:	f003 0302 	and.w	r3, r3, #2
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d102      	bne.n	8009c32 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	68db      	ldr	r3, [r3, #12]
 8009c30:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	699b      	ldr	r3, [r3, #24]
 8009c36:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8009c38:	2300      	movs	r3, #0
 8009c3a:	637b      	str	r3, [r7, #52]	; 0x34
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009c40:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8009c42:	683b      	ldr	r3, [r7, #0]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	f000 80b5 	beq.w	8009db4 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8009c4a:	68bb      	ldr	r3, [r7, #8]
 8009c4c:	895b      	ldrh	r3, [r3, #10]
 8009c4e:	461a      	mov	r2, r3
 8009c50:	68bb      	ldr	r3, [r7, #8]
 8009c52:	899b      	ldrh	r3, [r3, #12]
 8009c54:	fb02 f303 	mul.w	r3, r2, r3
 8009c58:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8009c5a:	6a3b      	ldr	r3, [r7, #32]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d01b      	beq.n	8009c98 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8009c60:	683b      	ldr	r3, [r7, #0]
 8009c62:	1e5a      	subs	r2, r3, #1
 8009c64:	69fb      	ldr	r3, [r7, #28]
 8009c66:	fbb2 f2f3 	udiv	r2, r2, r3
 8009c6a:	6a3b      	ldr	r3, [r7, #32]
 8009c6c:	1e59      	subs	r1, r3, #1
 8009c6e:	69fb      	ldr	r3, [r7, #28]
 8009c70:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8009c74:	429a      	cmp	r2, r3
 8009c76:	d30f      	bcc.n	8009c98 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8009c78:	6a3b      	ldr	r3, [r7, #32]
 8009c7a:	1e5a      	subs	r2, r3, #1
 8009c7c:	69fb      	ldr	r3, [r7, #28]
 8009c7e:	425b      	negs	r3, r3
 8009c80:	401a      	ands	r2, r3
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	699b      	ldr	r3, [r3, #24]
 8009c8a:	683a      	ldr	r2, [r7, #0]
 8009c8c:	1ad3      	subs	r3, r2, r3
 8009c8e:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	69db      	ldr	r3, [r3, #28]
 8009c94:	63bb      	str	r3, [r7, #56]	; 0x38
 8009c96:	e022      	b.n	8009cde <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	689b      	ldr	r3, [r3, #8]
 8009c9c:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8009c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d119      	bne.n	8009cd8 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2100      	movs	r1, #0
 8009ca8:	4618      	mov	r0, r3
 8009caa:	f7fe faa9 	bl	8008200 <create_chain>
 8009cae:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cb2:	2b01      	cmp	r3, #1
 8009cb4:	d104      	bne.n	8009cc0 <f_lseek+0x2a2>
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	2202      	movs	r2, #2
 8009cba:	755a      	strb	r2, [r3, #21]
 8009cbc:	2302      	movs	r3, #2
 8009cbe:	e0ce      	b.n	8009e5e <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cc6:	d104      	bne.n	8009cd2 <f_lseek+0x2b4>
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	2201      	movs	r2, #1
 8009ccc:	755a      	strb	r2, [r3, #21]
 8009cce:	2301      	movs	r3, #1
 8009cd0:	e0c5      	b.n	8009e5e <f_lseek+0x440>
					fp->obj.sclust = clst;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009cd6:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009cdc:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8009cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d067      	beq.n	8009db4 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 8009ce4:	e03a      	b.n	8009d5c <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8009ce6:	683a      	ldr	r2, [r7, #0]
 8009ce8:	69fb      	ldr	r3, [r7, #28]
 8009cea:	1ad3      	subs	r3, r2, r3
 8009cec:	603b      	str	r3, [r7, #0]
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	699a      	ldr	r2, [r3, #24]
 8009cf2:	69fb      	ldr	r3, [r7, #28]
 8009cf4:	441a      	add	r2, r3
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	7d1b      	ldrb	r3, [r3, #20]
 8009cfe:	f003 0302 	and.w	r3, r3, #2
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d00b      	beq.n	8009d1e <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	f7fe fa78 	bl	8008200 <create_chain>
 8009d10:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8009d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d108      	bne.n	8009d2a <f_lseek+0x30c>
							ofs = 0; break;
 8009d18:	2300      	movs	r3, #0
 8009d1a:	603b      	str	r3, [r7, #0]
 8009d1c:	e022      	b.n	8009d64 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009d22:	4618      	mov	r0, r3
 8009d24:	f7fe f819 	bl	8007d5a <get_fat>
 8009d28:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d30:	d104      	bne.n	8009d3c <f_lseek+0x31e>
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	2201      	movs	r2, #1
 8009d36:	755a      	strb	r2, [r3, #21]
 8009d38:	2301      	movs	r3, #1
 8009d3a:	e090      	b.n	8009e5e <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8009d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d3e:	2b01      	cmp	r3, #1
 8009d40:	d904      	bls.n	8009d4c <f_lseek+0x32e>
 8009d42:	68bb      	ldr	r3, [r7, #8]
 8009d44:	699b      	ldr	r3, [r3, #24]
 8009d46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009d48:	429a      	cmp	r2, r3
 8009d4a:	d304      	bcc.n	8009d56 <f_lseek+0x338>
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2202      	movs	r2, #2
 8009d50:	755a      	strb	r2, [r3, #21]
 8009d52:	2302      	movs	r3, #2
 8009d54:	e083      	b.n	8009e5e <f_lseek+0x440>
					fp->clust = clst;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009d5a:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8009d5c:	683a      	ldr	r2, [r7, #0]
 8009d5e:	69fb      	ldr	r3, [r7, #28]
 8009d60:	429a      	cmp	r2, r3
 8009d62:	d8c0      	bhi.n	8009ce6 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	699a      	ldr	r2, [r3, #24]
 8009d68:	683b      	ldr	r3, [r7, #0]
 8009d6a:	441a      	add	r2, r3
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8009d70:	68bb      	ldr	r3, [r7, #8]
 8009d72:	899b      	ldrh	r3, [r3, #12]
 8009d74:	461a      	mov	r2, r3
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	fbb3 f1f2 	udiv	r1, r3, r2
 8009d7c:	fb01 f202 	mul.w	r2, r1, r2
 8009d80:	1a9b      	subs	r3, r3, r2
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d016      	beq.n	8009db4 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8009d86:	68bb      	ldr	r3, [r7, #8]
 8009d88:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	f7fd ffc6 	bl	8007d1c <clust2sect>
 8009d90:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8009d92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d104      	bne.n	8009da2 <f_lseek+0x384>
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2202      	movs	r2, #2
 8009d9c:	755a      	strb	r2, [r3, #21]
 8009d9e:	2302      	movs	r3, #2
 8009da0:	e05d      	b.n	8009e5e <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8009da2:	68bb      	ldr	r3, [r7, #8]
 8009da4:	899b      	ldrh	r3, [r3, #12]
 8009da6:	461a      	mov	r2, r3
 8009da8:	683b      	ldr	r3, [r7, #0]
 8009daa:	fbb3 f3f2 	udiv	r3, r3, r2
 8009dae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009db0:	4413      	add	r3, r2
 8009db2:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	699a      	ldr	r2, [r3, #24]
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	68db      	ldr	r3, [r3, #12]
 8009dbc:	429a      	cmp	r2, r3
 8009dbe:	d90a      	bls.n	8009dd6 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	699a      	ldr	r2, [r3, #24]
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	7d1b      	ldrb	r3, [r3, #20]
 8009dcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009dd0:	b2da      	uxtb	r2, r3
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	699b      	ldr	r3, [r3, #24]
 8009dda:	68ba      	ldr	r2, [r7, #8]
 8009ddc:	8992      	ldrh	r2, [r2, #12]
 8009dde:	fbb3 f1f2 	udiv	r1, r3, r2
 8009de2:	fb01 f202 	mul.w	r2, r1, r2
 8009de6:	1a9b      	subs	r3, r3, r2
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d036      	beq.n	8009e5a <f_lseek+0x43c>
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	6a1b      	ldr	r3, [r3, #32]
 8009df0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009df2:	429a      	cmp	r2, r3
 8009df4:	d031      	beq.n	8009e5a <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	7d1b      	ldrb	r3, [r3, #20]
 8009dfa:	b25b      	sxtb	r3, r3
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	da18      	bge.n	8009e32 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009e00:	68bb      	ldr	r3, [r7, #8]
 8009e02:	7858      	ldrb	r0, [r3, #1]
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	6a1a      	ldr	r2, [r3, #32]
 8009e0e:	2301      	movs	r3, #1
 8009e10:	f7fd fbf8 	bl	8007604 <disk_write>
 8009e14:	4603      	mov	r3, r0
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d004      	beq.n	8009e24 <f_lseek+0x406>
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	2201      	movs	r2, #1
 8009e1e:	755a      	strb	r2, [r3, #21]
 8009e20:	2301      	movs	r3, #1
 8009e22:	e01c      	b.n	8009e5e <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	7d1b      	ldrb	r3, [r3, #20]
 8009e28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e2c:	b2da      	uxtb	r2, r3
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8009e32:	68bb      	ldr	r3, [r7, #8]
 8009e34:	7858      	ldrb	r0, [r3, #1]
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009e3c:	2301      	movs	r3, #1
 8009e3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009e40:	f7fd fbc0 	bl	80075c4 <disk_read>
 8009e44:	4603      	mov	r3, r0
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d004      	beq.n	8009e54 <f_lseek+0x436>
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	2201      	movs	r2, #1
 8009e4e:	755a      	strb	r2, [r3, #21]
 8009e50:	2301      	movs	r3, #1
 8009e52:	e004      	b.n	8009e5e <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009e58:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8009e5a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8009e5e:	4618      	mov	r0, r3
 8009e60:	3740      	adds	r7, #64	; 0x40
 8009e62:	46bd      	mov	sp, r7
 8009e64:	bd80      	pop	{r7, pc}

08009e66 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8009e66:	b580      	push	{r7, lr}
 8009e68:	b090      	sub	sp, #64	; 0x40
 8009e6a:	af00      	add	r7, sp, #0
 8009e6c:	6078      	str	r0, [r7, #4]
 8009e6e:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 8009e70:	f107 010c 	add.w	r1, r7, #12
 8009e74:	1d3b      	adds	r3, r7, #4
 8009e76:	2200      	movs	r2, #0
 8009e78:	4618      	mov	r0, r3
 8009e7a:	f7fe ff01 	bl	8008c80 <find_volume>
 8009e7e:	4603      	mov	r3, r0
 8009e80:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8009e84:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d11f      	bne.n	8009ecc <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8009e8c:	687a      	ldr	r2, [r7, #4]
 8009e8e:	f107 030c 	add.w	r3, r7, #12
 8009e92:	4611      	mov	r1, r2
 8009e94:	4618      	mov	r0, r3
 8009e96:	f7fe fde3 	bl	8008a60 <follow_path>
 8009e9a:	4603      	mov	r3, r0
 8009e9c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 8009ea0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d111      	bne.n	8009ecc <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8009ea8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009eac:	b25b      	sxtb	r3, r3
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	da03      	bge.n	8009eba <f_stat+0x54>
				res = FR_INVALID_NAME;
 8009eb2:	2306      	movs	r3, #6
 8009eb4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8009eb8:	e008      	b.n	8009ecc <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 8009eba:	683b      	ldr	r3, [r7, #0]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d005      	beq.n	8009ecc <f_stat+0x66>
 8009ec0:	f107 030c 	add.w	r3, r7, #12
 8009ec4:	6839      	ldr	r1, [r7, #0]
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	f7fe fcd6 	bl	8008878 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 8009ecc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	3740      	adds	r7, #64	; 0x40
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	bd80      	pop	{r7, pc}

08009ed8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009ed8:	b480      	push	{r7}
 8009eda:	b087      	sub	sp, #28
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	60f8      	str	r0, [r7, #12]
 8009ee0:	60b9      	str	r1, [r7, #8]
 8009ee2:	4613      	mov	r3, r2
 8009ee4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009ee6:	2301      	movs	r3, #1
 8009ee8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009eea:	2300      	movs	r3, #0
 8009eec:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009eee:	4b1f      	ldr	r3, [pc, #124]	; (8009f6c <FATFS_LinkDriverEx+0x94>)
 8009ef0:	7a5b      	ldrb	r3, [r3, #9]
 8009ef2:	b2db      	uxtb	r3, r3
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d131      	bne.n	8009f5c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009ef8:	4b1c      	ldr	r3, [pc, #112]	; (8009f6c <FATFS_LinkDriverEx+0x94>)
 8009efa:	7a5b      	ldrb	r3, [r3, #9]
 8009efc:	b2db      	uxtb	r3, r3
 8009efe:	461a      	mov	r2, r3
 8009f00:	4b1a      	ldr	r3, [pc, #104]	; (8009f6c <FATFS_LinkDriverEx+0x94>)
 8009f02:	2100      	movs	r1, #0
 8009f04:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009f06:	4b19      	ldr	r3, [pc, #100]	; (8009f6c <FATFS_LinkDriverEx+0x94>)
 8009f08:	7a5b      	ldrb	r3, [r3, #9]
 8009f0a:	b2db      	uxtb	r3, r3
 8009f0c:	4a17      	ldr	r2, [pc, #92]	; (8009f6c <FATFS_LinkDriverEx+0x94>)
 8009f0e:	009b      	lsls	r3, r3, #2
 8009f10:	4413      	add	r3, r2
 8009f12:	68fa      	ldr	r2, [r7, #12]
 8009f14:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009f16:	4b15      	ldr	r3, [pc, #84]	; (8009f6c <FATFS_LinkDriverEx+0x94>)
 8009f18:	7a5b      	ldrb	r3, [r3, #9]
 8009f1a:	b2db      	uxtb	r3, r3
 8009f1c:	461a      	mov	r2, r3
 8009f1e:	4b13      	ldr	r3, [pc, #76]	; (8009f6c <FATFS_LinkDriverEx+0x94>)
 8009f20:	4413      	add	r3, r2
 8009f22:	79fa      	ldrb	r2, [r7, #7]
 8009f24:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009f26:	4b11      	ldr	r3, [pc, #68]	; (8009f6c <FATFS_LinkDriverEx+0x94>)
 8009f28:	7a5b      	ldrb	r3, [r3, #9]
 8009f2a:	b2db      	uxtb	r3, r3
 8009f2c:	1c5a      	adds	r2, r3, #1
 8009f2e:	b2d1      	uxtb	r1, r2
 8009f30:	4a0e      	ldr	r2, [pc, #56]	; (8009f6c <FATFS_LinkDriverEx+0x94>)
 8009f32:	7251      	strb	r1, [r2, #9]
 8009f34:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009f36:	7dbb      	ldrb	r3, [r7, #22]
 8009f38:	3330      	adds	r3, #48	; 0x30
 8009f3a:	b2da      	uxtb	r2, r3
 8009f3c:	68bb      	ldr	r3, [r7, #8]
 8009f3e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009f40:	68bb      	ldr	r3, [r7, #8]
 8009f42:	3301      	adds	r3, #1
 8009f44:	223a      	movs	r2, #58	; 0x3a
 8009f46:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009f48:	68bb      	ldr	r3, [r7, #8]
 8009f4a:	3302      	adds	r3, #2
 8009f4c:	222f      	movs	r2, #47	; 0x2f
 8009f4e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009f50:	68bb      	ldr	r3, [r7, #8]
 8009f52:	3303      	adds	r3, #3
 8009f54:	2200      	movs	r2, #0
 8009f56:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009f58:	2300      	movs	r3, #0
 8009f5a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009f5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f5e:	4618      	mov	r0, r3
 8009f60:	371c      	adds	r7, #28
 8009f62:	46bd      	mov	sp, r7
 8009f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f68:	4770      	bx	lr
 8009f6a:	bf00      	nop
 8009f6c:	200028f8 	.word	0x200028f8

08009f70 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b082      	sub	sp, #8
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
 8009f78:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	6839      	ldr	r1, [r7, #0]
 8009f7e:	6878      	ldr	r0, [r7, #4]
 8009f80:	f7ff ffaa 	bl	8009ed8 <FATFS_LinkDriverEx>
 8009f84:	4603      	mov	r3, r0
}
 8009f86:	4618      	mov	r0, r3
 8009f88:	3708      	adds	r7, #8
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	bd80      	pop	{r7, pc}
	...

08009f90 <sniprintf>:
 8009f90:	b40c      	push	{r2, r3}
 8009f92:	b530      	push	{r4, r5, lr}
 8009f94:	4b17      	ldr	r3, [pc, #92]	; (8009ff4 <sniprintf+0x64>)
 8009f96:	1e0c      	subs	r4, r1, #0
 8009f98:	681d      	ldr	r5, [r3, #0]
 8009f9a:	b09d      	sub	sp, #116	; 0x74
 8009f9c:	da08      	bge.n	8009fb0 <sniprintf+0x20>
 8009f9e:	238b      	movs	r3, #139	; 0x8b
 8009fa0:	602b      	str	r3, [r5, #0]
 8009fa2:	f04f 30ff 	mov.w	r0, #4294967295
 8009fa6:	b01d      	add	sp, #116	; 0x74
 8009fa8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009fac:	b002      	add	sp, #8
 8009fae:	4770      	bx	lr
 8009fb0:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009fb4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009fb8:	bf14      	ite	ne
 8009fba:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009fbe:	4623      	moveq	r3, r4
 8009fc0:	9304      	str	r3, [sp, #16]
 8009fc2:	9307      	str	r3, [sp, #28]
 8009fc4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009fc8:	9002      	str	r0, [sp, #8]
 8009fca:	9006      	str	r0, [sp, #24]
 8009fcc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009fd0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009fd2:	ab21      	add	r3, sp, #132	; 0x84
 8009fd4:	a902      	add	r1, sp, #8
 8009fd6:	4628      	mov	r0, r5
 8009fd8:	9301      	str	r3, [sp, #4]
 8009fda:	f000 f9f5 	bl	800a3c8 <_svfiprintf_r>
 8009fde:	1c43      	adds	r3, r0, #1
 8009fe0:	bfbc      	itt	lt
 8009fe2:	238b      	movlt	r3, #139	; 0x8b
 8009fe4:	602b      	strlt	r3, [r5, #0]
 8009fe6:	2c00      	cmp	r4, #0
 8009fe8:	d0dd      	beq.n	8009fa6 <sniprintf+0x16>
 8009fea:	9b02      	ldr	r3, [sp, #8]
 8009fec:	2200      	movs	r2, #0
 8009fee:	701a      	strb	r2, [r3, #0]
 8009ff0:	e7d9      	b.n	8009fa6 <sniprintf+0x16>
 8009ff2:	bf00      	nop
 8009ff4:	20000058 	.word	0x20000058

08009ff8 <siprintf>:
 8009ff8:	b40e      	push	{r1, r2, r3}
 8009ffa:	b500      	push	{lr}
 8009ffc:	b09c      	sub	sp, #112	; 0x70
 8009ffe:	ab1d      	add	r3, sp, #116	; 0x74
 800a000:	9002      	str	r0, [sp, #8]
 800a002:	9006      	str	r0, [sp, #24]
 800a004:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a008:	4809      	ldr	r0, [pc, #36]	; (800a030 <siprintf+0x38>)
 800a00a:	9107      	str	r1, [sp, #28]
 800a00c:	9104      	str	r1, [sp, #16]
 800a00e:	4909      	ldr	r1, [pc, #36]	; (800a034 <siprintf+0x3c>)
 800a010:	f853 2b04 	ldr.w	r2, [r3], #4
 800a014:	9105      	str	r1, [sp, #20]
 800a016:	6800      	ldr	r0, [r0, #0]
 800a018:	9301      	str	r3, [sp, #4]
 800a01a:	a902      	add	r1, sp, #8
 800a01c:	f000 f9d4 	bl	800a3c8 <_svfiprintf_r>
 800a020:	9b02      	ldr	r3, [sp, #8]
 800a022:	2200      	movs	r2, #0
 800a024:	701a      	strb	r2, [r3, #0]
 800a026:	b01c      	add	sp, #112	; 0x70
 800a028:	f85d eb04 	ldr.w	lr, [sp], #4
 800a02c:	b003      	add	sp, #12
 800a02e:	4770      	bx	lr
 800a030:	20000058 	.word	0x20000058
 800a034:	ffff0208 	.word	0xffff0208

0800a038 <_vsniprintf_r>:
 800a038:	b530      	push	{r4, r5, lr}
 800a03a:	4614      	mov	r4, r2
 800a03c:	2c00      	cmp	r4, #0
 800a03e:	b09b      	sub	sp, #108	; 0x6c
 800a040:	4605      	mov	r5, r0
 800a042:	461a      	mov	r2, r3
 800a044:	da05      	bge.n	800a052 <_vsniprintf_r+0x1a>
 800a046:	238b      	movs	r3, #139	; 0x8b
 800a048:	6003      	str	r3, [r0, #0]
 800a04a:	f04f 30ff 	mov.w	r0, #4294967295
 800a04e:	b01b      	add	sp, #108	; 0x6c
 800a050:	bd30      	pop	{r4, r5, pc}
 800a052:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a056:	f8ad 300c 	strh.w	r3, [sp, #12]
 800a05a:	bf14      	ite	ne
 800a05c:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a060:	4623      	moveq	r3, r4
 800a062:	9302      	str	r3, [sp, #8]
 800a064:	9305      	str	r3, [sp, #20]
 800a066:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a06a:	9100      	str	r1, [sp, #0]
 800a06c:	9104      	str	r1, [sp, #16]
 800a06e:	f8ad 300e 	strh.w	r3, [sp, #14]
 800a072:	4669      	mov	r1, sp
 800a074:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a076:	f000 f9a7 	bl	800a3c8 <_svfiprintf_r>
 800a07a:	1c43      	adds	r3, r0, #1
 800a07c:	bfbc      	itt	lt
 800a07e:	238b      	movlt	r3, #139	; 0x8b
 800a080:	602b      	strlt	r3, [r5, #0]
 800a082:	2c00      	cmp	r4, #0
 800a084:	d0e3      	beq.n	800a04e <_vsniprintf_r+0x16>
 800a086:	9b00      	ldr	r3, [sp, #0]
 800a088:	2200      	movs	r2, #0
 800a08a:	701a      	strb	r2, [r3, #0]
 800a08c:	e7df      	b.n	800a04e <_vsniprintf_r+0x16>
	...

0800a090 <vsniprintf>:
 800a090:	b507      	push	{r0, r1, r2, lr}
 800a092:	9300      	str	r3, [sp, #0]
 800a094:	4613      	mov	r3, r2
 800a096:	460a      	mov	r2, r1
 800a098:	4601      	mov	r1, r0
 800a09a:	4803      	ldr	r0, [pc, #12]	; (800a0a8 <vsniprintf+0x18>)
 800a09c:	6800      	ldr	r0, [r0, #0]
 800a09e:	f7ff ffcb 	bl	800a038 <_vsniprintf_r>
 800a0a2:	b003      	add	sp, #12
 800a0a4:	f85d fb04 	ldr.w	pc, [sp], #4
 800a0a8:	20000058 	.word	0x20000058

0800a0ac <memset>:
 800a0ac:	4402      	add	r2, r0
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	4293      	cmp	r3, r2
 800a0b2:	d100      	bne.n	800a0b6 <memset+0xa>
 800a0b4:	4770      	bx	lr
 800a0b6:	f803 1b01 	strb.w	r1, [r3], #1
 800a0ba:	e7f9      	b.n	800a0b0 <memset+0x4>

0800a0bc <__errno>:
 800a0bc:	4b01      	ldr	r3, [pc, #4]	; (800a0c4 <__errno+0x8>)
 800a0be:	6818      	ldr	r0, [r3, #0]
 800a0c0:	4770      	bx	lr
 800a0c2:	bf00      	nop
 800a0c4:	20000058 	.word	0x20000058

0800a0c8 <__libc_init_array>:
 800a0c8:	b570      	push	{r4, r5, r6, lr}
 800a0ca:	4d0d      	ldr	r5, [pc, #52]	; (800a100 <__libc_init_array+0x38>)
 800a0cc:	4c0d      	ldr	r4, [pc, #52]	; (800a104 <__libc_init_array+0x3c>)
 800a0ce:	1b64      	subs	r4, r4, r5
 800a0d0:	10a4      	asrs	r4, r4, #2
 800a0d2:	2600      	movs	r6, #0
 800a0d4:	42a6      	cmp	r6, r4
 800a0d6:	d109      	bne.n	800a0ec <__libc_init_array+0x24>
 800a0d8:	4d0b      	ldr	r5, [pc, #44]	; (800a108 <__libc_init_array+0x40>)
 800a0da:	4c0c      	ldr	r4, [pc, #48]	; (800a10c <__libc_init_array+0x44>)
 800a0dc:	f000 fc72 	bl	800a9c4 <_init>
 800a0e0:	1b64      	subs	r4, r4, r5
 800a0e2:	10a4      	asrs	r4, r4, #2
 800a0e4:	2600      	movs	r6, #0
 800a0e6:	42a6      	cmp	r6, r4
 800a0e8:	d105      	bne.n	800a0f6 <__libc_init_array+0x2e>
 800a0ea:	bd70      	pop	{r4, r5, r6, pc}
 800a0ec:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0f0:	4798      	blx	r3
 800a0f2:	3601      	adds	r6, #1
 800a0f4:	e7ee      	b.n	800a0d4 <__libc_init_array+0xc>
 800a0f6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0fa:	4798      	blx	r3
 800a0fc:	3601      	adds	r6, #1
 800a0fe:	e7f2      	b.n	800a0e6 <__libc_init_array+0x1e>
 800a100:	0800aec4 	.word	0x0800aec4
 800a104:	0800aec4 	.word	0x0800aec4
 800a108:	0800aec4 	.word	0x0800aec4
 800a10c:	0800aec8 	.word	0x0800aec8

0800a110 <__retarget_lock_acquire_recursive>:
 800a110:	4770      	bx	lr

0800a112 <__retarget_lock_release_recursive>:
 800a112:	4770      	bx	lr

0800a114 <strcpy>:
 800a114:	4603      	mov	r3, r0
 800a116:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a11a:	f803 2b01 	strb.w	r2, [r3], #1
 800a11e:	2a00      	cmp	r2, #0
 800a120:	d1f9      	bne.n	800a116 <strcpy+0x2>
 800a122:	4770      	bx	lr

0800a124 <_free_r>:
 800a124:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a126:	2900      	cmp	r1, #0
 800a128:	d044      	beq.n	800a1b4 <_free_r+0x90>
 800a12a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a12e:	9001      	str	r0, [sp, #4]
 800a130:	2b00      	cmp	r3, #0
 800a132:	f1a1 0404 	sub.w	r4, r1, #4
 800a136:	bfb8      	it	lt
 800a138:	18e4      	addlt	r4, r4, r3
 800a13a:	f000 f8df 	bl	800a2fc <__malloc_lock>
 800a13e:	4a1e      	ldr	r2, [pc, #120]	; (800a1b8 <_free_r+0x94>)
 800a140:	9801      	ldr	r0, [sp, #4]
 800a142:	6813      	ldr	r3, [r2, #0]
 800a144:	b933      	cbnz	r3, 800a154 <_free_r+0x30>
 800a146:	6063      	str	r3, [r4, #4]
 800a148:	6014      	str	r4, [r2, #0]
 800a14a:	b003      	add	sp, #12
 800a14c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a150:	f000 b8da 	b.w	800a308 <__malloc_unlock>
 800a154:	42a3      	cmp	r3, r4
 800a156:	d908      	bls.n	800a16a <_free_r+0x46>
 800a158:	6825      	ldr	r5, [r4, #0]
 800a15a:	1961      	adds	r1, r4, r5
 800a15c:	428b      	cmp	r3, r1
 800a15e:	bf01      	itttt	eq
 800a160:	6819      	ldreq	r1, [r3, #0]
 800a162:	685b      	ldreq	r3, [r3, #4]
 800a164:	1949      	addeq	r1, r1, r5
 800a166:	6021      	streq	r1, [r4, #0]
 800a168:	e7ed      	b.n	800a146 <_free_r+0x22>
 800a16a:	461a      	mov	r2, r3
 800a16c:	685b      	ldr	r3, [r3, #4]
 800a16e:	b10b      	cbz	r3, 800a174 <_free_r+0x50>
 800a170:	42a3      	cmp	r3, r4
 800a172:	d9fa      	bls.n	800a16a <_free_r+0x46>
 800a174:	6811      	ldr	r1, [r2, #0]
 800a176:	1855      	adds	r5, r2, r1
 800a178:	42a5      	cmp	r5, r4
 800a17a:	d10b      	bne.n	800a194 <_free_r+0x70>
 800a17c:	6824      	ldr	r4, [r4, #0]
 800a17e:	4421      	add	r1, r4
 800a180:	1854      	adds	r4, r2, r1
 800a182:	42a3      	cmp	r3, r4
 800a184:	6011      	str	r1, [r2, #0]
 800a186:	d1e0      	bne.n	800a14a <_free_r+0x26>
 800a188:	681c      	ldr	r4, [r3, #0]
 800a18a:	685b      	ldr	r3, [r3, #4]
 800a18c:	6053      	str	r3, [r2, #4]
 800a18e:	440c      	add	r4, r1
 800a190:	6014      	str	r4, [r2, #0]
 800a192:	e7da      	b.n	800a14a <_free_r+0x26>
 800a194:	d902      	bls.n	800a19c <_free_r+0x78>
 800a196:	230c      	movs	r3, #12
 800a198:	6003      	str	r3, [r0, #0]
 800a19a:	e7d6      	b.n	800a14a <_free_r+0x26>
 800a19c:	6825      	ldr	r5, [r4, #0]
 800a19e:	1961      	adds	r1, r4, r5
 800a1a0:	428b      	cmp	r3, r1
 800a1a2:	bf04      	itt	eq
 800a1a4:	6819      	ldreq	r1, [r3, #0]
 800a1a6:	685b      	ldreq	r3, [r3, #4]
 800a1a8:	6063      	str	r3, [r4, #4]
 800a1aa:	bf04      	itt	eq
 800a1ac:	1949      	addeq	r1, r1, r5
 800a1ae:	6021      	streq	r1, [r4, #0]
 800a1b0:	6054      	str	r4, [r2, #4]
 800a1b2:	e7ca      	b.n	800a14a <_free_r+0x26>
 800a1b4:	b003      	add	sp, #12
 800a1b6:	bd30      	pop	{r4, r5, pc}
 800a1b8:	20002a44 	.word	0x20002a44

0800a1bc <sbrk_aligned>:
 800a1bc:	b570      	push	{r4, r5, r6, lr}
 800a1be:	4e0e      	ldr	r6, [pc, #56]	; (800a1f8 <sbrk_aligned+0x3c>)
 800a1c0:	460c      	mov	r4, r1
 800a1c2:	6831      	ldr	r1, [r6, #0]
 800a1c4:	4605      	mov	r5, r0
 800a1c6:	b911      	cbnz	r1, 800a1ce <sbrk_aligned+0x12>
 800a1c8:	f000 fba6 	bl	800a918 <_sbrk_r>
 800a1cc:	6030      	str	r0, [r6, #0]
 800a1ce:	4621      	mov	r1, r4
 800a1d0:	4628      	mov	r0, r5
 800a1d2:	f000 fba1 	bl	800a918 <_sbrk_r>
 800a1d6:	1c43      	adds	r3, r0, #1
 800a1d8:	d00a      	beq.n	800a1f0 <sbrk_aligned+0x34>
 800a1da:	1cc4      	adds	r4, r0, #3
 800a1dc:	f024 0403 	bic.w	r4, r4, #3
 800a1e0:	42a0      	cmp	r0, r4
 800a1e2:	d007      	beq.n	800a1f4 <sbrk_aligned+0x38>
 800a1e4:	1a21      	subs	r1, r4, r0
 800a1e6:	4628      	mov	r0, r5
 800a1e8:	f000 fb96 	bl	800a918 <_sbrk_r>
 800a1ec:	3001      	adds	r0, #1
 800a1ee:	d101      	bne.n	800a1f4 <sbrk_aligned+0x38>
 800a1f0:	f04f 34ff 	mov.w	r4, #4294967295
 800a1f4:	4620      	mov	r0, r4
 800a1f6:	bd70      	pop	{r4, r5, r6, pc}
 800a1f8:	20002a48 	.word	0x20002a48

0800a1fc <_malloc_r>:
 800a1fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a200:	1ccd      	adds	r5, r1, #3
 800a202:	f025 0503 	bic.w	r5, r5, #3
 800a206:	3508      	adds	r5, #8
 800a208:	2d0c      	cmp	r5, #12
 800a20a:	bf38      	it	cc
 800a20c:	250c      	movcc	r5, #12
 800a20e:	2d00      	cmp	r5, #0
 800a210:	4607      	mov	r7, r0
 800a212:	db01      	blt.n	800a218 <_malloc_r+0x1c>
 800a214:	42a9      	cmp	r1, r5
 800a216:	d905      	bls.n	800a224 <_malloc_r+0x28>
 800a218:	230c      	movs	r3, #12
 800a21a:	603b      	str	r3, [r7, #0]
 800a21c:	2600      	movs	r6, #0
 800a21e:	4630      	mov	r0, r6
 800a220:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a224:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a2f8 <_malloc_r+0xfc>
 800a228:	f000 f868 	bl	800a2fc <__malloc_lock>
 800a22c:	f8d8 3000 	ldr.w	r3, [r8]
 800a230:	461c      	mov	r4, r3
 800a232:	bb5c      	cbnz	r4, 800a28c <_malloc_r+0x90>
 800a234:	4629      	mov	r1, r5
 800a236:	4638      	mov	r0, r7
 800a238:	f7ff ffc0 	bl	800a1bc <sbrk_aligned>
 800a23c:	1c43      	adds	r3, r0, #1
 800a23e:	4604      	mov	r4, r0
 800a240:	d155      	bne.n	800a2ee <_malloc_r+0xf2>
 800a242:	f8d8 4000 	ldr.w	r4, [r8]
 800a246:	4626      	mov	r6, r4
 800a248:	2e00      	cmp	r6, #0
 800a24a:	d145      	bne.n	800a2d8 <_malloc_r+0xdc>
 800a24c:	2c00      	cmp	r4, #0
 800a24e:	d048      	beq.n	800a2e2 <_malloc_r+0xe6>
 800a250:	6823      	ldr	r3, [r4, #0]
 800a252:	4631      	mov	r1, r6
 800a254:	4638      	mov	r0, r7
 800a256:	eb04 0903 	add.w	r9, r4, r3
 800a25a:	f000 fb5d 	bl	800a918 <_sbrk_r>
 800a25e:	4581      	cmp	r9, r0
 800a260:	d13f      	bne.n	800a2e2 <_malloc_r+0xe6>
 800a262:	6821      	ldr	r1, [r4, #0]
 800a264:	1a6d      	subs	r5, r5, r1
 800a266:	4629      	mov	r1, r5
 800a268:	4638      	mov	r0, r7
 800a26a:	f7ff ffa7 	bl	800a1bc <sbrk_aligned>
 800a26e:	3001      	adds	r0, #1
 800a270:	d037      	beq.n	800a2e2 <_malloc_r+0xe6>
 800a272:	6823      	ldr	r3, [r4, #0]
 800a274:	442b      	add	r3, r5
 800a276:	6023      	str	r3, [r4, #0]
 800a278:	f8d8 3000 	ldr.w	r3, [r8]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d038      	beq.n	800a2f2 <_malloc_r+0xf6>
 800a280:	685a      	ldr	r2, [r3, #4]
 800a282:	42a2      	cmp	r2, r4
 800a284:	d12b      	bne.n	800a2de <_malloc_r+0xe2>
 800a286:	2200      	movs	r2, #0
 800a288:	605a      	str	r2, [r3, #4]
 800a28a:	e00f      	b.n	800a2ac <_malloc_r+0xb0>
 800a28c:	6822      	ldr	r2, [r4, #0]
 800a28e:	1b52      	subs	r2, r2, r5
 800a290:	d41f      	bmi.n	800a2d2 <_malloc_r+0xd6>
 800a292:	2a0b      	cmp	r2, #11
 800a294:	d917      	bls.n	800a2c6 <_malloc_r+0xca>
 800a296:	1961      	adds	r1, r4, r5
 800a298:	42a3      	cmp	r3, r4
 800a29a:	6025      	str	r5, [r4, #0]
 800a29c:	bf18      	it	ne
 800a29e:	6059      	strne	r1, [r3, #4]
 800a2a0:	6863      	ldr	r3, [r4, #4]
 800a2a2:	bf08      	it	eq
 800a2a4:	f8c8 1000 	streq.w	r1, [r8]
 800a2a8:	5162      	str	r2, [r4, r5]
 800a2aa:	604b      	str	r3, [r1, #4]
 800a2ac:	4638      	mov	r0, r7
 800a2ae:	f104 060b 	add.w	r6, r4, #11
 800a2b2:	f000 f829 	bl	800a308 <__malloc_unlock>
 800a2b6:	f026 0607 	bic.w	r6, r6, #7
 800a2ba:	1d23      	adds	r3, r4, #4
 800a2bc:	1af2      	subs	r2, r6, r3
 800a2be:	d0ae      	beq.n	800a21e <_malloc_r+0x22>
 800a2c0:	1b9b      	subs	r3, r3, r6
 800a2c2:	50a3      	str	r3, [r4, r2]
 800a2c4:	e7ab      	b.n	800a21e <_malloc_r+0x22>
 800a2c6:	42a3      	cmp	r3, r4
 800a2c8:	6862      	ldr	r2, [r4, #4]
 800a2ca:	d1dd      	bne.n	800a288 <_malloc_r+0x8c>
 800a2cc:	f8c8 2000 	str.w	r2, [r8]
 800a2d0:	e7ec      	b.n	800a2ac <_malloc_r+0xb0>
 800a2d2:	4623      	mov	r3, r4
 800a2d4:	6864      	ldr	r4, [r4, #4]
 800a2d6:	e7ac      	b.n	800a232 <_malloc_r+0x36>
 800a2d8:	4634      	mov	r4, r6
 800a2da:	6876      	ldr	r6, [r6, #4]
 800a2dc:	e7b4      	b.n	800a248 <_malloc_r+0x4c>
 800a2de:	4613      	mov	r3, r2
 800a2e0:	e7cc      	b.n	800a27c <_malloc_r+0x80>
 800a2e2:	230c      	movs	r3, #12
 800a2e4:	603b      	str	r3, [r7, #0]
 800a2e6:	4638      	mov	r0, r7
 800a2e8:	f000 f80e 	bl	800a308 <__malloc_unlock>
 800a2ec:	e797      	b.n	800a21e <_malloc_r+0x22>
 800a2ee:	6025      	str	r5, [r4, #0]
 800a2f0:	e7dc      	b.n	800a2ac <_malloc_r+0xb0>
 800a2f2:	605b      	str	r3, [r3, #4]
 800a2f4:	deff      	udf	#255	; 0xff
 800a2f6:	bf00      	nop
 800a2f8:	20002a44 	.word	0x20002a44

0800a2fc <__malloc_lock>:
 800a2fc:	4801      	ldr	r0, [pc, #4]	; (800a304 <__malloc_lock+0x8>)
 800a2fe:	f7ff bf07 	b.w	800a110 <__retarget_lock_acquire_recursive>
 800a302:	bf00      	nop
 800a304:	20002a40 	.word	0x20002a40

0800a308 <__malloc_unlock>:
 800a308:	4801      	ldr	r0, [pc, #4]	; (800a310 <__malloc_unlock+0x8>)
 800a30a:	f7ff bf02 	b.w	800a112 <__retarget_lock_release_recursive>
 800a30e:	bf00      	nop
 800a310:	20002a40 	.word	0x20002a40

0800a314 <__ssputs_r>:
 800a314:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a318:	688e      	ldr	r6, [r1, #8]
 800a31a:	461f      	mov	r7, r3
 800a31c:	42be      	cmp	r6, r7
 800a31e:	680b      	ldr	r3, [r1, #0]
 800a320:	4682      	mov	sl, r0
 800a322:	460c      	mov	r4, r1
 800a324:	4690      	mov	r8, r2
 800a326:	d82c      	bhi.n	800a382 <__ssputs_r+0x6e>
 800a328:	898a      	ldrh	r2, [r1, #12]
 800a32a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a32e:	d026      	beq.n	800a37e <__ssputs_r+0x6a>
 800a330:	6965      	ldr	r5, [r4, #20]
 800a332:	6909      	ldr	r1, [r1, #16]
 800a334:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a338:	eba3 0901 	sub.w	r9, r3, r1
 800a33c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a340:	1c7b      	adds	r3, r7, #1
 800a342:	444b      	add	r3, r9
 800a344:	106d      	asrs	r5, r5, #1
 800a346:	429d      	cmp	r5, r3
 800a348:	bf38      	it	cc
 800a34a:	461d      	movcc	r5, r3
 800a34c:	0553      	lsls	r3, r2, #21
 800a34e:	d527      	bpl.n	800a3a0 <__ssputs_r+0x8c>
 800a350:	4629      	mov	r1, r5
 800a352:	f7ff ff53 	bl	800a1fc <_malloc_r>
 800a356:	4606      	mov	r6, r0
 800a358:	b360      	cbz	r0, 800a3b4 <__ssputs_r+0xa0>
 800a35a:	6921      	ldr	r1, [r4, #16]
 800a35c:	464a      	mov	r2, r9
 800a35e:	f000 faeb 	bl	800a938 <memcpy>
 800a362:	89a3      	ldrh	r3, [r4, #12]
 800a364:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a368:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a36c:	81a3      	strh	r3, [r4, #12]
 800a36e:	6126      	str	r6, [r4, #16]
 800a370:	6165      	str	r5, [r4, #20]
 800a372:	444e      	add	r6, r9
 800a374:	eba5 0509 	sub.w	r5, r5, r9
 800a378:	6026      	str	r6, [r4, #0]
 800a37a:	60a5      	str	r5, [r4, #8]
 800a37c:	463e      	mov	r6, r7
 800a37e:	42be      	cmp	r6, r7
 800a380:	d900      	bls.n	800a384 <__ssputs_r+0x70>
 800a382:	463e      	mov	r6, r7
 800a384:	6820      	ldr	r0, [r4, #0]
 800a386:	4632      	mov	r2, r6
 800a388:	4641      	mov	r1, r8
 800a38a:	f000 faab 	bl	800a8e4 <memmove>
 800a38e:	68a3      	ldr	r3, [r4, #8]
 800a390:	1b9b      	subs	r3, r3, r6
 800a392:	60a3      	str	r3, [r4, #8]
 800a394:	6823      	ldr	r3, [r4, #0]
 800a396:	4433      	add	r3, r6
 800a398:	6023      	str	r3, [r4, #0]
 800a39a:	2000      	movs	r0, #0
 800a39c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3a0:	462a      	mov	r2, r5
 800a3a2:	f000 fad7 	bl	800a954 <_realloc_r>
 800a3a6:	4606      	mov	r6, r0
 800a3a8:	2800      	cmp	r0, #0
 800a3aa:	d1e0      	bne.n	800a36e <__ssputs_r+0x5a>
 800a3ac:	6921      	ldr	r1, [r4, #16]
 800a3ae:	4650      	mov	r0, sl
 800a3b0:	f7ff feb8 	bl	800a124 <_free_r>
 800a3b4:	230c      	movs	r3, #12
 800a3b6:	f8ca 3000 	str.w	r3, [sl]
 800a3ba:	89a3      	ldrh	r3, [r4, #12]
 800a3bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a3c0:	81a3      	strh	r3, [r4, #12]
 800a3c2:	f04f 30ff 	mov.w	r0, #4294967295
 800a3c6:	e7e9      	b.n	800a39c <__ssputs_r+0x88>

0800a3c8 <_svfiprintf_r>:
 800a3c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3cc:	4698      	mov	r8, r3
 800a3ce:	898b      	ldrh	r3, [r1, #12]
 800a3d0:	061b      	lsls	r3, r3, #24
 800a3d2:	b09d      	sub	sp, #116	; 0x74
 800a3d4:	4607      	mov	r7, r0
 800a3d6:	460d      	mov	r5, r1
 800a3d8:	4614      	mov	r4, r2
 800a3da:	d50e      	bpl.n	800a3fa <_svfiprintf_r+0x32>
 800a3dc:	690b      	ldr	r3, [r1, #16]
 800a3de:	b963      	cbnz	r3, 800a3fa <_svfiprintf_r+0x32>
 800a3e0:	2140      	movs	r1, #64	; 0x40
 800a3e2:	f7ff ff0b 	bl	800a1fc <_malloc_r>
 800a3e6:	6028      	str	r0, [r5, #0]
 800a3e8:	6128      	str	r0, [r5, #16]
 800a3ea:	b920      	cbnz	r0, 800a3f6 <_svfiprintf_r+0x2e>
 800a3ec:	230c      	movs	r3, #12
 800a3ee:	603b      	str	r3, [r7, #0]
 800a3f0:	f04f 30ff 	mov.w	r0, #4294967295
 800a3f4:	e0d0      	b.n	800a598 <_svfiprintf_r+0x1d0>
 800a3f6:	2340      	movs	r3, #64	; 0x40
 800a3f8:	616b      	str	r3, [r5, #20]
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	9309      	str	r3, [sp, #36]	; 0x24
 800a3fe:	2320      	movs	r3, #32
 800a400:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a404:	f8cd 800c 	str.w	r8, [sp, #12]
 800a408:	2330      	movs	r3, #48	; 0x30
 800a40a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a5b0 <_svfiprintf_r+0x1e8>
 800a40e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a412:	f04f 0901 	mov.w	r9, #1
 800a416:	4623      	mov	r3, r4
 800a418:	469a      	mov	sl, r3
 800a41a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a41e:	b10a      	cbz	r2, 800a424 <_svfiprintf_r+0x5c>
 800a420:	2a25      	cmp	r2, #37	; 0x25
 800a422:	d1f9      	bne.n	800a418 <_svfiprintf_r+0x50>
 800a424:	ebba 0b04 	subs.w	fp, sl, r4
 800a428:	d00b      	beq.n	800a442 <_svfiprintf_r+0x7a>
 800a42a:	465b      	mov	r3, fp
 800a42c:	4622      	mov	r2, r4
 800a42e:	4629      	mov	r1, r5
 800a430:	4638      	mov	r0, r7
 800a432:	f7ff ff6f 	bl	800a314 <__ssputs_r>
 800a436:	3001      	adds	r0, #1
 800a438:	f000 80a9 	beq.w	800a58e <_svfiprintf_r+0x1c6>
 800a43c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a43e:	445a      	add	r2, fp
 800a440:	9209      	str	r2, [sp, #36]	; 0x24
 800a442:	f89a 3000 	ldrb.w	r3, [sl]
 800a446:	2b00      	cmp	r3, #0
 800a448:	f000 80a1 	beq.w	800a58e <_svfiprintf_r+0x1c6>
 800a44c:	2300      	movs	r3, #0
 800a44e:	f04f 32ff 	mov.w	r2, #4294967295
 800a452:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a456:	f10a 0a01 	add.w	sl, sl, #1
 800a45a:	9304      	str	r3, [sp, #16]
 800a45c:	9307      	str	r3, [sp, #28]
 800a45e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a462:	931a      	str	r3, [sp, #104]	; 0x68
 800a464:	4654      	mov	r4, sl
 800a466:	2205      	movs	r2, #5
 800a468:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a46c:	4850      	ldr	r0, [pc, #320]	; (800a5b0 <_svfiprintf_r+0x1e8>)
 800a46e:	f7f5 fecf 	bl	8000210 <memchr>
 800a472:	9a04      	ldr	r2, [sp, #16]
 800a474:	b9d8      	cbnz	r0, 800a4ae <_svfiprintf_r+0xe6>
 800a476:	06d0      	lsls	r0, r2, #27
 800a478:	bf44      	itt	mi
 800a47a:	2320      	movmi	r3, #32
 800a47c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a480:	0711      	lsls	r1, r2, #28
 800a482:	bf44      	itt	mi
 800a484:	232b      	movmi	r3, #43	; 0x2b
 800a486:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a48a:	f89a 3000 	ldrb.w	r3, [sl]
 800a48e:	2b2a      	cmp	r3, #42	; 0x2a
 800a490:	d015      	beq.n	800a4be <_svfiprintf_r+0xf6>
 800a492:	9a07      	ldr	r2, [sp, #28]
 800a494:	4654      	mov	r4, sl
 800a496:	2000      	movs	r0, #0
 800a498:	f04f 0c0a 	mov.w	ip, #10
 800a49c:	4621      	mov	r1, r4
 800a49e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a4a2:	3b30      	subs	r3, #48	; 0x30
 800a4a4:	2b09      	cmp	r3, #9
 800a4a6:	d94d      	bls.n	800a544 <_svfiprintf_r+0x17c>
 800a4a8:	b1b0      	cbz	r0, 800a4d8 <_svfiprintf_r+0x110>
 800a4aa:	9207      	str	r2, [sp, #28]
 800a4ac:	e014      	b.n	800a4d8 <_svfiprintf_r+0x110>
 800a4ae:	eba0 0308 	sub.w	r3, r0, r8
 800a4b2:	fa09 f303 	lsl.w	r3, r9, r3
 800a4b6:	4313      	orrs	r3, r2
 800a4b8:	9304      	str	r3, [sp, #16]
 800a4ba:	46a2      	mov	sl, r4
 800a4bc:	e7d2      	b.n	800a464 <_svfiprintf_r+0x9c>
 800a4be:	9b03      	ldr	r3, [sp, #12]
 800a4c0:	1d19      	adds	r1, r3, #4
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	9103      	str	r1, [sp, #12]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	bfbb      	ittet	lt
 800a4ca:	425b      	neglt	r3, r3
 800a4cc:	f042 0202 	orrlt.w	r2, r2, #2
 800a4d0:	9307      	strge	r3, [sp, #28]
 800a4d2:	9307      	strlt	r3, [sp, #28]
 800a4d4:	bfb8      	it	lt
 800a4d6:	9204      	strlt	r2, [sp, #16]
 800a4d8:	7823      	ldrb	r3, [r4, #0]
 800a4da:	2b2e      	cmp	r3, #46	; 0x2e
 800a4dc:	d10c      	bne.n	800a4f8 <_svfiprintf_r+0x130>
 800a4de:	7863      	ldrb	r3, [r4, #1]
 800a4e0:	2b2a      	cmp	r3, #42	; 0x2a
 800a4e2:	d134      	bne.n	800a54e <_svfiprintf_r+0x186>
 800a4e4:	9b03      	ldr	r3, [sp, #12]
 800a4e6:	1d1a      	adds	r2, r3, #4
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	9203      	str	r2, [sp, #12]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	bfb8      	it	lt
 800a4f0:	f04f 33ff 	movlt.w	r3, #4294967295
 800a4f4:	3402      	adds	r4, #2
 800a4f6:	9305      	str	r3, [sp, #20]
 800a4f8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a5c0 <_svfiprintf_r+0x1f8>
 800a4fc:	7821      	ldrb	r1, [r4, #0]
 800a4fe:	2203      	movs	r2, #3
 800a500:	4650      	mov	r0, sl
 800a502:	f7f5 fe85 	bl	8000210 <memchr>
 800a506:	b138      	cbz	r0, 800a518 <_svfiprintf_r+0x150>
 800a508:	9b04      	ldr	r3, [sp, #16]
 800a50a:	eba0 000a 	sub.w	r0, r0, sl
 800a50e:	2240      	movs	r2, #64	; 0x40
 800a510:	4082      	lsls	r2, r0
 800a512:	4313      	orrs	r3, r2
 800a514:	3401      	adds	r4, #1
 800a516:	9304      	str	r3, [sp, #16]
 800a518:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a51c:	4825      	ldr	r0, [pc, #148]	; (800a5b4 <_svfiprintf_r+0x1ec>)
 800a51e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a522:	2206      	movs	r2, #6
 800a524:	f7f5 fe74 	bl	8000210 <memchr>
 800a528:	2800      	cmp	r0, #0
 800a52a:	d038      	beq.n	800a59e <_svfiprintf_r+0x1d6>
 800a52c:	4b22      	ldr	r3, [pc, #136]	; (800a5b8 <_svfiprintf_r+0x1f0>)
 800a52e:	bb1b      	cbnz	r3, 800a578 <_svfiprintf_r+0x1b0>
 800a530:	9b03      	ldr	r3, [sp, #12]
 800a532:	3307      	adds	r3, #7
 800a534:	f023 0307 	bic.w	r3, r3, #7
 800a538:	3308      	adds	r3, #8
 800a53a:	9303      	str	r3, [sp, #12]
 800a53c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a53e:	4433      	add	r3, r6
 800a540:	9309      	str	r3, [sp, #36]	; 0x24
 800a542:	e768      	b.n	800a416 <_svfiprintf_r+0x4e>
 800a544:	fb0c 3202 	mla	r2, ip, r2, r3
 800a548:	460c      	mov	r4, r1
 800a54a:	2001      	movs	r0, #1
 800a54c:	e7a6      	b.n	800a49c <_svfiprintf_r+0xd4>
 800a54e:	2300      	movs	r3, #0
 800a550:	3401      	adds	r4, #1
 800a552:	9305      	str	r3, [sp, #20]
 800a554:	4619      	mov	r1, r3
 800a556:	f04f 0c0a 	mov.w	ip, #10
 800a55a:	4620      	mov	r0, r4
 800a55c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a560:	3a30      	subs	r2, #48	; 0x30
 800a562:	2a09      	cmp	r2, #9
 800a564:	d903      	bls.n	800a56e <_svfiprintf_r+0x1a6>
 800a566:	2b00      	cmp	r3, #0
 800a568:	d0c6      	beq.n	800a4f8 <_svfiprintf_r+0x130>
 800a56a:	9105      	str	r1, [sp, #20]
 800a56c:	e7c4      	b.n	800a4f8 <_svfiprintf_r+0x130>
 800a56e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a572:	4604      	mov	r4, r0
 800a574:	2301      	movs	r3, #1
 800a576:	e7f0      	b.n	800a55a <_svfiprintf_r+0x192>
 800a578:	ab03      	add	r3, sp, #12
 800a57a:	9300      	str	r3, [sp, #0]
 800a57c:	462a      	mov	r2, r5
 800a57e:	4b0f      	ldr	r3, [pc, #60]	; (800a5bc <_svfiprintf_r+0x1f4>)
 800a580:	a904      	add	r1, sp, #16
 800a582:	4638      	mov	r0, r7
 800a584:	f3af 8000 	nop.w
 800a588:	1c42      	adds	r2, r0, #1
 800a58a:	4606      	mov	r6, r0
 800a58c:	d1d6      	bne.n	800a53c <_svfiprintf_r+0x174>
 800a58e:	89ab      	ldrh	r3, [r5, #12]
 800a590:	065b      	lsls	r3, r3, #25
 800a592:	f53f af2d 	bmi.w	800a3f0 <_svfiprintf_r+0x28>
 800a596:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a598:	b01d      	add	sp, #116	; 0x74
 800a59a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a59e:	ab03      	add	r3, sp, #12
 800a5a0:	9300      	str	r3, [sp, #0]
 800a5a2:	462a      	mov	r2, r5
 800a5a4:	4b05      	ldr	r3, [pc, #20]	; (800a5bc <_svfiprintf_r+0x1f4>)
 800a5a6:	a904      	add	r1, sp, #16
 800a5a8:	4638      	mov	r0, r7
 800a5aa:	f000 f879 	bl	800a6a0 <_printf_i>
 800a5ae:	e7eb      	b.n	800a588 <_svfiprintf_r+0x1c0>
 800a5b0:	0800ae88 	.word	0x0800ae88
 800a5b4:	0800ae92 	.word	0x0800ae92
 800a5b8:	00000000 	.word	0x00000000
 800a5bc:	0800a315 	.word	0x0800a315
 800a5c0:	0800ae8e 	.word	0x0800ae8e

0800a5c4 <_printf_common>:
 800a5c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5c8:	4616      	mov	r6, r2
 800a5ca:	4699      	mov	r9, r3
 800a5cc:	688a      	ldr	r2, [r1, #8]
 800a5ce:	690b      	ldr	r3, [r1, #16]
 800a5d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a5d4:	4293      	cmp	r3, r2
 800a5d6:	bfb8      	it	lt
 800a5d8:	4613      	movlt	r3, r2
 800a5da:	6033      	str	r3, [r6, #0]
 800a5dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a5e0:	4607      	mov	r7, r0
 800a5e2:	460c      	mov	r4, r1
 800a5e4:	b10a      	cbz	r2, 800a5ea <_printf_common+0x26>
 800a5e6:	3301      	adds	r3, #1
 800a5e8:	6033      	str	r3, [r6, #0]
 800a5ea:	6823      	ldr	r3, [r4, #0]
 800a5ec:	0699      	lsls	r1, r3, #26
 800a5ee:	bf42      	ittt	mi
 800a5f0:	6833      	ldrmi	r3, [r6, #0]
 800a5f2:	3302      	addmi	r3, #2
 800a5f4:	6033      	strmi	r3, [r6, #0]
 800a5f6:	6825      	ldr	r5, [r4, #0]
 800a5f8:	f015 0506 	ands.w	r5, r5, #6
 800a5fc:	d106      	bne.n	800a60c <_printf_common+0x48>
 800a5fe:	f104 0a19 	add.w	sl, r4, #25
 800a602:	68e3      	ldr	r3, [r4, #12]
 800a604:	6832      	ldr	r2, [r6, #0]
 800a606:	1a9b      	subs	r3, r3, r2
 800a608:	42ab      	cmp	r3, r5
 800a60a:	dc26      	bgt.n	800a65a <_printf_common+0x96>
 800a60c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a610:	1e13      	subs	r3, r2, #0
 800a612:	6822      	ldr	r2, [r4, #0]
 800a614:	bf18      	it	ne
 800a616:	2301      	movne	r3, #1
 800a618:	0692      	lsls	r2, r2, #26
 800a61a:	d42b      	bmi.n	800a674 <_printf_common+0xb0>
 800a61c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a620:	4649      	mov	r1, r9
 800a622:	4638      	mov	r0, r7
 800a624:	47c0      	blx	r8
 800a626:	3001      	adds	r0, #1
 800a628:	d01e      	beq.n	800a668 <_printf_common+0xa4>
 800a62a:	6823      	ldr	r3, [r4, #0]
 800a62c:	6922      	ldr	r2, [r4, #16]
 800a62e:	f003 0306 	and.w	r3, r3, #6
 800a632:	2b04      	cmp	r3, #4
 800a634:	bf02      	ittt	eq
 800a636:	68e5      	ldreq	r5, [r4, #12]
 800a638:	6833      	ldreq	r3, [r6, #0]
 800a63a:	1aed      	subeq	r5, r5, r3
 800a63c:	68a3      	ldr	r3, [r4, #8]
 800a63e:	bf0c      	ite	eq
 800a640:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a644:	2500      	movne	r5, #0
 800a646:	4293      	cmp	r3, r2
 800a648:	bfc4      	itt	gt
 800a64a:	1a9b      	subgt	r3, r3, r2
 800a64c:	18ed      	addgt	r5, r5, r3
 800a64e:	2600      	movs	r6, #0
 800a650:	341a      	adds	r4, #26
 800a652:	42b5      	cmp	r5, r6
 800a654:	d11a      	bne.n	800a68c <_printf_common+0xc8>
 800a656:	2000      	movs	r0, #0
 800a658:	e008      	b.n	800a66c <_printf_common+0xa8>
 800a65a:	2301      	movs	r3, #1
 800a65c:	4652      	mov	r2, sl
 800a65e:	4649      	mov	r1, r9
 800a660:	4638      	mov	r0, r7
 800a662:	47c0      	blx	r8
 800a664:	3001      	adds	r0, #1
 800a666:	d103      	bne.n	800a670 <_printf_common+0xac>
 800a668:	f04f 30ff 	mov.w	r0, #4294967295
 800a66c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a670:	3501      	adds	r5, #1
 800a672:	e7c6      	b.n	800a602 <_printf_common+0x3e>
 800a674:	18e1      	adds	r1, r4, r3
 800a676:	1c5a      	adds	r2, r3, #1
 800a678:	2030      	movs	r0, #48	; 0x30
 800a67a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a67e:	4422      	add	r2, r4
 800a680:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a684:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a688:	3302      	adds	r3, #2
 800a68a:	e7c7      	b.n	800a61c <_printf_common+0x58>
 800a68c:	2301      	movs	r3, #1
 800a68e:	4622      	mov	r2, r4
 800a690:	4649      	mov	r1, r9
 800a692:	4638      	mov	r0, r7
 800a694:	47c0      	blx	r8
 800a696:	3001      	adds	r0, #1
 800a698:	d0e6      	beq.n	800a668 <_printf_common+0xa4>
 800a69a:	3601      	adds	r6, #1
 800a69c:	e7d9      	b.n	800a652 <_printf_common+0x8e>
	...

0800a6a0 <_printf_i>:
 800a6a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a6a4:	7e0f      	ldrb	r7, [r1, #24]
 800a6a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a6a8:	2f78      	cmp	r7, #120	; 0x78
 800a6aa:	4691      	mov	r9, r2
 800a6ac:	4680      	mov	r8, r0
 800a6ae:	460c      	mov	r4, r1
 800a6b0:	469a      	mov	sl, r3
 800a6b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a6b6:	d807      	bhi.n	800a6c8 <_printf_i+0x28>
 800a6b8:	2f62      	cmp	r7, #98	; 0x62
 800a6ba:	d80a      	bhi.n	800a6d2 <_printf_i+0x32>
 800a6bc:	2f00      	cmp	r7, #0
 800a6be:	f000 80d4 	beq.w	800a86a <_printf_i+0x1ca>
 800a6c2:	2f58      	cmp	r7, #88	; 0x58
 800a6c4:	f000 80c0 	beq.w	800a848 <_printf_i+0x1a8>
 800a6c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a6cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a6d0:	e03a      	b.n	800a748 <_printf_i+0xa8>
 800a6d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a6d6:	2b15      	cmp	r3, #21
 800a6d8:	d8f6      	bhi.n	800a6c8 <_printf_i+0x28>
 800a6da:	a101      	add	r1, pc, #4	; (adr r1, 800a6e0 <_printf_i+0x40>)
 800a6dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a6e0:	0800a739 	.word	0x0800a739
 800a6e4:	0800a74d 	.word	0x0800a74d
 800a6e8:	0800a6c9 	.word	0x0800a6c9
 800a6ec:	0800a6c9 	.word	0x0800a6c9
 800a6f0:	0800a6c9 	.word	0x0800a6c9
 800a6f4:	0800a6c9 	.word	0x0800a6c9
 800a6f8:	0800a74d 	.word	0x0800a74d
 800a6fc:	0800a6c9 	.word	0x0800a6c9
 800a700:	0800a6c9 	.word	0x0800a6c9
 800a704:	0800a6c9 	.word	0x0800a6c9
 800a708:	0800a6c9 	.word	0x0800a6c9
 800a70c:	0800a851 	.word	0x0800a851
 800a710:	0800a779 	.word	0x0800a779
 800a714:	0800a80b 	.word	0x0800a80b
 800a718:	0800a6c9 	.word	0x0800a6c9
 800a71c:	0800a6c9 	.word	0x0800a6c9
 800a720:	0800a873 	.word	0x0800a873
 800a724:	0800a6c9 	.word	0x0800a6c9
 800a728:	0800a779 	.word	0x0800a779
 800a72c:	0800a6c9 	.word	0x0800a6c9
 800a730:	0800a6c9 	.word	0x0800a6c9
 800a734:	0800a813 	.word	0x0800a813
 800a738:	682b      	ldr	r3, [r5, #0]
 800a73a:	1d1a      	adds	r2, r3, #4
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	602a      	str	r2, [r5, #0]
 800a740:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a744:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a748:	2301      	movs	r3, #1
 800a74a:	e09f      	b.n	800a88c <_printf_i+0x1ec>
 800a74c:	6820      	ldr	r0, [r4, #0]
 800a74e:	682b      	ldr	r3, [r5, #0]
 800a750:	0607      	lsls	r7, r0, #24
 800a752:	f103 0104 	add.w	r1, r3, #4
 800a756:	6029      	str	r1, [r5, #0]
 800a758:	d501      	bpl.n	800a75e <_printf_i+0xbe>
 800a75a:	681e      	ldr	r6, [r3, #0]
 800a75c:	e003      	b.n	800a766 <_printf_i+0xc6>
 800a75e:	0646      	lsls	r6, r0, #25
 800a760:	d5fb      	bpl.n	800a75a <_printf_i+0xba>
 800a762:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a766:	2e00      	cmp	r6, #0
 800a768:	da03      	bge.n	800a772 <_printf_i+0xd2>
 800a76a:	232d      	movs	r3, #45	; 0x2d
 800a76c:	4276      	negs	r6, r6
 800a76e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a772:	485a      	ldr	r0, [pc, #360]	; (800a8dc <_printf_i+0x23c>)
 800a774:	230a      	movs	r3, #10
 800a776:	e012      	b.n	800a79e <_printf_i+0xfe>
 800a778:	682b      	ldr	r3, [r5, #0]
 800a77a:	6820      	ldr	r0, [r4, #0]
 800a77c:	1d19      	adds	r1, r3, #4
 800a77e:	6029      	str	r1, [r5, #0]
 800a780:	0605      	lsls	r5, r0, #24
 800a782:	d501      	bpl.n	800a788 <_printf_i+0xe8>
 800a784:	681e      	ldr	r6, [r3, #0]
 800a786:	e002      	b.n	800a78e <_printf_i+0xee>
 800a788:	0641      	lsls	r1, r0, #25
 800a78a:	d5fb      	bpl.n	800a784 <_printf_i+0xe4>
 800a78c:	881e      	ldrh	r6, [r3, #0]
 800a78e:	4853      	ldr	r0, [pc, #332]	; (800a8dc <_printf_i+0x23c>)
 800a790:	2f6f      	cmp	r7, #111	; 0x6f
 800a792:	bf0c      	ite	eq
 800a794:	2308      	moveq	r3, #8
 800a796:	230a      	movne	r3, #10
 800a798:	2100      	movs	r1, #0
 800a79a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a79e:	6865      	ldr	r5, [r4, #4]
 800a7a0:	60a5      	str	r5, [r4, #8]
 800a7a2:	2d00      	cmp	r5, #0
 800a7a4:	bfa2      	ittt	ge
 800a7a6:	6821      	ldrge	r1, [r4, #0]
 800a7a8:	f021 0104 	bicge.w	r1, r1, #4
 800a7ac:	6021      	strge	r1, [r4, #0]
 800a7ae:	b90e      	cbnz	r6, 800a7b4 <_printf_i+0x114>
 800a7b0:	2d00      	cmp	r5, #0
 800a7b2:	d04b      	beq.n	800a84c <_printf_i+0x1ac>
 800a7b4:	4615      	mov	r5, r2
 800a7b6:	fbb6 f1f3 	udiv	r1, r6, r3
 800a7ba:	fb03 6711 	mls	r7, r3, r1, r6
 800a7be:	5dc7      	ldrb	r7, [r0, r7]
 800a7c0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a7c4:	4637      	mov	r7, r6
 800a7c6:	42bb      	cmp	r3, r7
 800a7c8:	460e      	mov	r6, r1
 800a7ca:	d9f4      	bls.n	800a7b6 <_printf_i+0x116>
 800a7cc:	2b08      	cmp	r3, #8
 800a7ce:	d10b      	bne.n	800a7e8 <_printf_i+0x148>
 800a7d0:	6823      	ldr	r3, [r4, #0]
 800a7d2:	07de      	lsls	r6, r3, #31
 800a7d4:	d508      	bpl.n	800a7e8 <_printf_i+0x148>
 800a7d6:	6923      	ldr	r3, [r4, #16]
 800a7d8:	6861      	ldr	r1, [r4, #4]
 800a7da:	4299      	cmp	r1, r3
 800a7dc:	bfde      	ittt	le
 800a7de:	2330      	movle	r3, #48	; 0x30
 800a7e0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a7e4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a7e8:	1b52      	subs	r2, r2, r5
 800a7ea:	6122      	str	r2, [r4, #16]
 800a7ec:	f8cd a000 	str.w	sl, [sp]
 800a7f0:	464b      	mov	r3, r9
 800a7f2:	aa03      	add	r2, sp, #12
 800a7f4:	4621      	mov	r1, r4
 800a7f6:	4640      	mov	r0, r8
 800a7f8:	f7ff fee4 	bl	800a5c4 <_printf_common>
 800a7fc:	3001      	adds	r0, #1
 800a7fe:	d14a      	bne.n	800a896 <_printf_i+0x1f6>
 800a800:	f04f 30ff 	mov.w	r0, #4294967295
 800a804:	b004      	add	sp, #16
 800a806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a80a:	6823      	ldr	r3, [r4, #0]
 800a80c:	f043 0320 	orr.w	r3, r3, #32
 800a810:	6023      	str	r3, [r4, #0]
 800a812:	4833      	ldr	r0, [pc, #204]	; (800a8e0 <_printf_i+0x240>)
 800a814:	2778      	movs	r7, #120	; 0x78
 800a816:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a81a:	6823      	ldr	r3, [r4, #0]
 800a81c:	6829      	ldr	r1, [r5, #0]
 800a81e:	061f      	lsls	r7, r3, #24
 800a820:	f851 6b04 	ldr.w	r6, [r1], #4
 800a824:	d402      	bmi.n	800a82c <_printf_i+0x18c>
 800a826:	065f      	lsls	r7, r3, #25
 800a828:	bf48      	it	mi
 800a82a:	b2b6      	uxthmi	r6, r6
 800a82c:	07df      	lsls	r7, r3, #31
 800a82e:	bf48      	it	mi
 800a830:	f043 0320 	orrmi.w	r3, r3, #32
 800a834:	6029      	str	r1, [r5, #0]
 800a836:	bf48      	it	mi
 800a838:	6023      	strmi	r3, [r4, #0]
 800a83a:	b91e      	cbnz	r6, 800a844 <_printf_i+0x1a4>
 800a83c:	6823      	ldr	r3, [r4, #0]
 800a83e:	f023 0320 	bic.w	r3, r3, #32
 800a842:	6023      	str	r3, [r4, #0]
 800a844:	2310      	movs	r3, #16
 800a846:	e7a7      	b.n	800a798 <_printf_i+0xf8>
 800a848:	4824      	ldr	r0, [pc, #144]	; (800a8dc <_printf_i+0x23c>)
 800a84a:	e7e4      	b.n	800a816 <_printf_i+0x176>
 800a84c:	4615      	mov	r5, r2
 800a84e:	e7bd      	b.n	800a7cc <_printf_i+0x12c>
 800a850:	682b      	ldr	r3, [r5, #0]
 800a852:	6826      	ldr	r6, [r4, #0]
 800a854:	6961      	ldr	r1, [r4, #20]
 800a856:	1d18      	adds	r0, r3, #4
 800a858:	6028      	str	r0, [r5, #0]
 800a85a:	0635      	lsls	r5, r6, #24
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	d501      	bpl.n	800a864 <_printf_i+0x1c4>
 800a860:	6019      	str	r1, [r3, #0]
 800a862:	e002      	b.n	800a86a <_printf_i+0x1ca>
 800a864:	0670      	lsls	r0, r6, #25
 800a866:	d5fb      	bpl.n	800a860 <_printf_i+0x1c0>
 800a868:	8019      	strh	r1, [r3, #0]
 800a86a:	2300      	movs	r3, #0
 800a86c:	6123      	str	r3, [r4, #16]
 800a86e:	4615      	mov	r5, r2
 800a870:	e7bc      	b.n	800a7ec <_printf_i+0x14c>
 800a872:	682b      	ldr	r3, [r5, #0]
 800a874:	1d1a      	adds	r2, r3, #4
 800a876:	602a      	str	r2, [r5, #0]
 800a878:	681d      	ldr	r5, [r3, #0]
 800a87a:	6862      	ldr	r2, [r4, #4]
 800a87c:	2100      	movs	r1, #0
 800a87e:	4628      	mov	r0, r5
 800a880:	f7f5 fcc6 	bl	8000210 <memchr>
 800a884:	b108      	cbz	r0, 800a88a <_printf_i+0x1ea>
 800a886:	1b40      	subs	r0, r0, r5
 800a888:	6060      	str	r0, [r4, #4]
 800a88a:	6863      	ldr	r3, [r4, #4]
 800a88c:	6123      	str	r3, [r4, #16]
 800a88e:	2300      	movs	r3, #0
 800a890:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a894:	e7aa      	b.n	800a7ec <_printf_i+0x14c>
 800a896:	6923      	ldr	r3, [r4, #16]
 800a898:	462a      	mov	r2, r5
 800a89a:	4649      	mov	r1, r9
 800a89c:	4640      	mov	r0, r8
 800a89e:	47d0      	blx	sl
 800a8a0:	3001      	adds	r0, #1
 800a8a2:	d0ad      	beq.n	800a800 <_printf_i+0x160>
 800a8a4:	6823      	ldr	r3, [r4, #0]
 800a8a6:	079b      	lsls	r3, r3, #30
 800a8a8:	d413      	bmi.n	800a8d2 <_printf_i+0x232>
 800a8aa:	68e0      	ldr	r0, [r4, #12]
 800a8ac:	9b03      	ldr	r3, [sp, #12]
 800a8ae:	4298      	cmp	r0, r3
 800a8b0:	bfb8      	it	lt
 800a8b2:	4618      	movlt	r0, r3
 800a8b4:	e7a6      	b.n	800a804 <_printf_i+0x164>
 800a8b6:	2301      	movs	r3, #1
 800a8b8:	4632      	mov	r2, r6
 800a8ba:	4649      	mov	r1, r9
 800a8bc:	4640      	mov	r0, r8
 800a8be:	47d0      	blx	sl
 800a8c0:	3001      	adds	r0, #1
 800a8c2:	d09d      	beq.n	800a800 <_printf_i+0x160>
 800a8c4:	3501      	adds	r5, #1
 800a8c6:	68e3      	ldr	r3, [r4, #12]
 800a8c8:	9903      	ldr	r1, [sp, #12]
 800a8ca:	1a5b      	subs	r3, r3, r1
 800a8cc:	42ab      	cmp	r3, r5
 800a8ce:	dcf2      	bgt.n	800a8b6 <_printf_i+0x216>
 800a8d0:	e7eb      	b.n	800a8aa <_printf_i+0x20a>
 800a8d2:	2500      	movs	r5, #0
 800a8d4:	f104 0619 	add.w	r6, r4, #25
 800a8d8:	e7f5      	b.n	800a8c6 <_printf_i+0x226>
 800a8da:	bf00      	nop
 800a8dc:	0800ae99 	.word	0x0800ae99
 800a8e0:	0800aeaa 	.word	0x0800aeaa

0800a8e4 <memmove>:
 800a8e4:	4288      	cmp	r0, r1
 800a8e6:	b510      	push	{r4, lr}
 800a8e8:	eb01 0402 	add.w	r4, r1, r2
 800a8ec:	d902      	bls.n	800a8f4 <memmove+0x10>
 800a8ee:	4284      	cmp	r4, r0
 800a8f0:	4623      	mov	r3, r4
 800a8f2:	d807      	bhi.n	800a904 <memmove+0x20>
 800a8f4:	1e43      	subs	r3, r0, #1
 800a8f6:	42a1      	cmp	r1, r4
 800a8f8:	d008      	beq.n	800a90c <memmove+0x28>
 800a8fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a8fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a902:	e7f8      	b.n	800a8f6 <memmove+0x12>
 800a904:	4402      	add	r2, r0
 800a906:	4601      	mov	r1, r0
 800a908:	428a      	cmp	r2, r1
 800a90a:	d100      	bne.n	800a90e <memmove+0x2a>
 800a90c:	bd10      	pop	{r4, pc}
 800a90e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a912:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a916:	e7f7      	b.n	800a908 <memmove+0x24>

0800a918 <_sbrk_r>:
 800a918:	b538      	push	{r3, r4, r5, lr}
 800a91a:	4d06      	ldr	r5, [pc, #24]	; (800a934 <_sbrk_r+0x1c>)
 800a91c:	2300      	movs	r3, #0
 800a91e:	4604      	mov	r4, r0
 800a920:	4608      	mov	r0, r1
 800a922:	602b      	str	r3, [r5, #0]
 800a924:	f7f6 fbe2 	bl	80010ec <_sbrk>
 800a928:	1c43      	adds	r3, r0, #1
 800a92a:	d102      	bne.n	800a932 <_sbrk_r+0x1a>
 800a92c:	682b      	ldr	r3, [r5, #0]
 800a92e:	b103      	cbz	r3, 800a932 <_sbrk_r+0x1a>
 800a930:	6023      	str	r3, [r4, #0]
 800a932:	bd38      	pop	{r3, r4, r5, pc}
 800a934:	20002a3c 	.word	0x20002a3c

0800a938 <memcpy>:
 800a938:	440a      	add	r2, r1
 800a93a:	4291      	cmp	r1, r2
 800a93c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a940:	d100      	bne.n	800a944 <memcpy+0xc>
 800a942:	4770      	bx	lr
 800a944:	b510      	push	{r4, lr}
 800a946:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a94a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a94e:	4291      	cmp	r1, r2
 800a950:	d1f9      	bne.n	800a946 <memcpy+0xe>
 800a952:	bd10      	pop	{r4, pc}

0800a954 <_realloc_r>:
 800a954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a958:	4680      	mov	r8, r0
 800a95a:	4614      	mov	r4, r2
 800a95c:	460e      	mov	r6, r1
 800a95e:	b921      	cbnz	r1, 800a96a <_realloc_r+0x16>
 800a960:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a964:	4611      	mov	r1, r2
 800a966:	f7ff bc49 	b.w	800a1fc <_malloc_r>
 800a96a:	b92a      	cbnz	r2, 800a978 <_realloc_r+0x24>
 800a96c:	f7ff fbda 	bl	800a124 <_free_r>
 800a970:	4625      	mov	r5, r4
 800a972:	4628      	mov	r0, r5
 800a974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a978:	f000 f81b 	bl	800a9b2 <_malloc_usable_size_r>
 800a97c:	4284      	cmp	r4, r0
 800a97e:	4607      	mov	r7, r0
 800a980:	d802      	bhi.n	800a988 <_realloc_r+0x34>
 800a982:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a986:	d812      	bhi.n	800a9ae <_realloc_r+0x5a>
 800a988:	4621      	mov	r1, r4
 800a98a:	4640      	mov	r0, r8
 800a98c:	f7ff fc36 	bl	800a1fc <_malloc_r>
 800a990:	4605      	mov	r5, r0
 800a992:	2800      	cmp	r0, #0
 800a994:	d0ed      	beq.n	800a972 <_realloc_r+0x1e>
 800a996:	42bc      	cmp	r4, r7
 800a998:	4622      	mov	r2, r4
 800a99a:	4631      	mov	r1, r6
 800a99c:	bf28      	it	cs
 800a99e:	463a      	movcs	r2, r7
 800a9a0:	f7ff ffca 	bl	800a938 <memcpy>
 800a9a4:	4631      	mov	r1, r6
 800a9a6:	4640      	mov	r0, r8
 800a9a8:	f7ff fbbc 	bl	800a124 <_free_r>
 800a9ac:	e7e1      	b.n	800a972 <_realloc_r+0x1e>
 800a9ae:	4635      	mov	r5, r6
 800a9b0:	e7df      	b.n	800a972 <_realloc_r+0x1e>

0800a9b2 <_malloc_usable_size_r>:
 800a9b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a9b6:	1f18      	subs	r0, r3, #4
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	bfbc      	itt	lt
 800a9bc:	580b      	ldrlt	r3, [r1, r0]
 800a9be:	18c0      	addlt	r0, r0, r3
 800a9c0:	4770      	bx	lr
	...

0800a9c4 <_init>:
 800a9c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9c6:	bf00      	nop
 800a9c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9ca:	bc08      	pop	{r3}
 800a9cc:	469e      	mov	lr, r3
 800a9ce:	4770      	bx	lr

0800a9d0 <_fini>:
 800a9d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9d2:	bf00      	nop
 800a9d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9d6:	bc08      	pop	{r3}
 800a9d8:	469e      	mov	lr, r3
 800a9da:	4770      	bx	lr
