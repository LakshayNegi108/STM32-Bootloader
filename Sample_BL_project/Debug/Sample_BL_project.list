
Sample_BL_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08010000  08010000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a5e4  080101a0  080101a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a48  0801a784  0801a784  0001a784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b1cc  0801b1cc  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  0801b1cc  0801b1cc  0001b1cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b1d4  0801b1d4  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b1d4  0801b1d4  0001b1d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b1d8  0801b1d8  0001b1d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  0801b1dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008a4  2000005c  0801b238  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000900  0801b238  00020900  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017be4  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003af6  00000000  00000000  00037cb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014d0  00000000  00000000  0003b7b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001141  00000000  00000000  0003cc80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019e9d  00000000  00000000  0003ddc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001caf4  00000000  00000000  00057c5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a1517  00000000  00000000  00074752  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005f74  00000000  00000000  00115c6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  0011bbe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080101a0 <__do_global_dtors_aux>:
 80101a0:	b510      	push	{r4, lr}
 80101a2:	4c05      	ldr	r4, [pc, #20]	; (80101b8 <__do_global_dtors_aux+0x18>)
 80101a4:	7823      	ldrb	r3, [r4, #0]
 80101a6:	b933      	cbnz	r3, 80101b6 <__do_global_dtors_aux+0x16>
 80101a8:	4b04      	ldr	r3, [pc, #16]	; (80101bc <__do_global_dtors_aux+0x1c>)
 80101aa:	b113      	cbz	r3, 80101b2 <__do_global_dtors_aux+0x12>
 80101ac:	4804      	ldr	r0, [pc, #16]	; (80101c0 <__do_global_dtors_aux+0x20>)
 80101ae:	f3af 8000 	nop.w
 80101b2:	2301      	movs	r3, #1
 80101b4:	7023      	strb	r3, [r4, #0]
 80101b6:	bd10      	pop	{r4, pc}
 80101b8:	2000005c 	.word	0x2000005c
 80101bc:	00000000 	.word	0x00000000
 80101c0:	0801a76c 	.word	0x0801a76c

080101c4 <frame_dummy>:
 80101c4:	b508      	push	{r3, lr}
 80101c6:	4b03      	ldr	r3, [pc, #12]	; (80101d4 <frame_dummy+0x10>)
 80101c8:	b11b      	cbz	r3, 80101d2 <frame_dummy+0xe>
 80101ca:	4903      	ldr	r1, [pc, #12]	; (80101d8 <frame_dummy+0x14>)
 80101cc:	4803      	ldr	r0, [pc, #12]	; (80101dc <frame_dummy+0x18>)
 80101ce:	f3af 8000 	nop.w
 80101d2:	bd08      	pop	{r3, pc}
 80101d4:	00000000 	.word	0x00000000
 80101d8:	20000060 	.word	0x20000060
 80101dc:	0801a76c 	.word	0x0801a76c

080101e0 <strcmp>:
 80101e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80101e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80101e8:	2a01      	cmp	r2, #1
 80101ea:	bf28      	it	cs
 80101ec:	429a      	cmpcs	r2, r3
 80101ee:	d0f7      	beq.n	80101e0 <strcmp>
 80101f0:	1ad0      	subs	r0, r2, r3
 80101f2:	4770      	bx	lr

080101f4 <strlen>:
 80101f4:	4603      	mov	r3, r0
 80101f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80101fa:	2a00      	cmp	r2, #0
 80101fc:	d1fb      	bne.n	80101f6 <strlen+0x2>
 80101fe:	1a18      	subs	r0, r3, r0
 8010200:	3801      	subs	r0, #1
 8010202:	4770      	bx	lr
	...

08010210 <memchr>:
 8010210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8010214:	2a10      	cmp	r2, #16
 8010216:	db2b      	blt.n	8010270 <memchr+0x60>
 8010218:	f010 0f07 	tst.w	r0, #7
 801021c:	d008      	beq.n	8010230 <memchr+0x20>
 801021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010222:	3a01      	subs	r2, #1
 8010224:	428b      	cmp	r3, r1
 8010226:	d02d      	beq.n	8010284 <memchr+0x74>
 8010228:	f010 0f07 	tst.w	r0, #7
 801022c:	b342      	cbz	r2, 8010280 <memchr+0x70>
 801022e:	d1f6      	bne.n	801021e <memchr+0xe>
 8010230:	b4f0      	push	{r4, r5, r6, r7}
 8010232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8010236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 801023a:	f022 0407 	bic.w	r4, r2, #7
 801023e:	f07f 0700 	mvns.w	r7, #0
 8010242:	2300      	movs	r3, #0
 8010244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8010248:	3c08      	subs	r4, #8
 801024a:	ea85 0501 	eor.w	r5, r5, r1
 801024e:	ea86 0601 	eor.w	r6, r6, r1
 8010252:	fa85 f547 	uadd8	r5, r5, r7
 8010256:	faa3 f587 	sel	r5, r3, r7
 801025a:	fa86 f647 	uadd8	r6, r6, r7
 801025e:	faa5 f687 	sel	r6, r5, r7
 8010262:	b98e      	cbnz	r6, 8010288 <memchr+0x78>
 8010264:	d1ee      	bne.n	8010244 <memchr+0x34>
 8010266:	bcf0      	pop	{r4, r5, r6, r7}
 8010268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 801026c:	f002 0207 	and.w	r2, r2, #7
 8010270:	b132      	cbz	r2, 8010280 <memchr+0x70>
 8010272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010276:	3a01      	subs	r2, #1
 8010278:	ea83 0301 	eor.w	r3, r3, r1
 801027c:	b113      	cbz	r3, 8010284 <memchr+0x74>
 801027e:	d1f8      	bne.n	8010272 <memchr+0x62>
 8010280:	2000      	movs	r0, #0
 8010282:	4770      	bx	lr
 8010284:	3801      	subs	r0, #1
 8010286:	4770      	bx	lr
 8010288:	2d00      	cmp	r5, #0
 801028a:	bf06      	itte	eq
 801028c:	4635      	moveq	r5, r6
 801028e:	3803      	subeq	r0, #3
 8010290:	3807      	subne	r0, #7
 8010292:	f015 0f01 	tst.w	r5, #1
 8010296:	d107      	bne.n	80102a8 <memchr+0x98>
 8010298:	3001      	adds	r0, #1
 801029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 801029e:	bf02      	ittt	eq
 80102a0:	3001      	addeq	r0, #1
 80102a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80102a6:	3001      	addeq	r0, #1
 80102a8:	bcf0      	pop	{r4, r5, r6, r7}
 80102aa:	3801      	subs	r0, #1
 80102ac:	4770      	bx	lr
 80102ae:	bf00      	nop

080102b0 <__aeabi_uldivmod>:
 80102b0:	b953      	cbnz	r3, 80102c8 <__aeabi_uldivmod+0x18>
 80102b2:	b94a      	cbnz	r2, 80102c8 <__aeabi_uldivmod+0x18>
 80102b4:	2900      	cmp	r1, #0
 80102b6:	bf08      	it	eq
 80102b8:	2800      	cmpeq	r0, #0
 80102ba:	bf1c      	itt	ne
 80102bc:	f04f 31ff 	movne.w	r1, #4294967295
 80102c0:	f04f 30ff 	movne.w	r0, #4294967295
 80102c4:	f000 b970 	b.w	80105a8 <__aeabi_idiv0>
 80102c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80102cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80102d0:	f000 f806 	bl	80102e0 <__udivmoddi4>
 80102d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80102d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80102dc:	b004      	add	sp, #16
 80102de:	4770      	bx	lr

080102e0 <__udivmoddi4>:
 80102e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80102e4:	9e08      	ldr	r6, [sp, #32]
 80102e6:	460d      	mov	r5, r1
 80102e8:	4604      	mov	r4, r0
 80102ea:	460f      	mov	r7, r1
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	d14a      	bne.n	8010386 <__udivmoddi4+0xa6>
 80102f0:	428a      	cmp	r2, r1
 80102f2:	4694      	mov	ip, r2
 80102f4:	d965      	bls.n	80103c2 <__udivmoddi4+0xe2>
 80102f6:	fab2 f382 	clz	r3, r2
 80102fa:	b143      	cbz	r3, 801030e <__udivmoddi4+0x2e>
 80102fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8010300:	f1c3 0220 	rsb	r2, r3, #32
 8010304:	409f      	lsls	r7, r3
 8010306:	fa20 f202 	lsr.w	r2, r0, r2
 801030a:	4317      	orrs	r7, r2
 801030c:	409c      	lsls	r4, r3
 801030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8010312:	fa1f f58c 	uxth.w	r5, ip
 8010316:	fbb7 f1fe 	udiv	r1, r7, lr
 801031a:	0c22      	lsrs	r2, r4, #16
 801031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8010320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8010324:	fb01 f005 	mul.w	r0, r1, r5
 8010328:	4290      	cmp	r0, r2
 801032a:	d90a      	bls.n	8010342 <__udivmoddi4+0x62>
 801032c:	eb1c 0202 	adds.w	r2, ip, r2
 8010330:	f101 37ff 	add.w	r7, r1, #4294967295
 8010334:	f080 811c 	bcs.w	8010570 <__udivmoddi4+0x290>
 8010338:	4290      	cmp	r0, r2
 801033a:	f240 8119 	bls.w	8010570 <__udivmoddi4+0x290>
 801033e:	3902      	subs	r1, #2
 8010340:	4462      	add	r2, ip
 8010342:	1a12      	subs	r2, r2, r0
 8010344:	b2a4      	uxth	r4, r4
 8010346:	fbb2 f0fe 	udiv	r0, r2, lr
 801034a:	fb0e 2210 	mls	r2, lr, r0, r2
 801034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8010352:	fb00 f505 	mul.w	r5, r0, r5
 8010356:	42a5      	cmp	r5, r4
 8010358:	d90a      	bls.n	8010370 <__udivmoddi4+0x90>
 801035a:	eb1c 0404 	adds.w	r4, ip, r4
 801035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8010362:	f080 8107 	bcs.w	8010574 <__udivmoddi4+0x294>
 8010366:	42a5      	cmp	r5, r4
 8010368:	f240 8104 	bls.w	8010574 <__udivmoddi4+0x294>
 801036c:	4464      	add	r4, ip
 801036e:	3802      	subs	r0, #2
 8010370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8010374:	1b64      	subs	r4, r4, r5
 8010376:	2100      	movs	r1, #0
 8010378:	b11e      	cbz	r6, 8010382 <__udivmoddi4+0xa2>
 801037a:	40dc      	lsrs	r4, r3
 801037c:	2300      	movs	r3, #0
 801037e:	e9c6 4300 	strd	r4, r3, [r6]
 8010382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010386:	428b      	cmp	r3, r1
 8010388:	d908      	bls.n	801039c <__udivmoddi4+0xbc>
 801038a:	2e00      	cmp	r6, #0
 801038c:	f000 80ed 	beq.w	801056a <__udivmoddi4+0x28a>
 8010390:	2100      	movs	r1, #0
 8010392:	e9c6 0500 	strd	r0, r5, [r6]
 8010396:	4608      	mov	r0, r1
 8010398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801039c:	fab3 f183 	clz	r1, r3
 80103a0:	2900      	cmp	r1, #0
 80103a2:	d149      	bne.n	8010438 <__udivmoddi4+0x158>
 80103a4:	42ab      	cmp	r3, r5
 80103a6:	d302      	bcc.n	80103ae <__udivmoddi4+0xce>
 80103a8:	4282      	cmp	r2, r0
 80103aa:	f200 80f8 	bhi.w	801059e <__udivmoddi4+0x2be>
 80103ae:	1a84      	subs	r4, r0, r2
 80103b0:	eb65 0203 	sbc.w	r2, r5, r3
 80103b4:	2001      	movs	r0, #1
 80103b6:	4617      	mov	r7, r2
 80103b8:	2e00      	cmp	r6, #0
 80103ba:	d0e2      	beq.n	8010382 <__udivmoddi4+0xa2>
 80103bc:	e9c6 4700 	strd	r4, r7, [r6]
 80103c0:	e7df      	b.n	8010382 <__udivmoddi4+0xa2>
 80103c2:	b902      	cbnz	r2, 80103c6 <__udivmoddi4+0xe6>
 80103c4:	deff      	udf	#255	; 0xff
 80103c6:	fab2 f382 	clz	r3, r2
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	f040 8090 	bne.w	80104f0 <__udivmoddi4+0x210>
 80103d0:	1a8a      	subs	r2, r1, r2
 80103d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80103d6:	fa1f fe8c 	uxth.w	lr, ip
 80103da:	2101      	movs	r1, #1
 80103dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80103e0:	fb07 2015 	mls	r0, r7, r5, r2
 80103e4:	0c22      	lsrs	r2, r4, #16
 80103e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80103ea:	fb0e f005 	mul.w	r0, lr, r5
 80103ee:	4290      	cmp	r0, r2
 80103f0:	d908      	bls.n	8010404 <__udivmoddi4+0x124>
 80103f2:	eb1c 0202 	adds.w	r2, ip, r2
 80103f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80103fa:	d202      	bcs.n	8010402 <__udivmoddi4+0x122>
 80103fc:	4290      	cmp	r0, r2
 80103fe:	f200 80cb 	bhi.w	8010598 <__udivmoddi4+0x2b8>
 8010402:	4645      	mov	r5, r8
 8010404:	1a12      	subs	r2, r2, r0
 8010406:	b2a4      	uxth	r4, r4
 8010408:	fbb2 f0f7 	udiv	r0, r2, r7
 801040c:	fb07 2210 	mls	r2, r7, r0, r2
 8010410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8010414:	fb0e fe00 	mul.w	lr, lr, r0
 8010418:	45a6      	cmp	lr, r4
 801041a:	d908      	bls.n	801042e <__udivmoddi4+0x14e>
 801041c:	eb1c 0404 	adds.w	r4, ip, r4
 8010420:	f100 32ff 	add.w	r2, r0, #4294967295
 8010424:	d202      	bcs.n	801042c <__udivmoddi4+0x14c>
 8010426:	45a6      	cmp	lr, r4
 8010428:	f200 80bb 	bhi.w	80105a2 <__udivmoddi4+0x2c2>
 801042c:	4610      	mov	r0, r2
 801042e:	eba4 040e 	sub.w	r4, r4, lr
 8010432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8010436:	e79f      	b.n	8010378 <__udivmoddi4+0x98>
 8010438:	f1c1 0720 	rsb	r7, r1, #32
 801043c:	408b      	lsls	r3, r1
 801043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8010442:	ea4c 0c03 	orr.w	ip, ip, r3
 8010446:	fa05 f401 	lsl.w	r4, r5, r1
 801044a:	fa20 f307 	lsr.w	r3, r0, r7
 801044e:	40fd      	lsrs	r5, r7
 8010450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8010454:	4323      	orrs	r3, r4
 8010456:	fbb5 f8f9 	udiv	r8, r5, r9
 801045a:	fa1f fe8c 	uxth.w	lr, ip
 801045e:	fb09 5518 	mls	r5, r9, r8, r5
 8010462:	0c1c      	lsrs	r4, r3, #16
 8010464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8010468:	fb08 f50e 	mul.w	r5, r8, lr
 801046c:	42a5      	cmp	r5, r4
 801046e:	fa02 f201 	lsl.w	r2, r2, r1
 8010472:	fa00 f001 	lsl.w	r0, r0, r1
 8010476:	d90b      	bls.n	8010490 <__udivmoddi4+0x1b0>
 8010478:	eb1c 0404 	adds.w	r4, ip, r4
 801047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8010480:	f080 8088 	bcs.w	8010594 <__udivmoddi4+0x2b4>
 8010484:	42a5      	cmp	r5, r4
 8010486:	f240 8085 	bls.w	8010594 <__udivmoddi4+0x2b4>
 801048a:	f1a8 0802 	sub.w	r8, r8, #2
 801048e:	4464      	add	r4, ip
 8010490:	1b64      	subs	r4, r4, r5
 8010492:	b29d      	uxth	r5, r3
 8010494:	fbb4 f3f9 	udiv	r3, r4, r9
 8010498:	fb09 4413 	mls	r4, r9, r3, r4
 801049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80104a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80104a4:	45a6      	cmp	lr, r4
 80104a6:	d908      	bls.n	80104ba <__udivmoddi4+0x1da>
 80104a8:	eb1c 0404 	adds.w	r4, ip, r4
 80104ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80104b0:	d26c      	bcs.n	801058c <__udivmoddi4+0x2ac>
 80104b2:	45a6      	cmp	lr, r4
 80104b4:	d96a      	bls.n	801058c <__udivmoddi4+0x2ac>
 80104b6:	3b02      	subs	r3, #2
 80104b8:	4464      	add	r4, ip
 80104ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80104be:	fba3 9502 	umull	r9, r5, r3, r2
 80104c2:	eba4 040e 	sub.w	r4, r4, lr
 80104c6:	42ac      	cmp	r4, r5
 80104c8:	46c8      	mov	r8, r9
 80104ca:	46ae      	mov	lr, r5
 80104cc:	d356      	bcc.n	801057c <__udivmoddi4+0x29c>
 80104ce:	d053      	beq.n	8010578 <__udivmoddi4+0x298>
 80104d0:	b156      	cbz	r6, 80104e8 <__udivmoddi4+0x208>
 80104d2:	ebb0 0208 	subs.w	r2, r0, r8
 80104d6:	eb64 040e 	sbc.w	r4, r4, lr
 80104da:	fa04 f707 	lsl.w	r7, r4, r7
 80104de:	40ca      	lsrs	r2, r1
 80104e0:	40cc      	lsrs	r4, r1
 80104e2:	4317      	orrs	r7, r2
 80104e4:	e9c6 7400 	strd	r7, r4, [r6]
 80104e8:	4618      	mov	r0, r3
 80104ea:	2100      	movs	r1, #0
 80104ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80104f0:	f1c3 0120 	rsb	r1, r3, #32
 80104f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80104f8:	fa20 f201 	lsr.w	r2, r0, r1
 80104fc:	fa25 f101 	lsr.w	r1, r5, r1
 8010500:	409d      	lsls	r5, r3
 8010502:	432a      	orrs	r2, r5
 8010504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8010508:	fa1f fe8c 	uxth.w	lr, ip
 801050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8010510:	fb07 1510 	mls	r5, r7, r0, r1
 8010514:	0c11      	lsrs	r1, r2, #16
 8010516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 801051a:	fb00 f50e 	mul.w	r5, r0, lr
 801051e:	428d      	cmp	r5, r1
 8010520:	fa04 f403 	lsl.w	r4, r4, r3
 8010524:	d908      	bls.n	8010538 <__udivmoddi4+0x258>
 8010526:	eb1c 0101 	adds.w	r1, ip, r1
 801052a:	f100 38ff 	add.w	r8, r0, #4294967295
 801052e:	d22f      	bcs.n	8010590 <__udivmoddi4+0x2b0>
 8010530:	428d      	cmp	r5, r1
 8010532:	d92d      	bls.n	8010590 <__udivmoddi4+0x2b0>
 8010534:	3802      	subs	r0, #2
 8010536:	4461      	add	r1, ip
 8010538:	1b49      	subs	r1, r1, r5
 801053a:	b292      	uxth	r2, r2
 801053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8010540:	fb07 1115 	mls	r1, r7, r5, r1
 8010544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8010548:	fb05 f10e 	mul.w	r1, r5, lr
 801054c:	4291      	cmp	r1, r2
 801054e:	d908      	bls.n	8010562 <__udivmoddi4+0x282>
 8010550:	eb1c 0202 	adds.w	r2, ip, r2
 8010554:	f105 38ff 	add.w	r8, r5, #4294967295
 8010558:	d216      	bcs.n	8010588 <__udivmoddi4+0x2a8>
 801055a:	4291      	cmp	r1, r2
 801055c:	d914      	bls.n	8010588 <__udivmoddi4+0x2a8>
 801055e:	3d02      	subs	r5, #2
 8010560:	4462      	add	r2, ip
 8010562:	1a52      	subs	r2, r2, r1
 8010564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8010568:	e738      	b.n	80103dc <__udivmoddi4+0xfc>
 801056a:	4631      	mov	r1, r6
 801056c:	4630      	mov	r0, r6
 801056e:	e708      	b.n	8010382 <__udivmoddi4+0xa2>
 8010570:	4639      	mov	r1, r7
 8010572:	e6e6      	b.n	8010342 <__udivmoddi4+0x62>
 8010574:	4610      	mov	r0, r2
 8010576:	e6fb      	b.n	8010370 <__udivmoddi4+0x90>
 8010578:	4548      	cmp	r0, r9
 801057a:	d2a9      	bcs.n	80104d0 <__udivmoddi4+0x1f0>
 801057c:	ebb9 0802 	subs.w	r8, r9, r2
 8010580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8010584:	3b01      	subs	r3, #1
 8010586:	e7a3      	b.n	80104d0 <__udivmoddi4+0x1f0>
 8010588:	4645      	mov	r5, r8
 801058a:	e7ea      	b.n	8010562 <__udivmoddi4+0x282>
 801058c:	462b      	mov	r3, r5
 801058e:	e794      	b.n	80104ba <__udivmoddi4+0x1da>
 8010590:	4640      	mov	r0, r8
 8010592:	e7d1      	b.n	8010538 <__udivmoddi4+0x258>
 8010594:	46d0      	mov	r8, sl
 8010596:	e77b      	b.n	8010490 <__udivmoddi4+0x1b0>
 8010598:	3d02      	subs	r5, #2
 801059a:	4462      	add	r2, ip
 801059c:	e732      	b.n	8010404 <__udivmoddi4+0x124>
 801059e:	4608      	mov	r0, r1
 80105a0:	e70a      	b.n	80103b8 <__udivmoddi4+0xd8>
 80105a2:	4464      	add	r4, ip
 80105a4:	3802      	subs	r0, #2
 80105a6:	e742      	b.n	801042e <__udivmoddi4+0x14e>

080105a8 <__aeabi_idiv0>:
 80105a8:	4770      	bx	lr
 80105aa:	bf00      	nop

080105ac <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80105ac:	b580      	push	{r7, lr}
 80105ae:	b084      	sub	sp, #16
 80105b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80105b2:	463b      	mov	r3, r7
 80105b4:	2200      	movs	r2, #0
 80105b6:	601a      	str	r2, [r3, #0]
 80105b8:	605a      	str	r2, [r3, #4]
 80105ba:	609a      	str	r2, [r3, #8]
 80105bc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80105be:	4b76      	ldr	r3, [pc, #472]	; (8010798 <MX_ADC1_Init+0x1ec>)
 80105c0:	4a76      	ldr	r2, [pc, #472]	; (801079c <MX_ADC1_Init+0x1f0>)
 80105c2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80105c4:	4b74      	ldr	r3, [pc, #464]	; (8010798 <MX_ADC1_Init+0x1ec>)
 80105c6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80105ca:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80105cc:	4b72      	ldr	r3, [pc, #456]	; (8010798 <MX_ADC1_Init+0x1ec>)
 80105ce:	2200      	movs	r2, #0
 80105d0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80105d2:	4b71      	ldr	r3, [pc, #452]	; (8010798 <MX_ADC1_Init+0x1ec>)
 80105d4:	2201      	movs	r2, #1
 80105d6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80105d8:	4b6f      	ldr	r3, [pc, #444]	; (8010798 <MX_ADC1_Init+0x1ec>)
 80105da:	2201      	movs	r2, #1
 80105dc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80105de:	4b6e      	ldr	r3, [pc, #440]	; (8010798 <MX_ADC1_Init+0x1ec>)
 80105e0:	2200      	movs	r2, #0
 80105e2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80105e6:	4b6c      	ldr	r3, [pc, #432]	; (8010798 <MX_ADC1_Init+0x1ec>)
 80105e8:	2200      	movs	r2, #0
 80105ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80105ec:	4b6a      	ldr	r3, [pc, #424]	; (8010798 <MX_ADC1_Init+0x1ec>)
 80105ee:	4a6c      	ldr	r2, [pc, #432]	; (80107a0 <MX_ADC1_Init+0x1f4>)
 80105f0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80105f2:	4b69      	ldr	r3, [pc, #420]	; (8010798 <MX_ADC1_Init+0x1ec>)
 80105f4:	2200      	movs	r2, #0
 80105f6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 13;
 80105f8:	4b67      	ldr	r3, [pc, #412]	; (8010798 <MX_ADC1_Init+0x1ec>)
 80105fa:	220d      	movs	r2, #13
 80105fc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80105fe:	4b66      	ldr	r3, [pc, #408]	; (8010798 <MX_ADC1_Init+0x1ec>)
 8010600:	2201      	movs	r2, #1
 8010602:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8010606:	4b64      	ldr	r3, [pc, #400]	; (8010798 <MX_ADC1_Init+0x1ec>)
 8010608:	2201      	movs	r2, #1
 801060a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 801060c:	4862      	ldr	r0, [pc, #392]	; (8010798 <MX_ADC1_Init+0x1ec>)
 801060e:	f001 f8e1 	bl	80117d4 <HAL_ADC_Init>
 8010612:	4603      	mov	r3, r0
 8010614:	2b00      	cmp	r3, #0
 8010616:	d001      	beq.n	801061c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8010618:	f000 fbda 	bl	8010dd0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 801061c:	2300      	movs	r3, #0
 801061e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8010620:	2301      	movs	r3, #1
 8010622:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8010624:	2303      	movs	r3, #3
 8010626:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8010628:	463b      	mov	r3, r7
 801062a:	4619      	mov	r1, r3
 801062c:	485a      	ldr	r0, [pc, #360]	; (8010798 <MX_ADC1_Init+0x1ec>)
 801062e:	f001 f915 	bl	801185c <HAL_ADC_ConfigChannel>
 8010632:	4603      	mov	r3, r0
 8010634:	2b00      	cmp	r3, #0
 8010636:	d001      	beq.n	801063c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8010638:	f000 fbca 	bl	8010dd0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 801063c:	2304      	movs	r3, #4
 801063e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8010640:	2302      	movs	r3, #2
 8010642:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8010644:	463b      	mov	r3, r7
 8010646:	4619      	mov	r1, r3
 8010648:	4853      	ldr	r0, [pc, #332]	; (8010798 <MX_ADC1_Init+0x1ec>)
 801064a:	f001 f907 	bl	801185c <HAL_ADC_ConfigChannel>
 801064e:	4603      	mov	r3, r0
 8010650:	2b00      	cmp	r3, #0
 8010652:	d001      	beq.n	8010658 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8010654:	f000 fbbc 	bl	8010dd0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8010658:	2305      	movs	r3, #5
 801065a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 801065c:	2303      	movs	r3, #3
 801065e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8010660:	463b      	mov	r3, r7
 8010662:	4619      	mov	r1, r3
 8010664:	484c      	ldr	r0, [pc, #304]	; (8010798 <MX_ADC1_Init+0x1ec>)
 8010666:	f001 f8f9 	bl	801185c <HAL_ADC_ConfigChannel>
 801066a:	4603      	mov	r3, r0
 801066c:	2b00      	cmp	r3, #0
 801066e:	d001      	beq.n	8010674 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8010670:	f000 fbae 	bl	8010dd0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8010674:	2306      	movs	r3, #6
 8010676:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8010678:	2304      	movs	r3, #4
 801067a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 801067c:	463b      	mov	r3, r7
 801067e:	4619      	mov	r1, r3
 8010680:	4845      	ldr	r0, [pc, #276]	; (8010798 <MX_ADC1_Init+0x1ec>)
 8010682:	f001 f8eb 	bl	801185c <HAL_ADC_ConfigChannel>
 8010686:	4603      	mov	r3, r0
 8010688:	2b00      	cmp	r3, #0
 801068a:	d001      	beq.n	8010690 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 801068c:	f000 fba0 	bl	8010dd0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8010690:	2307      	movs	r3, #7
 8010692:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8010694:	2305      	movs	r3, #5
 8010696:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8010698:	2304      	movs	r3, #4
 801069a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 801069c:	463b      	mov	r3, r7
 801069e:	4619      	mov	r1, r3
 80106a0:	483d      	ldr	r0, [pc, #244]	; (8010798 <MX_ADC1_Init+0x1ec>)
 80106a2:	f001 f8db 	bl	801185c <HAL_ADC_ConfigChannel>
 80106a6:	4603      	mov	r3, r0
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d001      	beq.n	80106b0 <MX_ADC1_Init+0x104>
  {
    Error_Handler();
 80106ac:	f000 fb90 	bl	8010dd0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80106b0:	2308      	movs	r3, #8
 80106b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80106b4:	2306      	movs	r3, #6
 80106b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80106b8:	463b      	mov	r3, r7
 80106ba:	4619      	mov	r1, r3
 80106bc:	4836      	ldr	r0, [pc, #216]	; (8010798 <MX_ADC1_Init+0x1ec>)
 80106be:	f001 f8cd 	bl	801185c <HAL_ADC_ConfigChannel>
 80106c2:	4603      	mov	r3, r0
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	d001      	beq.n	80106cc <MX_ADC1_Init+0x120>
  {
    Error_Handler();
 80106c8:	f000 fb82 	bl	8010dd0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80106cc:	2309      	movs	r3, #9
 80106ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 80106d0:	2307      	movs	r3, #7
 80106d2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80106d4:	463b      	mov	r3, r7
 80106d6:	4619      	mov	r1, r3
 80106d8:	482f      	ldr	r0, [pc, #188]	; (8010798 <MX_ADC1_Init+0x1ec>)
 80106da:	f001 f8bf 	bl	801185c <HAL_ADC_ConfigChannel>
 80106de:	4603      	mov	r3, r0
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	d001      	beq.n	80106e8 <MX_ADC1_Init+0x13c>
  {
    Error_Handler();
 80106e4:	f000 fb74 	bl	8010dd0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80106e8:	230a      	movs	r3, #10
 80106ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 80106ec:	2308      	movs	r3, #8
 80106ee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80106f0:	463b      	mov	r3, r7
 80106f2:	4619      	mov	r1, r3
 80106f4:	4828      	ldr	r0, [pc, #160]	; (8010798 <MX_ADC1_Init+0x1ec>)
 80106f6:	f001 f8b1 	bl	801185c <HAL_ADC_ConfigChannel>
 80106fa:	4603      	mov	r3, r0
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d001      	beq.n	8010704 <MX_ADC1_Init+0x158>
  {
    Error_Handler();
 8010700:	f000 fb66 	bl	8010dd0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8010704:	230b      	movs	r3, #11
 8010706:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8010708:	2309      	movs	r3, #9
 801070a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 801070c:	463b      	mov	r3, r7
 801070e:	4619      	mov	r1, r3
 8010710:	4821      	ldr	r0, [pc, #132]	; (8010798 <MX_ADC1_Init+0x1ec>)
 8010712:	f001 f8a3 	bl	801185c <HAL_ADC_ConfigChannel>
 8010716:	4603      	mov	r3, r0
 8010718:	2b00      	cmp	r3, #0
 801071a:	d001      	beq.n	8010720 <MX_ADC1_Init+0x174>
  {
    Error_Handler();
 801071c:	f000 fb58 	bl	8010dd0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8010720:	230c      	movs	r3, #12
 8010722:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8010724:	230a      	movs	r3, #10
 8010726:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8010728:	463b      	mov	r3, r7
 801072a:	4619      	mov	r1, r3
 801072c:	481a      	ldr	r0, [pc, #104]	; (8010798 <MX_ADC1_Init+0x1ec>)
 801072e:	f001 f895 	bl	801185c <HAL_ADC_ConfigChannel>
 8010732:	4603      	mov	r3, r0
 8010734:	2b00      	cmp	r3, #0
 8010736:	d001      	beq.n	801073c <MX_ADC1_Init+0x190>
  {
    Error_Handler();
 8010738:	f000 fb4a 	bl	8010dd0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 801073c:	230d      	movs	r3, #13
 801073e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8010740:	230b      	movs	r3, #11
 8010742:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8010744:	463b      	mov	r3, r7
 8010746:	4619      	mov	r1, r3
 8010748:	4813      	ldr	r0, [pc, #76]	; (8010798 <MX_ADC1_Init+0x1ec>)
 801074a:	f001 f887 	bl	801185c <HAL_ADC_ConfigChannel>
 801074e:	4603      	mov	r3, r0
 8010750:	2b00      	cmp	r3, #0
 8010752:	d001      	beq.n	8010758 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 8010754:	f000 fb3c 	bl	8010dd0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8010758:	230e      	movs	r3, #14
 801075a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 801075c:	230c      	movs	r3, #12
 801075e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8010760:	463b      	mov	r3, r7
 8010762:	4619      	mov	r1, r3
 8010764:	480c      	ldr	r0, [pc, #48]	; (8010798 <MX_ADC1_Init+0x1ec>)
 8010766:	f001 f879 	bl	801185c <HAL_ADC_ConfigChannel>
 801076a:	4603      	mov	r3, r0
 801076c:	2b00      	cmp	r3, #0
 801076e:	d001      	beq.n	8010774 <MX_ADC1_Init+0x1c8>
  {
    Error_Handler();
 8010770:	f000 fb2e 	bl	8010dd0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8010774:	230f      	movs	r3, #15
 8010776:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8010778:	230d      	movs	r3, #13
 801077a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 801077c:	463b      	mov	r3, r7
 801077e:	4619      	mov	r1, r3
 8010780:	4805      	ldr	r0, [pc, #20]	; (8010798 <MX_ADC1_Init+0x1ec>)
 8010782:	f001 f86b 	bl	801185c <HAL_ADC_ConfigChannel>
 8010786:	4603      	mov	r3, r0
 8010788:	2b00      	cmp	r3, #0
 801078a:	d001      	beq.n	8010790 <MX_ADC1_Init+0x1e4>
  {
    Error_Handler();
 801078c:	f000 fb20 	bl	8010dd0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8010790:	bf00      	nop
 8010792:	3710      	adds	r7, #16
 8010794:	46bd      	mov	sp, r7
 8010796:	bd80      	pop	{r7, pc}
 8010798:	20000078 	.word	0x20000078
 801079c:	40012000 	.word	0x40012000
 80107a0:	0f000001 	.word	0x0f000001

080107a4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80107a4:	b580      	push	{r7, lr}
 80107a6:	b08c      	sub	sp, #48	; 0x30
 80107a8:	af00      	add	r7, sp, #0
 80107aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80107ac:	f107 031c 	add.w	r3, r7, #28
 80107b0:	2200      	movs	r2, #0
 80107b2:	601a      	str	r2, [r3, #0]
 80107b4:	605a      	str	r2, [r3, #4]
 80107b6:	609a      	str	r2, [r3, #8]
 80107b8:	60da      	str	r2, [r3, #12]
 80107ba:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	681b      	ldr	r3, [r3, #0]
 80107c0:	4a49      	ldr	r2, [pc, #292]	; (80108e8 <HAL_ADC_MspInit+0x144>)
 80107c2:	4293      	cmp	r3, r2
 80107c4:	f040 808c 	bne.w	80108e0 <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80107c8:	2300      	movs	r3, #0
 80107ca:	61bb      	str	r3, [r7, #24]
 80107cc:	4b47      	ldr	r3, [pc, #284]	; (80108ec <HAL_ADC_MspInit+0x148>)
 80107ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80107d0:	4a46      	ldr	r2, [pc, #280]	; (80108ec <HAL_ADC_MspInit+0x148>)
 80107d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80107d6:	6453      	str	r3, [r2, #68]	; 0x44
 80107d8:	4b44      	ldr	r3, [pc, #272]	; (80108ec <HAL_ADC_MspInit+0x148>)
 80107da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80107dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80107e0:	61bb      	str	r3, [r7, #24]
 80107e2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80107e4:	2300      	movs	r3, #0
 80107e6:	617b      	str	r3, [r7, #20]
 80107e8:	4b40      	ldr	r3, [pc, #256]	; (80108ec <HAL_ADC_MspInit+0x148>)
 80107ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80107ec:	4a3f      	ldr	r2, [pc, #252]	; (80108ec <HAL_ADC_MspInit+0x148>)
 80107ee:	f043 0304 	orr.w	r3, r3, #4
 80107f2:	6313      	str	r3, [r2, #48]	; 0x30
 80107f4:	4b3d      	ldr	r3, [pc, #244]	; (80108ec <HAL_ADC_MspInit+0x148>)
 80107f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80107f8:	f003 0304 	and.w	r3, r3, #4
 80107fc:	617b      	str	r3, [r7, #20]
 80107fe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010800:	2300      	movs	r3, #0
 8010802:	613b      	str	r3, [r7, #16]
 8010804:	4b39      	ldr	r3, [pc, #228]	; (80108ec <HAL_ADC_MspInit+0x148>)
 8010806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010808:	4a38      	ldr	r2, [pc, #224]	; (80108ec <HAL_ADC_MspInit+0x148>)
 801080a:	f043 0301 	orr.w	r3, r3, #1
 801080e:	6313      	str	r3, [r2, #48]	; 0x30
 8010810:	4b36      	ldr	r3, [pc, #216]	; (80108ec <HAL_ADC_MspInit+0x148>)
 8010812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010814:	f003 0301 	and.w	r3, r3, #1
 8010818:	613b      	str	r3, [r7, #16]
 801081a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801081c:	2300      	movs	r3, #0
 801081e:	60fb      	str	r3, [r7, #12]
 8010820:	4b32      	ldr	r3, [pc, #200]	; (80108ec <HAL_ADC_MspInit+0x148>)
 8010822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010824:	4a31      	ldr	r2, [pc, #196]	; (80108ec <HAL_ADC_MspInit+0x148>)
 8010826:	f043 0302 	orr.w	r3, r3, #2
 801082a:	6313      	str	r3, [r2, #48]	; 0x30
 801082c:	4b2f      	ldr	r3, [pc, #188]	; (80108ec <HAL_ADC_MspInit+0x148>)
 801082e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010830:	f003 0302 	and.w	r3, r3, #2
 8010834:	60fb      	str	r3, [r7, #12]
 8010836:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8010838:	233f      	movs	r3, #63	; 0x3f
 801083a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 801083c:	2303      	movs	r3, #3
 801083e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010840:	2300      	movs	r3, #0
 8010842:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8010844:	f107 031c 	add.w	r3, r7, #28
 8010848:	4619      	mov	r1, r3
 801084a:	4829      	ldr	r0, [pc, #164]	; (80108f0 <HAL_ADC_MspInit+0x14c>)
 801084c:	f001 feb2 	bl	80125b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8010850:	23f1      	movs	r3, #241	; 0xf1
 8010852:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8010854:	2303      	movs	r3, #3
 8010856:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010858:	2300      	movs	r3, #0
 801085a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801085c:	f107 031c 	add.w	r3, r7, #28
 8010860:	4619      	mov	r1, r3
 8010862:	4824      	ldr	r0, [pc, #144]	; (80108f4 <HAL_ADC_MspInit+0x150>)
 8010864:	f001 fea6 	bl	80125b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8010868:	2303      	movs	r3, #3
 801086a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 801086c:	2303      	movs	r3, #3
 801086e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010870:	2300      	movs	r3, #0
 8010872:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8010874:	f107 031c 	add.w	r3, r7, #28
 8010878:	4619      	mov	r1, r3
 801087a:	481f      	ldr	r0, [pc, #124]	; (80108f8 <HAL_ADC_MspInit+0x154>)
 801087c:	f001 fe9a 	bl	80125b4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8010880:	4b1e      	ldr	r3, [pc, #120]	; (80108fc <HAL_ADC_MspInit+0x158>)
 8010882:	4a1f      	ldr	r2, [pc, #124]	; (8010900 <HAL_ADC_MspInit+0x15c>)
 8010884:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8010886:	4b1d      	ldr	r3, [pc, #116]	; (80108fc <HAL_ADC_MspInit+0x158>)
 8010888:	2200      	movs	r2, #0
 801088a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 801088c:	4b1b      	ldr	r3, [pc, #108]	; (80108fc <HAL_ADC_MspInit+0x158>)
 801088e:	2200      	movs	r2, #0
 8010890:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8010892:	4b1a      	ldr	r3, [pc, #104]	; (80108fc <HAL_ADC_MspInit+0x158>)
 8010894:	2200      	movs	r2, #0
 8010896:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8010898:	4b18      	ldr	r3, [pc, #96]	; (80108fc <HAL_ADC_MspInit+0x158>)
 801089a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801089e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80108a0:	4b16      	ldr	r3, [pc, #88]	; (80108fc <HAL_ADC_MspInit+0x158>)
 80108a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80108a6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80108a8:	4b14      	ldr	r3, [pc, #80]	; (80108fc <HAL_ADC_MspInit+0x158>)
 80108aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80108ae:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80108b0:	4b12      	ldr	r3, [pc, #72]	; (80108fc <HAL_ADC_MspInit+0x158>)
 80108b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80108b6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80108b8:	4b10      	ldr	r3, [pc, #64]	; (80108fc <HAL_ADC_MspInit+0x158>)
 80108ba:	2200      	movs	r2, #0
 80108bc:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80108be:	4b0f      	ldr	r3, [pc, #60]	; (80108fc <HAL_ADC_MspInit+0x158>)
 80108c0:	2200      	movs	r2, #0
 80108c2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80108c4:	480d      	ldr	r0, [pc, #52]	; (80108fc <HAL_ADC_MspInit+0x158>)
 80108c6:	f001 faf9 	bl	8011ebc <HAL_DMA_Init>
 80108ca:	4603      	mov	r3, r0
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	d001      	beq.n	80108d4 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 80108d0:	f000 fa7e 	bl	8010dd0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	4a09      	ldr	r2, [pc, #36]	; (80108fc <HAL_ADC_MspInit+0x158>)
 80108d8:	639a      	str	r2, [r3, #56]	; 0x38
 80108da:	4a08      	ldr	r2, [pc, #32]	; (80108fc <HAL_ADC_MspInit+0x158>)
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80108e0:	bf00      	nop
 80108e2:	3730      	adds	r7, #48	; 0x30
 80108e4:	46bd      	mov	sp, r7
 80108e6:	bd80      	pop	{r7, pc}
 80108e8:	40012000 	.word	0x40012000
 80108ec:	40023800 	.word	0x40023800
 80108f0:	40020800 	.word	0x40020800
 80108f4:	40020000 	.word	0x40020000
 80108f8:	40020400 	.word	0x40020400
 80108fc:	200000c0 	.word	0x200000c0
 8010900:	40026410 	.word	0x40026410

08010904 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8010904:	b580      	push	{r7, lr}
 8010906:	b082      	sub	sp, #8
 8010908:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 801090a:	2300      	movs	r3, #0
 801090c:	607b      	str	r3, [r7, #4]
 801090e:	4b0c      	ldr	r3, [pc, #48]	; (8010940 <MX_DMA_Init+0x3c>)
 8010910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010912:	4a0b      	ldr	r2, [pc, #44]	; (8010940 <MX_DMA_Init+0x3c>)
 8010914:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8010918:	6313      	str	r3, [r2, #48]	; 0x30
 801091a:	4b09      	ldr	r3, [pc, #36]	; (8010940 <MX_DMA_Init+0x3c>)
 801091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801091e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010922:	607b      	str	r3, [r7, #4]
 8010924:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8010926:	2200      	movs	r2, #0
 8010928:	2100      	movs	r1, #0
 801092a:	2038      	movs	r0, #56	; 0x38
 801092c:	f001 fa8f 	bl	8011e4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8010930:	2038      	movs	r0, #56	; 0x38
 8010932:	f001 faa8 	bl	8011e86 <HAL_NVIC_EnableIRQ>

}
 8010936:	bf00      	nop
 8010938:	3708      	adds	r7, #8
 801093a:	46bd      	mov	sp, r7
 801093c:	bd80      	pop	{r7, pc}
 801093e:	bf00      	nop
 8010940:	40023800 	.word	0x40023800

08010944 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8010944:	b580      	push	{r7, lr}
 8010946:	b08a      	sub	sp, #40	; 0x28
 8010948:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801094a:	f107 0314 	add.w	r3, r7, #20
 801094e:	2200      	movs	r2, #0
 8010950:	601a      	str	r2, [r3, #0]
 8010952:	605a      	str	r2, [r3, #4]
 8010954:	609a      	str	r2, [r3, #8]
 8010956:	60da      	str	r2, [r3, #12]
 8010958:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 801095a:	2300      	movs	r3, #0
 801095c:	613b      	str	r3, [r7, #16]
 801095e:	4b54      	ldr	r3, [pc, #336]	; (8010ab0 <MX_GPIO_Init+0x16c>)
 8010960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010962:	4a53      	ldr	r2, [pc, #332]	; (8010ab0 <MX_GPIO_Init+0x16c>)
 8010964:	f043 0304 	orr.w	r3, r3, #4
 8010968:	6313      	str	r3, [r2, #48]	; 0x30
 801096a:	4b51      	ldr	r3, [pc, #324]	; (8010ab0 <MX_GPIO_Init+0x16c>)
 801096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801096e:	f003 0304 	and.w	r3, r3, #4
 8010972:	613b      	str	r3, [r7, #16]
 8010974:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8010976:	2300      	movs	r3, #0
 8010978:	60fb      	str	r3, [r7, #12]
 801097a:	4b4d      	ldr	r3, [pc, #308]	; (8010ab0 <MX_GPIO_Init+0x16c>)
 801097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801097e:	4a4c      	ldr	r2, [pc, #304]	; (8010ab0 <MX_GPIO_Init+0x16c>)
 8010980:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010984:	6313      	str	r3, [r2, #48]	; 0x30
 8010986:	4b4a      	ldr	r3, [pc, #296]	; (8010ab0 <MX_GPIO_Init+0x16c>)
 8010988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801098a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801098e:	60fb      	str	r3, [r7, #12]
 8010990:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8010992:	2300      	movs	r3, #0
 8010994:	60bb      	str	r3, [r7, #8]
 8010996:	4b46      	ldr	r3, [pc, #280]	; (8010ab0 <MX_GPIO_Init+0x16c>)
 8010998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801099a:	4a45      	ldr	r2, [pc, #276]	; (8010ab0 <MX_GPIO_Init+0x16c>)
 801099c:	f043 0301 	orr.w	r3, r3, #1
 80109a0:	6313      	str	r3, [r2, #48]	; 0x30
 80109a2:	4b43      	ldr	r3, [pc, #268]	; (8010ab0 <MX_GPIO_Init+0x16c>)
 80109a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80109a6:	f003 0301 	and.w	r3, r3, #1
 80109aa:	60bb      	str	r3, [r7, #8]
 80109ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80109ae:	2300      	movs	r3, #0
 80109b0:	607b      	str	r3, [r7, #4]
 80109b2:	4b3f      	ldr	r3, [pc, #252]	; (8010ab0 <MX_GPIO_Init+0x16c>)
 80109b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80109b6:	4a3e      	ldr	r2, [pc, #248]	; (8010ab0 <MX_GPIO_Init+0x16c>)
 80109b8:	f043 0302 	orr.w	r3, r3, #2
 80109bc:	6313      	str	r3, [r2, #48]	; 0x30
 80109be:	4b3c      	ldr	r3, [pc, #240]	; (8010ab0 <MX_GPIO_Init+0x16c>)
 80109c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80109c2:	f003 0302 	and.w	r3, r3, #2
 80109c6:	607b      	str	r3, [r7, #4]
 80109c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, STATUS_LED_Pin|PWR_LED_Pin|DO5_Pin, GPIO_PIN_RESET);
 80109ca:	2200      	movs	r2, #0
 80109cc:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80109d0:	4838      	ldr	r0, [pc, #224]	; (8010ab4 <MX_GPIO_Init+0x170>)
 80109d2:	f001 ff73 	bl	80128bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DO1_Pin|DO2_Pin|DO3_Pin|DO4_Pin
 80109d6:	2200      	movs	r2, #0
 80109d8:	f24f 5124 	movw	r1, #62756	; 0xf524
 80109dc:	4836      	ldr	r0, [pc, #216]	; (8010ab8 <MX_GPIO_Init+0x174>)
 80109de:	f001 ff6d 	bl	80128bc <HAL_GPIO_WritePin>
                          |GSM_PWR_Pin|GSM_RST_Pin|EE_WP_Pin|GSM_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TX_EN_GPIO_Port, TX_EN_Pin, GPIO_PIN_RESET);
 80109e2:	2200      	movs	r2, #0
 80109e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80109e8:	4834      	ldr	r0, [pc, #208]	; (8010abc <MX_GPIO_Init+0x178>)
 80109ea:	f001 ff67 	bl	80128bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = STATUS_LED_Pin|PWR_LED_Pin|DO5_Pin;
 80109ee:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80109f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80109f4:	2301      	movs	r3, #1
 80109f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80109f8:	2300      	movs	r3, #0
 80109fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80109fc:	2300      	movs	r3, #0
 80109fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8010a00:	f107 0314 	add.w	r3, r7, #20
 8010a04:	4619      	mov	r1, r3
 8010a06:	482b      	ldr	r0, [pc, #172]	; (8010ab4 <MX_GPIO_Init+0x170>)
 8010a08:	f001 fdd4 	bl	80125b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = UDO2_Pin|DI1_Pin|DI2_Pin;
 8010a0c:	f641 0302 	movw	r3, #6146	; 0x1802
 8010a10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8010a12:	2300      	movs	r3, #0
 8010a14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010a16:	2300      	movs	r3, #0
 8010a18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010a1a:	f107 0314 	add.w	r3, r7, #20
 8010a1e:	4619      	mov	r1, r3
 8010a20:	4826      	ldr	r0, [pc, #152]	; (8010abc <MX_GPIO_Init+0x178>)
 8010a22:	f001 fdc7 	bl	80125b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DO1_Pin|DO2_Pin|DO3_Pin|DO4_Pin
 8010a26:	f24f 5324 	movw	r3, #62756	; 0xf524
 8010a2a:	617b      	str	r3, [r7, #20]
                          |GSM_PWR_Pin|GSM_RST_Pin|EE_WP_Pin|GSM_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8010a2c:	2301      	movs	r3, #1
 8010a2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010a30:	2300      	movs	r3, #0
 8010a32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010a34:	2300      	movs	r3, #0
 8010a36:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8010a38:	f107 0314 	add.w	r3, r7, #20
 8010a3c:	4619      	mov	r1, r3
 8010a3e:	481e      	ldr	r0, [pc, #120]	; (8010ab8 <MX_GPIO_Init+0x174>)
 8010a40:	f001 fdb8 	bl	80125b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TX_EN_Pin;
 8010a44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010a48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8010a4a:	2301      	movs	r3, #1
 8010a4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010a4e:	2300      	movs	r3, #0
 8010a50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010a52:	2300      	movs	r3, #0
 8010a54:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TX_EN_GPIO_Port, &GPIO_InitStruct);
 8010a56:	f107 0314 	add.w	r3, r7, #20
 8010a5a:	4619      	mov	r1, r3
 8010a5c:	4817      	ldr	r0, [pc, #92]	; (8010abc <MX_GPIO_Init+0x178>)
 8010a5e:	f001 fda9 	bl	80125b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DI5_Pin;
 8010a62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010a66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8010a68:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8010a6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8010a6e:	2301      	movs	r3, #1
 8010a70:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DI5_GPIO_Port, &GPIO_InitStruct);
 8010a72:	f107 0314 	add.w	r3, r7, #20
 8010a76:	4619      	mov	r1, r3
 8010a78:	4810      	ldr	r0, [pc, #64]	; (8010abc <MX_GPIO_Init+0x178>)
 8010a7a:	f001 fd9b 	bl	80125b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = DI3_Pin|DI4_Pin;
 8010a7e:	2318      	movs	r3, #24
 8010a80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8010a82:	2300      	movs	r3, #0
 8010a84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010a86:	2300      	movs	r3, #0
 8010a88:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8010a8a:	f107 0314 	add.w	r3, r7, #20
 8010a8e:	4619      	mov	r1, r3
 8010a90:	4809      	ldr	r0, [pc, #36]	; (8010ab8 <MX_GPIO_Init+0x174>)
 8010a92:	f001 fd8f 	bl	80125b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8010a96:	2200      	movs	r2, #0
 8010a98:	2100      	movs	r1, #0
 8010a9a:	2028      	movs	r0, #40	; 0x28
 8010a9c:	f001 f9d7 	bl	8011e4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8010aa0:	2028      	movs	r0, #40	; 0x28
 8010aa2:	f001 f9f0 	bl	8011e86 <HAL_NVIC_EnableIRQ>

}
 8010aa6:	bf00      	nop
 8010aa8:	3728      	adds	r7, #40	; 0x28
 8010aaa:	46bd      	mov	sp, r7
 8010aac:	bd80      	pop	{r7, pc}
 8010aae:	bf00      	nop
 8010ab0:	40023800 	.word	0x40023800
 8010ab4:	40020800 	.word	0x40020800
 8010ab8:	40020400 	.word	0x40020400
 8010abc:	40020000 	.word	0x40020000

08010ac0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8010ac0:	b580      	push	{r7, lr}
 8010ac2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8010ac4:	4b12      	ldr	r3, [pc, #72]	; (8010b10 <MX_I2C1_Init+0x50>)
 8010ac6:	4a13      	ldr	r2, [pc, #76]	; (8010b14 <MX_I2C1_Init+0x54>)
 8010ac8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8010aca:	4b11      	ldr	r3, [pc, #68]	; (8010b10 <MX_I2C1_Init+0x50>)
 8010acc:	4a12      	ldr	r2, [pc, #72]	; (8010b18 <MX_I2C1_Init+0x58>)
 8010ace:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8010ad0:	4b0f      	ldr	r3, [pc, #60]	; (8010b10 <MX_I2C1_Init+0x50>)
 8010ad2:	2200      	movs	r2, #0
 8010ad4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8010ad6:	4b0e      	ldr	r3, [pc, #56]	; (8010b10 <MX_I2C1_Init+0x50>)
 8010ad8:	2200      	movs	r2, #0
 8010ada:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8010adc:	4b0c      	ldr	r3, [pc, #48]	; (8010b10 <MX_I2C1_Init+0x50>)
 8010ade:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8010ae2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8010ae4:	4b0a      	ldr	r3, [pc, #40]	; (8010b10 <MX_I2C1_Init+0x50>)
 8010ae6:	2200      	movs	r2, #0
 8010ae8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8010aea:	4b09      	ldr	r3, [pc, #36]	; (8010b10 <MX_I2C1_Init+0x50>)
 8010aec:	2200      	movs	r2, #0
 8010aee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8010af0:	4b07      	ldr	r3, [pc, #28]	; (8010b10 <MX_I2C1_Init+0x50>)
 8010af2:	2200      	movs	r2, #0
 8010af4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8010af6:	4b06      	ldr	r3, [pc, #24]	; (8010b10 <MX_I2C1_Init+0x50>)
 8010af8:	2200      	movs	r2, #0
 8010afa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8010afc:	4804      	ldr	r0, [pc, #16]	; (8010b10 <MX_I2C1_Init+0x50>)
 8010afe:	f001 ff35 	bl	801296c <HAL_I2C_Init>
 8010b02:	4603      	mov	r3, r0
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d001      	beq.n	8010b0c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8010b08:	f000 f962 	bl	8010dd0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8010b0c:	bf00      	nop
 8010b0e:	bd80      	pop	{r7, pc}
 8010b10:	20000120 	.word	0x20000120
 8010b14:	40005400 	.word	0x40005400
 8010b18:	00061a80 	.word	0x00061a80

08010b1c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8010b1c:	b580      	push	{r7, lr}
 8010b1e:	b08a      	sub	sp, #40	; 0x28
 8010b20:	af00      	add	r7, sp, #0
 8010b22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010b24:	f107 0314 	add.w	r3, r7, #20
 8010b28:	2200      	movs	r2, #0
 8010b2a:	601a      	str	r2, [r3, #0]
 8010b2c:	605a      	str	r2, [r3, #4]
 8010b2e:	609a      	str	r2, [r3, #8]
 8010b30:	60da      	str	r2, [r3, #12]
 8010b32:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	681b      	ldr	r3, [r3, #0]
 8010b38:	4a19      	ldr	r2, [pc, #100]	; (8010ba0 <HAL_I2C_MspInit+0x84>)
 8010b3a:	4293      	cmp	r3, r2
 8010b3c:	d12b      	bne.n	8010b96 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8010b3e:	2300      	movs	r3, #0
 8010b40:	613b      	str	r3, [r7, #16]
 8010b42:	4b18      	ldr	r3, [pc, #96]	; (8010ba4 <HAL_I2C_MspInit+0x88>)
 8010b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010b46:	4a17      	ldr	r2, [pc, #92]	; (8010ba4 <HAL_I2C_MspInit+0x88>)
 8010b48:	f043 0302 	orr.w	r3, r3, #2
 8010b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8010b4e:	4b15      	ldr	r3, [pc, #84]	; (8010ba4 <HAL_I2C_MspInit+0x88>)
 8010b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010b52:	f003 0302 	and.w	r3, r3, #2
 8010b56:	613b      	str	r3, [r7, #16]
 8010b58:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8010b5a:	23c0      	movs	r3, #192	; 0xc0
 8010b5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8010b5e:	2312      	movs	r3, #18
 8010b60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010b62:	2300      	movs	r3, #0
 8010b64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010b66:	2303      	movs	r3, #3
 8010b68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8010b6a:	2304      	movs	r3, #4
 8010b6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8010b6e:	f107 0314 	add.w	r3, r7, #20
 8010b72:	4619      	mov	r1, r3
 8010b74:	480c      	ldr	r0, [pc, #48]	; (8010ba8 <HAL_I2C_MspInit+0x8c>)
 8010b76:	f001 fd1d 	bl	80125b4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8010b7a:	2300      	movs	r3, #0
 8010b7c:	60fb      	str	r3, [r7, #12]
 8010b7e:	4b09      	ldr	r3, [pc, #36]	; (8010ba4 <HAL_I2C_MspInit+0x88>)
 8010b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b82:	4a08      	ldr	r2, [pc, #32]	; (8010ba4 <HAL_I2C_MspInit+0x88>)
 8010b84:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8010b88:	6413      	str	r3, [r2, #64]	; 0x40
 8010b8a:	4b06      	ldr	r3, [pc, #24]	; (8010ba4 <HAL_I2C_MspInit+0x88>)
 8010b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010b92:	60fb      	str	r3, [r7, #12]
 8010b94:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8010b96:	bf00      	nop
 8010b98:	3728      	adds	r7, #40	; 0x28
 8010b9a:	46bd      	mov	sp, r7
 8010b9c:	bd80      	pop	{r7, pc}
 8010b9e:	bf00      	nop
 8010ba0:	40005400 	.word	0x40005400
 8010ba4:	40023800 	.word	0x40023800
 8010ba8:	40020400 	.word	0x40020400

08010bac <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8010bac:	b580      	push	{r7, lr}
 8010bae:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8010bb0:	4b09      	ldr	r3, [pc, #36]	; (8010bd8 <MX_IWDG_Init+0x2c>)
 8010bb2:	4a0a      	ldr	r2, [pc, #40]	; (8010bdc <MX_IWDG_Init+0x30>)
 8010bb4:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 8010bb6:	4b08      	ldr	r3, [pc, #32]	; (8010bd8 <MX_IWDG_Init+0x2c>)
 8010bb8:	2204      	movs	r2, #4
 8010bba:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 2500;
 8010bbc:	4b06      	ldr	r3, [pc, #24]	; (8010bd8 <MX_IWDG_Init+0x2c>)
 8010bbe:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8010bc2:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8010bc4:	4804      	ldr	r0, [pc, #16]	; (8010bd8 <MX_IWDG_Init+0x2c>)
 8010bc6:	f003 f823 	bl	8013c10 <HAL_IWDG_Init>
 8010bca:	4603      	mov	r3, r0
 8010bcc:	2b00      	cmp	r3, #0
 8010bce:	d001      	beq.n	8010bd4 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8010bd0:	f000 f8fe 	bl	8010dd0 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8010bd4:	bf00      	nop
 8010bd6:	bd80      	pop	{r7, pc}
 8010bd8:	20000174 	.word	0x20000174
 8010bdc:	40003000 	.word	0x40003000

08010be0 <print>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void print(const char *fmt, ...) {
 8010be0:	b40f      	push	{r0, r1, r2, r3}
 8010be2:	b580      	push	{r7, lr}
 8010be4:	b082      	sub	sp, #8
 8010be6:	af00      	add	r7, sp, #0
	static char buffer[256];
	va_list args;
	va_start(args, fmt);
 8010be8:	f107 0314 	add.w	r3, r7, #20
 8010bec:	603b      	str	r3, [r7, #0]
	vsnprintf(buffer, sizeof(buffer), fmt, args);
 8010bee:	683b      	ldr	r3, [r7, #0]
 8010bf0:	693a      	ldr	r2, [r7, #16]
 8010bf2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8010bf6:	480b      	ldr	r0, [pc, #44]	; (8010c24 <print+0x44>)
 8010bf8:	f008 fc74 	bl	80194e4 <vsniprintf>
	va_end(args);

	uint16_t len = strlen(buffer);
 8010bfc:	4809      	ldr	r0, [pc, #36]	; (8010c24 <print+0x44>)
 8010bfe:	f7ff faf9 	bl	80101f4 <strlen>
 8010c02:	4603      	mov	r3, r0
 8010c04:	80fb      	strh	r3, [r7, #6]
	HAL_UART_Transmit(&huart2, buffer, len, 500);
 8010c06:	88fa      	ldrh	r2, [r7, #6]
 8010c08:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8010c0c:	4905      	ldr	r1, [pc, #20]	; (8010c24 <print+0x44>)
 8010c0e:	4806      	ldr	r0, [pc, #24]	; (8010c28 <print+0x48>)
 8010c10:	f004 fef6 	bl	8015a00 <HAL_UART_Transmit>
}
 8010c14:	bf00      	nop
 8010c16:	3708      	adds	r7, #8
 8010c18:	46bd      	mov	sp, r7
 8010c1a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010c1e:	b004      	add	sp, #16
 8010c20:	4770      	bx	lr
 8010c22:	bf00      	nop
 8010c24:	20000378 	.word	0x20000378
 8010c28:	200005bc 	.word	0x200005bc

08010c2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8010c2c:	b580      	push	{r7, lr}
 8010c2e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8010c30:	f000 fd3a 	bl	80116a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8010c34:	f000 f860 	bl	8010cf8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8010c38:	f7ff fe84 	bl	8010944 <MX_GPIO_Init>
  MX_DMA_Init();
 8010c3c:	f7ff fe62 	bl	8010904 <MX_DMA_Init>
  MX_ADC1_Init();
 8010c40:	f7ff fcb4 	bl	80105ac <MX_ADC1_Init>
  MX_I2C1_Init();
 8010c44:	f7ff ff3c 	bl	8010ac0 <MX_I2C1_Init>
  MX_TIM11_Init();
 8010c48:	f000 fade 	bl	8011208 <MX_TIM11_Init>
  MX_USART2_UART_Init();
 8010c4c:	f000 fbf4 	bl	8011438 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8010c50:	f000 fbc8 	bl	80113e4 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8010c54:	f000 fc1a 	bl	801148c <MX_USART6_UART_Init>
  MX_TIM10_Init();
 8010c58:	f000 fa8c 	bl	8011174 <MX_TIM10_Init>
  MX_IWDG_Init();
 8010c5c:	f7ff ffa6 	bl	8010bac <MX_IWDG_Init>
  MX_TIM9_Init();
 8010c60:	f000 fa44 	bl	80110ec <MX_TIM9_Init>
  MX_RTC_Init();
 8010c64:	f000 f8ba 	bl	8010ddc <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  __HAL_DBGMCU_FREEZE_IWDG();
 8010c68:	4b1b      	ldr	r3, [pc, #108]	; (8010cd8 <main+0xac>)
 8010c6a:	689b      	ldr	r3, [r3, #8]
 8010c6c:	4a1a      	ldr	r2, [pc, #104]	; (8010cd8 <main+0xac>)
 8010c6e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8010c72:	6093      	str	r3, [r2, #8]
  print("Working Project 2\r\n");
 8010c74:	4819      	ldr	r0, [pc, #100]	; (8010cdc <main+0xb0>)
 8010c76:	f7ff ffb3 	bl	8010be0 <print>
  HAL_GPIO_WritePin(PWR_LED_GPIO_Port, PWR_LED_Pin, SET);
 8010c7a:	2201      	movs	r2, #1
 8010c7c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8010c80:	4817      	ldr	r0, [pc, #92]	; (8010ce0 <main+0xb4>)
 8010c82:	f001 fe1b 	bl	80128bc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin, SET);
 8010c86:	2201      	movs	r2, #1
 8010c88:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8010c8c:	4814      	ldr	r0, [pc, #80]	; (8010ce0 <main+0xb4>)
 8010c8e:	f001 fe15 	bl	80128bc <HAL_GPIO_WritePin>
  ee_setBLFileName("Project1.bin", 12);
  ee_setBLUpdateStatus(1);
#endif

	if (AT_CMD_EN) {
		UART_AT_IT_EN();
 8010c92:	f007 fe2f 	bl	80188f4 <UART_AT_IT_EN>
	}
  configIOTParameters(&iot);
 8010c96:	4813      	ldr	r0, [pc, #76]	; (8010ce4 <main+0xb8>)
 8010c98:	f008 fa0c 	bl	80190b4 <configIOTParameters>
  configRECDConstantPointSets(&recdcp);
 8010c9c:	4812      	ldr	r0, [pc, #72]	; (8010ce8 <main+0xbc>)
 8010c9e:	f008 fb15 	bl	80192cc <configRECDConstantPointSets>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		if (IOT_AT_REC_FLAG) {
 8010ca2:	4b12      	ldr	r3, [pc, #72]	; (8010cec <main+0xc0>)
 8010ca4:	781b      	ldrb	r3, [r3, #0]
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	d004      	beq.n	8010cb4 <main+0x88>
			iotATHandler(&IOT_AT_DATA, &iot, &recdcp);
 8010caa:	4a0f      	ldr	r2, [pc, #60]	; (8010ce8 <main+0xbc>)
 8010cac:	490d      	ldr	r1, [pc, #52]	; (8010ce4 <main+0xb8>)
 8010cae:	4810      	ldr	r0, [pc, #64]	; (8010cf0 <main+0xc4>)
 8010cb0:	f007 fb6e 	bl	8018390 <iotATHandler>
		}
		HAL_GPIO_TogglePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin);
 8010cb4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8010cb8:	4809      	ldr	r0, [pc, #36]	; (8010ce0 <main+0xb4>)
 8010cba:	f001 fe18 	bl	80128ee <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(PWR_LED_GPIO_Port, PWR_LED_Pin);
 8010cbe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8010cc2:	4807      	ldr	r0, [pc, #28]	; (8010ce0 <main+0xb4>)
 8010cc4:	f001 fe13 	bl	80128ee <HAL_GPIO_TogglePin>
		HAL_IWDG_Refresh(&hiwdg);
 8010cc8:	480a      	ldr	r0, [pc, #40]	; (8010cf4 <main+0xc8>)
 8010cca:	f002 ffe3 	bl	8013c94 <HAL_IWDG_Refresh>
		HAL_Delay(500);
 8010cce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8010cd2:	f000 fd5b 	bl	801178c <HAL_Delay>
		if (IOT_AT_REC_FLAG) {
 8010cd6:	e7e4      	b.n	8010ca2 <main+0x76>
 8010cd8:	e0042000 	.word	0xe0042000
 8010cdc:	0801a784 	.word	0x0801a784
 8010ce0:	40020800 	.word	0x40020800
 8010ce4:	20000180 	.word	0x20000180
 8010ce8:	20000368 	.word	0x20000368
 8010cec:	200007b6 	.word	0x200007b6
 8010cf0:	20000654 	.word	0x20000654
 8010cf4:	20000174 	.word	0x20000174

08010cf8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8010cf8:	b580      	push	{r7, lr}
 8010cfa:	b094      	sub	sp, #80	; 0x50
 8010cfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8010cfe:	f107 0320 	add.w	r3, r7, #32
 8010d02:	2230      	movs	r2, #48	; 0x30
 8010d04:	2100      	movs	r1, #0
 8010d06:	4618      	mov	r0, r3
 8010d08:	f008 fbfa 	bl	8019500 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8010d0c:	f107 030c 	add.w	r3, r7, #12
 8010d10:	2200      	movs	r2, #0
 8010d12:	601a      	str	r2, [r3, #0]
 8010d14:	605a      	str	r2, [r3, #4]
 8010d16:	609a      	str	r2, [r3, #8]
 8010d18:	60da      	str	r2, [r3, #12]
 8010d1a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8010d1c:	2300      	movs	r3, #0
 8010d1e:	60bb      	str	r3, [r7, #8]
 8010d20:	4b29      	ldr	r3, [pc, #164]	; (8010dc8 <SystemClock_Config+0xd0>)
 8010d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d24:	4a28      	ldr	r2, [pc, #160]	; (8010dc8 <SystemClock_Config+0xd0>)
 8010d26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010d2a:	6413      	str	r3, [r2, #64]	; 0x40
 8010d2c:	4b26      	ldr	r3, [pc, #152]	; (8010dc8 <SystemClock_Config+0xd0>)
 8010d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010d34:	60bb      	str	r3, [r7, #8]
 8010d36:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8010d38:	2300      	movs	r3, #0
 8010d3a:	607b      	str	r3, [r7, #4]
 8010d3c:	4b23      	ldr	r3, [pc, #140]	; (8010dcc <SystemClock_Config+0xd4>)
 8010d3e:	681b      	ldr	r3, [r3, #0]
 8010d40:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8010d44:	4a21      	ldr	r2, [pc, #132]	; (8010dcc <SystemClock_Config+0xd4>)
 8010d46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010d4a:	6013      	str	r3, [r2, #0]
 8010d4c:	4b1f      	ldr	r3, [pc, #124]	; (8010dcc <SystemClock_Config+0xd4>)
 8010d4e:	681b      	ldr	r3, [r3, #0]
 8010d50:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8010d54:	607b      	str	r3, [r7, #4]
 8010d56:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8010d58:	2309      	movs	r3, #9
 8010d5a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8010d5c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8010d60:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8010d62:	2301      	movs	r3, #1
 8010d64:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8010d66:	2302      	movs	r3, #2
 8010d68:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8010d6a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8010d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8010d70:	2304      	movs	r3, #4
 8010d72:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8010d74:	2354      	movs	r3, #84	; 0x54
 8010d76:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8010d78:	2302      	movs	r3, #2
 8010d7a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8010d7c:	2304      	movs	r3, #4
 8010d7e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8010d80:	f107 0320 	add.w	r3, r7, #32
 8010d84:	4618      	mov	r0, r3
 8010d86:	f002 ff95 	bl	8013cb4 <HAL_RCC_OscConfig>
 8010d8a:	4603      	mov	r3, r0
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	d001      	beq.n	8010d94 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8010d90:	f000 f81e 	bl	8010dd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8010d94:	230f      	movs	r3, #15
 8010d96:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8010d98:	2302      	movs	r3, #2
 8010d9a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8010d9c:	2300      	movs	r3, #0
 8010d9e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8010da0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010da4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8010da6:	2300      	movs	r3, #0
 8010da8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8010daa:	f107 030c 	add.w	r3, r7, #12
 8010dae:	2102      	movs	r1, #2
 8010db0:	4618      	mov	r0, r3
 8010db2:	f003 f9f7 	bl	80141a4 <HAL_RCC_ClockConfig>
 8010db6:	4603      	mov	r3, r0
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	d001      	beq.n	8010dc0 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8010dbc:	f000 f808 	bl	8010dd0 <Error_Handler>
  }
}
 8010dc0:	bf00      	nop
 8010dc2:	3750      	adds	r7, #80	; 0x50
 8010dc4:	46bd      	mov	sp, r7
 8010dc6:	bd80      	pop	{r7, pc}
 8010dc8:	40023800 	.word	0x40023800
 8010dcc:	40007000 	.word	0x40007000

08010dd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8010dd0:	b480      	push	{r7}
 8010dd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8010dd4:	b672      	cpsid	i
}
 8010dd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8010dd8:	e7fe      	b.n	8010dd8 <Error_Handler+0x8>
	...

08010ddc <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8010ddc:	b580      	push	{r7, lr}
 8010dde:	b090      	sub	sp, #64	; 0x40
 8010de0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8010de2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010de6:	2200      	movs	r2, #0
 8010de8:	601a      	str	r2, [r3, #0]
 8010dea:	605a      	str	r2, [r3, #4]
 8010dec:	609a      	str	r2, [r3, #8]
 8010dee:	60da      	str	r2, [r3, #12]
 8010df0:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8010df2:	2300      	movs	r3, #0
 8010df4:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8010df6:	463b      	mov	r3, r7
 8010df8:	2228      	movs	r2, #40	; 0x28
 8010dfa:	2100      	movs	r1, #0
 8010dfc:	4618      	mov	r0, r3
 8010dfe:	f008 fb7f 	bl	8019500 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8010e02:	4b3a      	ldr	r3, [pc, #232]	; (8010eec <MX_RTC_Init+0x110>)
 8010e04:	4a3a      	ldr	r2, [pc, #232]	; (8010ef0 <MX_RTC_Init+0x114>)
 8010e06:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8010e08:	4b38      	ldr	r3, [pc, #224]	; (8010eec <MX_RTC_Init+0x110>)
 8010e0a:	2200      	movs	r2, #0
 8010e0c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8010e0e:	4b37      	ldr	r3, [pc, #220]	; (8010eec <MX_RTC_Init+0x110>)
 8010e10:	227f      	movs	r2, #127	; 0x7f
 8010e12:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8010e14:	4b35      	ldr	r3, [pc, #212]	; (8010eec <MX_RTC_Init+0x110>)
 8010e16:	22ff      	movs	r2, #255	; 0xff
 8010e18:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8010e1a:	4b34      	ldr	r3, [pc, #208]	; (8010eec <MX_RTC_Init+0x110>)
 8010e1c:	2200      	movs	r2, #0
 8010e1e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8010e20:	4b32      	ldr	r3, [pc, #200]	; (8010eec <MX_RTC_Init+0x110>)
 8010e22:	2200      	movs	r2, #0
 8010e24:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8010e26:	4b31      	ldr	r3, [pc, #196]	; (8010eec <MX_RTC_Init+0x110>)
 8010e28:	2200      	movs	r2, #0
 8010e2a:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8010e2c:	482f      	ldr	r0, [pc, #188]	; (8010eec <MX_RTC_Init+0x110>)
 8010e2e:	f003 fcc7 	bl	80147c0 <HAL_RTC_Init>
 8010e32:	4603      	mov	r3, r0
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	d001      	beq.n	8010e3c <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8010e38:	f7ff ffca 	bl	8010dd0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8010e3c:	2300      	movs	r3, #0
 8010e3e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0;
 8010e42:	2300      	movs	r3, #0
 8010e44:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0;
 8010e48:	2300      	movs	r3, #0
 8010e4a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8010e4e:	2300      	movs	r3, #0
 8010e50:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8010e52:	2300      	movs	r3, #0
 8010e54:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8010e56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010e5a:	2200      	movs	r2, #0
 8010e5c:	4619      	mov	r1, r3
 8010e5e:	4823      	ldr	r0, [pc, #140]	; (8010eec <MX_RTC_Init+0x110>)
 8010e60:	f003 fd31 	bl	80148c6 <HAL_RTC_SetTime>
 8010e64:	4603      	mov	r3, r0
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	d001      	beq.n	8010e6e <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8010e6a:	f7ff ffb1 	bl	8010dd0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8010e6e:	2301      	movs	r3, #1
 8010e70:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8010e74:	2301      	movs	r3, #1
 8010e76:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 1;
 8010e7a:	2301      	movs	r3, #1
 8010e7c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0;
 8010e80:	2300      	movs	r3, #0
 8010e82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8010e86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010e8a:	2200      	movs	r2, #0
 8010e8c:	4619      	mov	r1, r3
 8010e8e:	4817      	ldr	r0, [pc, #92]	; (8010eec <MX_RTC_Init+0x110>)
 8010e90:	f003 fdb3 	bl	80149fa <HAL_RTC_SetDate>
 8010e94:	4603      	mov	r3, r0
 8010e96:	2b00      	cmp	r3, #0
 8010e98:	d001      	beq.n	8010e9e <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8010e9a:	f7ff ff99 	bl	8010dd0 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 8010e9e:	2300      	movs	r3, #0
 8010ea0:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0;
 8010ea2:	2300      	movs	r3, #0
 8010ea4:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0;
 8010ea6:	2300      	movs	r3, #0
 8010ea8:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 8010eaa:	2300      	movs	r3, #0
 8010eac:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8010eae:	2300      	movs	r3, #0
 8010eb0:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8010eb2:	2300      	movs	r3, #0
 8010eb4:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 8010eb6:	4b0f      	ldr	r3, [pc, #60]	; (8010ef4 <MX_RTC_Init+0x118>)
 8010eb8:	617b      	str	r3, [r7, #20]
                              |RTC_ALARMMASK_SECONDS;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8010eba:	2300      	movs	r3, #0
 8010ebc:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8010ebe:	2300      	movs	r3, #0
 8010ec0:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 1;
 8010ec2:	2301      	movs	r3, #1
 8010ec4:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8010ec8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010ecc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8010ece:	463b      	mov	r3, r7
 8010ed0:	2200      	movs	r2, #0
 8010ed2:	4619      	mov	r1, r3
 8010ed4:	4805      	ldr	r0, [pc, #20]	; (8010eec <MX_RTC_Init+0x110>)
 8010ed6:	f003 fe14 	bl	8014b02 <HAL_RTC_SetAlarm>
 8010eda:	4603      	mov	r3, r0
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d001      	beq.n	8010ee4 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8010ee0:	f7ff ff76 	bl	8010dd0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8010ee4:	bf00      	nop
 8010ee6:	3740      	adds	r7, #64	; 0x40
 8010ee8:	46bd      	mov	sp, r7
 8010eea:	bd80      	pop	{r7, pc}
 8010eec:	20000478 	.word	0x20000478
 8010ef0:	40002800 	.word	0x40002800
 8010ef4:	80800080 	.word	0x80800080

08010ef8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8010ef8:	b580      	push	{r7, lr}
 8010efa:	b088      	sub	sp, #32
 8010efc:	af00      	add	r7, sp, #0
 8010efe:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8010f00:	f107 030c 	add.w	r3, r7, #12
 8010f04:	2200      	movs	r2, #0
 8010f06:	601a      	str	r2, [r3, #0]
 8010f08:	605a      	str	r2, [r3, #4]
 8010f0a:	609a      	str	r2, [r3, #8]
 8010f0c:	60da      	str	r2, [r3, #12]
 8010f0e:	611a      	str	r2, [r3, #16]
  if(rtcHandle->Instance==RTC)
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	681b      	ldr	r3, [r3, #0]
 8010f14:	4a0c      	ldr	r2, [pc, #48]	; (8010f48 <HAL_RTC_MspInit+0x50>)
 8010f16:	4293      	cmp	r3, r2
 8010f18:	d111      	bne.n	8010f3e <HAL_RTC_MspInit+0x46>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8010f1a:	2302      	movs	r3, #2
 8010f1c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8010f1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010f22:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8010f24:	f107 030c 	add.w	r3, r7, #12
 8010f28:	4618      	mov	r0, r3
 8010f2a:	f003 fb5b 	bl	80145e4 <HAL_RCCEx_PeriphCLKConfig>
 8010f2e:	4603      	mov	r3, r0
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	d001      	beq.n	8010f38 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8010f34:	f7ff ff4c 	bl	8010dd0 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8010f38:	4b04      	ldr	r3, [pc, #16]	; (8010f4c <HAL_RTC_MspInit+0x54>)
 8010f3a:	2201      	movs	r2, #1
 8010f3c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8010f3e:	bf00      	nop
 8010f40:	3720      	adds	r7, #32
 8010f42:	46bd      	mov	sp, r7
 8010f44:	bd80      	pop	{r7, pc}
 8010f46:	bf00      	nop
 8010f48:	40002800 	.word	0x40002800
 8010f4c:	42470e3c 	.word	0x42470e3c

08010f50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8010f50:	b480      	push	{r7}
 8010f52:	b083      	sub	sp, #12
 8010f54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010f56:	2300      	movs	r3, #0
 8010f58:	607b      	str	r3, [r7, #4]
 8010f5a:	4b10      	ldr	r3, [pc, #64]	; (8010f9c <HAL_MspInit+0x4c>)
 8010f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010f5e:	4a0f      	ldr	r2, [pc, #60]	; (8010f9c <HAL_MspInit+0x4c>)
 8010f60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010f64:	6453      	str	r3, [r2, #68]	; 0x44
 8010f66:	4b0d      	ldr	r3, [pc, #52]	; (8010f9c <HAL_MspInit+0x4c>)
 8010f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010f6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010f6e:	607b      	str	r3, [r7, #4]
 8010f70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8010f72:	2300      	movs	r3, #0
 8010f74:	603b      	str	r3, [r7, #0]
 8010f76:	4b09      	ldr	r3, [pc, #36]	; (8010f9c <HAL_MspInit+0x4c>)
 8010f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f7a:	4a08      	ldr	r2, [pc, #32]	; (8010f9c <HAL_MspInit+0x4c>)
 8010f7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010f80:	6413      	str	r3, [r2, #64]	; 0x40
 8010f82:	4b06      	ldr	r3, [pc, #24]	; (8010f9c <HAL_MspInit+0x4c>)
 8010f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010f8a:	603b      	str	r3, [r7, #0]
 8010f8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8010f8e:	bf00      	nop
 8010f90:	370c      	adds	r7, #12
 8010f92:	46bd      	mov	sp, r7
 8010f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f98:	4770      	bx	lr
 8010f9a:	bf00      	nop
 8010f9c:	40023800 	.word	0x40023800

08010fa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8010fa0:	b480      	push	{r7}
 8010fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8010fa4:	e7fe      	b.n	8010fa4 <NMI_Handler+0x4>

08010fa6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8010fa6:	b480      	push	{r7}
 8010fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8010faa:	e7fe      	b.n	8010faa <HardFault_Handler+0x4>

08010fac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8010fac:	b480      	push	{r7}
 8010fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8010fb0:	e7fe      	b.n	8010fb0 <MemManage_Handler+0x4>

08010fb2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8010fb2:	b480      	push	{r7}
 8010fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8010fb6:	e7fe      	b.n	8010fb6 <BusFault_Handler+0x4>

08010fb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8010fb8:	b480      	push	{r7}
 8010fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8010fbc:	e7fe      	b.n	8010fbc <UsageFault_Handler+0x4>

08010fbe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8010fbe:	b480      	push	{r7}
 8010fc0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8010fc2:	bf00      	nop
 8010fc4:	46bd      	mov	sp, r7
 8010fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fca:	4770      	bx	lr

08010fcc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8010fcc:	b480      	push	{r7}
 8010fce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8010fd0:	bf00      	nop
 8010fd2:	46bd      	mov	sp, r7
 8010fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fd8:	4770      	bx	lr

08010fda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8010fda:	b480      	push	{r7}
 8010fdc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8010fde:	bf00      	nop
 8010fe0:	46bd      	mov	sp, r7
 8010fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fe6:	4770      	bx	lr

08010fe8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8010fe8:	b580      	push	{r7, lr}
 8010fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8010fec:	f000 fbae 	bl	801174c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8010ff0:	bf00      	nop
 8010ff2:	bd80      	pop	{r7, pc}

08010ff4 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8010ff4:	b580      	push	{r7, lr}
 8010ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8010ff8:	4802      	ldr	r0, [pc, #8]	; (8011004 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8010ffa:	f004 f844 	bl	8015086 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8010ffe:	bf00      	nop
 8011000:	bd80      	pop	{r7, pc}
 8011002:	bf00      	nop
 8011004:	2000049c 	.word	0x2000049c

08011008 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8011008:	b580      	push	{r7, lr}
 801100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 801100c:	4802      	ldr	r0, [pc, #8]	; (8011018 <TIM1_UP_TIM10_IRQHandler+0x10>)
 801100e:	f004 f83a 	bl	8015086 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8011012:	bf00      	nop
 8011014:	bd80      	pop	{r7, pc}
 8011016:	bf00      	nop
 8011018:	200004e4 	.word	0x200004e4

0801101c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 801101c:	b580      	push	{r7, lr}
 801101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8011020:	4802      	ldr	r0, [pc, #8]	; (801102c <USART2_IRQHandler+0x10>)
 8011022:	f004 fdd5 	bl	8015bd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8011026:	bf00      	nop
 8011028:	bd80      	pop	{r7, pc}
 801102a:	bf00      	nop
 801102c:	200005bc 	.word	0x200005bc

08011030 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8011030:	b580      	push	{r7, lr}
 8011032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DI5_Pin);
 8011034:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8011038:	f001 fc74 	bl	8012924 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 801103c:	bf00      	nop
 801103e:	bd80      	pop	{r7, pc}

08011040 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8011040:	b580      	push	{r7, lr}
 8011042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8011044:	4802      	ldr	r0, [pc, #8]	; (8011050 <DMA2_Stream0_IRQHandler+0x10>)
 8011046:	f001 f879 	bl	801213c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 801104a:	bf00      	nop
 801104c:	bd80      	pop	{r7, pc}
 801104e:	bf00      	nop
 8011050:	200000c0 	.word	0x200000c0

08011054 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8011054:	b580      	push	{r7, lr}
 8011056:	b086      	sub	sp, #24
 8011058:	af00      	add	r7, sp, #0
 801105a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 801105c:	4a14      	ldr	r2, [pc, #80]	; (80110b0 <_sbrk+0x5c>)
 801105e:	4b15      	ldr	r3, [pc, #84]	; (80110b4 <_sbrk+0x60>)
 8011060:	1ad3      	subs	r3, r2, r3
 8011062:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8011064:	697b      	ldr	r3, [r7, #20]
 8011066:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8011068:	4b13      	ldr	r3, [pc, #76]	; (80110b8 <_sbrk+0x64>)
 801106a:	681b      	ldr	r3, [r3, #0]
 801106c:	2b00      	cmp	r3, #0
 801106e:	d102      	bne.n	8011076 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8011070:	4b11      	ldr	r3, [pc, #68]	; (80110b8 <_sbrk+0x64>)
 8011072:	4a12      	ldr	r2, [pc, #72]	; (80110bc <_sbrk+0x68>)
 8011074:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8011076:	4b10      	ldr	r3, [pc, #64]	; (80110b8 <_sbrk+0x64>)
 8011078:	681a      	ldr	r2, [r3, #0]
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	4413      	add	r3, r2
 801107e:	693a      	ldr	r2, [r7, #16]
 8011080:	429a      	cmp	r2, r3
 8011082:	d207      	bcs.n	8011094 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8011084:	f008 fa6a 	bl	801955c <__errno>
 8011088:	4603      	mov	r3, r0
 801108a:	220c      	movs	r2, #12
 801108c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 801108e:	f04f 33ff 	mov.w	r3, #4294967295
 8011092:	e009      	b.n	80110a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8011094:	4b08      	ldr	r3, [pc, #32]	; (80110b8 <_sbrk+0x64>)
 8011096:	681b      	ldr	r3, [r3, #0]
 8011098:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 801109a:	4b07      	ldr	r3, [pc, #28]	; (80110b8 <_sbrk+0x64>)
 801109c:	681a      	ldr	r2, [r3, #0]
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	4413      	add	r3, r2
 80110a2:	4a05      	ldr	r2, [pc, #20]	; (80110b8 <_sbrk+0x64>)
 80110a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80110a6:	68fb      	ldr	r3, [r7, #12]
}
 80110a8:	4618      	mov	r0, r3
 80110aa:	3718      	adds	r7, #24
 80110ac:	46bd      	mov	sp, r7
 80110ae:	bd80      	pop	{r7, pc}
 80110b0:	20010000 	.word	0x20010000
 80110b4:	00000400 	.word	0x00000400
 80110b8:	20000498 	.word	0x20000498
 80110bc:	20000900 	.word	0x20000900

080110c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80110c0:	b480      	push	{r7}
 80110c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80110c4:	4b07      	ldr	r3, [pc, #28]	; (80110e4 <SystemInit+0x24>)
 80110c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80110ca:	4a06      	ldr	r2, [pc, #24]	; (80110e4 <SystemInit+0x24>)
 80110cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80110d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 80110d4:	4b03      	ldr	r3, [pc, #12]	; (80110e4 <SystemInit+0x24>)
 80110d6:	4a04      	ldr	r2, [pc, #16]	; (80110e8 <SystemInit+0x28>)
 80110d8:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 80110da:	bf00      	nop
 80110dc:	46bd      	mov	sp, r7
 80110de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110e2:	4770      	bx	lr
 80110e4:	e000ed00 	.word	0xe000ed00
 80110e8:	08010000 	.word	0x08010000

080110ec <MX_TIM9_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM9 init function */
void MX_TIM9_Init(void)
{
 80110ec:	b580      	push	{r7, lr}
 80110ee:	b088      	sub	sp, #32
 80110f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80110f2:	1d3b      	adds	r3, r7, #4
 80110f4:	2200      	movs	r2, #0
 80110f6:	601a      	str	r2, [r3, #0]
 80110f8:	605a      	str	r2, [r3, #4]
 80110fa:	609a      	str	r2, [r3, #8]
 80110fc:	60da      	str	r2, [r3, #12]
 80110fe:	611a      	str	r2, [r3, #16]
 8011100:	615a      	str	r2, [r3, #20]
 8011102:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8011104:	4b19      	ldr	r3, [pc, #100]	; (801116c <MX_TIM9_Init+0x80>)
 8011106:	4a1a      	ldr	r2, [pc, #104]	; (8011170 <MX_TIM9_Init+0x84>)
 8011108:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 8400 - 1;
 801110a:	4b18      	ldr	r3, [pc, #96]	; (801116c <MX_TIM9_Init+0x80>)
 801110c:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8011110:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8011112:	4b16      	ldr	r3, [pc, #88]	; (801116c <MX_TIM9_Init+0x80>)
 8011114:	2200      	movs	r2, #0
 8011116:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 10000 - 1;
 8011118:	4b14      	ldr	r3, [pc, #80]	; (801116c <MX_TIM9_Init+0x80>)
 801111a:	f242 720f 	movw	r2, #9999	; 0x270f
 801111e:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8011120:	4b12      	ldr	r3, [pc, #72]	; (801116c <MX_TIM9_Init+0x80>)
 8011122:	2200      	movs	r2, #0
 8011124:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8011126:	4b11      	ldr	r3, [pc, #68]	; (801116c <MX_TIM9_Init+0x80>)
 8011128:	2200      	movs	r2, #0
 801112a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim9) != HAL_OK)
 801112c:	480f      	ldr	r0, [pc, #60]	; (801116c <MX_TIM9_Init+0x80>)
 801112e:	f003 ff02 	bl	8014f36 <HAL_TIM_OC_Init>
 8011132:	4603      	mov	r3, r0
 8011134:	2b00      	cmp	r3, #0
 8011136:	d001      	beq.n	801113c <MX_TIM9_Init+0x50>
  {
    Error_Handler();
 8011138:	f7ff fe4a 	bl	8010dd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 801113c:	2300      	movs	r3, #0
 801113e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8011140:	2300      	movs	r3, #0
 8011142:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8011144:	2300      	movs	r3, #0
 8011146:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8011148:	2300      	movs	r3, #0
 801114a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 801114c:	1d3b      	adds	r3, r7, #4
 801114e:	2200      	movs	r2, #0
 8011150:	4619      	mov	r1, r3
 8011152:	4806      	ldr	r0, [pc, #24]	; (801116c <MX_TIM9_Init+0x80>)
 8011154:	f004 f888 	bl	8015268 <HAL_TIM_OC_ConfigChannel>
 8011158:	4603      	mov	r3, r0
 801115a:	2b00      	cmp	r3, #0
 801115c:	d001      	beq.n	8011162 <MX_TIM9_Init+0x76>
  {
    Error_Handler();
 801115e:	f7ff fe37 	bl	8010dd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8011162:	bf00      	nop
 8011164:	3720      	adds	r7, #32
 8011166:	46bd      	mov	sp, r7
 8011168:	bd80      	pop	{r7, pc}
 801116a:	bf00      	nop
 801116c:	2000049c 	.word	0x2000049c
 8011170:	40014000 	.word	0x40014000

08011174 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8011174:	b580      	push	{r7, lr}
 8011176:	b088      	sub	sp, #32
 8011178:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 801117a:	1d3b      	adds	r3, r7, #4
 801117c:	2200      	movs	r2, #0
 801117e:	601a      	str	r2, [r3, #0]
 8011180:	605a      	str	r2, [r3, #4]
 8011182:	609a      	str	r2, [r3, #8]
 8011184:	60da      	str	r2, [r3, #12]
 8011186:	611a      	str	r2, [r3, #16]
 8011188:	615a      	str	r2, [r3, #20]
 801118a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 801118c:	4b1c      	ldr	r3, [pc, #112]	; (8011200 <MX_TIM10_Init+0x8c>)
 801118e:	4a1d      	ldr	r2, [pc, #116]	; (8011204 <MX_TIM10_Init+0x90>)
 8011190:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 84 - 1;
 8011192:	4b1b      	ldr	r3, [pc, #108]	; (8011200 <MX_TIM10_Init+0x8c>)
 8011194:	2253      	movs	r2, #83	; 0x53
 8011196:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8011198:	4b19      	ldr	r3, [pc, #100]	; (8011200 <MX_TIM10_Init+0x8c>)
 801119a:	2200      	movs	r2, #0
 801119c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 500 - 1;
 801119e:	4b18      	ldr	r3, [pc, #96]	; (8011200 <MX_TIM10_Init+0x8c>)
 80111a0:	f240 12f3 	movw	r2, #499	; 0x1f3
 80111a4:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80111a6:	4b16      	ldr	r3, [pc, #88]	; (8011200 <MX_TIM10_Init+0x8c>)
 80111a8:	2200      	movs	r2, #0
 80111aa:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80111ac:	4b14      	ldr	r3, [pc, #80]	; (8011200 <MX_TIM10_Init+0x8c>)
 80111ae:	2200      	movs	r2, #0
 80111b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80111b2:	4813      	ldr	r0, [pc, #76]	; (8011200 <MX_TIM10_Init+0x8c>)
 80111b4:	f003 fe70 	bl	8014e98 <HAL_TIM_Base_Init>
 80111b8:	4603      	mov	r3, r0
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	d001      	beq.n	80111c2 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 80111be:	f7ff fe07 	bl	8010dd0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim10) != HAL_OK)
 80111c2:	480f      	ldr	r0, [pc, #60]	; (8011200 <MX_TIM10_Init+0x8c>)
 80111c4:	f003 feb7 	bl	8014f36 <HAL_TIM_OC_Init>
 80111c8:	4603      	mov	r3, r0
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	d001      	beq.n	80111d2 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 80111ce:	f7ff fdff 	bl	8010dd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80111d2:	2300      	movs	r3, #0
 80111d4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80111d6:	2300      	movs	r3, #0
 80111d8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80111da:	2300      	movs	r3, #0
 80111dc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80111de:	2300      	movs	r3, #0
 80111e0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80111e2:	1d3b      	adds	r3, r7, #4
 80111e4:	2200      	movs	r2, #0
 80111e6:	4619      	mov	r1, r3
 80111e8:	4805      	ldr	r0, [pc, #20]	; (8011200 <MX_TIM10_Init+0x8c>)
 80111ea:	f004 f83d 	bl	8015268 <HAL_TIM_OC_ConfigChannel>
 80111ee:	4603      	mov	r3, r0
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d001      	beq.n	80111f8 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 80111f4:	f7ff fdec 	bl	8010dd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80111f8:	bf00      	nop
 80111fa:	3720      	adds	r7, #32
 80111fc:	46bd      	mov	sp, r7
 80111fe:	bd80      	pop	{r7, pc}
 8011200:	200004e4 	.word	0x200004e4
 8011204:	40014400 	.word	0x40014400

08011208 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8011208:	b580      	push	{r7, lr}
 801120a:	b088      	sub	sp, #32
 801120c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 801120e:	1d3b      	adds	r3, r7, #4
 8011210:	2200      	movs	r2, #0
 8011212:	601a      	str	r2, [r3, #0]
 8011214:	605a      	str	r2, [r3, #4]
 8011216:	609a      	str	r2, [r3, #8]
 8011218:	60da      	str	r2, [r3, #12]
 801121a:	611a      	str	r2, [r3, #16]
 801121c:	615a      	str	r2, [r3, #20]
 801121e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8011220:	4b1e      	ldr	r3, [pc, #120]	; (801129c <MX_TIM11_Init+0x94>)
 8011222:	4a1f      	ldr	r2, [pc, #124]	; (80112a0 <MX_TIM11_Init+0x98>)
 8011224:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8011226:	4b1d      	ldr	r3, [pc, #116]	; (801129c <MX_TIM11_Init+0x94>)
 8011228:	2200      	movs	r2, #0
 801122a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 801122c:	4b1b      	ldr	r3, [pc, #108]	; (801129c <MX_TIM11_Init+0x94>)
 801122e:	2200      	movs	r2, #0
 8011230:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 4199;
 8011232:	4b1a      	ldr	r3, [pc, #104]	; (801129c <MX_TIM11_Init+0x94>)
 8011234:	f241 0267 	movw	r2, #4199	; 0x1067
 8011238:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801123a:	4b18      	ldr	r3, [pc, #96]	; (801129c <MX_TIM11_Init+0x94>)
 801123c:	2200      	movs	r2, #0
 801123e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8011240:	4b16      	ldr	r3, [pc, #88]	; (801129c <MX_TIM11_Init+0x94>)
 8011242:	2200      	movs	r2, #0
 8011244:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8011246:	4815      	ldr	r0, [pc, #84]	; (801129c <MX_TIM11_Init+0x94>)
 8011248:	f003 fe26 	bl	8014e98 <HAL_TIM_Base_Init>
 801124c:	4603      	mov	r3, r0
 801124e:	2b00      	cmp	r3, #0
 8011250:	d001      	beq.n	8011256 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8011252:	f7ff fdbd 	bl	8010dd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8011256:	4811      	ldr	r0, [pc, #68]	; (801129c <MX_TIM11_Init+0x94>)
 8011258:	f003 febc 	bl	8014fd4 <HAL_TIM_PWM_Init>
 801125c:	4603      	mov	r3, r0
 801125e:	2b00      	cmp	r3, #0
 8011260:	d001      	beq.n	8011266 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8011262:	f7ff fdb5 	bl	8010dd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8011266:	2360      	movs	r3, #96	; 0x60
 8011268:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 801126a:	2300      	movs	r3, #0
 801126c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 801126e:	2300      	movs	r3, #0
 8011270:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8011272:	2300      	movs	r3, #0
 8011274:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8011276:	1d3b      	adds	r3, r7, #4
 8011278:	2200      	movs	r2, #0
 801127a:	4619      	mov	r1, r3
 801127c:	4807      	ldr	r0, [pc, #28]	; (801129c <MX_TIM11_Init+0x94>)
 801127e:	f004 f84f 	bl	8015320 <HAL_TIM_PWM_ConfigChannel>
 8011282:	4603      	mov	r3, r0
 8011284:	2b00      	cmp	r3, #0
 8011286:	d001      	beq.n	801128c <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8011288:	f7ff fda2 	bl	8010dd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 801128c:	4803      	ldr	r0, [pc, #12]	; (801129c <MX_TIM11_Init+0x94>)
 801128e:	f000 f86f 	bl	8011370 <HAL_TIM_MspPostInit>

}
 8011292:	bf00      	nop
 8011294:	3720      	adds	r7, #32
 8011296:	46bd      	mov	sp, r7
 8011298:	bd80      	pop	{r7, pc}
 801129a:	bf00      	nop
 801129c:	2000052c 	.word	0x2000052c
 80112a0:	40014800 	.word	0x40014800

080112a4 <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* tim_ocHandle)
{
 80112a4:	b580      	push	{r7, lr}
 80112a6:	b084      	sub	sp, #16
 80112a8:	af00      	add	r7, sp, #0
 80112aa:	6078      	str	r0, [r7, #4]

  if(tim_ocHandle->Instance==TIM9)
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	681b      	ldr	r3, [r3, #0]
 80112b0:	4a0e      	ldr	r2, [pc, #56]	; (80112ec <HAL_TIM_OC_MspInit+0x48>)
 80112b2:	4293      	cmp	r3, r2
 80112b4:	d115      	bne.n	80112e2 <HAL_TIM_OC_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* TIM9 clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 80112b6:	2300      	movs	r3, #0
 80112b8:	60fb      	str	r3, [r7, #12]
 80112ba:	4b0d      	ldr	r3, [pc, #52]	; (80112f0 <HAL_TIM_OC_MspInit+0x4c>)
 80112bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80112be:	4a0c      	ldr	r2, [pc, #48]	; (80112f0 <HAL_TIM_OC_MspInit+0x4c>)
 80112c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80112c4:	6453      	str	r3, [r2, #68]	; 0x44
 80112c6:	4b0a      	ldr	r3, [pc, #40]	; (80112f0 <HAL_TIM_OC_MspInit+0x4c>)
 80112c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80112ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80112ce:	60fb      	str	r3, [r7, #12]
 80112d0:	68fb      	ldr	r3, [r7, #12]

    /* TIM9 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80112d2:	2200      	movs	r2, #0
 80112d4:	2100      	movs	r1, #0
 80112d6:	2018      	movs	r0, #24
 80112d8:	f000 fdb9 	bl	8011e4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80112dc:	2018      	movs	r0, #24
 80112de:	f000 fdd2 	bl	8011e86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 80112e2:	bf00      	nop
 80112e4:	3710      	adds	r7, #16
 80112e6:	46bd      	mov	sp, r7
 80112e8:	bd80      	pop	{r7, pc}
 80112ea:	bf00      	nop
 80112ec:	40014000 	.word	0x40014000
 80112f0:	40023800 	.word	0x40023800

080112f4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80112f4:	b580      	push	{r7, lr}
 80112f6:	b084      	sub	sp, #16
 80112f8:	af00      	add	r7, sp, #0
 80112fa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	681b      	ldr	r3, [r3, #0]
 8011300:	4a18      	ldr	r2, [pc, #96]	; (8011364 <HAL_TIM_Base_MspInit+0x70>)
 8011302:	4293      	cmp	r3, r2
 8011304:	d116      	bne.n	8011334 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8011306:	2300      	movs	r3, #0
 8011308:	60fb      	str	r3, [r7, #12]
 801130a:	4b17      	ldr	r3, [pc, #92]	; (8011368 <HAL_TIM_Base_MspInit+0x74>)
 801130c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801130e:	4a16      	ldr	r2, [pc, #88]	; (8011368 <HAL_TIM_Base_MspInit+0x74>)
 8011310:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011314:	6453      	str	r3, [r2, #68]	; 0x44
 8011316:	4b14      	ldr	r3, [pc, #80]	; (8011368 <HAL_TIM_Base_MspInit+0x74>)
 8011318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801131a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801131e:	60fb      	str	r3, [r7, #12]
 8011320:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8011322:	2200      	movs	r2, #0
 8011324:	2100      	movs	r1, #0
 8011326:	2019      	movs	r0, #25
 8011328:	f000 fd91 	bl	8011e4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 801132c:	2019      	movs	r0, #25
 801132e:	f000 fdaa 	bl	8011e86 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM11_CLK_ENABLE();
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8011332:	e012      	b.n	801135a <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM11)
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	681b      	ldr	r3, [r3, #0]
 8011338:	4a0c      	ldr	r2, [pc, #48]	; (801136c <HAL_TIM_Base_MspInit+0x78>)
 801133a:	4293      	cmp	r3, r2
 801133c:	d10d      	bne.n	801135a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM11_CLK_ENABLE();
 801133e:	2300      	movs	r3, #0
 8011340:	60bb      	str	r3, [r7, #8]
 8011342:	4b09      	ldr	r3, [pc, #36]	; (8011368 <HAL_TIM_Base_MspInit+0x74>)
 8011344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011346:	4a08      	ldr	r2, [pc, #32]	; (8011368 <HAL_TIM_Base_MspInit+0x74>)
 8011348:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801134c:	6453      	str	r3, [r2, #68]	; 0x44
 801134e:	4b06      	ldr	r3, [pc, #24]	; (8011368 <HAL_TIM_Base_MspInit+0x74>)
 8011350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011352:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8011356:	60bb      	str	r3, [r7, #8]
 8011358:	68bb      	ldr	r3, [r7, #8]
}
 801135a:	bf00      	nop
 801135c:	3710      	adds	r7, #16
 801135e:	46bd      	mov	sp, r7
 8011360:	bd80      	pop	{r7, pc}
 8011362:	bf00      	nop
 8011364:	40014400 	.word	0x40014400
 8011368:	40023800 	.word	0x40023800
 801136c:	40014800 	.word	0x40014800

08011370 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8011370:	b580      	push	{r7, lr}
 8011372:	b088      	sub	sp, #32
 8011374:	af00      	add	r7, sp, #0
 8011376:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011378:	f107 030c 	add.w	r3, r7, #12
 801137c:	2200      	movs	r2, #0
 801137e:	601a      	str	r2, [r3, #0]
 8011380:	605a      	str	r2, [r3, #4]
 8011382:	609a      	str	r2, [r3, #8]
 8011384:	60da      	str	r2, [r3, #12]
 8011386:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM11)
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	681b      	ldr	r3, [r3, #0]
 801138c:	4a12      	ldr	r2, [pc, #72]	; (80113d8 <HAL_TIM_MspPostInit+0x68>)
 801138e:	4293      	cmp	r3, r2
 8011390:	d11e      	bne.n	80113d0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM11_MspPostInit 0 */

  /* USER CODE END TIM11_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8011392:	2300      	movs	r3, #0
 8011394:	60bb      	str	r3, [r7, #8]
 8011396:	4b11      	ldr	r3, [pc, #68]	; (80113dc <HAL_TIM_MspPostInit+0x6c>)
 8011398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801139a:	4a10      	ldr	r2, [pc, #64]	; (80113dc <HAL_TIM_MspPostInit+0x6c>)
 801139c:	f043 0302 	orr.w	r3, r3, #2
 80113a0:	6313      	str	r3, [r2, #48]	; 0x30
 80113a2:	4b0e      	ldr	r3, [pc, #56]	; (80113dc <HAL_TIM_MspPostInit+0x6c>)
 80113a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80113a6:	f003 0302 	and.w	r3, r3, #2
 80113aa:	60bb      	str	r3, [r7, #8]
 80113ac:	68bb      	ldr	r3, [r7, #8]
    /**TIM11 GPIO Configuration
    PB9     ------> TIM11_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80113ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80113b2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80113b4:	2302      	movs	r3, #2
 80113b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80113b8:	2300      	movs	r3, #0
 80113ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80113bc:	2300      	movs	r3, #0
 80113be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 80113c0:	2303      	movs	r3, #3
 80113c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80113c4:	f107 030c 	add.w	r3, r7, #12
 80113c8:	4619      	mov	r1, r3
 80113ca:	4805      	ldr	r0, [pc, #20]	; (80113e0 <HAL_TIM_MspPostInit+0x70>)
 80113cc:	f001 f8f2 	bl	80125b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 80113d0:	bf00      	nop
 80113d2:	3720      	adds	r7, #32
 80113d4:	46bd      	mov	sp, r7
 80113d6:	bd80      	pop	{r7, pc}
 80113d8:	40014800 	.word	0x40014800
 80113dc:	40023800 	.word	0x40023800
 80113e0:	40020400 	.word	0x40020400

080113e4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart6;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80113e4:	b580      	push	{r7, lr}
 80113e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80113e8:	4b11      	ldr	r3, [pc, #68]	; (8011430 <MX_USART1_UART_Init+0x4c>)
 80113ea:	4a12      	ldr	r2, [pc, #72]	; (8011434 <MX_USART1_UART_Init+0x50>)
 80113ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 80113ee:	4b10      	ldr	r3, [pc, #64]	; (8011430 <MX_USART1_UART_Init+0x4c>)
 80113f0:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 80113f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80113f6:	4b0e      	ldr	r3, [pc, #56]	; (8011430 <MX_USART1_UART_Init+0x4c>)
 80113f8:	2200      	movs	r2, #0
 80113fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80113fc:	4b0c      	ldr	r3, [pc, #48]	; (8011430 <MX_USART1_UART_Init+0x4c>)
 80113fe:	2200      	movs	r2, #0
 8011400:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8011402:	4b0b      	ldr	r3, [pc, #44]	; (8011430 <MX_USART1_UART_Init+0x4c>)
 8011404:	2200      	movs	r2, #0
 8011406:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8011408:	4b09      	ldr	r3, [pc, #36]	; (8011430 <MX_USART1_UART_Init+0x4c>)
 801140a:	220c      	movs	r2, #12
 801140c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801140e:	4b08      	ldr	r3, [pc, #32]	; (8011430 <MX_USART1_UART_Init+0x4c>)
 8011410:	2200      	movs	r2, #0
 8011412:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8011414:	4b06      	ldr	r3, [pc, #24]	; (8011430 <MX_USART1_UART_Init+0x4c>)
 8011416:	2200      	movs	r2, #0
 8011418:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 801141a:	4805      	ldr	r0, [pc, #20]	; (8011430 <MX_USART1_UART_Init+0x4c>)
 801141c:	f004 faa0 	bl	8015960 <HAL_UART_Init>
 8011420:	4603      	mov	r3, r0
 8011422:	2b00      	cmp	r3, #0
 8011424:	d001      	beq.n	801142a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8011426:	f7ff fcd3 	bl	8010dd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 801142a:	bf00      	nop
 801142c:	bd80      	pop	{r7, pc}
 801142e:	bf00      	nop
 8011430:	20000574 	.word	0x20000574
 8011434:	40011000 	.word	0x40011000

08011438 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8011438:	b580      	push	{r7, lr}
 801143a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 801143c:	4b11      	ldr	r3, [pc, #68]	; (8011484 <MX_USART2_UART_Init+0x4c>)
 801143e:	4a12      	ldr	r2, [pc, #72]	; (8011488 <MX_USART2_UART_Init+0x50>)
 8011440:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8011442:	4b10      	ldr	r3, [pc, #64]	; (8011484 <MX_USART2_UART_Init+0x4c>)
 8011444:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8011448:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 801144a:	4b0e      	ldr	r3, [pc, #56]	; (8011484 <MX_USART2_UART_Init+0x4c>)
 801144c:	2200      	movs	r2, #0
 801144e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8011450:	4b0c      	ldr	r3, [pc, #48]	; (8011484 <MX_USART2_UART_Init+0x4c>)
 8011452:	2200      	movs	r2, #0
 8011454:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8011456:	4b0b      	ldr	r3, [pc, #44]	; (8011484 <MX_USART2_UART_Init+0x4c>)
 8011458:	2200      	movs	r2, #0
 801145a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 801145c:	4b09      	ldr	r3, [pc, #36]	; (8011484 <MX_USART2_UART_Init+0x4c>)
 801145e:	220c      	movs	r2, #12
 8011460:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8011462:	4b08      	ldr	r3, [pc, #32]	; (8011484 <MX_USART2_UART_Init+0x4c>)
 8011464:	2200      	movs	r2, #0
 8011466:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8011468:	4b06      	ldr	r3, [pc, #24]	; (8011484 <MX_USART2_UART_Init+0x4c>)
 801146a:	2200      	movs	r2, #0
 801146c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 801146e:	4805      	ldr	r0, [pc, #20]	; (8011484 <MX_USART2_UART_Init+0x4c>)
 8011470:	f004 fa76 	bl	8015960 <HAL_UART_Init>
 8011474:	4603      	mov	r3, r0
 8011476:	2b00      	cmp	r3, #0
 8011478:	d001      	beq.n	801147e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 801147a:	f7ff fca9 	bl	8010dd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 801147e:	bf00      	nop
 8011480:	bd80      	pop	{r7, pc}
 8011482:	bf00      	nop
 8011484:	200005bc 	.word	0x200005bc
 8011488:	40004400 	.word	0x40004400

0801148c <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 801148c:	b580      	push	{r7, lr}
 801148e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8011490:	4b11      	ldr	r3, [pc, #68]	; (80114d8 <MX_USART6_UART_Init+0x4c>)
 8011492:	4a12      	ldr	r2, [pc, #72]	; (80114dc <MX_USART6_UART_Init+0x50>)
 8011494:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8011496:	4b10      	ldr	r3, [pc, #64]	; (80114d8 <MX_USART6_UART_Init+0x4c>)
 8011498:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 801149c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 801149e:	4b0e      	ldr	r3, [pc, #56]	; (80114d8 <MX_USART6_UART_Init+0x4c>)
 80114a0:	2200      	movs	r2, #0
 80114a2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80114a4:	4b0c      	ldr	r3, [pc, #48]	; (80114d8 <MX_USART6_UART_Init+0x4c>)
 80114a6:	2200      	movs	r2, #0
 80114a8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80114aa:	4b0b      	ldr	r3, [pc, #44]	; (80114d8 <MX_USART6_UART_Init+0x4c>)
 80114ac:	2200      	movs	r2, #0
 80114ae:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80114b0:	4b09      	ldr	r3, [pc, #36]	; (80114d8 <MX_USART6_UART_Init+0x4c>)
 80114b2:	220c      	movs	r2, #12
 80114b4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80114b6:	4b08      	ldr	r3, [pc, #32]	; (80114d8 <MX_USART6_UART_Init+0x4c>)
 80114b8:	2200      	movs	r2, #0
 80114ba:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80114bc:	4b06      	ldr	r3, [pc, #24]	; (80114d8 <MX_USART6_UART_Init+0x4c>)
 80114be:	2200      	movs	r2, #0
 80114c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80114c2:	4805      	ldr	r0, [pc, #20]	; (80114d8 <MX_USART6_UART_Init+0x4c>)
 80114c4:	f004 fa4c 	bl	8015960 <HAL_UART_Init>
 80114c8:	4603      	mov	r3, r0
 80114ca:	2b00      	cmp	r3, #0
 80114cc:	d001      	beq.n	80114d2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80114ce:	f7ff fc7f 	bl	8010dd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80114d2:	bf00      	nop
 80114d4:	bd80      	pop	{r7, pc}
 80114d6:	bf00      	nop
 80114d8:	20000604 	.word	0x20000604
 80114dc:	40011400 	.word	0x40011400

080114e0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80114e0:	b580      	push	{r7, lr}
 80114e2:	b08e      	sub	sp, #56	; 0x38
 80114e4:	af00      	add	r7, sp, #0
 80114e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80114e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80114ec:	2200      	movs	r2, #0
 80114ee:	601a      	str	r2, [r3, #0]
 80114f0:	605a      	str	r2, [r3, #4]
 80114f2:	609a      	str	r2, [r3, #8]
 80114f4:	60da      	str	r2, [r3, #12]
 80114f6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	681b      	ldr	r3, [r3, #0]
 80114fc:	4a4f      	ldr	r2, [pc, #316]	; (801163c <HAL_UART_MspInit+0x15c>)
 80114fe:	4293      	cmp	r3, r2
 8011500:	d12d      	bne.n	801155e <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8011502:	2300      	movs	r3, #0
 8011504:	623b      	str	r3, [r7, #32]
 8011506:	4b4e      	ldr	r3, [pc, #312]	; (8011640 <HAL_UART_MspInit+0x160>)
 8011508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801150a:	4a4d      	ldr	r2, [pc, #308]	; (8011640 <HAL_UART_MspInit+0x160>)
 801150c:	f043 0310 	orr.w	r3, r3, #16
 8011510:	6453      	str	r3, [r2, #68]	; 0x44
 8011512:	4b4b      	ldr	r3, [pc, #300]	; (8011640 <HAL_UART_MspInit+0x160>)
 8011514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011516:	f003 0310 	and.w	r3, r3, #16
 801151a:	623b      	str	r3, [r7, #32]
 801151c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801151e:	2300      	movs	r3, #0
 8011520:	61fb      	str	r3, [r7, #28]
 8011522:	4b47      	ldr	r3, [pc, #284]	; (8011640 <HAL_UART_MspInit+0x160>)
 8011524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011526:	4a46      	ldr	r2, [pc, #280]	; (8011640 <HAL_UART_MspInit+0x160>)
 8011528:	f043 0301 	orr.w	r3, r3, #1
 801152c:	6313      	str	r3, [r2, #48]	; 0x30
 801152e:	4b44      	ldr	r3, [pc, #272]	; (8011640 <HAL_UART_MspInit+0x160>)
 8011530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011532:	f003 0301 	and.w	r3, r3, #1
 8011536:	61fb      	str	r3, [r7, #28]
 8011538:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 801153a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 801153e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011540:	2302      	movs	r3, #2
 8011542:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011544:	2300      	movs	r3, #0
 8011546:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011548:	2303      	movs	r3, #3
 801154a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 801154c:	2307      	movs	r3, #7
 801154e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011550:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011554:	4619      	mov	r1, r3
 8011556:	483b      	ldr	r0, [pc, #236]	; (8011644 <HAL_UART_MspInit+0x164>)
 8011558:	f001 f82c 	bl	80125b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 801155c:	e06a      	b.n	8011634 <HAL_UART_MspInit+0x154>
  else if(uartHandle->Instance==USART2)
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	681b      	ldr	r3, [r3, #0]
 8011562:	4a39      	ldr	r2, [pc, #228]	; (8011648 <HAL_UART_MspInit+0x168>)
 8011564:	4293      	cmp	r3, r2
 8011566:	d134      	bne.n	80115d2 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8011568:	2300      	movs	r3, #0
 801156a:	61bb      	str	r3, [r7, #24]
 801156c:	4b34      	ldr	r3, [pc, #208]	; (8011640 <HAL_UART_MspInit+0x160>)
 801156e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011570:	4a33      	ldr	r2, [pc, #204]	; (8011640 <HAL_UART_MspInit+0x160>)
 8011572:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011576:	6413      	str	r3, [r2, #64]	; 0x40
 8011578:	4b31      	ldr	r3, [pc, #196]	; (8011640 <HAL_UART_MspInit+0x160>)
 801157a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801157c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011580:	61bb      	str	r3, [r7, #24]
 8011582:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011584:	2300      	movs	r3, #0
 8011586:	617b      	str	r3, [r7, #20]
 8011588:	4b2d      	ldr	r3, [pc, #180]	; (8011640 <HAL_UART_MspInit+0x160>)
 801158a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801158c:	4a2c      	ldr	r2, [pc, #176]	; (8011640 <HAL_UART_MspInit+0x160>)
 801158e:	f043 0301 	orr.w	r3, r3, #1
 8011592:	6313      	str	r3, [r2, #48]	; 0x30
 8011594:	4b2a      	ldr	r3, [pc, #168]	; (8011640 <HAL_UART_MspInit+0x160>)
 8011596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011598:	f003 0301 	and.w	r3, r3, #1
 801159c:	617b      	str	r3, [r7, #20]
 801159e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80115a0:	230c      	movs	r3, #12
 80115a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80115a4:	2302      	movs	r3, #2
 80115a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80115a8:	2300      	movs	r3, #0
 80115aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80115ac:	2303      	movs	r3, #3
 80115ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80115b0:	2307      	movs	r3, #7
 80115b2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80115b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80115b8:	4619      	mov	r1, r3
 80115ba:	4822      	ldr	r0, [pc, #136]	; (8011644 <HAL_UART_MspInit+0x164>)
 80115bc:	f000 fffa 	bl	80125b4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80115c0:	2200      	movs	r2, #0
 80115c2:	2100      	movs	r1, #0
 80115c4:	2026      	movs	r0, #38	; 0x26
 80115c6:	f000 fc42 	bl	8011e4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80115ca:	2026      	movs	r0, #38	; 0x26
 80115cc:	f000 fc5b 	bl	8011e86 <HAL_NVIC_EnableIRQ>
}
 80115d0:	e030      	b.n	8011634 <HAL_UART_MspInit+0x154>
  else if(uartHandle->Instance==USART6)
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	681b      	ldr	r3, [r3, #0]
 80115d6:	4a1d      	ldr	r2, [pc, #116]	; (801164c <HAL_UART_MspInit+0x16c>)
 80115d8:	4293      	cmp	r3, r2
 80115da:	d12b      	bne.n	8011634 <HAL_UART_MspInit+0x154>
    __HAL_RCC_USART6_CLK_ENABLE();
 80115dc:	2300      	movs	r3, #0
 80115de:	613b      	str	r3, [r7, #16]
 80115e0:	4b17      	ldr	r3, [pc, #92]	; (8011640 <HAL_UART_MspInit+0x160>)
 80115e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80115e4:	4a16      	ldr	r2, [pc, #88]	; (8011640 <HAL_UART_MspInit+0x160>)
 80115e6:	f043 0320 	orr.w	r3, r3, #32
 80115ea:	6453      	str	r3, [r2, #68]	; 0x44
 80115ec:	4b14      	ldr	r3, [pc, #80]	; (8011640 <HAL_UART_MspInit+0x160>)
 80115ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80115f0:	f003 0320 	and.w	r3, r3, #32
 80115f4:	613b      	str	r3, [r7, #16]
 80115f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80115f8:	2300      	movs	r3, #0
 80115fa:	60fb      	str	r3, [r7, #12]
 80115fc:	4b10      	ldr	r3, [pc, #64]	; (8011640 <HAL_UART_MspInit+0x160>)
 80115fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011600:	4a0f      	ldr	r2, [pc, #60]	; (8011640 <HAL_UART_MspInit+0x160>)
 8011602:	f043 0304 	orr.w	r3, r3, #4
 8011606:	6313      	str	r3, [r2, #48]	; 0x30
 8011608:	4b0d      	ldr	r3, [pc, #52]	; (8011640 <HAL_UART_MspInit+0x160>)
 801160a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801160c:	f003 0304 	and.w	r3, r3, #4
 8011610:	60fb      	str	r3, [r7, #12]
 8011612:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8011614:	23c0      	movs	r3, #192	; 0xc0
 8011616:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011618:	2302      	movs	r3, #2
 801161a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801161c:	2300      	movs	r3, #0
 801161e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011620:	2303      	movs	r3, #3
 8011622:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8011624:	2308      	movs	r3, #8
 8011626:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8011628:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801162c:	4619      	mov	r1, r3
 801162e:	4808      	ldr	r0, [pc, #32]	; (8011650 <HAL_UART_MspInit+0x170>)
 8011630:	f000 ffc0 	bl	80125b4 <HAL_GPIO_Init>
}
 8011634:	bf00      	nop
 8011636:	3738      	adds	r7, #56	; 0x38
 8011638:	46bd      	mov	sp, r7
 801163a:	bd80      	pop	{r7, pc}
 801163c:	40011000 	.word	0x40011000
 8011640:	40023800 	.word	0x40023800
 8011644:	40020000 	.word	0x40020000
 8011648:	40004400 	.word	0x40004400
 801164c:	40011400 	.word	0x40011400
 8011650:	40020800 	.word	0x40020800

08011654 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8011654:	f8df d034 	ldr.w	sp, [pc, #52]	; 801168c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8011658:	f7ff fd32 	bl	80110c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 801165c:	480c      	ldr	r0, [pc, #48]	; (8011690 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 801165e:	490d      	ldr	r1, [pc, #52]	; (8011694 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8011660:	4a0d      	ldr	r2, [pc, #52]	; (8011698 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8011662:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8011664:	e002      	b.n	801166c <LoopCopyDataInit>

08011666 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8011666:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8011668:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 801166a:	3304      	adds	r3, #4

0801166c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 801166c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 801166e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8011670:	d3f9      	bcc.n	8011666 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8011672:	4a0a      	ldr	r2, [pc, #40]	; (801169c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8011674:	4c0a      	ldr	r4, [pc, #40]	; (80116a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8011676:	2300      	movs	r3, #0
  b LoopFillZerobss
 8011678:	e001      	b.n	801167e <LoopFillZerobss>

0801167a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 801167a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 801167c:	3204      	adds	r2, #4

0801167e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 801167e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8011680:	d3fb      	bcc.n	801167a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8011682:	f007 ff71 	bl	8019568 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8011686:	f7ff fad1 	bl	8010c2c <main>
  bx  lr    
 801168a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 801168c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8011690:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8011694:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8011698:	0801b1dc 	.word	0x0801b1dc
  ldr r2, =_sbss
 801169c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80116a0:	20000900 	.word	0x20000900

080116a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80116a4:	e7fe      	b.n	80116a4 <ADC_IRQHandler>
	...

080116a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80116a8:	b580      	push	{r7, lr}
 80116aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80116ac:	4b0e      	ldr	r3, [pc, #56]	; (80116e8 <HAL_Init+0x40>)
 80116ae:	681b      	ldr	r3, [r3, #0]
 80116b0:	4a0d      	ldr	r2, [pc, #52]	; (80116e8 <HAL_Init+0x40>)
 80116b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80116b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80116b8:	4b0b      	ldr	r3, [pc, #44]	; (80116e8 <HAL_Init+0x40>)
 80116ba:	681b      	ldr	r3, [r3, #0]
 80116bc:	4a0a      	ldr	r2, [pc, #40]	; (80116e8 <HAL_Init+0x40>)
 80116be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80116c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80116c4:	4b08      	ldr	r3, [pc, #32]	; (80116e8 <HAL_Init+0x40>)
 80116c6:	681b      	ldr	r3, [r3, #0]
 80116c8:	4a07      	ldr	r2, [pc, #28]	; (80116e8 <HAL_Init+0x40>)
 80116ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80116ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80116d0:	2003      	movs	r0, #3
 80116d2:	f000 fbb1 	bl	8011e38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80116d6:	200f      	movs	r0, #15
 80116d8:	f000 f808 	bl	80116ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80116dc:	f7ff fc38 	bl	8010f50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80116e0:	2300      	movs	r3, #0
}
 80116e2:	4618      	mov	r0, r3
 80116e4:	bd80      	pop	{r7, pc}
 80116e6:	bf00      	nop
 80116e8:	40023c00 	.word	0x40023c00

080116ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80116ec:	b580      	push	{r7, lr}
 80116ee:	b082      	sub	sp, #8
 80116f0:	af00      	add	r7, sp, #0
 80116f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80116f4:	4b12      	ldr	r3, [pc, #72]	; (8011740 <HAL_InitTick+0x54>)
 80116f6:	681a      	ldr	r2, [r3, #0]
 80116f8:	4b12      	ldr	r3, [pc, #72]	; (8011744 <HAL_InitTick+0x58>)
 80116fa:	781b      	ldrb	r3, [r3, #0]
 80116fc:	4619      	mov	r1, r3
 80116fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8011702:	fbb3 f3f1 	udiv	r3, r3, r1
 8011706:	fbb2 f3f3 	udiv	r3, r2, r3
 801170a:	4618      	mov	r0, r3
 801170c:	f000 fbc9 	bl	8011ea2 <HAL_SYSTICK_Config>
 8011710:	4603      	mov	r3, r0
 8011712:	2b00      	cmp	r3, #0
 8011714:	d001      	beq.n	801171a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8011716:	2301      	movs	r3, #1
 8011718:	e00e      	b.n	8011738 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	2b0f      	cmp	r3, #15
 801171e:	d80a      	bhi.n	8011736 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8011720:	2200      	movs	r2, #0
 8011722:	6879      	ldr	r1, [r7, #4]
 8011724:	f04f 30ff 	mov.w	r0, #4294967295
 8011728:	f000 fb91 	bl	8011e4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 801172c:	4a06      	ldr	r2, [pc, #24]	; (8011748 <HAL_InitTick+0x5c>)
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8011732:	2300      	movs	r3, #0
 8011734:	e000      	b.n	8011738 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8011736:	2301      	movs	r3, #1
}
 8011738:	4618      	mov	r0, r3
 801173a:	3708      	adds	r7, #8
 801173c:	46bd      	mov	sp, r7
 801173e:	bd80      	pop	{r7, pc}
 8011740:	20000000 	.word	0x20000000
 8011744:	20000008 	.word	0x20000008
 8011748:	20000004 	.word	0x20000004

0801174c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 801174c:	b480      	push	{r7}
 801174e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8011750:	4b06      	ldr	r3, [pc, #24]	; (801176c <HAL_IncTick+0x20>)
 8011752:	781b      	ldrb	r3, [r3, #0]
 8011754:	461a      	mov	r2, r3
 8011756:	4b06      	ldr	r3, [pc, #24]	; (8011770 <HAL_IncTick+0x24>)
 8011758:	681b      	ldr	r3, [r3, #0]
 801175a:	4413      	add	r3, r2
 801175c:	4a04      	ldr	r2, [pc, #16]	; (8011770 <HAL_IncTick+0x24>)
 801175e:	6013      	str	r3, [r2, #0]
}
 8011760:	bf00      	nop
 8011762:	46bd      	mov	sp, r7
 8011764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011768:	4770      	bx	lr
 801176a:	bf00      	nop
 801176c:	20000008 	.word	0x20000008
 8011770:	2000064c 	.word	0x2000064c

08011774 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8011774:	b480      	push	{r7}
 8011776:	af00      	add	r7, sp, #0
  return uwTick;
 8011778:	4b03      	ldr	r3, [pc, #12]	; (8011788 <HAL_GetTick+0x14>)
 801177a:	681b      	ldr	r3, [r3, #0]
}
 801177c:	4618      	mov	r0, r3
 801177e:	46bd      	mov	sp, r7
 8011780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011784:	4770      	bx	lr
 8011786:	bf00      	nop
 8011788:	2000064c 	.word	0x2000064c

0801178c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 801178c:	b580      	push	{r7, lr}
 801178e:	b084      	sub	sp, #16
 8011790:	af00      	add	r7, sp, #0
 8011792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8011794:	f7ff ffee 	bl	8011774 <HAL_GetTick>
 8011798:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 801179e:	68fb      	ldr	r3, [r7, #12]
 80117a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80117a4:	d005      	beq.n	80117b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80117a6:	4b0a      	ldr	r3, [pc, #40]	; (80117d0 <HAL_Delay+0x44>)
 80117a8:	781b      	ldrb	r3, [r3, #0]
 80117aa:	461a      	mov	r2, r3
 80117ac:	68fb      	ldr	r3, [r7, #12]
 80117ae:	4413      	add	r3, r2
 80117b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80117b2:	bf00      	nop
 80117b4:	f7ff ffde 	bl	8011774 <HAL_GetTick>
 80117b8:	4602      	mov	r2, r0
 80117ba:	68bb      	ldr	r3, [r7, #8]
 80117bc:	1ad3      	subs	r3, r2, r3
 80117be:	68fa      	ldr	r2, [r7, #12]
 80117c0:	429a      	cmp	r2, r3
 80117c2:	d8f7      	bhi.n	80117b4 <HAL_Delay+0x28>
  {
  }
}
 80117c4:	bf00      	nop
 80117c6:	bf00      	nop
 80117c8:	3710      	adds	r7, #16
 80117ca:	46bd      	mov	sp, r7
 80117cc:	bd80      	pop	{r7, pc}
 80117ce:	bf00      	nop
 80117d0:	20000008 	.word	0x20000008

080117d4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80117d4:	b580      	push	{r7, lr}
 80117d6:	b084      	sub	sp, #16
 80117d8:	af00      	add	r7, sp, #0
 80117da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80117dc:	2300      	movs	r3, #0
 80117de:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	2b00      	cmp	r3, #0
 80117e4:	d101      	bne.n	80117ea <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80117e6:	2301      	movs	r3, #1
 80117e8:	e033      	b.n	8011852 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	d109      	bne.n	8011806 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80117f2:	6878      	ldr	r0, [r7, #4]
 80117f4:	f7fe ffd6 	bl	80107a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	2200      	movs	r2, #0
 80117fc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	2200      	movs	r2, #0
 8011802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801180a:	f003 0310 	and.w	r3, r3, #16
 801180e:	2b00      	cmp	r3, #0
 8011810:	d118      	bne.n	8011844 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011816:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 801181a:	f023 0302 	bic.w	r3, r3, #2
 801181e:	f043 0202 	orr.w	r2, r3, #2
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8011826:	6878      	ldr	r0, [r7, #4]
 8011828:	f000 f93a 	bl	8011aa0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	2200      	movs	r2, #0
 8011830:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011836:	f023 0303 	bic.w	r3, r3, #3
 801183a:	f043 0201 	orr.w	r2, r3, #1
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	641a      	str	r2, [r3, #64]	; 0x40
 8011842:	e001      	b.n	8011848 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8011844:	2301      	movs	r3, #1
 8011846:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	2200      	movs	r2, #0
 801184c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8011850:	7bfb      	ldrb	r3, [r7, #15]
}
 8011852:	4618      	mov	r0, r3
 8011854:	3710      	adds	r7, #16
 8011856:	46bd      	mov	sp, r7
 8011858:	bd80      	pop	{r7, pc}
	...

0801185c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 801185c:	b480      	push	{r7}
 801185e:	b085      	sub	sp, #20
 8011860:	af00      	add	r7, sp, #0
 8011862:	6078      	str	r0, [r7, #4]
 8011864:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8011866:	2300      	movs	r3, #0
 8011868:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011870:	2b01      	cmp	r3, #1
 8011872:	d101      	bne.n	8011878 <HAL_ADC_ConfigChannel+0x1c>
 8011874:	2302      	movs	r3, #2
 8011876:	e105      	b.n	8011a84 <HAL_ADC_ConfigChannel+0x228>
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	2201      	movs	r2, #1
 801187c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8011880:	683b      	ldr	r3, [r7, #0]
 8011882:	681b      	ldr	r3, [r3, #0]
 8011884:	2b09      	cmp	r3, #9
 8011886:	d925      	bls.n	80118d4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	681b      	ldr	r3, [r3, #0]
 801188c:	68d9      	ldr	r1, [r3, #12]
 801188e:	683b      	ldr	r3, [r7, #0]
 8011890:	681b      	ldr	r3, [r3, #0]
 8011892:	b29b      	uxth	r3, r3
 8011894:	461a      	mov	r2, r3
 8011896:	4613      	mov	r3, r2
 8011898:	005b      	lsls	r3, r3, #1
 801189a:	4413      	add	r3, r2
 801189c:	3b1e      	subs	r3, #30
 801189e:	2207      	movs	r2, #7
 80118a0:	fa02 f303 	lsl.w	r3, r2, r3
 80118a4:	43da      	mvns	r2, r3
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	681b      	ldr	r3, [r3, #0]
 80118aa:	400a      	ands	r2, r1
 80118ac:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	681b      	ldr	r3, [r3, #0]
 80118b2:	68d9      	ldr	r1, [r3, #12]
 80118b4:	683b      	ldr	r3, [r7, #0]
 80118b6:	689a      	ldr	r2, [r3, #8]
 80118b8:	683b      	ldr	r3, [r7, #0]
 80118ba:	681b      	ldr	r3, [r3, #0]
 80118bc:	b29b      	uxth	r3, r3
 80118be:	4618      	mov	r0, r3
 80118c0:	4603      	mov	r3, r0
 80118c2:	005b      	lsls	r3, r3, #1
 80118c4:	4403      	add	r3, r0
 80118c6:	3b1e      	subs	r3, #30
 80118c8:	409a      	lsls	r2, r3
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	681b      	ldr	r3, [r3, #0]
 80118ce:	430a      	orrs	r2, r1
 80118d0:	60da      	str	r2, [r3, #12]
 80118d2:	e022      	b.n	801191a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	681b      	ldr	r3, [r3, #0]
 80118d8:	6919      	ldr	r1, [r3, #16]
 80118da:	683b      	ldr	r3, [r7, #0]
 80118dc:	681b      	ldr	r3, [r3, #0]
 80118de:	b29b      	uxth	r3, r3
 80118e0:	461a      	mov	r2, r3
 80118e2:	4613      	mov	r3, r2
 80118e4:	005b      	lsls	r3, r3, #1
 80118e6:	4413      	add	r3, r2
 80118e8:	2207      	movs	r2, #7
 80118ea:	fa02 f303 	lsl.w	r3, r2, r3
 80118ee:	43da      	mvns	r2, r3
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	681b      	ldr	r3, [r3, #0]
 80118f4:	400a      	ands	r2, r1
 80118f6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	681b      	ldr	r3, [r3, #0]
 80118fc:	6919      	ldr	r1, [r3, #16]
 80118fe:	683b      	ldr	r3, [r7, #0]
 8011900:	689a      	ldr	r2, [r3, #8]
 8011902:	683b      	ldr	r3, [r7, #0]
 8011904:	681b      	ldr	r3, [r3, #0]
 8011906:	b29b      	uxth	r3, r3
 8011908:	4618      	mov	r0, r3
 801190a:	4603      	mov	r3, r0
 801190c:	005b      	lsls	r3, r3, #1
 801190e:	4403      	add	r3, r0
 8011910:	409a      	lsls	r2, r3
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	681b      	ldr	r3, [r3, #0]
 8011916:	430a      	orrs	r2, r1
 8011918:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 801191a:	683b      	ldr	r3, [r7, #0]
 801191c:	685b      	ldr	r3, [r3, #4]
 801191e:	2b06      	cmp	r3, #6
 8011920:	d824      	bhi.n	801196c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	681b      	ldr	r3, [r3, #0]
 8011926:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8011928:	683b      	ldr	r3, [r7, #0]
 801192a:	685a      	ldr	r2, [r3, #4]
 801192c:	4613      	mov	r3, r2
 801192e:	009b      	lsls	r3, r3, #2
 8011930:	4413      	add	r3, r2
 8011932:	3b05      	subs	r3, #5
 8011934:	221f      	movs	r2, #31
 8011936:	fa02 f303 	lsl.w	r3, r2, r3
 801193a:	43da      	mvns	r2, r3
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	681b      	ldr	r3, [r3, #0]
 8011940:	400a      	ands	r2, r1
 8011942:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	681b      	ldr	r3, [r3, #0]
 8011948:	6b59      	ldr	r1, [r3, #52]	; 0x34
 801194a:	683b      	ldr	r3, [r7, #0]
 801194c:	681b      	ldr	r3, [r3, #0]
 801194e:	b29b      	uxth	r3, r3
 8011950:	4618      	mov	r0, r3
 8011952:	683b      	ldr	r3, [r7, #0]
 8011954:	685a      	ldr	r2, [r3, #4]
 8011956:	4613      	mov	r3, r2
 8011958:	009b      	lsls	r3, r3, #2
 801195a:	4413      	add	r3, r2
 801195c:	3b05      	subs	r3, #5
 801195e:	fa00 f203 	lsl.w	r2, r0, r3
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	681b      	ldr	r3, [r3, #0]
 8011966:	430a      	orrs	r2, r1
 8011968:	635a      	str	r2, [r3, #52]	; 0x34
 801196a:	e04c      	b.n	8011a06 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 801196c:	683b      	ldr	r3, [r7, #0]
 801196e:	685b      	ldr	r3, [r3, #4]
 8011970:	2b0c      	cmp	r3, #12
 8011972:	d824      	bhi.n	80119be <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	681b      	ldr	r3, [r3, #0]
 8011978:	6b19      	ldr	r1, [r3, #48]	; 0x30
 801197a:	683b      	ldr	r3, [r7, #0]
 801197c:	685a      	ldr	r2, [r3, #4]
 801197e:	4613      	mov	r3, r2
 8011980:	009b      	lsls	r3, r3, #2
 8011982:	4413      	add	r3, r2
 8011984:	3b23      	subs	r3, #35	; 0x23
 8011986:	221f      	movs	r2, #31
 8011988:	fa02 f303 	lsl.w	r3, r2, r3
 801198c:	43da      	mvns	r2, r3
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	681b      	ldr	r3, [r3, #0]
 8011992:	400a      	ands	r2, r1
 8011994:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	681b      	ldr	r3, [r3, #0]
 801199a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 801199c:	683b      	ldr	r3, [r7, #0]
 801199e:	681b      	ldr	r3, [r3, #0]
 80119a0:	b29b      	uxth	r3, r3
 80119a2:	4618      	mov	r0, r3
 80119a4:	683b      	ldr	r3, [r7, #0]
 80119a6:	685a      	ldr	r2, [r3, #4]
 80119a8:	4613      	mov	r3, r2
 80119aa:	009b      	lsls	r3, r3, #2
 80119ac:	4413      	add	r3, r2
 80119ae:	3b23      	subs	r3, #35	; 0x23
 80119b0:	fa00 f203 	lsl.w	r2, r0, r3
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	681b      	ldr	r3, [r3, #0]
 80119b8:	430a      	orrs	r2, r1
 80119ba:	631a      	str	r2, [r3, #48]	; 0x30
 80119bc:	e023      	b.n	8011a06 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	681b      	ldr	r3, [r3, #0]
 80119c2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80119c4:	683b      	ldr	r3, [r7, #0]
 80119c6:	685a      	ldr	r2, [r3, #4]
 80119c8:	4613      	mov	r3, r2
 80119ca:	009b      	lsls	r3, r3, #2
 80119cc:	4413      	add	r3, r2
 80119ce:	3b41      	subs	r3, #65	; 0x41
 80119d0:	221f      	movs	r2, #31
 80119d2:	fa02 f303 	lsl.w	r3, r2, r3
 80119d6:	43da      	mvns	r2, r3
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	681b      	ldr	r3, [r3, #0]
 80119dc:	400a      	ands	r2, r1
 80119de:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	681b      	ldr	r3, [r3, #0]
 80119e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80119e6:	683b      	ldr	r3, [r7, #0]
 80119e8:	681b      	ldr	r3, [r3, #0]
 80119ea:	b29b      	uxth	r3, r3
 80119ec:	4618      	mov	r0, r3
 80119ee:	683b      	ldr	r3, [r7, #0]
 80119f0:	685a      	ldr	r2, [r3, #4]
 80119f2:	4613      	mov	r3, r2
 80119f4:	009b      	lsls	r3, r3, #2
 80119f6:	4413      	add	r3, r2
 80119f8:	3b41      	subs	r3, #65	; 0x41
 80119fa:	fa00 f203 	lsl.w	r2, r0, r3
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	681b      	ldr	r3, [r3, #0]
 8011a02:	430a      	orrs	r2, r1
 8011a04:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8011a06:	4b22      	ldr	r3, [pc, #136]	; (8011a90 <HAL_ADC_ConfigChannel+0x234>)
 8011a08:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	681b      	ldr	r3, [r3, #0]
 8011a0e:	4a21      	ldr	r2, [pc, #132]	; (8011a94 <HAL_ADC_ConfigChannel+0x238>)
 8011a10:	4293      	cmp	r3, r2
 8011a12:	d109      	bne.n	8011a28 <HAL_ADC_ConfigChannel+0x1cc>
 8011a14:	683b      	ldr	r3, [r7, #0]
 8011a16:	681b      	ldr	r3, [r3, #0]
 8011a18:	2b12      	cmp	r3, #18
 8011a1a:	d105      	bne.n	8011a28 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8011a1c:	68fb      	ldr	r3, [r7, #12]
 8011a1e:	685b      	ldr	r3, [r3, #4]
 8011a20:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8011a24:	68fb      	ldr	r3, [r7, #12]
 8011a26:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	681b      	ldr	r3, [r3, #0]
 8011a2c:	4a19      	ldr	r2, [pc, #100]	; (8011a94 <HAL_ADC_ConfigChannel+0x238>)
 8011a2e:	4293      	cmp	r3, r2
 8011a30:	d123      	bne.n	8011a7a <HAL_ADC_ConfigChannel+0x21e>
 8011a32:	683b      	ldr	r3, [r7, #0]
 8011a34:	681b      	ldr	r3, [r3, #0]
 8011a36:	2b10      	cmp	r3, #16
 8011a38:	d003      	beq.n	8011a42 <HAL_ADC_ConfigChannel+0x1e6>
 8011a3a:	683b      	ldr	r3, [r7, #0]
 8011a3c:	681b      	ldr	r3, [r3, #0]
 8011a3e:	2b11      	cmp	r3, #17
 8011a40:	d11b      	bne.n	8011a7a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8011a42:	68fb      	ldr	r3, [r7, #12]
 8011a44:	685b      	ldr	r3, [r3, #4]
 8011a46:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8011a4a:	68fb      	ldr	r3, [r7, #12]
 8011a4c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8011a4e:	683b      	ldr	r3, [r7, #0]
 8011a50:	681b      	ldr	r3, [r3, #0]
 8011a52:	2b10      	cmp	r3, #16
 8011a54:	d111      	bne.n	8011a7a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8011a56:	4b10      	ldr	r3, [pc, #64]	; (8011a98 <HAL_ADC_ConfigChannel+0x23c>)
 8011a58:	681b      	ldr	r3, [r3, #0]
 8011a5a:	4a10      	ldr	r2, [pc, #64]	; (8011a9c <HAL_ADC_ConfigChannel+0x240>)
 8011a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8011a60:	0c9a      	lsrs	r2, r3, #18
 8011a62:	4613      	mov	r3, r2
 8011a64:	009b      	lsls	r3, r3, #2
 8011a66:	4413      	add	r3, r2
 8011a68:	005b      	lsls	r3, r3, #1
 8011a6a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8011a6c:	e002      	b.n	8011a74 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8011a6e:	68bb      	ldr	r3, [r7, #8]
 8011a70:	3b01      	subs	r3, #1
 8011a72:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8011a74:	68bb      	ldr	r3, [r7, #8]
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	d1f9      	bne.n	8011a6e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	2200      	movs	r2, #0
 8011a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8011a82:	2300      	movs	r3, #0
}
 8011a84:	4618      	mov	r0, r3
 8011a86:	3714      	adds	r7, #20
 8011a88:	46bd      	mov	sp, r7
 8011a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a8e:	4770      	bx	lr
 8011a90:	40012300 	.word	0x40012300
 8011a94:	40012000 	.word	0x40012000
 8011a98:	20000000 	.word	0x20000000
 8011a9c:	431bde83 	.word	0x431bde83

08011aa0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8011aa0:	b480      	push	{r7}
 8011aa2:	b085      	sub	sp, #20
 8011aa4:	af00      	add	r7, sp, #0
 8011aa6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8011aa8:	4b79      	ldr	r3, [pc, #484]	; (8011c90 <ADC_Init+0x1f0>)
 8011aaa:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8011aac:	68fb      	ldr	r3, [r7, #12]
 8011aae:	685b      	ldr	r3, [r3, #4]
 8011ab0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8011ab4:	68fb      	ldr	r3, [r7, #12]
 8011ab6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8011ab8:	68fb      	ldr	r3, [r7, #12]
 8011aba:	685a      	ldr	r2, [r3, #4]
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	685b      	ldr	r3, [r3, #4]
 8011ac0:	431a      	orrs	r2, r3
 8011ac2:	68fb      	ldr	r3, [r7, #12]
 8011ac4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	681b      	ldr	r3, [r3, #0]
 8011aca:	685a      	ldr	r2, [r3, #4]
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	681b      	ldr	r3, [r3, #0]
 8011ad0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8011ad4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	681b      	ldr	r3, [r3, #0]
 8011ada:	6859      	ldr	r1, [r3, #4]
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	691b      	ldr	r3, [r3, #16]
 8011ae0:	021a      	lsls	r2, r3, #8
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	681b      	ldr	r3, [r3, #0]
 8011ae6:	430a      	orrs	r2, r1
 8011ae8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	681b      	ldr	r3, [r3, #0]
 8011aee:	685a      	ldr	r2, [r3, #4]
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	681b      	ldr	r3, [r3, #0]
 8011af4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8011af8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	681b      	ldr	r3, [r3, #0]
 8011afe:	6859      	ldr	r1, [r3, #4]
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	689a      	ldr	r2, [r3, #8]
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	681b      	ldr	r3, [r3, #0]
 8011b08:	430a      	orrs	r2, r1
 8011b0a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	681b      	ldr	r3, [r3, #0]
 8011b10:	689a      	ldr	r2, [r3, #8]
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	681b      	ldr	r3, [r3, #0]
 8011b16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8011b1a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	681b      	ldr	r3, [r3, #0]
 8011b20:	6899      	ldr	r1, [r3, #8]
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	68da      	ldr	r2, [r3, #12]
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	681b      	ldr	r3, [r3, #0]
 8011b2a:	430a      	orrs	r2, r1
 8011b2c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011b32:	4a58      	ldr	r2, [pc, #352]	; (8011c94 <ADC_Init+0x1f4>)
 8011b34:	4293      	cmp	r3, r2
 8011b36:	d022      	beq.n	8011b7e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	681b      	ldr	r3, [r3, #0]
 8011b3c:	689a      	ldr	r2, [r3, #8]
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	681b      	ldr	r3, [r3, #0]
 8011b42:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8011b46:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	681b      	ldr	r3, [r3, #0]
 8011b4c:	6899      	ldr	r1, [r3, #8]
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	681b      	ldr	r3, [r3, #0]
 8011b56:	430a      	orrs	r2, r1
 8011b58:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	681b      	ldr	r3, [r3, #0]
 8011b5e:	689a      	ldr	r2, [r3, #8]
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	681b      	ldr	r3, [r3, #0]
 8011b64:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8011b68:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	681b      	ldr	r3, [r3, #0]
 8011b6e:	6899      	ldr	r1, [r3, #8]
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	681b      	ldr	r3, [r3, #0]
 8011b78:	430a      	orrs	r2, r1
 8011b7a:	609a      	str	r2, [r3, #8]
 8011b7c:	e00f      	b.n	8011b9e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	681b      	ldr	r3, [r3, #0]
 8011b82:	689a      	ldr	r2, [r3, #8]
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	681b      	ldr	r3, [r3, #0]
 8011b88:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8011b8c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	681b      	ldr	r3, [r3, #0]
 8011b92:	689a      	ldr	r2, [r3, #8]
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	681b      	ldr	r3, [r3, #0]
 8011b98:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8011b9c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	681b      	ldr	r3, [r3, #0]
 8011ba2:	689a      	ldr	r2, [r3, #8]
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	681b      	ldr	r3, [r3, #0]
 8011ba8:	f022 0202 	bic.w	r2, r2, #2
 8011bac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	681b      	ldr	r3, [r3, #0]
 8011bb2:	6899      	ldr	r1, [r3, #8]
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	7e1b      	ldrb	r3, [r3, #24]
 8011bb8:	005a      	lsls	r2, r3, #1
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	681b      	ldr	r3, [r3, #0]
 8011bbe:	430a      	orrs	r2, r1
 8011bc0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	d01b      	beq.n	8011c04 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	681b      	ldr	r3, [r3, #0]
 8011bd0:	685a      	ldr	r2, [r3, #4]
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	681b      	ldr	r3, [r3, #0]
 8011bd6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011bda:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	681b      	ldr	r3, [r3, #0]
 8011be0:	685a      	ldr	r2, [r3, #4]
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	681b      	ldr	r3, [r3, #0]
 8011be6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8011bea:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	681b      	ldr	r3, [r3, #0]
 8011bf0:	6859      	ldr	r1, [r3, #4]
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011bf6:	3b01      	subs	r3, #1
 8011bf8:	035a      	lsls	r2, r3, #13
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	681b      	ldr	r3, [r3, #0]
 8011bfe:	430a      	orrs	r2, r1
 8011c00:	605a      	str	r2, [r3, #4]
 8011c02:	e007      	b.n	8011c14 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	681b      	ldr	r3, [r3, #0]
 8011c08:	685a      	ldr	r2, [r3, #4]
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	681b      	ldr	r3, [r3, #0]
 8011c0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8011c12:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	681b      	ldr	r3, [r3, #0]
 8011c18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	681b      	ldr	r3, [r3, #0]
 8011c1e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8011c22:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	681b      	ldr	r3, [r3, #0]
 8011c28:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	69db      	ldr	r3, [r3, #28]
 8011c2e:	3b01      	subs	r3, #1
 8011c30:	051a      	lsls	r2, r3, #20
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	681b      	ldr	r3, [r3, #0]
 8011c36:	430a      	orrs	r2, r1
 8011c38:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	681b      	ldr	r3, [r3, #0]
 8011c3e:	689a      	ldr	r2, [r3, #8]
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	681b      	ldr	r3, [r3, #0]
 8011c44:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8011c48:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	681b      	ldr	r3, [r3, #0]
 8011c4e:	6899      	ldr	r1, [r3, #8]
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011c56:	025a      	lsls	r2, r3, #9
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	681b      	ldr	r3, [r3, #0]
 8011c5c:	430a      	orrs	r2, r1
 8011c5e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	681b      	ldr	r3, [r3, #0]
 8011c64:	689a      	ldr	r2, [r3, #8]
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	681b      	ldr	r3, [r3, #0]
 8011c6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011c6e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	681b      	ldr	r3, [r3, #0]
 8011c74:	6899      	ldr	r1, [r3, #8]
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	695b      	ldr	r3, [r3, #20]
 8011c7a:	029a      	lsls	r2, r3, #10
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	681b      	ldr	r3, [r3, #0]
 8011c80:	430a      	orrs	r2, r1
 8011c82:	609a      	str	r2, [r3, #8]
}
 8011c84:	bf00      	nop
 8011c86:	3714      	adds	r7, #20
 8011c88:	46bd      	mov	sp, r7
 8011c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c8e:	4770      	bx	lr
 8011c90:	40012300 	.word	0x40012300
 8011c94:	0f000001 	.word	0x0f000001

08011c98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8011c98:	b480      	push	{r7}
 8011c9a:	b085      	sub	sp, #20
 8011c9c:	af00      	add	r7, sp, #0
 8011c9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	f003 0307 	and.w	r3, r3, #7
 8011ca6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8011ca8:	4b0c      	ldr	r3, [pc, #48]	; (8011cdc <__NVIC_SetPriorityGrouping+0x44>)
 8011caa:	68db      	ldr	r3, [r3, #12]
 8011cac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8011cae:	68ba      	ldr	r2, [r7, #8]
 8011cb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8011cb4:	4013      	ands	r3, r2
 8011cb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8011cb8:	68fb      	ldr	r3, [r7, #12]
 8011cba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8011cbc:	68bb      	ldr	r3, [r7, #8]
 8011cbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8011cc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8011cc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011cc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8011cca:	4a04      	ldr	r2, [pc, #16]	; (8011cdc <__NVIC_SetPriorityGrouping+0x44>)
 8011ccc:	68bb      	ldr	r3, [r7, #8]
 8011cce:	60d3      	str	r3, [r2, #12]
}
 8011cd0:	bf00      	nop
 8011cd2:	3714      	adds	r7, #20
 8011cd4:	46bd      	mov	sp, r7
 8011cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cda:	4770      	bx	lr
 8011cdc:	e000ed00 	.word	0xe000ed00

08011ce0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8011ce0:	b480      	push	{r7}
 8011ce2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8011ce4:	4b04      	ldr	r3, [pc, #16]	; (8011cf8 <__NVIC_GetPriorityGrouping+0x18>)
 8011ce6:	68db      	ldr	r3, [r3, #12]
 8011ce8:	0a1b      	lsrs	r3, r3, #8
 8011cea:	f003 0307 	and.w	r3, r3, #7
}
 8011cee:	4618      	mov	r0, r3
 8011cf0:	46bd      	mov	sp, r7
 8011cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cf6:	4770      	bx	lr
 8011cf8:	e000ed00 	.word	0xe000ed00

08011cfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8011cfc:	b480      	push	{r7}
 8011cfe:	b083      	sub	sp, #12
 8011d00:	af00      	add	r7, sp, #0
 8011d02:	4603      	mov	r3, r0
 8011d04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8011d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	db0b      	blt.n	8011d26 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8011d0e:	79fb      	ldrb	r3, [r7, #7]
 8011d10:	f003 021f 	and.w	r2, r3, #31
 8011d14:	4907      	ldr	r1, [pc, #28]	; (8011d34 <__NVIC_EnableIRQ+0x38>)
 8011d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011d1a:	095b      	lsrs	r3, r3, #5
 8011d1c:	2001      	movs	r0, #1
 8011d1e:	fa00 f202 	lsl.w	r2, r0, r2
 8011d22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8011d26:	bf00      	nop
 8011d28:	370c      	adds	r7, #12
 8011d2a:	46bd      	mov	sp, r7
 8011d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d30:	4770      	bx	lr
 8011d32:	bf00      	nop
 8011d34:	e000e100 	.word	0xe000e100

08011d38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8011d38:	b480      	push	{r7}
 8011d3a:	b083      	sub	sp, #12
 8011d3c:	af00      	add	r7, sp, #0
 8011d3e:	4603      	mov	r3, r0
 8011d40:	6039      	str	r1, [r7, #0]
 8011d42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8011d44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011d48:	2b00      	cmp	r3, #0
 8011d4a:	db0a      	blt.n	8011d62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011d4c:	683b      	ldr	r3, [r7, #0]
 8011d4e:	b2da      	uxtb	r2, r3
 8011d50:	490c      	ldr	r1, [pc, #48]	; (8011d84 <__NVIC_SetPriority+0x4c>)
 8011d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011d56:	0112      	lsls	r2, r2, #4
 8011d58:	b2d2      	uxtb	r2, r2
 8011d5a:	440b      	add	r3, r1
 8011d5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8011d60:	e00a      	b.n	8011d78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011d62:	683b      	ldr	r3, [r7, #0]
 8011d64:	b2da      	uxtb	r2, r3
 8011d66:	4908      	ldr	r1, [pc, #32]	; (8011d88 <__NVIC_SetPriority+0x50>)
 8011d68:	79fb      	ldrb	r3, [r7, #7]
 8011d6a:	f003 030f 	and.w	r3, r3, #15
 8011d6e:	3b04      	subs	r3, #4
 8011d70:	0112      	lsls	r2, r2, #4
 8011d72:	b2d2      	uxtb	r2, r2
 8011d74:	440b      	add	r3, r1
 8011d76:	761a      	strb	r2, [r3, #24]
}
 8011d78:	bf00      	nop
 8011d7a:	370c      	adds	r7, #12
 8011d7c:	46bd      	mov	sp, r7
 8011d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d82:	4770      	bx	lr
 8011d84:	e000e100 	.word	0xe000e100
 8011d88:	e000ed00 	.word	0xe000ed00

08011d8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8011d8c:	b480      	push	{r7}
 8011d8e:	b089      	sub	sp, #36	; 0x24
 8011d90:	af00      	add	r7, sp, #0
 8011d92:	60f8      	str	r0, [r7, #12]
 8011d94:	60b9      	str	r1, [r7, #8]
 8011d96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8011d98:	68fb      	ldr	r3, [r7, #12]
 8011d9a:	f003 0307 	and.w	r3, r3, #7
 8011d9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8011da0:	69fb      	ldr	r3, [r7, #28]
 8011da2:	f1c3 0307 	rsb	r3, r3, #7
 8011da6:	2b04      	cmp	r3, #4
 8011da8:	bf28      	it	cs
 8011daa:	2304      	movcs	r3, #4
 8011dac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8011dae:	69fb      	ldr	r3, [r7, #28]
 8011db0:	3304      	adds	r3, #4
 8011db2:	2b06      	cmp	r3, #6
 8011db4:	d902      	bls.n	8011dbc <NVIC_EncodePriority+0x30>
 8011db6:	69fb      	ldr	r3, [r7, #28]
 8011db8:	3b03      	subs	r3, #3
 8011dba:	e000      	b.n	8011dbe <NVIC_EncodePriority+0x32>
 8011dbc:	2300      	movs	r3, #0
 8011dbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8011dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8011dc4:	69bb      	ldr	r3, [r7, #24]
 8011dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8011dca:	43da      	mvns	r2, r3
 8011dcc:	68bb      	ldr	r3, [r7, #8]
 8011dce:	401a      	ands	r2, r3
 8011dd0:	697b      	ldr	r3, [r7, #20]
 8011dd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8011dd4:	f04f 31ff 	mov.w	r1, #4294967295
 8011dd8:	697b      	ldr	r3, [r7, #20]
 8011dda:	fa01 f303 	lsl.w	r3, r1, r3
 8011dde:	43d9      	mvns	r1, r3
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8011de4:	4313      	orrs	r3, r2
         );
}
 8011de6:	4618      	mov	r0, r3
 8011de8:	3724      	adds	r7, #36	; 0x24
 8011dea:	46bd      	mov	sp, r7
 8011dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011df0:	4770      	bx	lr
	...

08011df4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8011df4:	b580      	push	{r7, lr}
 8011df6:	b082      	sub	sp, #8
 8011df8:	af00      	add	r7, sp, #0
 8011dfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	3b01      	subs	r3, #1
 8011e00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8011e04:	d301      	bcc.n	8011e0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8011e06:	2301      	movs	r3, #1
 8011e08:	e00f      	b.n	8011e2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8011e0a:	4a0a      	ldr	r2, [pc, #40]	; (8011e34 <SysTick_Config+0x40>)
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	3b01      	subs	r3, #1
 8011e10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8011e12:	210f      	movs	r1, #15
 8011e14:	f04f 30ff 	mov.w	r0, #4294967295
 8011e18:	f7ff ff8e 	bl	8011d38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8011e1c:	4b05      	ldr	r3, [pc, #20]	; (8011e34 <SysTick_Config+0x40>)
 8011e1e:	2200      	movs	r2, #0
 8011e20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8011e22:	4b04      	ldr	r3, [pc, #16]	; (8011e34 <SysTick_Config+0x40>)
 8011e24:	2207      	movs	r2, #7
 8011e26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8011e28:	2300      	movs	r3, #0
}
 8011e2a:	4618      	mov	r0, r3
 8011e2c:	3708      	adds	r7, #8
 8011e2e:	46bd      	mov	sp, r7
 8011e30:	bd80      	pop	{r7, pc}
 8011e32:	bf00      	nop
 8011e34:	e000e010 	.word	0xe000e010

08011e38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8011e38:	b580      	push	{r7, lr}
 8011e3a:	b082      	sub	sp, #8
 8011e3c:	af00      	add	r7, sp, #0
 8011e3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8011e40:	6878      	ldr	r0, [r7, #4]
 8011e42:	f7ff ff29 	bl	8011c98 <__NVIC_SetPriorityGrouping>
}
 8011e46:	bf00      	nop
 8011e48:	3708      	adds	r7, #8
 8011e4a:	46bd      	mov	sp, r7
 8011e4c:	bd80      	pop	{r7, pc}

08011e4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8011e4e:	b580      	push	{r7, lr}
 8011e50:	b086      	sub	sp, #24
 8011e52:	af00      	add	r7, sp, #0
 8011e54:	4603      	mov	r3, r0
 8011e56:	60b9      	str	r1, [r7, #8]
 8011e58:	607a      	str	r2, [r7, #4]
 8011e5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8011e5c:	2300      	movs	r3, #0
 8011e5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8011e60:	f7ff ff3e 	bl	8011ce0 <__NVIC_GetPriorityGrouping>
 8011e64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8011e66:	687a      	ldr	r2, [r7, #4]
 8011e68:	68b9      	ldr	r1, [r7, #8]
 8011e6a:	6978      	ldr	r0, [r7, #20]
 8011e6c:	f7ff ff8e 	bl	8011d8c <NVIC_EncodePriority>
 8011e70:	4602      	mov	r2, r0
 8011e72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011e76:	4611      	mov	r1, r2
 8011e78:	4618      	mov	r0, r3
 8011e7a:	f7ff ff5d 	bl	8011d38 <__NVIC_SetPriority>
}
 8011e7e:	bf00      	nop
 8011e80:	3718      	adds	r7, #24
 8011e82:	46bd      	mov	sp, r7
 8011e84:	bd80      	pop	{r7, pc}

08011e86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8011e86:	b580      	push	{r7, lr}
 8011e88:	b082      	sub	sp, #8
 8011e8a:	af00      	add	r7, sp, #0
 8011e8c:	4603      	mov	r3, r0
 8011e8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8011e90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011e94:	4618      	mov	r0, r3
 8011e96:	f7ff ff31 	bl	8011cfc <__NVIC_EnableIRQ>
}
 8011e9a:	bf00      	nop
 8011e9c:	3708      	adds	r7, #8
 8011e9e:	46bd      	mov	sp, r7
 8011ea0:	bd80      	pop	{r7, pc}

08011ea2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8011ea2:	b580      	push	{r7, lr}
 8011ea4:	b082      	sub	sp, #8
 8011ea6:	af00      	add	r7, sp, #0
 8011ea8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8011eaa:	6878      	ldr	r0, [r7, #4]
 8011eac:	f7ff ffa2 	bl	8011df4 <SysTick_Config>
 8011eb0:	4603      	mov	r3, r0
}
 8011eb2:	4618      	mov	r0, r3
 8011eb4:	3708      	adds	r7, #8
 8011eb6:	46bd      	mov	sp, r7
 8011eb8:	bd80      	pop	{r7, pc}
	...

08011ebc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8011ebc:	b580      	push	{r7, lr}
 8011ebe:	b086      	sub	sp, #24
 8011ec0:	af00      	add	r7, sp, #0
 8011ec2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8011ec4:	2300      	movs	r3, #0
 8011ec6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8011ec8:	f7ff fc54 	bl	8011774 <HAL_GetTick>
 8011ecc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	d101      	bne.n	8011ed8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8011ed4:	2301      	movs	r3, #1
 8011ed6:	e099      	b.n	801200c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	2202      	movs	r2, #2
 8011edc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	2200      	movs	r2, #0
 8011ee4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	681b      	ldr	r3, [r3, #0]
 8011eec:	681a      	ldr	r2, [r3, #0]
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	681b      	ldr	r3, [r3, #0]
 8011ef2:	f022 0201 	bic.w	r2, r2, #1
 8011ef6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8011ef8:	e00f      	b.n	8011f1a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8011efa:	f7ff fc3b 	bl	8011774 <HAL_GetTick>
 8011efe:	4602      	mov	r2, r0
 8011f00:	693b      	ldr	r3, [r7, #16]
 8011f02:	1ad3      	subs	r3, r2, r3
 8011f04:	2b05      	cmp	r3, #5
 8011f06:	d908      	bls.n	8011f1a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	2220      	movs	r2, #32
 8011f0c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	2203      	movs	r2, #3
 8011f12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8011f16:	2303      	movs	r3, #3
 8011f18:	e078      	b.n	801200c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	681b      	ldr	r3, [r3, #0]
 8011f1e:	681b      	ldr	r3, [r3, #0]
 8011f20:	f003 0301 	and.w	r3, r3, #1
 8011f24:	2b00      	cmp	r3, #0
 8011f26:	d1e8      	bne.n	8011efa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	681b      	ldr	r3, [r3, #0]
 8011f2c:	681b      	ldr	r3, [r3, #0]
 8011f2e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8011f30:	697a      	ldr	r2, [r7, #20]
 8011f32:	4b38      	ldr	r3, [pc, #224]	; (8012014 <HAL_DMA_Init+0x158>)
 8011f34:	4013      	ands	r3, r2
 8011f36:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	685a      	ldr	r2, [r3, #4]
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	689b      	ldr	r3, [r3, #8]
 8011f40:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8011f46:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	691b      	ldr	r3, [r3, #16]
 8011f4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8011f52:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	699b      	ldr	r3, [r3, #24]
 8011f58:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8011f5e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	6a1b      	ldr	r3, [r3, #32]
 8011f64:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8011f66:	697a      	ldr	r2, [r7, #20]
 8011f68:	4313      	orrs	r3, r2
 8011f6a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f70:	2b04      	cmp	r3, #4
 8011f72:	d107      	bne.n	8011f84 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011f7c:	4313      	orrs	r3, r2
 8011f7e:	697a      	ldr	r2, [r7, #20]
 8011f80:	4313      	orrs	r3, r2
 8011f82:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	681b      	ldr	r3, [r3, #0]
 8011f88:	697a      	ldr	r2, [r7, #20]
 8011f8a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	681b      	ldr	r3, [r3, #0]
 8011f90:	695b      	ldr	r3, [r3, #20]
 8011f92:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8011f94:	697b      	ldr	r3, [r7, #20]
 8011f96:	f023 0307 	bic.w	r3, r3, #7
 8011f9a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011fa0:	697a      	ldr	r2, [r7, #20]
 8011fa2:	4313      	orrs	r3, r2
 8011fa4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011faa:	2b04      	cmp	r3, #4
 8011fac:	d117      	bne.n	8011fde <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011fb2:	697a      	ldr	r2, [r7, #20]
 8011fb4:	4313      	orrs	r3, r2
 8011fb6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011fbc:	2b00      	cmp	r3, #0
 8011fbe:	d00e      	beq.n	8011fde <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8011fc0:	6878      	ldr	r0, [r7, #4]
 8011fc2:	f000 fa7b 	bl	80124bc <DMA_CheckFifoParam>
 8011fc6:	4603      	mov	r3, r0
 8011fc8:	2b00      	cmp	r3, #0
 8011fca:	d008      	beq.n	8011fde <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	2240      	movs	r2, #64	; 0x40
 8011fd0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	2201      	movs	r2, #1
 8011fd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8011fda:	2301      	movs	r3, #1
 8011fdc:	e016      	b.n	801200c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	681b      	ldr	r3, [r3, #0]
 8011fe2:	697a      	ldr	r2, [r7, #20]
 8011fe4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8011fe6:	6878      	ldr	r0, [r7, #4]
 8011fe8:	f000 fa32 	bl	8012450 <DMA_CalcBaseAndBitshift>
 8011fec:	4603      	mov	r3, r0
 8011fee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011ff4:	223f      	movs	r2, #63	; 0x3f
 8011ff6:	409a      	lsls	r2, r3
 8011ff8:	68fb      	ldr	r3, [r7, #12]
 8011ffa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	2200      	movs	r2, #0
 8012000:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	2201      	movs	r2, #1
 8012006:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 801200a:	2300      	movs	r3, #0
}
 801200c:	4618      	mov	r0, r3
 801200e:	3718      	adds	r7, #24
 8012010:	46bd      	mov	sp, r7
 8012012:	bd80      	pop	{r7, pc}
 8012014:	f010803f 	.word	0xf010803f

08012018 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8012018:	b580      	push	{r7, lr}
 801201a:	b084      	sub	sp, #16
 801201c:	af00      	add	r7, sp, #0
 801201e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012024:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8012026:	f7ff fba5 	bl	8011774 <HAL_GetTick>
 801202a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8012032:	b2db      	uxtb	r3, r3
 8012034:	2b02      	cmp	r3, #2
 8012036:	d008      	beq.n	801204a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	2280      	movs	r2, #128	; 0x80
 801203c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	2200      	movs	r2, #0
 8012042:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8012046:	2301      	movs	r3, #1
 8012048:	e052      	b.n	80120f0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	681b      	ldr	r3, [r3, #0]
 801204e:	681a      	ldr	r2, [r3, #0]
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	681b      	ldr	r3, [r3, #0]
 8012054:	f022 0216 	bic.w	r2, r2, #22
 8012058:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	681b      	ldr	r3, [r3, #0]
 801205e:	695a      	ldr	r2, [r3, #20]
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	681b      	ldr	r3, [r3, #0]
 8012064:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8012068:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801206e:	2b00      	cmp	r3, #0
 8012070:	d103      	bne.n	801207a <HAL_DMA_Abort+0x62>
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012076:	2b00      	cmp	r3, #0
 8012078:	d007      	beq.n	801208a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	681b      	ldr	r3, [r3, #0]
 801207e:	681a      	ldr	r2, [r3, #0]
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	681b      	ldr	r3, [r3, #0]
 8012084:	f022 0208 	bic.w	r2, r2, #8
 8012088:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	681b      	ldr	r3, [r3, #0]
 801208e:	681a      	ldr	r2, [r3, #0]
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	681b      	ldr	r3, [r3, #0]
 8012094:	f022 0201 	bic.w	r2, r2, #1
 8012098:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801209a:	e013      	b.n	80120c4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 801209c:	f7ff fb6a 	bl	8011774 <HAL_GetTick>
 80120a0:	4602      	mov	r2, r0
 80120a2:	68bb      	ldr	r3, [r7, #8]
 80120a4:	1ad3      	subs	r3, r2, r3
 80120a6:	2b05      	cmp	r3, #5
 80120a8:	d90c      	bls.n	80120c4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	2220      	movs	r2, #32
 80120ae:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	2203      	movs	r2, #3
 80120b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	2200      	movs	r2, #0
 80120bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80120c0:	2303      	movs	r3, #3
 80120c2:	e015      	b.n	80120f0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	681b      	ldr	r3, [r3, #0]
 80120c8:	681b      	ldr	r3, [r3, #0]
 80120ca:	f003 0301 	and.w	r3, r3, #1
 80120ce:	2b00      	cmp	r3, #0
 80120d0:	d1e4      	bne.n	801209c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80120d6:	223f      	movs	r2, #63	; 0x3f
 80120d8:	409a      	lsls	r2, r3
 80120da:	68fb      	ldr	r3, [r7, #12]
 80120dc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	2201      	movs	r2, #1
 80120e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	2200      	movs	r2, #0
 80120ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80120ee:	2300      	movs	r3, #0
}
 80120f0:	4618      	mov	r0, r3
 80120f2:	3710      	adds	r7, #16
 80120f4:	46bd      	mov	sp, r7
 80120f6:	bd80      	pop	{r7, pc}

080120f8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80120f8:	b480      	push	{r7}
 80120fa:	b083      	sub	sp, #12
 80120fc:	af00      	add	r7, sp, #0
 80120fe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8012106:	b2db      	uxtb	r3, r3
 8012108:	2b02      	cmp	r3, #2
 801210a:	d004      	beq.n	8012116 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	2280      	movs	r2, #128	; 0x80
 8012110:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8012112:	2301      	movs	r3, #1
 8012114:	e00c      	b.n	8012130 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	2205      	movs	r2, #5
 801211a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	681b      	ldr	r3, [r3, #0]
 8012122:	681a      	ldr	r2, [r3, #0]
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	681b      	ldr	r3, [r3, #0]
 8012128:	f022 0201 	bic.w	r2, r2, #1
 801212c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 801212e:	2300      	movs	r3, #0
}
 8012130:	4618      	mov	r0, r3
 8012132:	370c      	adds	r7, #12
 8012134:	46bd      	mov	sp, r7
 8012136:	f85d 7b04 	ldr.w	r7, [sp], #4
 801213a:	4770      	bx	lr

0801213c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 801213c:	b580      	push	{r7, lr}
 801213e:	b086      	sub	sp, #24
 8012140:	af00      	add	r7, sp, #0
 8012142:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8012144:	2300      	movs	r3, #0
 8012146:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8012148:	4b8e      	ldr	r3, [pc, #568]	; (8012384 <HAL_DMA_IRQHandler+0x248>)
 801214a:	681b      	ldr	r3, [r3, #0]
 801214c:	4a8e      	ldr	r2, [pc, #568]	; (8012388 <HAL_DMA_IRQHandler+0x24c>)
 801214e:	fba2 2303 	umull	r2, r3, r2, r3
 8012152:	0a9b      	lsrs	r3, r3, #10
 8012154:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801215a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 801215c:	693b      	ldr	r3, [r7, #16]
 801215e:	681b      	ldr	r3, [r3, #0]
 8012160:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012166:	2208      	movs	r2, #8
 8012168:	409a      	lsls	r2, r3
 801216a:	68fb      	ldr	r3, [r7, #12]
 801216c:	4013      	ands	r3, r2
 801216e:	2b00      	cmp	r3, #0
 8012170:	d01a      	beq.n	80121a8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	681b      	ldr	r3, [r3, #0]
 8012176:	681b      	ldr	r3, [r3, #0]
 8012178:	f003 0304 	and.w	r3, r3, #4
 801217c:	2b00      	cmp	r3, #0
 801217e:	d013      	beq.n	80121a8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	681b      	ldr	r3, [r3, #0]
 8012184:	681a      	ldr	r2, [r3, #0]
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	681b      	ldr	r3, [r3, #0]
 801218a:	f022 0204 	bic.w	r2, r2, #4
 801218e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012194:	2208      	movs	r2, #8
 8012196:	409a      	lsls	r2, r3
 8012198:	693b      	ldr	r3, [r7, #16]
 801219a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80121a0:	f043 0201 	orr.w	r2, r3, #1
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80121ac:	2201      	movs	r2, #1
 80121ae:	409a      	lsls	r2, r3
 80121b0:	68fb      	ldr	r3, [r7, #12]
 80121b2:	4013      	ands	r3, r2
 80121b4:	2b00      	cmp	r3, #0
 80121b6:	d012      	beq.n	80121de <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	681b      	ldr	r3, [r3, #0]
 80121bc:	695b      	ldr	r3, [r3, #20]
 80121be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80121c2:	2b00      	cmp	r3, #0
 80121c4:	d00b      	beq.n	80121de <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80121ca:	2201      	movs	r2, #1
 80121cc:	409a      	lsls	r2, r3
 80121ce:	693b      	ldr	r3, [r7, #16]
 80121d0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80121d6:	f043 0202 	orr.w	r2, r3, #2
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80121e2:	2204      	movs	r2, #4
 80121e4:	409a      	lsls	r2, r3
 80121e6:	68fb      	ldr	r3, [r7, #12]
 80121e8:	4013      	ands	r3, r2
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	d012      	beq.n	8012214 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	681b      	ldr	r3, [r3, #0]
 80121f2:	681b      	ldr	r3, [r3, #0]
 80121f4:	f003 0302 	and.w	r3, r3, #2
 80121f8:	2b00      	cmp	r3, #0
 80121fa:	d00b      	beq.n	8012214 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012200:	2204      	movs	r2, #4
 8012202:	409a      	lsls	r2, r3
 8012204:	693b      	ldr	r3, [r7, #16]
 8012206:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801220c:	f043 0204 	orr.w	r2, r3, #4
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012218:	2210      	movs	r2, #16
 801221a:	409a      	lsls	r2, r3
 801221c:	68fb      	ldr	r3, [r7, #12]
 801221e:	4013      	ands	r3, r2
 8012220:	2b00      	cmp	r3, #0
 8012222:	d043      	beq.n	80122ac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8012224:	687b      	ldr	r3, [r7, #4]
 8012226:	681b      	ldr	r3, [r3, #0]
 8012228:	681b      	ldr	r3, [r3, #0]
 801222a:	f003 0308 	and.w	r3, r3, #8
 801222e:	2b00      	cmp	r3, #0
 8012230:	d03c      	beq.n	80122ac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012236:	2210      	movs	r2, #16
 8012238:	409a      	lsls	r2, r3
 801223a:	693b      	ldr	r3, [r7, #16]
 801223c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 801223e:	687b      	ldr	r3, [r7, #4]
 8012240:	681b      	ldr	r3, [r3, #0]
 8012242:	681b      	ldr	r3, [r3, #0]
 8012244:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8012248:	2b00      	cmp	r3, #0
 801224a:	d018      	beq.n	801227e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	681b      	ldr	r3, [r3, #0]
 8012250:	681b      	ldr	r3, [r3, #0]
 8012252:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8012256:	2b00      	cmp	r3, #0
 8012258:	d108      	bne.n	801226c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801225e:	2b00      	cmp	r3, #0
 8012260:	d024      	beq.n	80122ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012266:	6878      	ldr	r0, [r7, #4]
 8012268:	4798      	blx	r3
 801226a:	e01f      	b.n	80122ac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 801226c:	687b      	ldr	r3, [r7, #4]
 801226e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012270:	2b00      	cmp	r3, #0
 8012272:	d01b      	beq.n	80122ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012278:	6878      	ldr	r0, [r7, #4]
 801227a:	4798      	blx	r3
 801227c:	e016      	b.n	80122ac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	681b      	ldr	r3, [r3, #0]
 8012282:	681b      	ldr	r3, [r3, #0]
 8012284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012288:	2b00      	cmp	r3, #0
 801228a:	d107      	bne.n	801229c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	681b      	ldr	r3, [r3, #0]
 8012290:	681a      	ldr	r2, [r3, #0]
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	681b      	ldr	r3, [r3, #0]
 8012296:	f022 0208 	bic.w	r2, r2, #8
 801229a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80122a0:	2b00      	cmp	r3, #0
 80122a2:	d003      	beq.n	80122ac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80122a8:	6878      	ldr	r0, [r7, #4]
 80122aa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80122b0:	2220      	movs	r2, #32
 80122b2:	409a      	lsls	r2, r3
 80122b4:	68fb      	ldr	r3, [r7, #12]
 80122b6:	4013      	ands	r3, r2
 80122b8:	2b00      	cmp	r3, #0
 80122ba:	f000 808f 	beq.w	80123dc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	681b      	ldr	r3, [r3, #0]
 80122c2:	681b      	ldr	r3, [r3, #0]
 80122c4:	f003 0310 	and.w	r3, r3, #16
 80122c8:	2b00      	cmp	r3, #0
 80122ca:	f000 8087 	beq.w	80123dc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80122d2:	2220      	movs	r2, #32
 80122d4:	409a      	lsls	r2, r3
 80122d6:	693b      	ldr	r3, [r7, #16]
 80122d8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80122e0:	b2db      	uxtb	r3, r3
 80122e2:	2b05      	cmp	r3, #5
 80122e4:	d136      	bne.n	8012354 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80122e6:	687b      	ldr	r3, [r7, #4]
 80122e8:	681b      	ldr	r3, [r3, #0]
 80122ea:	681a      	ldr	r2, [r3, #0]
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	681b      	ldr	r3, [r3, #0]
 80122f0:	f022 0216 	bic.w	r2, r2, #22
 80122f4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	681b      	ldr	r3, [r3, #0]
 80122fa:	695a      	ldr	r2, [r3, #20]
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	681b      	ldr	r3, [r3, #0]
 8012300:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8012304:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801230a:	2b00      	cmp	r3, #0
 801230c:	d103      	bne.n	8012316 <HAL_DMA_IRQHandler+0x1da>
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012312:	2b00      	cmp	r3, #0
 8012314:	d007      	beq.n	8012326 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	681b      	ldr	r3, [r3, #0]
 801231a:	681a      	ldr	r2, [r3, #0]
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	681b      	ldr	r3, [r3, #0]
 8012320:	f022 0208 	bic.w	r2, r2, #8
 8012324:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801232a:	223f      	movs	r2, #63	; 0x3f
 801232c:	409a      	lsls	r2, r3
 801232e:	693b      	ldr	r3, [r7, #16]
 8012330:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	2201      	movs	r2, #1
 8012336:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	2200      	movs	r2, #0
 801233e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8012342:	687b      	ldr	r3, [r7, #4]
 8012344:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012346:	2b00      	cmp	r3, #0
 8012348:	d07e      	beq.n	8012448 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801234e:	6878      	ldr	r0, [r7, #4]
 8012350:	4798      	blx	r3
        }
        return;
 8012352:	e079      	b.n	8012448 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	681b      	ldr	r3, [r3, #0]
 8012358:	681b      	ldr	r3, [r3, #0]
 801235a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801235e:	2b00      	cmp	r3, #0
 8012360:	d01d      	beq.n	801239e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	681b      	ldr	r3, [r3, #0]
 8012366:	681b      	ldr	r3, [r3, #0]
 8012368:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801236c:	2b00      	cmp	r3, #0
 801236e:	d10d      	bne.n	801238c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012374:	2b00      	cmp	r3, #0
 8012376:	d031      	beq.n	80123dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801237c:	6878      	ldr	r0, [r7, #4]
 801237e:	4798      	blx	r3
 8012380:	e02c      	b.n	80123dc <HAL_DMA_IRQHandler+0x2a0>
 8012382:	bf00      	nop
 8012384:	20000000 	.word	0x20000000
 8012388:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012390:	2b00      	cmp	r3, #0
 8012392:	d023      	beq.n	80123dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012398:	6878      	ldr	r0, [r7, #4]
 801239a:	4798      	blx	r3
 801239c:	e01e      	b.n	80123dc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	681b      	ldr	r3, [r3, #0]
 80123a2:	681b      	ldr	r3, [r3, #0]
 80123a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80123a8:	2b00      	cmp	r3, #0
 80123aa:	d10f      	bne.n	80123cc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	681b      	ldr	r3, [r3, #0]
 80123b0:	681a      	ldr	r2, [r3, #0]
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	681b      	ldr	r3, [r3, #0]
 80123b6:	f022 0210 	bic.w	r2, r2, #16
 80123ba:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	2201      	movs	r2, #1
 80123c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	2200      	movs	r2, #0
 80123c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80123d0:	2b00      	cmp	r3, #0
 80123d2:	d003      	beq.n	80123dc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80123d4:	687b      	ldr	r3, [r7, #4]
 80123d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80123d8:	6878      	ldr	r0, [r7, #4]
 80123da:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80123e0:	2b00      	cmp	r3, #0
 80123e2:	d032      	beq.n	801244a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80123e8:	f003 0301 	and.w	r3, r3, #1
 80123ec:	2b00      	cmp	r3, #0
 80123ee:	d022      	beq.n	8012436 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	2205      	movs	r2, #5
 80123f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	681b      	ldr	r3, [r3, #0]
 80123fc:	681a      	ldr	r2, [r3, #0]
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	681b      	ldr	r3, [r3, #0]
 8012402:	f022 0201 	bic.w	r2, r2, #1
 8012406:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8012408:	68bb      	ldr	r3, [r7, #8]
 801240a:	3301      	adds	r3, #1
 801240c:	60bb      	str	r3, [r7, #8]
 801240e:	697a      	ldr	r2, [r7, #20]
 8012410:	429a      	cmp	r2, r3
 8012412:	d307      	bcc.n	8012424 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	681b      	ldr	r3, [r3, #0]
 8012418:	681b      	ldr	r3, [r3, #0]
 801241a:	f003 0301 	and.w	r3, r3, #1
 801241e:	2b00      	cmp	r3, #0
 8012420:	d1f2      	bne.n	8012408 <HAL_DMA_IRQHandler+0x2cc>
 8012422:	e000      	b.n	8012426 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8012424:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	2201      	movs	r2, #1
 801242a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	2200      	movs	r2, #0
 8012432:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801243a:	2b00      	cmp	r3, #0
 801243c:	d005      	beq.n	801244a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012442:	6878      	ldr	r0, [r7, #4]
 8012444:	4798      	blx	r3
 8012446:	e000      	b.n	801244a <HAL_DMA_IRQHandler+0x30e>
        return;
 8012448:	bf00      	nop
    }
  }
}
 801244a:	3718      	adds	r7, #24
 801244c:	46bd      	mov	sp, r7
 801244e:	bd80      	pop	{r7, pc}

08012450 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8012450:	b480      	push	{r7}
 8012452:	b085      	sub	sp, #20
 8012454:	af00      	add	r7, sp, #0
 8012456:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	681b      	ldr	r3, [r3, #0]
 801245c:	b2db      	uxtb	r3, r3
 801245e:	3b10      	subs	r3, #16
 8012460:	4a14      	ldr	r2, [pc, #80]	; (80124b4 <DMA_CalcBaseAndBitshift+0x64>)
 8012462:	fba2 2303 	umull	r2, r3, r2, r3
 8012466:	091b      	lsrs	r3, r3, #4
 8012468:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 801246a:	4a13      	ldr	r2, [pc, #76]	; (80124b8 <DMA_CalcBaseAndBitshift+0x68>)
 801246c:	68fb      	ldr	r3, [r7, #12]
 801246e:	4413      	add	r3, r2
 8012470:	781b      	ldrb	r3, [r3, #0]
 8012472:	461a      	mov	r2, r3
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8012478:	68fb      	ldr	r3, [r7, #12]
 801247a:	2b03      	cmp	r3, #3
 801247c:	d909      	bls.n	8012492 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	681b      	ldr	r3, [r3, #0]
 8012482:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8012486:	f023 0303 	bic.w	r3, r3, #3
 801248a:	1d1a      	adds	r2, r3, #4
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	659a      	str	r2, [r3, #88]	; 0x58
 8012490:	e007      	b.n	80124a2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8012492:	687b      	ldr	r3, [r7, #4]
 8012494:	681b      	ldr	r3, [r3, #0]
 8012496:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 801249a:	f023 0303 	bic.w	r3, r3, #3
 801249e:	687a      	ldr	r2, [r7, #4]
 80124a0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80124a6:	4618      	mov	r0, r3
 80124a8:	3714      	adds	r7, #20
 80124aa:	46bd      	mov	sp, r7
 80124ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124b0:	4770      	bx	lr
 80124b2:	bf00      	nop
 80124b4:	aaaaaaab 	.word	0xaaaaaaab
 80124b8:	0801b074 	.word	0x0801b074

080124bc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80124bc:	b480      	push	{r7}
 80124be:	b085      	sub	sp, #20
 80124c0:	af00      	add	r7, sp, #0
 80124c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80124c4:	2300      	movs	r3, #0
 80124c6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80124cc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	699b      	ldr	r3, [r3, #24]
 80124d2:	2b00      	cmp	r3, #0
 80124d4:	d11f      	bne.n	8012516 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80124d6:	68bb      	ldr	r3, [r7, #8]
 80124d8:	2b03      	cmp	r3, #3
 80124da:	d856      	bhi.n	801258a <DMA_CheckFifoParam+0xce>
 80124dc:	a201      	add	r2, pc, #4	; (adr r2, 80124e4 <DMA_CheckFifoParam+0x28>)
 80124de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80124e2:	bf00      	nop
 80124e4:	080124f5 	.word	0x080124f5
 80124e8:	08012507 	.word	0x08012507
 80124ec:	080124f5 	.word	0x080124f5
 80124f0:	0801258b 	.word	0x0801258b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80124f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80124fc:	2b00      	cmp	r3, #0
 80124fe:	d046      	beq.n	801258e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8012500:	2301      	movs	r3, #1
 8012502:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8012504:	e043      	b.n	801258e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801250a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 801250e:	d140      	bne.n	8012592 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8012510:	2301      	movs	r3, #1
 8012512:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8012514:	e03d      	b.n	8012592 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	699b      	ldr	r3, [r3, #24]
 801251a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801251e:	d121      	bne.n	8012564 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8012520:	68bb      	ldr	r3, [r7, #8]
 8012522:	2b03      	cmp	r3, #3
 8012524:	d837      	bhi.n	8012596 <DMA_CheckFifoParam+0xda>
 8012526:	a201      	add	r2, pc, #4	; (adr r2, 801252c <DMA_CheckFifoParam+0x70>)
 8012528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801252c:	0801253d 	.word	0x0801253d
 8012530:	08012543 	.word	0x08012543
 8012534:	0801253d 	.word	0x0801253d
 8012538:	08012555 	.word	0x08012555
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 801253c:	2301      	movs	r3, #1
 801253e:	73fb      	strb	r3, [r7, #15]
      break;
 8012540:	e030      	b.n	80125a4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012546:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801254a:	2b00      	cmp	r3, #0
 801254c:	d025      	beq.n	801259a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 801254e:	2301      	movs	r3, #1
 8012550:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8012552:	e022      	b.n	801259a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012558:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 801255c:	d11f      	bne.n	801259e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 801255e:	2301      	movs	r3, #1
 8012560:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8012562:	e01c      	b.n	801259e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8012564:	68bb      	ldr	r3, [r7, #8]
 8012566:	2b02      	cmp	r3, #2
 8012568:	d903      	bls.n	8012572 <DMA_CheckFifoParam+0xb6>
 801256a:	68bb      	ldr	r3, [r7, #8]
 801256c:	2b03      	cmp	r3, #3
 801256e:	d003      	beq.n	8012578 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8012570:	e018      	b.n	80125a4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8012572:	2301      	movs	r3, #1
 8012574:	73fb      	strb	r3, [r7, #15]
      break;
 8012576:	e015      	b.n	80125a4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801257c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8012580:	2b00      	cmp	r3, #0
 8012582:	d00e      	beq.n	80125a2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8012584:	2301      	movs	r3, #1
 8012586:	73fb      	strb	r3, [r7, #15]
      break;
 8012588:	e00b      	b.n	80125a2 <DMA_CheckFifoParam+0xe6>
      break;
 801258a:	bf00      	nop
 801258c:	e00a      	b.n	80125a4 <DMA_CheckFifoParam+0xe8>
      break;
 801258e:	bf00      	nop
 8012590:	e008      	b.n	80125a4 <DMA_CheckFifoParam+0xe8>
      break;
 8012592:	bf00      	nop
 8012594:	e006      	b.n	80125a4 <DMA_CheckFifoParam+0xe8>
      break;
 8012596:	bf00      	nop
 8012598:	e004      	b.n	80125a4 <DMA_CheckFifoParam+0xe8>
      break;
 801259a:	bf00      	nop
 801259c:	e002      	b.n	80125a4 <DMA_CheckFifoParam+0xe8>
      break;   
 801259e:	bf00      	nop
 80125a0:	e000      	b.n	80125a4 <DMA_CheckFifoParam+0xe8>
      break;
 80125a2:	bf00      	nop
    }
  } 
  
  return status; 
 80125a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80125a6:	4618      	mov	r0, r3
 80125a8:	3714      	adds	r7, #20
 80125aa:	46bd      	mov	sp, r7
 80125ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125b0:	4770      	bx	lr
 80125b2:	bf00      	nop

080125b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80125b4:	b480      	push	{r7}
 80125b6:	b089      	sub	sp, #36	; 0x24
 80125b8:	af00      	add	r7, sp, #0
 80125ba:	6078      	str	r0, [r7, #4]
 80125bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80125be:	2300      	movs	r3, #0
 80125c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80125c2:	2300      	movs	r3, #0
 80125c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80125c6:	2300      	movs	r3, #0
 80125c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80125ca:	2300      	movs	r3, #0
 80125cc:	61fb      	str	r3, [r7, #28]
 80125ce:	e159      	b.n	8012884 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80125d0:	2201      	movs	r2, #1
 80125d2:	69fb      	ldr	r3, [r7, #28]
 80125d4:	fa02 f303 	lsl.w	r3, r2, r3
 80125d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80125da:	683b      	ldr	r3, [r7, #0]
 80125dc:	681b      	ldr	r3, [r3, #0]
 80125de:	697a      	ldr	r2, [r7, #20]
 80125e0:	4013      	ands	r3, r2
 80125e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80125e4:	693a      	ldr	r2, [r7, #16]
 80125e6:	697b      	ldr	r3, [r7, #20]
 80125e8:	429a      	cmp	r2, r3
 80125ea:	f040 8148 	bne.w	801287e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80125ee:	683b      	ldr	r3, [r7, #0]
 80125f0:	685b      	ldr	r3, [r3, #4]
 80125f2:	f003 0303 	and.w	r3, r3, #3
 80125f6:	2b01      	cmp	r3, #1
 80125f8:	d005      	beq.n	8012606 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80125fa:	683b      	ldr	r3, [r7, #0]
 80125fc:	685b      	ldr	r3, [r3, #4]
 80125fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8012602:	2b02      	cmp	r3, #2
 8012604:	d130      	bne.n	8012668 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	689b      	ldr	r3, [r3, #8]
 801260a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 801260c:	69fb      	ldr	r3, [r7, #28]
 801260e:	005b      	lsls	r3, r3, #1
 8012610:	2203      	movs	r2, #3
 8012612:	fa02 f303 	lsl.w	r3, r2, r3
 8012616:	43db      	mvns	r3, r3
 8012618:	69ba      	ldr	r2, [r7, #24]
 801261a:	4013      	ands	r3, r2
 801261c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801261e:	683b      	ldr	r3, [r7, #0]
 8012620:	68da      	ldr	r2, [r3, #12]
 8012622:	69fb      	ldr	r3, [r7, #28]
 8012624:	005b      	lsls	r3, r3, #1
 8012626:	fa02 f303 	lsl.w	r3, r2, r3
 801262a:	69ba      	ldr	r2, [r7, #24]
 801262c:	4313      	orrs	r3, r2
 801262e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	69ba      	ldr	r2, [r7, #24]
 8012634:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	685b      	ldr	r3, [r3, #4]
 801263a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 801263c:	2201      	movs	r2, #1
 801263e:	69fb      	ldr	r3, [r7, #28]
 8012640:	fa02 f303 	lsl.w	r3, r2, r3
 8012644:	43db      	mvns	r3, r3
 8012646:	69ba      	ldr	r2, [r7, #24]
 8012648:	4013      	ands	r3, r2
 801264a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801264c:	683b      	ldr	r3, [r7, #0]
 801264e:	685b      	ldr	r3, [r3, #4]
 8012650:	091b      	lsrs	r3, r3, #4
 8012652:	f003 0201 	and.w	r2, r3, #1
 8012656:	69fb      	ldr	r3, [r7, #28]
 8012658:	fa02 f303 	lsl.w	r3, r2, r3
 801265c:	69ba      	ldr	r2, [r7, #24]
 801265e:	4313      	orrs	r3, r2
 8012660:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	69ba      	ldr	r2, [r7, #24]
 8012666:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8012668:	683b      	ldr	r3, [r7, #0]
 801266a:	685b      	ldr	r3, [r3, #4]
 801266c:	f003 0303 	and.w	r3, r3, #3
 8012670:	2b03      	cmp	r3, #3
 8012672:	d017      	beq.n	80126a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	68db      	ldr	r3, [r3, #12]
 8012678:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 801267a:	69fb      	ldr	r3, [r7, #28]
 801267c:	005b      	lsls	r3, r3, #1
 801267e:	2203      	movs	r2, #3
 8012680:	fa02 f303 	lsl.w	r3, r2, r3
 8012684:	43db      	mvns	r3, r3
 8012686:	69ba      	ldr	r2, [r7, #24]
 8012688:	4013      	ands	r3, r2
 801268a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 801268c:	683b      	ldr	r3, [r7, #0]
 801268e:	689a      	ldr	r2, [r3, #8]
 8012690:	69fb      	ldr	r3, [r7, #28]
 8012692:	005b      	lsls	r3, r3, #1
 8012694:	fa02 f303 	lsl.w	r3, r2, r3
 8012698:	69ba      	ldr	r2, [r7, #24]
 801269a:	4313      	orrs	r3, r2
 801269c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	69ba      	ldr	r2, [r7, #24]
 80126a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80126a4:	683b      	ldr	r3, [r7, #0]
 80126a6:	685b      	ldr	r3, [r3, #4]
 80126a8:	f003 0303 	and.w	r3, r3, #3
 80126ac:	2b02      	cmp	r3, #2
 80126ae:	d123      	bne.n	80126f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80126b0:	69fb      	ldr	r3, [r7, #28]
 80126b2:	08da      	lsrs	r2, r3, #3
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	3208      	adds	r2, #8
 80126b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80126bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80126be:	69fb      	ldr	r3, [r7, #28]
 80126c0:	f003 0307 	and.w	r3, r3, #7
 80126c4:	009b      	lsls	r3, r3, #2
 80126c6:	220f      	movs	r2, #15
 80126c8:	fa02 f303 	lsl.w	r3, r2, r3
 80126cc:	43db      	mvns	r3, r3
 80126ce:	69ba      	ldr	r2, [r7, #24]
 80126d0:	4013      	ands	r3, r2
 80126d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80126d4:	683b      	ldr	r3, [r7, #0]
 80126d6:	691a      	ldr	r2, [r3, #16]
 80126d8:	69fb      	ldr	r3, [r7, #28]
 80126da:	f003 0307 	and.w	r3, r3, #7
 80126de:	009b      	lsls	r3, r3, #2
 80126e0:	fa02 f303 	lsl.w	r3, r2, r3
 80126e4:	69ba      	ldr	r2, [r7, #24]
 80126e6:	4313      	orrs	r3, r2
 80126e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80126ea:	69fb      	ldr	r3, [r7, #28]
 80126ec:	08da      	lsrs	r2, r3, #3
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	3208      	adds	r2, #8
 80126f2:	69b9      	ldr	r1, [r7, #24]
 80126f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	681b      	ldr	r3, [r3, #0]
 80126fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80126fe:	69fb      	ldr	r3, [r7, #28]
 8012700:	005b      	lsls	r3, r3, #1
 8012702:	2203      	movs	r2, #3
 8012704:	fa02 f303 	lsl.w	r3, r2, r3
 8012708:	43db      	mvns	r3, r3
 801270a:	69ba      	ldr	r2, [r7, #24]
 801270c:	4013      	ands	r3, r2
 801270e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8012710:	683b      	ldr	r3, [r7, #0]
 8012712:	685b      	ldr	r3, [r3, #4]
 8012714:	f003 0203 	and.w	r2, r3, #3
 8012718:	69fb      	ldr	r3, [r7, #28]
 801271a:	005b      	lsls	r3, r3, #1
 801271c:	fa02 f303 	lsl.w	r3, r2, r3
 8012720:	69ba      	ldr	r2, [r7, #24]
 8012722:	4313      	orrs	r3, r2
 8012724:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	69ba      	ldr	r2, [r7, #24]
 801272a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 801272c:	683b      	ldr	r3, [r7, #0]
 801272e:	685b      	ldr	r3, [r3, #4]
 8012730:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8012734:	2b00      	cmp	r3, #0
 8012736:	f000 80a2 	beq.w	801287e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801273a:	2300      	movs	r3, #0
 801273c:	60fb      	str	r3, [r7, #12]
 801273e:	4b57      	ldr	r3, [pc, #348]	; (801289c <HAL_GPIO_Init+0x2e8>)
 8012740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012742:	4a56      	ldr	r2, [pc, #344]	; (801289c <HAL_GPIO_Init+0x2e8>)
 8012744:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8012748:	6453      	str	r3, [r2, #68]	; 0x44
 801274a:	4b54      	ldr	r3, [pc, #336]	; (801289c <HAL_GPIO_Init+0x2e8>)
 801274c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801274e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012752:	60fb      	str	r3, [r7, #12]
 8012754:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8012756:	4a52      	ldr	r2, [pc, #328]	; (80128a0 <HAL_GPIO_Init+0x2ec>)
 8012758:	69fb      	ldr	r3, [r7, #28]
 801275a:	089b      	lsrs	r3, r3, #2
 801275c:	3302      	adds	r3, #2
 801275e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012762:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8012764:	69fb      	ldr	r3, [r7, #28]
 8012766:	f003 0303 	and.w	r3, r3, #3
 801276a:	009b      	lsls	r3, r3, #2
 801276c:	220f      	movs	r2, #15
 801276e:	fa02 f303 	lsl.w	r3, r2, r3
 8012772:	43db      	mvns	r3, r3
 8012774:	69ba      	ldr	r2, [r7, #24]
 8012776:	4013      	ands	r3, r2
 8012778:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	4a49      	ldr	r2, [pc, #292]	; (80128a4 <HAL_GPIO_Init+0x2f0>)
 801277e:	4293      	cmp	r3, r2
 8012780:	d019      	beq.n	80127b6 <HAL_GPIO_Init+0x202>
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	4a48      	ldr	r2, [pc, #288]	; (80128a8 <HAL_GPIO_Init+0x2f4>)
 8012786:	4293      	cmp	r3, r2
 8012788:	d013      	beq.n	80127b2 <HAL_GPIO_Init+0x1fe>
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	4a47      	ldr	r2, [pc, #284]	; (80128ac <HAL_GPIO_Init+0x2f8>)
 801278e:	4293      	cmp	r3, r2
 8012790:	d00d      	beq.n	80127ae <HAL_GPIO_Init+0x1fa>
 8012792:	687b      	ldr	r3, [r7, #4]
 8012794:	4a46      	ldr	r2, [pc, #280]	; (80128b0 <HAL_GPIO_Init+0x2fc>)
 8012796:	4293      	cmp	r3, r2
 8012798:	d007      	beq.n	80127aa <HAL_GPIO_Init+0x1f6>
 801279a:	687b      	ldr	r3, [r7, #4]
 801279c:	4a45      	ldr	r2, [pc, #276]	; (80128b4 <HAL_GPIO_Init+0x300>)
 801279e:	4293      	cmp	r3, r2
 80127a0:	d101      	bne.n	80127a6 <HAL_GPIO_Init+0x1f2>
 80127a2:	2304      	movs	r3, #4
 80127a4:	e008      	b.n	80127b8 <HAL_GPIO_Init+0x204>
 80127a6:	2307      	movs	r3, #7
 80127a8:	e006      	b.n	80127b8 <HAL_GPIO_Init+0x204>
 80127aa:	2303      	movs	r3, #3
 80127ac:	e004      	b.n	80127b8 <HAL_GPIO_Init+0x204>
 80127ae:	2302      	movs	r3, #2
 80127b0:	e002      	b.n	80127b8 <HAL_GPIO_Init+0x204>
 80127b2:	2301      	movs	r3, #1
 80127b4:	e000      	b.n	80127b8 <HAL_GPIO_Init+0x204>
 80127b6:	2300      	movs	r3, #0
 80127b8:	69fa      	ldr	r2, [r7, #28]
 80127ba:	f002 0203 	and.w	r2, r2, #3
 80127be:	0092      	lsls	r2, r2, #2
 80127c0:	4093      	lsls	r3, r2
 80127c2:	69ba      	ldr	r2, [r7, #24]
 80127c4:	4313      	orrs	r3, r2
 80127c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80127c8:	4935      	ldr	r1, [pc, #212]	; (80128a0 <HAL_GPIO_Init+0x2ec>)
 80127ca:	69fb      	ldr	r3, [r7, #28]
 80127cc:	089b      	lsrs	r3, r3, #2
 80127ce:	3302      	adds	r3, #2
 80127d0:	69ba      	ldr	r2, [r7, #24]
 80127d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80127d6:	4b38      	ldr	r3, [pc, #224]	; (80128b8 <HAL_GPIO_Init+0x304>)
 80127d8:	689b      	ldr	r3, [r3, #8]
 80127da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80127dc:	693b      	ldr	r3, [r7, #16]
 80127de:	43db      	mvns	r3, r3
 80127e0:	69ba      	ldr	r2, [r7, #24]
 80127e2:	4013      	ands	r3, r2
 80127e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80127e6:	683b      	ldr	r3, [r7, #0]
 80127e8:	685b      	ldr	r3, [r3, #4]
 80127ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80127ee:	2b00      	cmp	r3, #0
 80127f0:	d003      	beq.n	80127fa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80127f2:	69ba      	ldr	r2, [r7, #24]
 80127f4:	693b      	ldr	r3, [r7, #16]
 80127f6:	4313      	orrs	r3, r2
 80127f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80127fa:	4a2f      	ldr	r2, [pc, #188]	; (80128b8 <HAL_GPIO_Init+0x304>)
 80127fc:	69bb      	ldr	r3, [r7, #24]
 80127fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8012800:	4b2d      	ldr	r3, [pc, #180]	; (80128b8 <HAL_GPIO_Init+0x304>)
 8012802:	68db      	ldr	r3, [r3, #12]
 8012804:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8012806:	693b      	ldr	r3, [r7, #16]
 8012808:	43db      	mvns	r3, r3
 801280a:	69ba      	ldr	r2, [r7, #24]
 801280c:	4013      	ands	r3, r2
 801280e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8012810:	683b      	ldr	r3, [r7, #0]
 8012812:	685b      	ldr	r3, [r3, #4]
 8012814:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8012818:	2b00      	cmp	r3, #0
 801281a:	d003      	beq.n	8012824 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 801281c:	69ba      	ldr	r2, [r7, #24]
 801281e:	693b      	ldr	r3, [r7, #16]
 8012820:	4313      	orrs	r3, r2
 8012822:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8012824:	4a24      	ldr	r2, [pc, #144]	; (80128b8 <HAL_GPIO_Init+0x304>)
 8012826:	69bb      	ldr	r3, [r7, #24]
 8012828:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 801282a:	4b23      	ldr	r3, [pc, #140]	; (80128b8 <HAL_GPIO_Init+0x304>)
 801282c:	685b      	ldr	r3, [r3, #4]
 801282e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8012830:	693b      	ldr	r3, [r7, #16]
 8012832:	43db      	mvns	r3, r3
 8012834:	69ba      	ldr	r2, [r7, #24]
 8012836:	4013      	ands	r3, r2
 8012838:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 801283a:	683b      	ldr	r3, [r7, #0]
 801283c:	685b      	ldr	r3, [r3, #4]
 801283e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012842:	2b00      	cmp	r3, #0
 8012844:	d003      	beq.n	801284e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8012846:	69ba      	ldr	r2, [r7, #24]
 8012848:	693b      	ldr	r3, [r7, #16]
 801284a:	4313      	orrs	r3, r2
 801284c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 801284e:	4a1a      	ldr	r2, [pc, #104]	; (80128b8 <HAL_GPIO_Init+0x304>)
 8012850:	69bb      	ldr	r3, [r7, #24]
 8012852:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8012854:	4b18      	ldr	r3, [pc, #96]	; (80128b8 <HAL_GPIO_Init+0x304>)
 8012856:	681b      	ldr	r3, [r3, #0]
 8012858:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801285a:	693b      	ldr	r3, [r7, #16]
 801285c:	43db      	mvns	r3, r3
 801285e:	69ba      	ldr	r2, [r7, #24]
 8012860:	4013      	ands	r3, r2
 8012862:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8012864:	683b      	ldr	r3, [r7, #0]
 8012866:	685b      	ldr	r3, [r3, #4]
 8012868:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801286c:	2b00      	cmp	r3, #0
 801286e:	d003      	beq.n	8012878 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8012870:	69ba      	ldr	r2, [r7, #24]
 8012872:	693b      	ldr	r3, [r7, #16]
 8012874:	4313      	orrs	r3, r2
 8012876:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8012878:	4a0f      	ldr	r2, [pc, #60]	; (80128b8 <HAL_GPIO_Init+0x304>)
 801287a:	69bb      	ldr	r3, [r7, #24]
 801287c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 801287e:	69fb      	ldr	r3, [r7, #28]
 8012880:	3301      	adds	r3, #1
 8012882:	61fb      	str	r3, [r7, #28]
 8012884:	69fb      	ldr	r3, [r7, #28]
 8012886:	2b0f      	cmp	r3, #15
 8012888:	f67f aea2 	bls.w	80125d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 801288c:	bf00      	nop
 801288e:	bf00      	nop
 8012890:	3724      	adds	r7, #36	; 0x24
 8012892:	46bd      	mov	sp, r7
 8012894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012898:	4770      	bx	lr
 801289a:	bf00      	nop
 801289c:	40023800 	.word	0x40023800
 80128a0:	40013800 	.word	0x40013800
 80128a4:	40020000 	.word	0x40020000
 80128a8:	40020400 	.word	0x40020400
 80128ac:	40020800 	.word	0x40020800
 80128b0:	40020c00 	.word	0x40020c00
 80128b4:	40021000 	.word	0x40021000
 80128b8:	40013c00 	.word	0x40013c00

080128bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80128bc:	b480      	push	{r7}
 80128be:	b083      	sub	sp, #12
 80128c0:	af00      	add	r7, sp, #0
 80128c2:	6078      	str	r0, [r7, #4]
 80128c4:	460b      	mov	r3, r1
 80128c6:	807b      	strh	r3, [r7, #2]
 80128c8:	4613      	mov	r3, r2
 80128ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80128cc:	787b      	ldrb	r3, [r7, #1]
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	d003      	beq.n	80128da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80128d2:	887a      	ldrh	r2, [r7, #2]
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80128d8:	e003      	b.n	80128e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80128da:	887b      	ldrh	r3, [r7, #2]
 80128dc:	041a      	lsls	r2, r3, #16
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	619a      	str	r2, [r3, #24]
}
 80128e2:	bf00      	nop
 80128e4:	370c      	adds	r7, #12
 80128e6:	46bd      	mov	sp, r7
 80128e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128ec:	4770      	bx	lr

080128ee <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80128ee:	b480      	push	{r7}
 80128f0:	b085      	sub	sp, #20
 80128f2:	af00      	add	r7, sp, #0
 80128f4:	6078      	str	r0, [r7, #4]
 80128f6:	460b      	mov	r3, r1
 80128f8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	695b      	ldr	r3, [r3, #20]
 80128fe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8012900:	887a      	ldrh	r2, [r7, #2]
 8012902:	68fb      	ldr	r3, [r7, #12]
 8012904:	4013      	ands	r3, r2
 8012906:	041a      	lsls	r2, r3, #16
 8012908:	68fb      	ldr	r3, [r7, #12]
 801290a:	43d9      	mvns	r1, r3
 801290c:	887b      	ldrh	r3, [r7, #2]
 801290e:	400b      	ands	r3, r1
 8012910:	431a      	orrs	r2, r3
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	619a      	str	r2, [r3, #24]
}
 8012916:	bf00      	nop
 8012918:	3714      	adds	r7, #20
 801291a:	46bd      	mov	sp, r7
 801291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012920:	4770      	bx	lr
	...

08012924 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8012924:	b580      	push	{r7, lr}
 8012926:	b082      	sub	sp, #8
 8012928:	af00      	add	r7, sp, #0
 801292a:	4603      	mov	r3, r0
 801292c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 801292e:	4b08      	ldr	r3, [pc, #32]	; (8012950 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8012930:	695a      	ldr	r2, [r3, #20]
 8012932:	88fb      	ldrh	r3, [r7, #6]
 8012934:	4013      	ands	r3, r2
 8012936:	2b00      	cmp	r3, #0
 8012938:	d006      	beq.n	8012948 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 801293a:	4a05      	ldr	r2, [pc, #20]	; (8012950 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 801293c:	88fb      	ldrh	r3, [r7, #6]
 801293e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8012940:	88fb      	ldrh	r3, [r7, #6]
 8012942:	4618      	mov	r0, r3
 8012944:	f000 f806 	bl	8012954 <HAL_GPIO_EXTI_Callback>
  }
}
 8012948:	bf00      	nop
 801294a:	3708      	adds	r7, #8
 801294c:	46bd      	mov	sp, r7
 801294e:	bd80      	pop	{r7, pc}
 8012950:	40013c00 	.word	0x40013c00

08012954 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8012954:	b480      	push	{r7}
 8012956:	b083      	sub	sp, #12
 8012958:	af00      	add	r7, sp, #0
 801295a:	4603      	mov	r3, r0
 801295c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 801295e:	bf00      	nop
 8012960:	370c      	adds	r7, #12
 8012962:	46bd      	mov	sp, r7
 8012964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012968:	4770      	bx	lr
	...

0801296c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 801296c:	b580      	push	{r7, lr}
 801296e:	b084      	sub	sp, #16
 8012970:	af00      	add	r7, sp, #0
 8012972:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	2b00      	cmp	r3, #0
 8012978:	d101      	bne.n	801297e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 801297a:	2301      	movs	r3, #1
 801297c:	e12b      	b.n	8012bd6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012984:	b2db      	uxtb	r3, r3
 8012986:	2b00      	cmp	r3, #0
 8012988:	d106      	bne.n	8012998 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	2200      	movs	r2, #0
 801298e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8012992:	6878      	ldr	r0, [r7, #4]
 8012994:	f7fe f8c2 	bl	8010b1c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	2224      	movs	r2, #36	; 0x24
 801299c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	681b      	ldr	r3, [r3, #0]
 80129a4:	681a      	ldr	r2, [r3, #0]
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	681b      	ldr	r3, [r3, #0]
 80129aa:	f022 0201 	bic.w	r2, r2, #1
 80129ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	681b      	ldr	r3, [r3, #0]
 80129b4:	681a      	ldr	r2, [r3, #0]
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	681b      	ldr	r3, [r3, #0]
 80129ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80129be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	681b      	ldr	r3, [r3, #0]
 80129c4:	681a      	ldr	r2, [r3, #0]
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	681b      	ldr	r3, [r3, #0]
 80129ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80129ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80129d0:	f001 fde0 	bl	8014594 <HAL_RCC_GetPCLK1Freq>
 80129d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	685b      	ldr	r3, [r3, #4]
 80129da:	4a81      	ldr	r2, [pc, #516]	; (8012be0 <HAL_I2C_Init+0x274>)
 80129dc:	4293      	cmp	r3, r2
 80129de:	d807      	bhi.n	80129f0 <HAL_I2C_Init+0x84>
 80129e0:	68fb      	ldr	r3, [r7, #12]
 80129e2:	4a80      	ldr	r2, [pc, #512]	; (8012be4 <HAL_I2C_Init+0x278>)
 80129e4:	4293      	cmp	r3, r2
 80129e6:	bf94      	ite	ls
 80129e8:	2301      	movls	r3, #1
 80129ea:	2300      	movhi	r3, #0
 80129ec:	b2db      	uxtb	r3, r3
 80129ee:	e006      	b.n	80129fe <HAL_I2C_Init+0x92>
 80129f0:	68fb      	ldr	r3, [r7, #12]
 80129f2:	4a7d      	ldr	r2, [pc, #500]	; (8012be8 <HAL_I2C_Init+0x27c>)
 80129f4:	4293      	cmp	r3, r2
 80129f6:	bf94      	ite	ls
 80129f8:	2301      	movls	r3, #1
 80129fa:	2300      	movhi	r3, #0
 80129fc:	b2db      	uxtb	r3, r3
 80129fe:	2b00      	cmp	r3, #0
 8012a00:	d001      	beq.n	8012a06 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8012a02:	2301      	movs	r3, #1
 8012a04:	e0e7      	b.n	8012bd6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8012a06:	68fb      	ldr	r3, [r7, #12]
 8012a08:	4a78      	ldr	r2, [pc, #480]	; (8012bec <HAL_I2C_Init+0x280>)
 8012a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8012a0e:	0c9b      	lsrs	r3, r3, #18
 8012a10:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	681b      	ldr	r3, [r3, #0]
 8012a16:	685b      	ldr	r3, [r3, #4]
 8012a18:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	681b      	ldr	r3, [r3, #0]
 8012a20:	68ba      	ldr	r2, [r7, #8]
 8012a22:	430a      	orrs	r2, r1
 8012a24:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	681b      	ldr	r3, [r3, #0]
 8012a2a:	6a1b      	ldr	r3, [r3, #32]
 8012a2c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	685b      	ldr	r3, [r3, #4]
 8012a34:	4a6a      	ldr	r2, [pc, #424]	; (8012be0 <HAL_I2C_Init+0x274>)
 8012a36:	4293      	cmp	r3, r2
 8012a38:	d802      	bhi.n	8012a40 <HAL_I2C_Init+0xd4>
 8012a3a:	68bb      	ldr	r3, [r7, #8]
 8012a3c:	3301      	adds	r3, #1
 8012a3e:	e009      	b.n	8012a54 <HAL_I2C_Init+0xe8>
 8012a40:	68bb      	ldr	r3, [r7, #8]
 8012a42:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8012a46:	fb02 f303 	mul.w	r3, r2, r3
 8012a4a:	4a69      	ldr	r2, [pc, #420]	; (8012bf0 <HAL_I2C_Init+0x284>)
 8012a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8012a50:	099b      	lsrs	r3, r3, #6
 8012a52:	3301      	adds	r3, #1
 8012a54:	687a      	ldr	r2, [r7, #4]
 8012a56:	6812      	ldr	r2, [r2, #0]
 8012a58:	430b      	orrs	r3, r1
 8012a5a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	681b      	ldr	r3, [r3, #0]
 8012a60:	69db      	ldr	r3, [r3, #28]
 8012a62:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8012a66:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	685b      	ldr	r3, [r3, #4]
 8012a6e:	495c      	ldr	r1, [pc, #368]	; (8012be0 <HAL_I2C_Init+0x274>)
 8012a70:	428b      	cmp	r3, r1
 8012a72:	d819      	bhi.n	8012aa8 <HAL_I2C_Init+0x13c>
 8012a74:	68fb      	ldr	r3, [r7, #12]
 8012a76:	1e59      	subs	r1, r3, #1
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	685b      	ldr	r3, [r3, #4]
 8012a7c:	005b      	lsls	r3, r3, #1
 8012a7e:	fbb1 f3f3 	udiv	r3, r1, r3
 8012a82:	1c59      	adds	r1, r3, #1
 8012a84:	f640 73fc 	movw	r3, #4092	; 0xffc
 8012a88:	400b      	ands	r3, r1
 8012a8a:	2b00      	cmp	r3, #0
 8012a8c:	d00a      	beq.n	8012aa4 <HAL_I2C_Init+0x138>
 8012a8e:	68fb      	ldr	r3, [r7, #12]
 8012a90:	1e59      	subs	r1, r3, #1
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	685b      	ldr	r3, [r3, #4]
 8012a96:	005b      	lsls	r3, r3, #1
 8012a98:	fbb1 f3f3 	udiv	r3, r1, r3
 8012a9c:	3301      	adds	r3, #1
 8012a9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012aa2:	e051      	b.n	8012b48 <HAL_I2C_Init+0x1dc>
 8012aa4:	2304      	movs	r3, #4
 8012aa6:	e04f      	b.n	8012b48 <HAL_I2C_Init+0x1dc>
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	689b      	ldr	r3, [r3, #8]
 8012aac:	2b00      	cmp	r3, #0
 8012aae:	d111      	bne.n	8012ad4 <HAL_I2C_Init+0x168>
 8012ab0:	68fb      	ldr	r3, [r7, #12]
 8012ab2:	1e58      	subs	r0, r3, #1
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	6859      	ldr	r1, [r3, #4]
 8012ab8:	460b      	mov	r3, r1
 8012aba:	005b      	lsls	r3, r3, #1
 8012abc:	440b      	add	r3, r1
 8012abe:	fbb0 f3f3 	udiv	r3, r0, r3
 8012ac2:	3301      	adds	r3, #1
 8012ac4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012ac8:	2b00      	cmp	r3, #0
 8012aca:	bf0c      	ite	eq
 8012acc:	2301      	moveq	r3, #1
 8012ace:	2300      	movne	r3, #0
 8012ad0:	b2db      	uxtb	r3, r3
 8012ad2:	e012      	b.n	8012afa <HAL_I2C_Init+0x18e>
 8012ad4:	68fb      	ldr	r3, [r7, #12]
 8012ad6:	1e58      	subs	r0, r3, #1
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	6859      	ldr	r1, [r3, #4]
 8012adc:	460b      	mov	r3, r1
 8012ade:	009b      	lsls	r3, r3, #2
 8012ae0:	440b      	add	r3, r1
 8012ae2:	0099      	lsls	r1, r3, #2
 8012ae4:	440b      	add	r3, r1
 8012ae6:	fbb0 f3f3 	udiv	r3, r0, r3
 8012aea:	3301      	adds	r3, #1
 8012aec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012af0:	2b00      	cmp	r3, #0
 8012af2:	bf0c      	ite	eq
 8012af4:	2301      	moveq	r3, #1
 8012af6:	2300      	movne	r3, #0
 8012af8:	b2db      	uxtb	r3, r3
 8012afa:	2b00      	cmp	r3, #0
 8012afc:	d001      	beq.n	8012b02 <HAL_I2C_Init+0x196>
 8012afe:	2301      	movs	r3, #1
 8012b00:	e022      	b.n	8012b48 <HAL_I2C_Init+0x1dc>
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	689b      	ldr	r3, [r3, #8]
 8012b06:	2b00      	cmp	r3, #0
 8012b08:	d10e      	bne.n	8012b28 <HAL_I2C_Init+0x1bc>
 8012b0a:	68fb      	ldr	r3, [r7, #12]
 8012b0c:	1e58      	subs	r0, r3, #1
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	6859      	ldr	r1, [r3, #4]
 8012b12:	460b      	mov	r3, r1
 8012b14:	005b      	lsls	r3, r3, #1
 8012b16:	440b      	add	r3, r1
 8012b18:	fbb0 f3f3 	udiv	r3, r0, r3
 8012b1c:	3301      	adds	r3, #1
 8012b1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012b22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012b26:	e00f      	b.n	8012b48 <HAL_I2C_Init+0x1dc>
 8012b28:	68fb      	ldr	r3, [r7, #12]
 8012b2a:	1e58      	subs	r0, r3, #1
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	6859      	ldr	r1, [r3, #4]
 8012b30:	460b      	mov	r3, r1
 8012b32:	009b      	lsls	r3, r3, #2
 8012b34:	440b      	add	r3, r1
 8012b36:	0099      	lsls	r1, r3, #2
 8012b38:	440b      	add	r3, r1
 8012b3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8012b3e:	3301      	adds	r3, #1
 8012b40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012b44:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8012b48:	6879      	ldr	r1, [r7, #4]
 8012b4a:	6809      	ldr	r1, [r1, #0]
 8012b4c:	4313      	orrs	r3, r2
 8012b4e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	681b      	ldr	r3, [r3, #0]
 8012b54:	681b      	ldr	r3, [r3, #0]
 8012b56:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	69da      	ldr	r2, [r3, #28]
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	6a1b      	ldr	r3, [r3, #32]
 8012b62:	431a      	orrs	r2, r3
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	681b      	ldr	r3, [r3, #0]
 8012b68:	430a      	orrs	r2, r1
 8012b6a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8012b6c:	687b      	ldr	r3, [r7, #4]
 8012b6e:	681b      	ldr	r3, [r3, #0]
 8012b70:	689b      	ldr	r3, [r3, #8]
 8012b72:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8012b76:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8012b7a:	687a      	ldr	r2, [r7, #4]
 8012b7c:	6911      	ldr	r1, [r2, #16]
 8012b7e:	687a      	ldr	r2, [r7, #4]
 8012b80:	68d2      	ldr	r2, [r2, #12]
 8012b82:	4311      	orrs	r1, r2
 8012b84:	687a      	ldr	r2, [r7, #4]
 8012b86:	6812      	ldr	r2, [r2, #0]
 8012b88:	430b      	orrs	r3, r1
 8012b8a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	681b      	ldr	r3, [r3, #0]
 8012b90:	68db      	ldr	r3, [r3, #12]
 8012b92:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8012b96:	687b      	ldr	r3, [r7, #4]
 8012b98:	695a      	ldr	r2, [r3, #20]
 8012b9a:	687b      	ldr	r3, [r7, #4]
 8012b9c:	699b      	ldr	r3, [r3, #24]
 8012b9e:	431a      	orrs	r2, r3
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	681b      	ldr	r3, [r3, #0]
 8012ba4:	430a      	orrs	r2, r1
 8012ba6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	681b      	ldr	r3, [r3, #0]
 8012bac:	681a      	ldr	r2, [r3, #0]
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	681b      	ldr	r3, [r3, #0]
 8012bb2:	f042 0201 	orr.w	r2, r2, #1
 8012bb6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	2200      	movs	r2, #0
 8012bbc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	2220      	movs	r2, #32
 8012bc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8012bc6:	687b      	ldr	r3, [r7, #4]
 8012bc8:	2200      	movs	r2, #0
 8012bca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	2200      	movs	r2, #0
 8012bd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8012bd4:	2300      	movs	r3, #0
}
 8012bd6:	4618      	mov	r0, r3
 8012bd8:	3710      	adds	r7, #16
 8012bda:	46bd      	mov	sp, r7
 8012bdc:	bd80      	pop	{r7, pc}
 8012bde:	bf00      	nop
 8012be0:	000186a0 	.word	0x000186a0
 8012be4:	001e847f 	.word	0x001e847f
 8012be8:	003d08ff 	.word	0x003d08ff
 8012bec:	431bde83 	.word	0x431bde83
 8012bf0:	10624dd3 	.word	0x10624dd3

08012bf4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8012bf4:	b580      	push	{r7, lr}
 8012bf6:	b088      	sub	sp, #32
 8012bf8:	af02      	add	r7, sp, #8
 8012bfa:	60f8      	str	r0, [r7, #12]
 8012bfc:	4608      	mov	r0, r1
 8012bfe:	4611      	mov	r1, r2
 8012c00:	461a      	mov	r2, r3
 8012c02:	4603      	mov	r3, r0
 8012c04:	817b      	strh	r3, [r7, #10]
 8012c06:	460b      	mov	r3, r1
 8012c08:	813b      	strh	r3, [r7, #8]
 8012c0a:	4613      	mov	r3, r2
 8012c0c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8012c0e:	f7fe fdb1 	bl	8011774 <HAL_GetTick>
 8012c12:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8012c14:	68fb      	ldr	r3, [r7, #12]
 8012c16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012c1a:	b2db      	uxtb	r3, r3
 8012c1c:	2b20      	cmp	r3, #32
 8012c1e:	f040 80d9 	bne.w	8012dd4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8012c22:	697b      	ldr	r3, [r7, #20]
 8012c24:	9300      	str	r3, [sp, #0]
 8012c26:	2319      	movs	r3, #25
 8012c28:	2201      	movs	r2, #1
 8012c2a:	496d      	ldr	r1, [pc, #436]	; (8012de0 <HAL_I2C_Mem_Write+0x1ec>)
 8012c2c:	68f8      	ldr	r0, [r7, #12]
 8012c2e:	f000 fdb9 	bl	80137a4 <I2C_WaitOnFlagUntilTimeout>
 8012c32:	4603      	mov	r3, r0
 8012c34:	2b00      	cmp	r3, #0
 8012c36:	d001      	beq.n	8012c3c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8012c38:	2302      	movs	r3, #2
 8012c3a:	e0cc      	b.n	8012dd6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8012c3c:	68fb      	ldr	r3, [r7, #12]
 8012c3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012c42:	2b01      	cmp	r3, #1
 8012c44:	d101      	bne.n	8012c4a <HAL_I2C_Mem_Write+0x56>
 8012c46:	2302      	movs	r3, #2
 8012c48:	e0c5      	b.n	8012dd6 <HAL_I2C_Mem_Write+0x1e2>
 8012c4a:	68fb      	ldr	r3, [r7, #12]
 8012c4c:	2201      	movs	r2, #1
 8012c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8012c52:	68fb      	ldr	r3, [r7, #12]
 8012c54:	681b      	ldr	r3, [r3, #0]
 8012c56:	681b      	ldr	r3, [r3, #0]
 8012c58:	f003 0301 	and.w	r3, r3, #1
 8012c5c:	2b01      	cmp	r3, #1
 8012c5e:	d007      	beq.n	8012c70 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8012c60:	68fb      	ldr	r3, [r7, #12]
 8012c62:	681b      	ldr	r3, [r3, #0]
 8012c64:	681a      	ldr	r2, [r3, #0]
 8012c66:	68fb      	ldr	r3, [r7, #12]
 8012c68:	681b      	ldr	r3, [r3, #0]
 8012c6a:	f042 0201 	orr.w	r2, r2, #1
 8012c6e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8012c70:	68fb      	ldr	r3, [r7, #12]
 8012c72:	681b      	ldr	r3, [r3, #0]
 8012c74:	681a      	ldr	r2, [r3, #0]
 8012c76:	68fb      	ldr	r3, [r7, #12]
 8012c78:	681b      	ldr	r3, [r3, #0]
 8012c7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8012c7e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8012c80:	68fb      	ldr	r3, [r7, #12]
 8012c82:	2221      	movs	r2, #33	; 0x21
 8012c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8012c88:	68fb      	ldr	r3, [r7, #12]
 8012c8a:	2240      	movs	r2, #64	; 0x40
 8012c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8012c90:	68fb      	ldr	r3, [r7, #12]
 8012c92:	2200      	movs	r2, #0
 8012c94:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8012c96:	68fb      	ldr	r3, [r7, #12]
 8012c98:	6a3a      	ldr	r2, [r7, #32]
 8012c9a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8012c9c:	68fb      	ldr	r3, [r7, #12]
 8012c9e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012ca0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8012ca2:	68fb      	ldr	r3, [r7, #12]
 8012ca4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012ca6:	b29a      	uxth	r2, r3
 8012ca8:	68fb      	ldr	r3, [r7, #12]
 8012caa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8012cac:	68fb      	ldr	r3, [r7, #12]
 8012cae:	4a4d      	ldr	r2, [pc, #308]	; (8012de4 <HAL_I2C_Mem_Write+0x1f0>)
 8012cb0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8012cb2:	88f8      	ldrh	r0, [r7, #6]
 8012cb4:	893a      	ldrh	r2, [r7, #8]
 8012cb6:	8979      	ldrh	r1, [r7, #10]
 8012cb8:	697b      	ldr	r3, [r7, #20]
 8012cba:	9301      	str	r3, [sp, #4]
 8012cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cbe:	9300      	str	r3, [sp, #0]
 8012cc0:	4603      	mov	r3, r0
 8012cc2:	68f8      	ldr	r0, [r7, #12]
 8012cc4:	f000 fbf0 	bl	80134a8 <I2C_RequestMemoryWrite>
 8012cc8:	4603      	mov	r3, r0
 8012cca:	2b00      	cmp	r3, #0
 8012ccc:	d052      	beq.n	8012d74 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8012cce:	2301      	movs	r3, #1
 8012cd0:	e081      	b.n	8012dd6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8012cd2:	697a      	ldr	r2, [r7, #20]
 8012cd4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012cd6:	68f8      	ldr	r0, [r7, #12]
 8012cd8:	f000 fe7e 	bl	80139d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8012cdc:	4603      	mov	r3, r0
 8012cde:	2b00      	cmp	r3, #0
 8012ce0:	d00d      	beq.n	8012cfe <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8012ce2:	68fb      	ldr	r3, [r7, #12]
 8012ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012ce6:	2b04      	cmp	r3, #4
 8012ce8:	d107      	bne.n	8012cfa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8012cea:	68fb      	ldr	r3, [r7, #12]
 8012cec:	681b      	ldr	r3, [r3, #0]
 8012cee:	681a      	ldr	r2, [r3, #0]
 8012cf0:	68fb      	ldr	r3, [r7, #12]
 8012cf2:	681b      	ldr	r3, [r3, #0]
 8012cf4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012cf8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8012cfa:	2301      	movs	r3, #1
 8012cfc:	e06b      	b.n	8012dd6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8012cfe:	68fb      	ldr	r3, [r7, #12]
 8012d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d02:	781a      	ldrb	r2, [r3, #0]
 8012d04:	68fb      	ldr	r3, [r7, #12]
 8012d06:	681b      	ldr	r3, [r3, #0]
 8012d08:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8012d0a:	68fb      	ldr	r3, [r7, #12]
 8012d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d0e:	1c5a      	adds	r2, r3, #1
 8012d10:	68fb      	ldr	r3, [r7, #12]
 8012d12:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8012d14:	68fb      	ldr	r3, [r7, #12]
 8012d16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012d18:	3b01      	subs	r3, #1
 8012d1a:	b29a      	uxth	r2, r3
 8012d1c:	68fb      	ldr	r3, [r7, #12]
 8012d1e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8012d20:	68fb      	ldr	r3, [r7, #12]
 8012d22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012d24:	b29b      	uxth	r3, r3
 8012d26:	3b01      	subs	r3, #1
 8012d28:	b29a      	uxth	r2, r3
 8012d2a:	68fb      	ldr	r3, [r7, #12]
 8012d2c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8012d2e:	68fb      	ldr	r3, [r7, #12]
 8012d30:	681b      	ldr	r3, [r3, #0]
 8012d32:	695b      	ldr	r3, [r3, #20]
 8012d34:	f003 0304 	and.w	r3, r3, #4
 8012d38:	2b04      	cmp	r3, #4
 8012d3a:	d11b      	bne.n	8012d74 <HAL_I2C_Mem_Write+0x180>
 8012d3c:	68fb      	ldr	r3, [r7, #12]
 8012d3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012d40:	2b00      	cmp	r3, #0
 8012d42:	d017      	beq.n	8012d74 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8012d44:	68fb      	ldr	r3, [r7, #12]
 8012d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d48:	781a      	ldrb	r2, [r3, #0]
 8012d4a:	68fb      	ldr	r3, [r7, #12]
 8012d4c:	681b      	ldr	r3, [r3, #0]
 8012d4e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8012d50:	68fb      	ldr	r3, [r7, #12]
 8012d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d54:	1c5a      	adds	r2, r3, #1
 8012d56:	68fb      	ldr	r3, [r7, #12]
 8012d58:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8012d5a:	68fb      	ldr	r3, [r7, #12]
 8012d5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012d5e:	3b01      	subs	r3, #1
 8012d60:	b29a      	uxth	r2, r3
 8012d62:	68fb      	ldr	r3, [r7, #12]
 8012d64:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8012d66:	68fb      	ldr	r3, [r7, #12]
 8012d68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012d6a:	b29b      	uxth	r3, r3
 8012d6c:	3b01      	subs	r3, #1
 8012d6e:	b29a      	uxth	r2, r3
 8012d70:	68fb      	ldr	r3, [r7, #12]
 8012d72:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8012d74:	68fb      	ldr	r3, [r7, #12]
 8012d76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012d78:	2b00      	cmp	r3, #0
 8012d7a:	d1aa      	bne.n	8012cd2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8012d7c:	697a      	ldr	r2, [r7, #20]
 8012d7e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012d80:	68f8      	ldr	r0, [r7, #12]
 8012d82:	f000 fe71 	bl	8013a68 <I2C_WaitOnBTFFlagUntilTimeout>
 8012d86:	4603      	mov	r3, r0
 8012d88:	2b00      	cmp	r3, #0
 8012d8a:	d00d      	beq.n	8012da8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8012d8c:	68fb      	ldr	r3, [r7, #12]
 8012d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012d90:	2b04      	cmp	r3, #4
 8012d92:	d107      	bne.n	8012da4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8012d94:	68fb      	ldr	r3, [r7, #12]
 8012d96:	681b      	ldr	r3, [r3, #0]
 8012d98:	681a      	ldr	r2, [r3, #0]
 8012d9a:	68fb      	ldr	r3, [r7, #12]
 8012d9c:	681b      	ldr	r3, [r3, #0]
 8012d9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012da2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8012da4:	2301      	movs	r3, #1
 8012da6:	e016      	b.n	8012dd6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8012da8:	68fb      	ldr	r3, [r7, #12]
 8012daa:	681b      	ldr	r3, [r3, #0]
 8012dac:	681a      	ldr	r2, [r3, #0]
 8012dae:	68fb      	ldr	r3, [r7, #12]
 8012db0:	681b      	ldr	r3, [r3, #0]
 8012db2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012db6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8012db8:	68fb      	ldr	r3, [r7, #12]
 8012dba:	2220      	movs	r2, #32
 8012dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8012dc0:	68fb      	ldr	r3, [r7, #12]
 8012dc2:	2200      	movs	r2, #0
 8012dc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8012dc8:	68fb      	ldr	r3, [r7, #12]
 8012dca:	2200      	movs	r2, #0
 8012dcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8012dd0:	2300      	movs	r3, #0
 8012dd2:	e000      	b.n	8012dd6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8012dd4:	2302      	movs	r3, #2
  }
}
 8012dd6:	4618      	mov	r0, r3
 8012dd8:	3718      	adds	r7, #24
 8012dda:	46bd      	mov	sp, r7
 8012ddc:	bd80      	pop	{r7, pc}
 8012dde:	bf00      	nop
 8012de0:	00100002 	.word	0x00100002
 8012de4:	ffff0000 	.word	0xffff0000

08012de8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8012de8:	b580      	push	{r7, lr}
 8012dea:	b08c      	sub	sp, #48	; 0x30
 8012dec:	af02      	add	r7, sp, #8
 8012dee:	60f8      	str	r0, [r7, #12]
 8012df0:	4608      	mov	r0, r1
 8012df2:	4611      	mov	r1, r2
 8012df4:	461a      	mov	r2, r3
 8012df6:	4603      	mov	r3, r0
 8012df8:	817b      	strh	r3, [r7, #10]
 8012dfa:	460b      	mov	r3, r1
 8012dfc:	813b      	strh	r3, [r7, #8]
 8012dfe:	4613      	mov	r3, r2
 8012e00:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8012e02:	f7fe fcb7 	bl	8011774 <HAL_GetTick>
 8012e06:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8012e08:	68fb      	ldr	r3, [r7, #12]
 8012e0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012e0e:	b2db      	uxtb	r3, r3
 8012e10:	2b20      	cmp	r3, #32
 8012e12:	f040 8214 	bne.w	801323e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8012e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e18:	9300      	str	r3, [sp, #0]
 8012e1a:	2319      	movs	r3, #25
 8012e1c:	2201      	movs	r2, #1
 8012e1e:	497b      	ldr	r1, [pc, #492]	; (801300c <HAL_I2C_Mem_Read+0x224>)
 8012e20:	68f8      	ldr	r0, [r7, #12]
 8012e22:	f000 fcbf 	bl	80137a4 <I2C_WaitOnFlagUntilTimeout>
 8012e26:	4603      	mov	r3, r0
 8012e28:	2b00      	cmp	r3, #0
 8012e2a:	d001      	beq.n	8012e30 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8012e2c:	2302      	movs	r3, #2
 8012e2e:	e207      	b.n	8013240 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8012e30:	68fb      	ldr	r3, [r7, #12]
 8012e32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012e36:	2b01      	cmp	r3, #1
 8012e38:	d101      	bne.n	8012e3e <HAL_I2C_Mem_Read+0x56>
 8012e3a:	2302      	movs	r3, #2
 8012e3c:	e200      	b.n	8013240 <HAL_I2C_Mem_Read+0x458>
 8012e3e:	68fb      	ldr	r3, [r7, #12]
 8012e40:	2201      	movs	r2, #1
 8012e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8012e46:	68fb      	ldr	r3, [r7, #12]
 8012e48:	681b      	ldr	r3, [r3, #0]
 8012e4a:	681b      	ldr	r3, [r3, #0]
 8012e4c:	f003 0301 	and.w	r3, r3, #1
 8012e50:	2b01      	cmp	r3, #1
 8012e52:	d007      	beq.n	8012e64 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8012e54:	68fb      	ldr	r3, [r7, #12]
 8012e56:	681b      	ldr	r3, [r3, #0]
 8012e58:	681a      	ldr	r2, [r3, #0]
 8012e5a:	68fb      	ldr	r3, [r7, #12]
 8012e5c:	681b      	ldr	r3, [r3, #0]
 8012e5e:	f042 0201 	orr.w	r2, r2, #1
 8012e62:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8012e64:	68fb      	ldr	r3, [r7, #12]
 8012e66:	681b      	ldr	r3, [r3, #0]
 8012e68:	681a      	ldr	r2, [r3, #0]
 8012e6a:	68fb      	ldr	r3, [r7, #12]
 8012e6c:	681b      	ldr	r3, [r3, #0]
 8012e6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8012e72:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8012e74:	68fb      	ldr	r3, [r7, #12]
 8012e76:	2222      	movs	r2, #34	; 0x22
 8012e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8012e7c:	68fb      	ldr	r3, [r7, #12]
 8012e7e:	2240      	movs	r2, #64	; 0x40
 8012e80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8012e84:	68fb      	ldr	r3, [r7, #12]
 8012e86:	2200      	movs	r2, #0
 8012e88:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8012e8a:	68fb      	ldr	r3, [r7, #12]
 8012e8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012e8e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8012e90:	68fb      	ldr	r3, [r7, #12]
 8012e92:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8012e94:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8012e96:	68fb      	ldr	r3, [r7, #12]
 8012e98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012e9a:	b29a      	uxth	r2, r3
 8012e9c:	68fb      	ldr	r3, [r7, #12]
 8012e9e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8012ea0:	68fb      	ldr	r3, [r7, #12]
 8012ea2:	4a5b      	ldr	r2, [pc, #364]	; (8013010 <HAL_I2C_Mem_Read+0x228>)
 8012ea4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8012ea6:	88f8      	ldrh	r0, [r7, #6]
 8012ea8:	893a      	ldrh	r2, [r7, #8]
 8012eaa:	8979      	ldrh	r1, [r7, #10]
 8012eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012eae:	9301      	str	r3, [sp, #4]
 8012eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012eb2:	9300      	str	r3, [sp, #0]
 8012eb4:	4603      	mov	r3, r0
 8012eb6:	68f8      	ldr	r0, [r7, #12]
 8012eb8:	f000 fb8c 	bl	80135d4 <I2C_RequestMemoryRead>
 8012ebc:	4603      	mov	r3, r0
 8012ebe:	2b00      	cmp	r3, #0
 8012ec0:	d001      	beq.n	8012ec6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8012ec2:	2301      	movs	r3, #1
 8012ec4:	e1bc      	b.n	8013240 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8012ec6:	68fb      	ldr	r3, [r7, #12]
 8012ec8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012eca:	2b00      	cmp	r3, #0
 8012ecc:	d113      	bne.n	8012ef6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8012ece:	2300      	movs	r3, #0
 8012ed0:	623b      	str	r3, [r7, #32]
 8012ed2:	68fb      	ldr	r3, [r7, #12]
 8012ed4:	681b      	ldr	r3, [r3, #0]
 8012ed6:	695b      	ldr	r3, [r3, #20]
 8012ed8:	623b      	str	r3, [r7, #32]
 8012eda:	68fb      	ldr	r3, [r7, #12]
 8012edc:	681b      	ldr	r3, [r3, #0]
 8012ede:	699b      	ldr	r3, [r3, #24]
 8012ee0:	623b      	str	r3, [r7, #32]
 8012ee2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8012ee4:	68fb      	ldr	r3, [r7, #12]
 8012ee6:	681b      	ldr	r3, [r3, #0]
 8012ee8:	681a      	ldr	r2, [r3, #0]
 8012eea:	68fb      	ldr	r3, [r7, #12]
 8012eec:	681b      	ldr	r3, [r3, #0]
 8012eee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012ef2:	601a      	str	r2, [r3, #0]
 8012ef4:	e190      	b.n	8013218 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8012ef6:	68fb      	ldr	r3, [r7, #12]
 8012ef8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012efa:	2b01      	cmp	r3, #1
 8012efc:	d11b      	bne.n	8012f36 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8012efe:	68fb      	ldr	r3, [r7, #12]
 8012f00:	681b      	ldr	r3, [r3, #0]
 8012f02:	681a      	ldr	r2, [r3, #0]
 8012f04:	68fb      	ldr	r3, [r7, #12]
 8012f06:	681b      	ldr	r3, [r3, #0]
 8012f08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012f0c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8012f0e:	2300      	movs	r3, #0
 8012f10:	61fb      	str	r3, [r7, #28]
 8012f12:	68fb      	ldr	r3, [r7, #12]
 8012f14:	681b      	ldr	r3, [r3, #0]
 8012f16:	695b      	ldr	r3, [r3, #20]
 8012f18:	61fb      	str	r3, [r7, #28]
 8012f1a:	68fb      	ldr	r3, [r7, #12]
 8012f1c:	681b      	ldr	r3, [r3, #0]
 8012f1e:	699b      	ldr	r3, [r3, #24]
 8012f20:	61fb      	str	r3, [r7, #28]
 8012f22:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8012f24:	68fb      	ldr	r3, [r7, #12]
 8012f26:	681b      	ldr	r3, [r3, #0]
 8012f28:	681a      	ldr	r2, [r3, #0]
 8012f2a:	68fb      	ldr	r3, [r7, #12]
 8012f2c:	681b      	ldr	r3, [r3, #0]
 8012f2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012f32:	601a      	str	r2, [r3, #0]
 8012f34:	e170      	b.n	8013218 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8012f36:	68fb      	ldr	r3, [r7, #12]
 8012f38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012f3a:	2b02      	cmp	r3, #2
 8012f3c:	d11b      	bne.n	8012f76 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8012f3e:	68fb      	ldr	r3, [r7, #12]
 8012f40:	681b      	ldr	r3, [r3, #0]
 8012f42:	681a      	ldr	r2, [r3, #0]
 8012f44:	68fb      	ldr	r3, [r7, #12]
 8012f46:	681b      	ldr	r3, [r3, #0]
 8012f48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012f4c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8012f4e:	68fb      	ldr	r3, [r7, #12]
 8012f50:	681b      	ldr	r3, [r3, #0]
 8012f52:	681a      	ldr	r2, [r3, #0]
 8012f54:	68fb      	ldr	r3, [r7, #12]
 8012f56:	681b      	ldr	r3, [r3, #0]
 8012f58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8012f5c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8012f5e:	2300      	movs	r3, #0
 8012f60:	61bb      	str	r3, [r7, #24]
 8012f62:	68fb      	ldr	r3, [r7, #12]
 8012f64:	681b      	ldr	r3, [r3, #0]
 8012f66:	695b      	ldr	r3, [r3, #20]
 8012f68:	61bb      	str	r3, [r7, #24]
 8012f6a:	68fb      	ldr	r3, [r7, #12]
 8012f6c:	681b      	ldr	r3, [r3, #0]
 8012f6e:	699b      	ldr	r3, [r3, #24]
 8012f70:	61bb      	str	r3, [r7, #24]
 8012f72:	69bb      	ldr	r3, [r7, #24]
 8012f74:	e150      	b.n	8013218 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8012f76:	2300      	movs	r3, #0
 8012f78:	617b      	str	r3, [r7, #20]
 8012f7a:	68fb      	ldr	r3, [r7, #12]
 8012f7c:	681b      	ldr	r3, [r3, #0]
 8012f7e:	695b      	ldr	r3, [r3, #20]
 8012f80:	617b      	str	r3, [r7, #20]
 8012f82:	68fb      	ldr	r3, [r7, #12]
 8012f84:	681b      	ldr	r3, [r3, #0]
 8012f86:	699b      	ldr	r3, [r3, #24]
 8012f88:	617b      	str	r3, [r7, #20]
 8012f8a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8012f8c:	e144      	b.n	8013218 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8012f8e:	68fb      	ldr	r3, [r7, #12]
 8012f90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012f92:	2b03      	cmp	r3, #3
 8012f94:	f200 80f1 	bhi.w	801317a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8012f98:	68fb      	ldr	r3, [r7, #12]
 8012f9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012f9c:	2b01      	cmp	r3, #1
 8012f9e:	d123      	bne.n	8012fe8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8012fa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012fa2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012fa4:	68f8      	ldr	r0, [r7, #12]
 8012fa6:	f000 fda7 	bl	8013af8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8012faa:	4603      	mov	r3, r0
 8012fac:	2b00      	cmp	r3, #0
 8012fae:	d001      	beq.n	8012fb4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8012fb0:	2301      	movs	r3, #1
 8012fb2:	e145      	b.n	8013240 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8012fb4:	68fb      	ldr	r3, [r7, #12]
 8012fb6:	681b      	ldr	r3, [r3, #0]
 8012fb8:	691a      	ldr	r2, [r3, #16]
 8012fba:	68fb      	ldr	r3, [r7, #12]
 8012fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012fbe:	b2d2      	uxtb	r2, r2
 8012fc0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8012fc2:	68fb      	ldr	r3, [r7, #12]
 8012fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012fc6:	1c5a      	adds	r2, r3, #1
 8012fc8:	68fb      	ldr	r3, [r7, #12]
 8012fca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8012fcc:	68fb      	ldr	r3, [r7, #12]
 8012fce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012fd0:	3b01      	subs	r3, #1
 8012fd2:	b29a      	uxth	r2, r3
 8012fd4:	68fb      	ldr	r3, [r7, #12]
 8012fd6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8012fd8:	68fb      	ldr	r3, [r7, #12]
 8012fda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012fdc:	b29b      	uxth	r3, r3
 8012fde:	3b01      	subs	r3, #1
 8012fe0:	b29a      	uxth	r2, r3
 8012fe2:	68fb      	ldr	r3, [r7, #12]
 8012fe4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8012fe6:	e117      	b.n	8013218 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8012fe8:	68fb      	ldr	r3, [r7, #12]
 8012fea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012fec:	2b02      	cmp	r3, #2
 8012fee:	d14e      	bne.n	801308e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8012ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ff2:	9300      	str	r3, [sp, #0]
 8012ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ff6:	2200      	movs	r2, #0
 8012ff8:	4906      	ldr	r1, [pc, #24]	; (8013014 <HAL_I2C_Mem_Read+0x22c>)
 8012ffa:	68f8      	ldr	r0, [r7, #12]
 8012ffc:	f000 fbd2 	bl	80137a4 <I2C_WaitOnFlagUntilTimeout>
 8013000:	4603      	mov	r3, r0
 8013002:	2b00      	cmp	r3, #0
 8013004:	d008      	beq.n	8013018 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8013006:	2301      	movs	r3, #1
 8013008:	e11a      	b.n	8013240 <HAL_I2C_Mem_Read+0x458>
 801300a:	bf00      	nop
 801300c:	00100002 	.word	0x00100002
 8013010:	ffff0000 	.word	0xffff0000
 8013014:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8013018:	68fb      	ldr	r3, [r7, #12]
 801301a:	681b      	ldr	r3, [r3, #0]
 801301c:	681a      	ldr	r2, [r3, #0]
 801301e:	68fb      	ldr	r3, [r7, #12]
 8013020:	681b      	ldr	r3, [r3, #0]
 8013022:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013026:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8013028:	68fb      	ldr	r3, [r7, #12]
 801302a:	681b      	ldr	r3, [r3, #0]
 801302c:	691a      	ldr	r2, [r3, #16]
 801302e:	68fb      	ldr	r3, [r7, #12]
 8013030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013032:	b2d2      	uxtb	r2, r2
 8013034:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8013036:	68fb      	ldr	r3, [r7, #12]
 8013038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801303a:	1c5a      	adds	r2, r3, #1
 801303c:	68fb      	ldr	r3, [r7, #12]
 801303e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8013040:	68fb      	ldr	r3, [r7, #12]
 8013042:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013044:	3b01      	subs	r3, #1
 8013046:	b29a      	uxth	r2, r3
 8013048:	68fb      	ldr	r3, [r7, #12]
 801304a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 801304c:	68fb      	ldr	r3, [r7, #12]
 801304e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013050:	b29b      	uxth	r3, r3
 8013052:	3b01      	subs	r3, #1
 8013054:	b29a      	uxth	r2, r3
 8013056:	68fb      	ldr	r3, [r7, #12]
 8013058:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801305a:	68fb      	ldr	r3, [r7, #12]
 801305c:	681b      	ldr	r3, [r3, #0]
 801305e:	691a      	ldr	r2, [r3, #16]
 8013060:	68fb      	ldr	r3, [r7, #12]
 8013062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013064:	b2d2      	uxtb	r2, r2
 8013066:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8013068:	68fb      	ldr	r3, [r7, #12]
 801306a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801306c:	1c5a      	adds	r2, r3, #1
 801306e:	68fb      	ldr	r3, [r7, #12]
 8013070:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8013072:	68fb      	ldr	r3, [r7, #12]
 8013074:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013076:	3b01      	subs	r3, #1
 8013078:	b29a      	uxth	r2, r3
 801307a:	68fb      	ldr	r3, [r7, #12]
 801307c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 801307e:	68fb      	ldr	r3, [r7, #12]
 8013080:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013082:	b29b      	uxth	r3, r3
 8013084:	3b01      	subs	r3, #1
 8013086:	b29a      	uxth	r2, r3
 8013088:	68fb      	ldr	r3, [r7, #12]
 801308a:	855a      	strh	r2, [r3, #42]	; 0x2a
 801308c:	e0c4      	b.n	8013218 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 801308e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013090:	9300      	str	r3, [sp, #0]
 8013092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013094:	2200      	movs	r2, #0
 8013096:	496c      	ldr	r1, [pc, #432]	; (8013248 <HAL_I2C_Mem_Read+0x460>)
 8013098:	68f8      	ldr	r0, [r7, #12]
 801309a:	f000 fb83 	bl	80137a4 <I2C_WaitOnFlagUntilTimeout>
 801309e:	4603      	mov	r3, r0
 80130a0:	2b00      	cmp	r3, #0
 80130a2:	d001      	beq.n	80130a8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80130a4:	2301      	movs	r3, #1
 80130a6:	e0cb      	b.n	8013240 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80130a8:	68fb      	ldr	r3, [r7, #12]
 80130aa:	681b      	ldr	r3, [r3, #0]
 80130ac:	681a      	ldr	r2, [r3, #0]
 80130ae:	68fb      	ldr	r3, [r7, #12]
 80130b0:	681b      	ldr	r3, [r3, #0]
 80130b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80130b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80130b8:	68fb      	ldr	r3, [r7, #12]
 80130ba:	681b      	ldr	r3, [r3, #0]
 80130bc:	691a      	ldr	r2, [r3, #16]
 80130be:	68fb      	ldr	r3, [r7, #12]
 80130c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80130c2:	b2d2      	uxtb	r2, r2
 80130c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80130c6:	68fb      	ldr	r3, [r7, #12]
 80130c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80130ca:	1c5a      	adds	r2, r3, #1
 80130cc:	68fb      	ldr	r3, [r7, #12]
 80130ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80130d0:	68fb      	ldr	r3, [r7, #12]
 80130d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80130d4:	3b01      	subs	r3, #1
 80130d6:	b29a      	uxth	r2, r3
 80130d8:	68fb      	ldr	r3, [r7, #12]
 80130da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80130dc:	68fb      	ldr	r3, [r7, #12]
 80130de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80130e0:	b29b      	uxth	r3, r3
 80130e2:	3b01      	subs	r3, #1
 80130e4:	b29a      	uxth	r2, r3
 80130e6:	68fb      	ldr	r3, [r7, #12]
 80130e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80130ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130ec:	9300      	str	r3, [sp, #0]
 80130ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130f0:	2200      	movs	r2, #0
 80130f2:	4955      	ldr	r1, [pc, #340]	; (8013248 <HAL_I2C_Mem_Read+0x460>)
 80130f4:	68f8      	ldr	r0, [r7, #12]
 80130f6:	f000 fb55 	bl	80137a4 <I2C_WaitOnFlagUntilTimeout>
 80130fa:	4603      	mov	r3, r0
 80130fc:	2b00      	cmp	r3, #0
 80130fe:	d001      	beq.n	8013104 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8013100:	2301      	movs	r3, #1
 8013102:	e09d      	b.n	8013240 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8013104:	68fb      	ldr	r3, [r7, #12]
 8013106:	681b      	ldr	r3, [r3, #0]
 8013108:	681a      	ldr	r2, [r3, #0]
 801310a:	68fb      	ldr	r3, [r7, #12]
 801310c:	681b      	ldr	r3, [r3, #0]
 801310e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013112:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8013114:	68fb      	ldr	r3, [r7, #12]
 8013116:	681b      	ldr	r3, [r3, #0]
 8013118:	691a      	ldr	r2, [r3, #16]
 801311a:	68fb      	ldr	r3, [r7, #12]
 801311c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801311e:	b2d2      	uxtb	r2, r2
 8013120:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8013122:	68fb      	ldr	r3, [r7, #12]
 8013124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013126:	1c5a      	adds	r2, r3, #1
 8013128:	68fb      	ldr	r3, [r7, #12]
 801312a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 801312c:	68fb      	ldr	r3, [r7, #12]
 801312e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013130:	3b01      	subs	r3, #1
 8013132:	b29a      	uxth	r2, r3
 8013134:	68fb      	ldr	r3, [r7, #12]
 8013136:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8013138:	68fb      	ldr	r3, [r7, #12]
 801313a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801313c:	b29b      	uxth	r3, r3
 801313e:	3b01      	subs	r3, #1
 8013140:	b29a      	uxth	r2, r3
 8013142:	68fb      	ldr	r3, [r7, #12]
 8013144:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8013146:	68fb      	ldr	r3, [r7, #12]
 8013148:	681b      	ldr	r3, [r3, #0]
 801314a:	691a      	ldr	r2, [r3, #16]
 801314c:	68fb      	ldr	r3, [r7, #12]
 801314e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013150:	b2d2      	uxtb	r2, r2
 8013152:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8013154:	68fb      	ldr	r3, [r7, #12]
 8013156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013158:	1c5a      	adds	r2, r3, #1
 801315a:	68fb      	ldr	r3, [r7, #12]
 801315c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 801315e:	68fb      	ldr	r3, [r7, #12]
 8013160:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013162:	3b01      	subs	r3, #1
 8013164:	b29a      	uxth	r2, r3
 8013166:	68fb      	ldr	r3, [r7, #12]
 8013168:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 801316a:	68fb      	ldr	r3, [r7, #12]
 801316c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801316e:	b29b      	uxth	r3, r3
 8013170:	3b01      	subs	r3, #1
 8013172:	b29a      	uxth	r2, r3
 8013174:	68fb      	ldr	r3, [r7, #12]
 8013176:	855a      	strh	r2, [r3, #42]	; 0x2a
 8013178:	e04e      	b.n	8013218 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801317a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801317c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801317e:	68f8      	ldr	r0, [r7, #12]
 8013180:	f000 fcba 	bl	8013af8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8013184:	4603      	mov	r3, r0
 8013186:	2b00      	cmp	r3, #0
 8013188:	d001      	beq.n	801318e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 801318a:	2301      	movs	r3, #1
 801318c:	e058      	b.n	8013240 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801318e:	68fb      	ldr	r3, [r7, #12]
 8013190:	681b      	ldr	r3, [r3, #0]
 8013192:	691a      	ldr	r2, [r3, #16]
 8013194:	68fb      	ldr	r3, [r7, #12]
 8013196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013198:	b2d2      	uxtb	r2, r2
 801319a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 801319c:	68fb      	ldr	r3, [r7, #12]
 801319e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80131a0:	1c5a      	adds	r2, r3, #1
 80131a2:	68fb      	ldr	r3, [r7, #12]
 80131a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80131a6:	68fb      	ldr	r3, [r7, #12]
 80131a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80131aa:	3b01      	subs	r3, #1
 80131ac:	b29a      	uxth	r2, r3
 80131ae:	68fb      	ldr	r3, [r7, #12]
 80131b0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80131b2:	68fb      	ldr	r3, [r7, #12]
 80131b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80131b6:	b29b      	uxth	r3, r3
 80131b8:	3b01      	subs	r3, #1
 80131ba:	b29a      	uxth	r2, r3
 80131bc:	68fb      	ldr	r3, [r7, #12]
 80131be:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80131c0:	68fb      	ldr	r3, [r7, #12]
 80131c2:	681b      	ldr	r3, [r3, #0]
 80131c4:	695b      	ldr	r3, [r3, #20]
 80131c6:	f003 0304 	and.w	r3, r3, #4
 80131ca:	2b04      	cmp	r3, #4
 80131cc:	d124      	bne.n	8013218 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80131ce:	68fb      	ldr	r3, [r7, #12]
 80131d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80131d2:	2b03      	cmp	r3, #3
 80131d4:	d107      	bne.n	80131e6 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80131d6:	68fb      	ldr	r3, [r7, #12]
 80131d8:	681b      	ldr	r3, [r3, #0]
 80131da:	681a      	ldr	r2, [r3, #0]
 80131dc:	68fb      	ldr	r3, [r7, #12]
 80131de:	681b      	ldr	r3, [r3, #0]
 80131e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80131e4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80131e6:	68fb      	ldr	r3, [r7, #12]
 80131e8:	681b      	ldr	r3, [r3, #0]
 80131ea:	691a      	ldr	r2, [r3, #16]
 80131ec:	68fb      	ldr	r3, [r7, #12]
 80131ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80131f0:	b2d2      	uxtb	r2, r2
 80131f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80131f4:	68fb      	ldr	r3, [r7, #12]
 80131f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80131f8:	1c5a      	adds	r2, r3, #1
 80131fa:	68fb      	ldr	r3, [r7, #12]
 80131fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80131fe:	68fb      	ldr	r3, [r7, #12]
 8013200:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013202:	3b01      	subs	r3, #1
 8013204:	b29a      	uxth	r2, r3
 8013206:	68fb      	ldr	r3, [r7, #12]
 8013208:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 801320a:	68fb      	ldr	r3, [r7, #12]
 801320c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801320e:	b29b      	uxth	r3, r3
 8013210:	3b01      	subs	r3, #1
 8013212:	b29a      	uxth	r2, r3
 8013214:	68fb      	ldr	r3, [r7, #12]
 8013216:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8013218:	68fb      	ldr	r3, [r7, #12]
 801321a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801321c:	2b00      	cmp	r3, #0
 801321e:	f47f aeb6 	bne.w	8012f8e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8013222:	68fb      	ldr	r3, [r7, #12]
 8013224:	2220      	movs	r2, #32
 8013226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 801322a:	68fb      	ldr	r3, [r7, #12]
 801322c:	2200      	movs	r2, #0
 801322e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8013232:	68fb      	ldr	r3, [r7, #12]
 8013234:	2200      	movs	r2, #0
 8013236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 801323a:	2300      	movs	r3, #0
 801323c:	e000      	b.n	8013240 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 801323e:	2302      	movs	r3, #2
  }
}
 8013240:	4618      	mov	r0, r3
 8013242:	3728      	adds	r7, #40	; 0x28
 8013244:	46bd      	mov	sp, r7
 8013246:	bd80      	pop	{r7, pc}
 8013248:	00010004 	.word	0x00010004

0801324c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 801324c:	b580      	push	{r7, lr}
 801324e:	b08a      	sub	sp, #40	; 0x28
 8013250:	af02      	add	r7, sp, #8
 8013252:	60f8      	str	r0, [r7, #12]
 8013254:	607a      	str	r2, [r7, #4]
 8013256:	603b      	str	r3, [r7, #0]
 8013258:	460b      	mov	r3, r1
 801325a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 801325c:	f7fe fa8a 	bl	8011774 <HAL_GetTick>
 8013260:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8013262:	2300      	movs	r3, #0
 8013264:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8013266:	68fb      	ldr	r3, [r7, #12]
 8013268:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801326c:	b2db      	uxtb	r3, r3
 801326e:	2b20      	cmp	r3, #32
 8013270:	f040 8111 	bne.w	8013496 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8013274:	69fb      	ldr	r3, [r7, #28]
 8013276:	9300      	str	r3, [sp, #0]
 8013278:	2319      	movs	r3, #25
 801327a:	2201      	movs	r2, #1
 801327c:	4988      	ldr	r1, [pc, #544]	; (80134a0 <HAL_I2C_IsDeviceReady+0x254>)
 801327e:	68f8      	ldr	r0, [r7, #12]
 8013280:	f000 fa90 	bl	80137a4 <I2C_WaitOnFlagUntilTimeout>
 8013284:	4603      	mov	r3, r0
 8013286:	2b00      	cmp	r3, #0
 8013288:	d001      	beq.n	801328e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 801328a:	2302      	movs	r3, #2
 801328c:	e104      	b.n	8013498 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801328e:	68fb      	ldr	r3, [r7, #12]
 8013290:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013294:	2b01      	cmp	r3, #1
 8013296:	d101      	bne.n	801329c <HAL_I2C_IsDeviceReady+0x50>
 8013298:	2302      	movs	r3, #2
 801329a:	e0fd      	b.n	8013498 <HAL_I2C_IsDeviceReady+0x24c>
 801329c:	68fb      	ldr	r3, [r7, #12]
 801329e:	2201      	movs	r2, #1
 80132a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80132a4:	68fb      	ldr	r3, [r7, #12]
 80132a6:	681b      	ldr	r3, [r3, #0]
 80132a8:	681b      	ldr	r3, [r3, #0]
 80132aa:	f003 0301 	and.w	r3, r3, #1
 80132ae:	2b01      	cmp	r3, #1
 80132b0:	d007      	beq.n	80132c2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80132b2:	68fb      	ldr	r3, [r7, #12]
 80132b4:	681b      	ldr	r3, [r3, #0]
 80132b6:	681a      	ldr	r2, [r3, #0]
 80132b8:	68fb      	ldr	r3, [r7, #12]
 80132ba:	681b      	ldr	r3, [r3, #0]
 80132bc:	f042 0201 	orr.w	r2, r2, #1
 80132c0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80132c2:	68fb      	ldr	r3, [r7, #12]
 80132c4:	681b      	ldr	r3, [r3, #0]
 80132c6:	681a      	ldr	r2, [r3, #0]
 80132c8:	68fb      	ldr	r3, [r7, #12]
 80132ca:	681b      	ldr	r3, [r3, #0]
 80132cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80132d0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80132d2:	68fb      	ldr	r3, [r7, #12]
 80132d4:	2224      	movs	r2, #36	; 0x24
 80132d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80132da:	68fb      	ldr	r3, [r7, #12]
 80132dc:	2200      	movs	r2, #0
 80132de:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80132e0:	68fb      	ldr	r3, [r7, #12]
 80132e2:	4a70      	ldr	r2, [pc, #448]	; (80134a4 <HAL_I2C_IsDeviceReady+0x258>)
 80132e4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80132e6:	68fb      	ldr	r3, [r7, #12]
 80132e8:	681b      	ldr	r3, [r3, #0]
 80132ea:	681a      	ldr	r2, [r3, #0]
 80132ec:	68fb      	ldr	r3, [r7, #12]
 80132ee:	681b      	ldr	r3, [r3, #0]
 80132f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80132f4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80132f6:	69fb      	ldr	r3, [r7, #28]
 80132f8:	9300      	str	r3, [sp, #0]
 80132fa:	683b      	ldr	r3, [r7, #0]
 80132fc:	2200      	movs	r2, #0
 80132fe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8013302:	68f8      	ldr	r0, [r7, #12]
 8013304:	f000 fa4e 	bl	80137a4 <I2C_WaitOnFlagUntilTimeout>
 8013308:	4603      	mov	r3, r0
 801330a:	2b00      	cmp	r3, #0
 801330c:	d00d      	beq.n	801332a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 801330e:	68fb      	ldr	r3, [r7, #12]
 8013310:	681b      	ldr	r3, [r3, #0]
 8013312:	681b      	ldr	r3, [r3, #0]
 8013314:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013318:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801331c:	d103      	bne.n	8013326 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 801331e:	68fb      	ldr	r3, [r7, #12]
 8013320:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013324:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8013326:	2303      	movs	r3, #3
 8013328:	e0b6      	b.n	8013498 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 801332a:	897b      	ldrh	r3, [r7, #10]
 801332c:	b2db      	uxtb	r3, r3
 801332e:	461a      	mov	r2, r3
 8013330:	68fb      	ldr	r3, [r7, #12]
 8013332:	681b      	ldr	r3, [r3, #0]
 8013334:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8013338:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 801333a:	f7fe fa1b 	bl	8011774 <HAL_GetTick>
 801333e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8013340:	68fb      	ldr	r3, [r7, #12]
 8013342:	681b      	ldr	r3, [r3, #0]
 8013344:	695b      	ldr	r3, [r3, #20]
 8013346:	f003 0302 	and.w	r3, r3, #2
 801334a:	2b02      	cmp	r3, #2
 801334c:	bf0c      	ite	eq
 801334e:	2301      	moveq	r3, #1
 8013350:	2300      	movne	r3, #0
 8013352:	b2db      	uxtb	r3, r3
 8013354:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8013356:	68fb      	ldr	r3, [r7, #12]
 8013358:	681b      	ldr	r3, [r3, #0]
 801335a:	695b      	ldr	r3, [r3, #20]
 801335c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8013360:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013364:	bf0c      	ite	eq
 8013366:	2301      	moveq	r3, #1
 8013368:	2300      	movne	r3, #0
 801336a:	b2db      	uxtb	r3, r3
 801336c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 801336e:	e025      	b.n	80133bc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8013370:	f7fe fa00 	bl	8011774 <HAL_GetTick>
 8013374:	4602      	mov	r2, r0
 8013376:	69fb      	ldr	r3, [r7, #28]
 8013378:	1ad3      	subs	r3, r2, r3
 801337a:	683a      	ldr	r2, [r7, #0]
 801337c:	429a      	cmp	r2, r3
 801337e:	d302      	bcc.n	8013386 <HAL_I2C_IsDeviceReady+0x13a>
 8013380:	683b      	ldr	r3, [r7, #0]
 8013382:	2b00      	cmp	r3, #0
 8013384:	d103      	bne.n	801338e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8013386:	68fb      	ldr	r3, [r7, #12]
 8013388:	22a0      	movs	r2, #160	; 0xa0
 801338a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 801338e:	68fb      	ldr	r3, [r7, #12]
 8013390:	681b      	ldr	r3, [r3, #0]
 8013392:	695b      	ldr	r3, [r3, #20]
 8013394:	f003 0302 	and.w	r3, r3, #2
 8013398:	2b02      	cmp	r3, #2
 801339a:	bf0c      	ite	eq
 801339c:	2301      	moveq	r3, #1
 801339e:	2300      	movne	r3, #0
 80133a0:	b2db      	uxtb	r3, r3
 80133a2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80133a4:	68fb      	ldr	r3, [r7, #12]
 80133a6:	681b      	ldr	r3, [r3, #0]
 80133a8:	695b      	ldr	r3, [r3, #20]
 80133aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80133ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80133b2:	bf0c      	ite	eq
 80133b4:	2301      	moveq	r3, #1
 80133b6:	2300      	movne	r3, #0
 80133b8:	b2db      	uxtb	r3, r3
 80133ba:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80133bc:	68fb      	ldr	r3, [r7, #12]
 80133be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80133c2:	b2db      	uxtb	r3, r3
 80133c4:	2ba0      	cmp	r3, #160	; 0xa0
 80133c6:	d005      	beq.n	80133d4 <HAL_I2C_IsDeviceReady+0x188>
 80133c8:	7dfb      	ldrb	r3, [r7, #23]
 80133ca:	2b00      	cmp	r3, #0
 80133cc:	d102      	bne.n	80133d4 <HAL_I2C_IsDeviceReady+0x188>
 80133ce:	7dbb      	ldrb	r3, [r7, #22]
 80133d0:	2b00      	cmp	r3, #0
 80133d2:	d0cd      	beq.n	8013370 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80133d4:	68fb      	ldr	r3, [r7, #12]
 80133d6:	2220      	movs	r2, #32
 80133d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80133dc:	68fb      	ldr	r3, [r7, #12]
 80133de:	681b      	ldr	r3, [r3, #0]
 80133e0:	695b      	ldr	r3, [r3, #20]
 80133e2:	f003 0302 	and.w	r3, r3, #2
 80133e6:	2b02      	cmp	r3, #2
 80133e8:	d129      	bne.n	801343e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80133ea:	68fb      	ldr	r3, [r7, #12]
 80133ec:	681b      	ldr	r3, [r3, #0]
 80133ee:	681a      	ldr	r2, [r3, #0]
 80133f0:	68fb      	ldr	r3, [r7, #12]
 80133f2:	681b      	ldr	r3, [r3, #0]
 80133f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80133f8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80133fa:	2300      	movs	r3, #0
 80133fc:	613b      	str	r3, [r7, #16]
 80133fe:	68fb      	ldr	r3, [r7, #12]
 8013400:	681b      	ldr	r3, [r3, #0]
 8013402:	695b      	ldr	r3, [r3, #20]
 8013404:	613b      	str	r3, [r7, #16]
 8013406:	68fb      	ldr	r3, [r7, #12]
 8013408:	681b      	ldr	r3, [r3, #0]
 801340a:	699b      	ldr	r3, [r3, #24]
 801340c:	613b      	str	r3, [r7, #16]
 801340e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8013410:	69fb      	ldr	r3, [r7, #28]
 8013412:	9300      	str	r3, [sp, #0]
 8013414:	2319      	movs	r3, #25
 8013416:	2201      	movs	r2, #1
 8013418:	4921      	ldr	r1, [pc, #132]	; (80134a0 <HAL_I2C_IsDeviceReady+0x254>)
 801341a:	68f8      	ldr	r0, [r7, #12]
 801341c:	f000 f9c2 	bl	80137a4 <I2C_WaitOnFlagUntilTimeout>
 8013420:	4603      	mov	r3, r0
 8013422:	2b00      	cmp	r3, #0
 8013424:	d001      	beq.n	801342a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8013426:	2301      	movs	r3, #1
 8013428:	e036      	b.n	8013498 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 801342a:	68fb      	ldr	r3, [r7, #12]
 801342c:	2220      	movs	r2, #32
 801342e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8013432:	68fb      	ldr	r3, [r7, #12]
 8013434:	2200      	movs	r2, #0
 8013436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 801343a:	2300      	movs	r3, #0
 801343c:	e02c      	b.n	8013498 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801343e:	68fb      	ldr	r3, [r7, #12]
 8013440:	681b      	ldr	r3, [r3, #0]
 8013442:	681a      	ldr	r2, [r3, #0]
 8013444:	68fb      	ldr	r3, [r7, #12]
 8013446:	681b      	ldr	r3, [r3, #0]
 8013448:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801344c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801344e:	68fb      	ldr	r3, [r7, #12]
 8013450:	681b      	ldr	r3, [r3, #0]
 8013452:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8013456:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8013458:	69fb      	ldr	r3, [r7, #28]
 801345a:	9300      	str	r3, [sp, #0]
 801345c:	2319      	movs	r3, #25
 801345e:	2201      	movs	r2, #1
 8013460:	490f      	ldr	r1, [pc, #60]	; (80134a0 <HAL_I2C_IsDeviceReady+0x254>)
 8013462:	68f8      	ldr	r0, [r7, #12]
 8013464:	f000 f99e 	bl	80137a4 <I2C_WaitOnFlagUntilTimeout>
 8013468:	4603      	mov	r3, r0
 801346a:	2b00      	cmp	r3, #0
 801346c:	d001      	beq.n	8013472 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 801346e:	2301      	movs	r3, #1
 8013470:	e012      	b.n	8013498 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8013472:	69bb      	ldr	r3, [r7, #24]
 8013474:	3301      	adds	r3, #1
 8013476:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8013478:	69ba      	ldr	r2, [r7, #24]
 801347a:	687b      	ldr	r3, [r7, #4]
 801347c:	429a      	cmp	r2, r3
 801347e:	f4ff af32 	bcc.w	80132e6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8013482:	68fb      	ldr	r3, [r7, #12]
 8013484:	2220      	movs	r2, #32
 8013486:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801348a:	68fb      	ldr	r3, [r7, #12]
 801348c:	2200      	movs	r2, #0
 801348e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8013492:	2301      	movs	r3, #1
 8013494:	e000      	b.n	8013498 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8013496:	2302      	movs	r3, #2
  }
}
 8013498:	4618      	mov	r0, r3
 801349a:	3720      	adds	r7, #32
 801349c:	46bd      	mov	sp, r7
 801349e:	bd80      	pop	{r7, pc}
 80134a0:	00100002 	.word	0x00100002
 80134a4:	ffff0000 	.word	0xffff0000

080134a8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80134a8:	b580      	push	{r7, lr}
 80134aa:	b088      	sub	sp, #32
 80134ac:	af02      	add	r7, sp, #8
 80134ae:	60f8      	str	r0, [r7, #12]
 80134b0:	4608      	mov	r0, r1
 80134b2:	4611      	mov	r1, r2
 80134b4:	461a      	mov	r2, r3
 80134b6:	4603      	mov	r3, r0
 80134b8:	817b      	strh	r3, [r7, #10]
 80134ba:	460b      	mov	r3, r1
 80134bc:	813b      	strh	r3, [r7, #8]
 80134be:	4613      	mov	r3, r2
 80134c0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80134c2:	68fb      	ldr	r3, [r7, #12]
 80134c4:	681b      	ldr	r3, [r3, #0]
 80134c6:	681a      	ldr	r2, [r3, #0]
 80134c8:	68fb      	ldr	r3, [r7, #12]
 80134ca:	681b      	ldr	r3, [r3, #0]
 80134cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80134d0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80134d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134d4:	9300      	str	r3, [sp, #0]
 80134d6:	6a3b      	ldr	r3, [r7, #32]
 80134d8:	2200      	movs	r2, #0
 80134da:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80134de:	68f8      	ldr	r0, [r7, #12]
 80134e0:	f000 f960 	bl	80137a4 <I2C_WaitOnFlagUntilTimeout>
 80134e4:	4603      	mov	r3, r0
 80134e6:	2b00      	cmp	r3, #0
 80134e8:	d00d      	beq.n	8013506 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80134ea:	68fb      	ldr	r3, [r7, #12]
 80134ec:	681b      	ldr	r3, [r3, #0]
 80134ee:	681b      	ldr	r3, [r3, #0]
 80134f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80134f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80134f8:	d103      	bne.n	8013502 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80134fa:	68fb      	ldr	r3, [r7, #12]
 80134fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013500:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8013502:	2303      	movs	r3, #3
 8013504:	e05f      	b.n	80135c6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8013506:	897b      	ldrh	r3, [r7, #10]
 8013508:	b2db      	uxtb	r3, r3
 801350a:	461a      	mov	r2, r3
 801350c:	68fb      	ldr	r3, [r7, #12]
 801350e:	681b      	ldr	r3, [r3, #0]
 8013510:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8013514:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8013516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013518:	6a3a      	ldr	r2, [r7, #32]
 801351a:	492d      	ldr	r1, [pc, #180]	; (80135d0 <I2C_RequestMemoryWrite+0x128>)
 801351c:	68f8      	ldr	r0, [r7, #12]
 801351e:	f000 f9bb 	bl	8013898 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8013522:	4603      	mov	r3, r0
 8013524:	2b00      	cmp	r3, #0
 8013526:	d001      	beq.n	801352c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8013528:	2301      	movs	r3, #1
 801352a:	e04c      	b.n	80135c6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801352c:	2300      	movs	r3, #0
 801352e:	617b      	str	r3, [r7, #20]
 8013530:	68fb      	ldr	r3, [r7, #12]
 8013532:	681b      	ldr	r3, [r3, #0]
 8013534:	695b      	ldr	r3, [r3, #20]
 8013536:	617b      	str	r3, [r7, #20]
 8013538:	68fb      	ldr	r3, [r7, #12]
 801353a:	681b      	ldr	r3, [r3, #0]
 801353c:	699b      	ldr	r3, [r3, #24]
 801353e:	617b      	str	r3, [r7, #20]
 8013540:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8013542:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013544:	6a39      	ldr	r1, [r7, #32]
 8013546:	68f8      	ldr	r0, [r7, #12]
 8013548:	f000 fa46 	bl	80139d8 <I2C_WaitOnTXEFlagUntilTimeout>
 801354c:	4603      	mov	r3, r0
 801354e:	2b00      	cmp	r3, #0
 8013550:	d00d      	beq.n	801356e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8013552:	68fb      	ldr	r3, [r7, #12]
 8013554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013556:	2b04      	cmp	r3, #4
 8013558:	d107      	bne.n	801356a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801355a:	68fb      	ldr	r3, [r7, #12]
 801355c:	681b      	ldr	r3, [r3, #0]
 801355e:	681a      	ldr	r2, [r3, #0]
 8013560:	68fb      	ldr	r3, [r7, #12]
 8013562:	681b      	ldr	r3, [r3, #0]
 8013564:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013568:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 801356a:	2301      	movs	r3, #1
 801356c:	e02b      	b.n	80135c6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 801356e:	88fb      	ldrh	r3, [r7, #6]
 8013570:	2b01      	cmp	r3, #1
 8013572:	d105      	bne.n	8013580 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8013574:	893b      	ldrh	r3, [r7, #8]
 8013576:	b2da      	uxtb	r2, r3
 8013578:	68fb      	ldr	r3, [r7, #12]
 801357a:	681b      	ldr	r3, [r3, #0]
 801357c:	611a      	str	r2, [r3, #16]
 801357e:	e021      	b.n	80135c4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8013580:	893b      	ldrh	r3, [r7, #8]
 8013582:	0a1b      	lsrs	r3, r3, #8
 8013584:	b29b      	uxth	r3, r3
 8013586:	b2da      	uxtb	r2, r3
 8013588:	68fb      	ldr	r3, [r7, #12]
 801358a:	681b      	ldr	r3, [r3, #0]
 801358c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801358e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013590:	6a39      	ldr	r1, [r7, #32]
 8013592:	68f8      	ldr	r0, [r7, #12]
 8013594:	f000 fa20 	bl	80139d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8013598:	4603      	mov	r3, r0
 801359a:	2b00      	cmp	r3, #0
 801359c:	d00d      	beq.n	80135ba <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801359e:	68fb      	ldr	r3, [r7, #12]
 80135a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80135a2:	2b04      	cmp	r3, #4
 80135a4:	d107      	bne.n	80135b6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80135a6:	68fb      	ldr	r3, [r7, #12]
 80135a8:	681b      	ldr	r3, [r3, #0]
 80135aa:	681a      	ldr	r2, [r3, #0]
 80135ac:	68fb      	ldr	r3, [r7, #12]
 80135ae:	681b      	ldr	r3, [r3, #0]
 80135b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80135b4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80135b6:	2301      	movs	r3, #1
 80135b8:	e005      	b.n	80135c6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80135ba:	893b      	ldrh	r3, [r7, #8]
 80135bc:	b2da      	uxtb	r2, r3
 80135be:	68fb      	ldr	r3, [r7, #12]
 80135c0:	681b      	ldr	r3, [r3, #0]
 80135c2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80135c4:	2300      	movs	r3, #0
}
 80135c6:	4618      	mov	r0, r3
 80135c8:	3718      	adds	r7, #24
 80135ca:	46bd      	mov	sp, r7
 80135cc:	bd80      	pop	{r7, pc}
 80135ce:	bf00      	nop
 80135d0:	00010002 	.word	0x00010002

080135d4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80135d4:	b580      	push	{r7, lr}
 80135d6:	b088      	sub	sp, #32
 80135d8:	af02      	add	r7, sp, #8
 80135da:	60f8      	str	r0, [r7, #12]
 80135dc:	4608      	mov	r0, r1
 80135de:	4611      	mov	r1, r2
 80135e0:	461a      	mov	r2, r3
 80135e2:	4603      	mov	r3, r0
 80135e4:	817b      	strh	r3, [r7, #10]
 80135e6:	460b      	mov	r3, r1
 80135e8:	813b      	strh	r3, [r7, #8]
 80135ea:	4613      	mov	r3, r2
 80135ec:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80135ee:	68fb      	ldr	r3, [r7, #12]
 80135f0:	681b      	ldr	r3, [r3, #0]
 80135f2:	681a      	ldr	r2, [r3, #0]
 80135f4:	68fb      	ldr	r3, [r7, #12]
 80135f6:	681b      	ldr	r3, [r3, #0]
 80135f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80135fc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80135fe:	68fb      	ldr	r3, [r7, #12]
 8013600:	681b      	ldr	r3, [r3, #0]
 8013602:	681a      	ldr	r2, [r3, #0]
 8013604:	68fb      	ldr	r3, [r7, #12]
 8013606:	681b      	ldr	r3, [r3, #0]
 8013608:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801360c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 801360e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013610:	9300      	str	r3, [sp, #0]
 8013612:	6a3b      	ldr	r3, [r7, #32]
 8013614:	2200      	movs	r2, #0
 8013616:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 801361a:	68f8      	ldr	r0, [r7, #12]
 801361c:	f000 f8c2 	bl	80137a4 <I2C_WaitOnFlagUntilTimeout>
 8013620:	4603      	mov	r3, r0
 8013622:	2b00      	cmp	r3, #0
 8013624:	d00d      	beq.n	8013642 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8013626:	68fb      	ldr	r3, [r7, #12]
 8013628:	681b      	ldr	r3, [r3, #0]
 801362a:	681b      	ldr	r3, [r3, #0]
 801362c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013630:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013634:	d103      	bne.n	801363e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8013636:	68fb      	ldr	r3, [r7, #12]
 8013638:	f44f 7200 	mov.w	r2, #512	; 0x200
 801363c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 801363e:	2303      	movs	r3, #3
 8013640:	e0aa      	b.n	8013798 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8013642:	897b      	ldrh	r3, [r7, #10]
 8013644:	b2db      	uxtb	r3, r3
 8013646:	461a      	mov	r2, r3
 8013648:	68fb      	ldr	r3, [r7, #12]
 801364a:	681b      	ldr	r3, [r3, #0]
 801364c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8013650:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8013652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013654:	6a3a      	ldr	r2, [r7, #32]
 8013656:	4952      	ldr	r1, [pc, #328]	; (80137a0 <I2C_RequestMemoryRead+0x1cc>)
 8013658:	68f8      	ldr	r0, [r7, #12]
 801365a:	f000 f91d 	bl	8013898 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 801365e:	4603      	mov	r3, r0
 8013660:	2b00      	cmp	r3, #0
 8013662:	d001      	beq.n	8013668 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8013664:	2301      	movs	r3, #1
 8013666:	e097      	b.n	8013798 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8013668:	2300      	movs	r3, #0
 801366a:	617b      	str	r3, [r7, #20]
 801366c:	68fb      	ldr	r3, [r7, #12]
 801366e:	681b      	ldr	r3, [r3, #0]
 8013670:	695b      	ldr	r3, [r3, #20]
 8013672:	617b      	str	r3, [r7, #20]
 8013674:	68fb      	ldr	r3, [r7, #12]
 8013676:	681b      	ldr	r3, [r3, #0]
 8013678:	699b      	ldr	r3, [r3, #24]
 801367a:	617b      	str	r3, [r7, #20]
 801367c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801367e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013680:	6a39      	ldr	r1, [r7, #32]
 8013682:	68f8      	ldr	r0, [r7, #12]
 8013684:	f000 f9a8 	bl	80139d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8013688:	4603      	mov	r3, r0
 801368a:	2b00      	cmp	r3, #0
 801368c:	d00d      	beq.n	80136aa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801368e:	68fb      	ldr	r3, [r7, #12]
 8013690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013692:	2b04      	cmp	r3, #4
 8013694:	d107      	bne.n	80136a6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8013696:	68fb      	ldr	r3, [r7, #12]
 8013698:	681b      	ldr	r3, [r3, #0]
 801369a:	681a      	ldr	r2, [r3, #0]
 801369c:	68fb      	ldr	r3, [r7, #12]
 801369e:	681b      	ldr	r3, [r3, #0]
 80136a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80136a4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80136a6:	2301      	movs	r3, #1
 80136a8:	e076      	b.n	8013798 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80136aa:	88fb      	ldrh	r3, [r7, #6]
 80136ac:	2b01      	cmp	r3, #1
 80136ae:	d105      	bne.n	80136bc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80136b0:	893b      	ldrh	r3, [r7, #8]
 80136b2:	b2da      	uxtb	r2, r3
 80136b4:	68fb      	ldr	r3, [r7, #12]
 80136b6:	681b      	ldr	r3, [r3, #0]
 80136b8:	611a      	str	r2, [r3, #16]
 80136ba:	e021      	b.n	8013700 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80136bc:	893b      	ldrh	r3, [r7, #8]
 80136be:	0a1b      	lsrs	r3, r3, #8
 80136c0:	b29b      	uxth	r3, r3
 80136c2:	b2da      	uxtb	r2, r3
 80136c4:	68fb      	ldr	r3, [r7, #12]
 80136c6:	681b      	ldr	r3, [r3, #0]
 80136c8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80136ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80136cc:	6a39      	ldr	r1, [r7, #32]
 80136ce:	68f8      	ldr	r0, [r7, #12]
 80136d0:	f000 f982 	bl	80139d8 <I2C_WaitOnTXEFlagUntilTimeout>
 80136d4:	4603      	mov	r3, r0
 80136d6:	2b00      	cmp	r3, #0
 80136d8:	d00d      	beq.n	80136f6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80136da:	68fb      	ldr	r3, [r7, #12]
 80136dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80136de:	2b04      	cmp	r3, #4
 80136e0:	d107      	bne.n	80136f2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80136e2:	68fb      	ldr	r3, [r7, #12]
 80136e4:	681b      	ldr	r3, [r3, #0]
 80136e6:	681a      	ldr	r2, [r3, #0]
 80136e8:	68fb      	ldr	r3, [r7, #12]
 80136ea:	681b      	ldr	r3, [r3, #0]
 80136ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80136f0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80136f2:	2301      	movs	r3, #1
 80136f4:	e050      	b.n	8013798 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80136f6:	893b      	ldrh	r3, [r7, #8]
 80136f8:	b2da      	uxtb	r2, r3
 80136fa:	68fb      	ldr	r3, [r7, #12]
 80136fc:	681b      	ldr	r3, [r3, #0]
 80136fe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8013700:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013702:	6a39      	ldr	r1, [r7, #32]
 8013704:	68f8      	ldr	r0, [r7, #12]
 8013706:	f000 f967 	bl	80139d8 <I2C_WaitOnTXEFlagUntilTimeout>
 801370a:	4603      	mov	r3, r0
 801370c:	2b00      	cmp	r3, #0
 801370e:	d00d      	beq.n	801372c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8013710:	68fb      	ldr	r3, [r7, #12]
 8013712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013714:	2b04      	cmp	r3, #4
 8013716:	d107      	bne.n	8013728 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8013718:	68fb      	ldr	r3, [r7, #12]
 801371a:	681b      	ldr	r3, [r3, #0]
 801371c:	681a      	ldr	r2, [r3, #0]
 801371e:	68fb      	ldr	r3, [r7, #12]
 8013720:	681b      	ldr	r3, [r3, #0]
 8013722:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013726:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8013728:	2301      	movs	r3, #1
 801372a:	e035      	b.n	8013798 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801372c:	68fb      	ldr	r3, [r7, #12]
 801372e:	681b      	ldr	r3, [r3, #0]
 8013730:	681a      	ldr	r2, [r3, #0]
 8013732:	68fb      	ldr	r3, [r7, #12]
 8013734:	681b      	ldr	r3, [r3, #0]
 8013736:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801373a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 801373c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801373e:	9300      	str	r3, [sp, #0]
 8013740:	6a3b      	ldr	r3, [r7, #32]
 8013742:	2200      	movs	r2, #0
 8013744:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8013748:	68f8      	ldr	r0, [r7, #12]
 801374a:	f000 f82b 	bl	80137a4 <I2C_WaitOnFlagUntilTimeout>
 801374e:	4603      	mov	r3, r0
 8013750:	2b00      	cmp	r3, #0
 8013752:	d00d      	beq.n	8013770 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8013754:	68fb      	ldr	r3, [r7, #12]
 8013756:	681b      	ldr	r3, [r3, #0]
 8013758:	681b      	ldr	r3, [r3, #0]
 801375a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801375e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013762:	d103      	bne.n	801376c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8013764:	68fb      	ldr	r3, [r7, #12]
 8013766:	f44f 7200 	mov.w	r2, #512	; 0x200
 801376a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 801376c:	2303      	movs	r3, #3
 801376e:	e013      	b.n	8013798 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8013770:	897b      	ldrh	r3, [r7, #10]
 8013772:	b2db      	uxtb	r3, r3
 8013774:	f043 0301 	orr.w	r3, r3, #1
 8013778:	b2da      	uxtb	r2, r3
 801377a:	68fb      	ldr	r3, [r7, #12]
 801377c:	681b      	ldr	r3, [r3, #0]
 801377e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8013780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013782:	6a3a      	ldr	r2, [r7, #32]
 8013784:	4906      	ldr	r1, [pc, #24]	; (80137a0 <I2C_RequestMemoryRead+0x1cc>)
 8013786:	68f8      	ldr	r0, [r7, #12]
 8013788:	f000 f886 	bl	8013898 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 801378c:	4603      	mov	r3, r0
 801378e:	2b00      	cmp	r3, #0
 8013790:	d001      	beq.n	8013796 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8013792:	2301      	movs	r3, #1
 8013794:	e000      	b.n	8013798 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8013796:	2300      	movs	r3, #0
}
 8013798:	4618      	mov	r0, r3
 801379a:	3718      	adds	r7, #24
 801379c:	46bd      	mov	sp, r7
 801379e:	bd80      	pop	{r7, pc}
 80137a0:	00010002 	.word	0x00010002

080137a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80137a4:	b580      	push	{r7, lr}
 80137a6:	b084      	sub	sp, #16
 80137a8:	af00      	add	r7, sp, #0
 80137aa:	60f8      	str	r0, [r7, #12]
 80137ac:	60b9      	str	r1, [r7, #8]
 80137ae:	603b      	str	r3, [r7, #0]
 80137b0:	4613      	mov	r3, r2
 80137b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80137b4:	e048      	b.n	8013848 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80137b6:	683b      	ldr	r3, [r7, #0]
 80137b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80137bc:	d044      	beq.n	8013848 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80137be:	f7fd ffd9 	bl	8011774 <HAL_GetTick>
 80137c2:	4602      	mov	r2, r0
 80137c4:	69bb      	ldr	r3, [r7, #24]
 80137c6:	1ad3      	subs	r3, r2, r3
 80137c8:	683a      	ldr	r2, [r7, #0]
 80137ca:	429a      	cmp	r2, r3
 80137cc:	d302      	bcc.n	80137d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80137ce:	683b      	ldr	r3, [r7, #0]
 80137d0:	2b00      	cmp	r3, #0
 80137d2:	d139      	bne.n	8013848 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80137d4:	68bb      	ldr	r3, [r7, #8]
 80137d6:	0c1b      	lsrs	r3, r3, #16
 80137d8:	b2db      	uxtb	r3, r3
 80137da:	2b01      	cmp	r3, #1
 80137dc:	d10d      	bne.n	80137fa <I2C_WaitOnFlagUntilTimeout+0x56>
 80137de:	68fb      	ldr	r3, [r7, #12]
 80137e0:	681b      	ldr	r3, [r3, #0]
 80137e2:	695b      	ldr	r3, [r3, #20]
 80137e4:	43da      	mvns	r2, r3
 80137e6:	68bb      	ldr	r3, [r7, #8]
 80137e8:	4013      	ands	r3, r2
 80137ea:	b29b      	uxth	r3, r3
 80137ec:	2b00      	cmp	r3, #0
 80137ee:	bf0c      	ite	eq
 80137f0:	2301      	moveq	r3, #1
 80137f2:	2300      	movne	r3, #0
 80137f4:	b2db      	uxtb	r3, r3
 80137f6:	461a      	mov	r2, r3
 80137f8:	e00c      	b.n	8013814 <I2C_WaitOnFlagUntilTimeout+0x70>
 80137fa:	68fb      	ldr	r3, [r7, #12]
 80137fc:	681b      	ldr	r3, [r3, #0]
 80137fe:	699b      	ldr	r3, [r3, #24]
 8013800:	43da      	mvns	r2, r3
 8013802:	68bb      	ldr	r3, [r7, #8]
 8013804:	4013      	ands	r3, r2
 8013806:	b29b      	uxth	r3, r3
 8013808:	2b00      	cmp	r3, #0
 801380a:	bf0c      	ite	eq
 801380c:	2301      	moveq	r3, #1
 801380e:	2300      	movne	r3, #0
 8013810:	b2db      	uxtb	r3, r3
 8013812:	461a      	mov	r2, r3
 8013814:	79fb      	ldrb	r3, [r7, #7]
 8013816:	429a      	cmp	r2, r3
 8013818:	d116      	bne.n	8013848 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 801381a:	68fb      	ldr	r3, [r7, #12]
 801381c:	2200      	movs	r2, #0
 801381e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8013820:	68fb      	ldr	r3, [r7, #12]
 8013822:	2220      	movs	r2, #32
 8013824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8013828:	68fb      	ldr	r3, [r7, #12]
 801382a:	2200      	movs	r2, #0
 801382c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8013830:	68fb      	ldr	r3, [r7, #12]
 8013832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013834:	f043 0220 	orr.w	r2, r3, #32
 8013838:	68fb      	ldr	r3, [r7, #12]
 801383a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 801383c:	68fb      	ldr	r3, [r7, #12]
 801383e:	2200      	movs	r2, #0
 8013840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8013844:	2301      	movs	r3, #1
 8013846:	e023      	b.n	8013890 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8013848:	68bb      	ldr	r3, [r7, #8]
 801384a:	0c1b      	lsrs	r3, r3, #16
 801384c:	b2db      	uxtb	r3, r3
 801384e:	2b01      	cmp	r3, #1
 8013850:	d10d      	bne.n	801386e <I2C_WaitOnFlagUntilTimeout+0xca>
 8013852:	68fb      	ldr	r3, [r7, #12]
 8013854:	681b      	ldr	r3, [r3, #0]
 8013856:	695b      	ldr	r3, [r3, #20]
 8013858:	43da      	mvns	r2, r3
 801385a:	68bb      	ldr	r3, [r7, #8]
 801385c:	4013      	ands	r3, r2
 801385e:	b29b      	uxth	r3, r3
 8013860:	2b00      	cmp	r3, #0
 8013862:	bf0c      	ite	eq
 8013864:	2301      	moveq	r3, #1
 8013866:	2300      	movne	r3, #0
 8013868:	b2db      	uxtb	r3, r3
 801386a:	461a      	mov	r2, r3
 801386c:	e00c      	b.n	8013888 <I2C_WaitOnFlagUntilTimeout+0xe4>
 801386e:	68fb      	ldr	r3, [r7, #12]
 8013870:	681b      	ldr	r3, [r3, #0]
 8013872:	699b      	ldr	r3, [r3, #24]
 8013874:	43da      	mvns	r2, r3
 8013876:	68bb      	ldr	r3, [r7, #8]
 8013878:	4013      	ands	r3, r2
 801387a:	b29b      	uxth	r3, r3
 801387c:	2b00      	cmp	r3, #0
 801387e:	bf0c      	ite	eq
 8013880:	2301      	moveq	r3, #1
 8013882:	2300      	movne	r3, #0
 8013884:	b2db      	uxtb	r3, r3
 8013886:	461a      	mov	r2, r3
 8013888:	79fb      	ldrb	r3, [r7, #7]
 801388a:	429a      	cmp	r2, r3
 801388c:	d093      	beq.n	80137b6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801388e:	2300      	movs	r3, #0
}
 8013890:	4618      	mov	r0, r3
 8013892:	3710      	adds	r7, #16
 8013894:	46bd      	mov	sp, r7
 8013896:	bd80      	pop	{r7, pc}

08013898 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8013898:	b580      	push	{r7, lr}
 801389a:	b084      	sub	sp, #16
 801389c:	af00      	add	r7, sp, #0
 801389e:	60f8      	str	r0, [r7, #12]
 80138a0:	60b9      	str	r1, [r7, #8]
 80138a2:	607a      	str	r2, [r7, #4]
 80138a4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80138a6:	e071      	b.n	801398c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80138a8:	68fb      	ldr	r3, [r7, #12]
 80138aa:	681b      	ldr	r3, [r3, #0]
 80138ac:	695b      	ldr	r3, [r3, #20]
 80138ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80138b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80138b6:	d123      	bne.n	8013900 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80138b8:	68fb      	ldr	r3, [r7, #12]
 80138ba:	681b      	ldr	r3, [r3, #0]
 80138bc:	681a      	ldr	r2, [r3, #0]
 80138be:	68fb      	ldr	r3, [r7, #12]
 80138c0:	681b      	ldr	r3, [r3, #0]
 80138c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80138c6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80138c8:	68fb      	ldr	r3, [r7, #12]
 80138ca:	681b      	ldr	r3, [r3, #0]
 80138cc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80138d0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80138d2:	68fb      	ldr	r3, [r7, #12]
 80138d4:	2200      	movs	r2, #0
 80138d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80138d8:	68fb      	ldr	r3, [r7, #12]
 80138da:	2220      	movs	r2, #32
 80138dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80138e0:	68fb      	ldr	r3, [r7, #12]
 80138e2:	2200      	movs	r2, #0
 80138e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80138e8:	68fb      	ldr	r3, [r7, #12]
 80138ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80138ec:	f043 0204 	orr.w	r2, r3, #4
 80138f0:	68fb      	ldr	r3, [r7, #12]
 80138f2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80138f4:	68fb      	ldr	r3, [r7, #12]
 80138f6:	2200      	movs	r2, #0
 80138f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80138fc:	2301      	movs	r3, #1
 80138fe:	e067      	b.n	80139d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8013900:	687b      	ldr	r3, [r7, #4]
 8013902:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013906:	d041      	beq.n	801398c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8013908:	f7fd ff34 	bl	8011774 <HAL_GetTick>
 801390c:	4602      	mov	r2, r0
 801390e:	683b      	ldr	r3, [r7, #0]
 8013910:	1ad3      	subs	r3, r2, r3
 8013912:	687a      	ldr	r2, [r7, #4]
 8013914:	429a      	cmp	r2, r3
 8013916:	d302      	bcc.n	801391e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8013918:	687b      	ldr	r3, [r7, #4]
 801391a:	2b00      	cmp	r3, #0
 801391c:	d136      	bne.n	801398c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 801391e:	68bb      	ldr	r3, [r7, #8]
 8013920:	0c1b      	lsrs	r3, r3, #16
 8013922:	b2db      	uxtb	r3, r3
 8013924:	2b01      	cmp	r3, #1
 8013926:	d10c      	bne.n	8013942 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8013928:	68fb      	ldr	r3, [r7, #12]
 801392a:	681b      	ldr	r3, [r3, #0]
 801392c:	695b      	ldr	r3, [r3, #20]
 801392e:	43da      	mvns	r2, r3
 8013930:	68bb      	ldr	r3, [r7, #8]
 8013932:	4013      	ands	r3, r2
 8013934:	b29b      	uxth	r3, r3
 8013936:	2b00      	cmp	r3, #0
 8013938:	bf14      	ite	ne
 801393a:	2301      	movne	r3, #1
 801393c:	2300      	moveq	r3, #0
 801393e:	b2db      	uxtb	r3, r3
 8013940:	e00b      	b.n	801395a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8013942:	68fb      	ldr	r3, [r7, #12]
 8013944:	681b      	ldr	r3, [r3, #0]
 8013946:	699b      	ldr	r3, [r3, #24]
 8013948:	43da      	mvns	r2, r3
 801394a:	68bb      	ldr	r3, [r7, #8]
 801394c:	4013      	ands	r3, r2
 801394e:	b29b      	uxth	r3, r3
 8013950:	2b00      	cmp	r3, #0
 8013952:	bf14      	ite	ne
 8013954:	2301      	movne	r3, #1
 8013956:	2300      	moveq	r3, #0
 8013958:	b2db      	uxtb	r3, r3
 801395a:	2b00      	cmp	r3, #0
 801395c:	d016      	beq.n	801398c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 801395e:	68fb      	ldr	r3, [r7, #12]
 8013960:	2200      	movs	r2, #0
 8013962:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8013964:	68fb      	ldr	r3, [r7, #12]
 8013966:	2220      	movs	r2, #32
 8013968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 801396c:	68fb      	ldr	r3, [r7, #12]
 801396e:	2200      	movs	r2, #0
 8013970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8013974:	68fb      	ldr	r3, [r7, #12]
 8013976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013978:	f043 0220 	orr.w	r2, r3, #32
 801397c:	68fb      	ldr	r3, [r7, #12]
 801397e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8013980:	68fb      	ldr	r3, [r7, #12]
 8013982:	2200      	movs	r2, #0
 8013984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8013988:	2301      	movs	r3, #1
 801398a:	e021      	b.n	80139d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 801398c:	68bb      	ldr	r3, [r7, #8]
 801398e:	0c1b      	lsrs	r3, r3, #16
 8013990:	b2db      	uxtb	r3, r3
 8013992:	2b01      	cmp	r3, #1
 8013994:	d10c      	bne.n	80139b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8013996:	68fb      	ldr	r3, [r7, #12]
 8013998:	681b      	ldr	r3, [r3, #0]
 801399a:	695b      	ldr	r3, [r3, #20]
 801399c:	43da      	mvns	r2, r3
 801399e:	68bb      	ldr	r3, [r7, #8]
 80139a0:	4013      	ands	r3, r2
 80139a2:	b29b      	uxth	r3, r3
 80139a4:	2b00      	cmp	r3, #0
 80139a6:	bf14      	ite	ne
 80139a8:	2301      	movne	r3, #1
 80139aa:	2300      	moveq	r3, #0
 80139ac:	b2db      	uxtb	r3, r3
 80139ae:	e00b      	b.n	80139c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80139b0:	68fb      	ldr	r3, [r7, #12]
 80139b2:	681b      	ldr	r3, [r3, #0]
 80139b4:	699b      	ldr	r3, [r3, #24]
 80139b6:	43da      	mvns	r2, r3
 80139b8:	68bb      	ldr	r3, [r7, #8]
 80139ba:	4013      	ands	r3, r2
 80139bc:	b29b      	uxth	r3, r3
 80139be:	2b00      	cmp	r3, #0
 80139c0:	bf14      	ite	ne
 80139c2:	2301      	movne	r3, #1
 80139c4:	2300      	moveq	r3, #0
 80139c6:	b2db      	uxtb	r3, r3
 80139c8:	2b00      	cmp	r3, #0
 80139ca:	f47f af6d 	bne.w	80138a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80139ce:	2300      	movs	r3, #0
}
 80139d0:	4618      	mov	r0, r3
 80139d2:	3710      	adds	r7, #16
 80139d4:	46bd      	mov	sp, r7
 80139d6:	bd80      	pop	{r7, pc}

080139d8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80139d8:	b580      	push	{r7, lr}
 80139da:	b084      	sub	sp, #16
 80139dc:	af00      	add	r7, sp, #0
 80139de:	60f8      	str	r0, [r7, #12]
 80139e0:	60b9      	str	r1, [r7, #8]
 80139e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80139e4:	e034      	b.n	8013a50 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80139e6:	68f8      	ldr	r0, [r7, #12]
 80139e8:	f000 f8e3 	bl	8013bb2 <I2C_IsAcknowledgeFailed>
 80139ec:	4603      	mov	r3, r0
 80139ee:	2b00      	cmp	r3, #0
 80139f0:	d001      	beq.n	80139f6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80139f2:	2301      	movs	r3, #1
 80139f4:	e034      	b.n	8013a60 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80139f6:	68bb      	ldr	r3, [r7, #8]
 80139f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80139fc:	d028      	beq.n	8013a50 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80139fe:	f7fd feb9 	bl	8011774 <HAL_GetTick>
 8013a02:	4602      	mov	r2, r0
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	1ad3      	subs	r3, r2, r3
 8013a08:	68ba      	ldr	r2, [r7, #8]
 8013a0a:	429a      	cmp	r2, r3
 8013a0c:	d302      	bcc.n	8013a14 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8013a0e:	68bb      	ldr	r3, [r7, #8]
 8013a10:	2b00      	cmp	r3, #0
 8013a12:	d11d      	bne.n	8013a50 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8013a14:	68fb      	ldr	r3, [r7, #12]
 8013a16:	681b      	ldr	r3, [r3, #0]
 8013a18:	695b      	ldr	r3, [r3, #20]
 8013a1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013a1e:	2b80      	cmp	r3, #128	; 0x80
 8013a20:	d016      	beq.n	8013a50 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8013a22:	68fb      	ldr	r3, [r7, #12]
 8013a24:	2200      	movs	r2, #0
 8013a26:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8013a28:	68fb      	ldr	r3, [r7, #12]
 8013a2a:	2220      	movs	r2, #32
 8013a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8013a30:	68fb      	ldr	r3, [r7, #12]
 8013a32:	2200      	movs	r2, #0
 8013a34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8013a38:	68fb      	ldr	r3, [r7, #12]
 8013a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013a3c:	f043 0220 	orr.w	r2, r3, #32
 8013a40:	68fb      	ldr	r3, [r7, #12]
 8013a42:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8013a44:	68fb      	ldr	r3, [r7, #12]
 8013a46:	2200      	movs	r2, #0
 8013a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8013a4c:	2301      	movs	r3, #1
 8013a4e:	e007      	b.n	8013a60 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8013a50:	68fb      	ldr	r3, [r7, #12]
 8013a52:	681b      	ldr	r3, [r3, #0]
 8013a54:	695b      	ldr	r3, [r3, #20]
 8013a56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013a5a:	2b80      	cmp	r3, #128	; 0x80
 8013a5c:	d1c3      	bne.n	80139e6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8013a5e:	2300      	movs	r3, #0
}
 8013a60:	4618      	mov	r0, r3
 8013a62:	3710      	adds	r7, #16
 8013a64:	46bd      	mov	sp, r7
 8013a66:	bd80      	pop	{r7, pc}

08013a68 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8013a68:	b580      	push	{r7, lr}
 8013a6a:	b084      	sub	sp, #16
 8013a6c:	af00      	add	r7, sp, #0
 8013a6e:	60f8      	str	r0, [r7, #12]
 8013a70:	60b9      	str	r1, [r7, #8]
 8013a72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8013a74:	e034      	b.n	8013ae0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8013a76:	68f8      	ldr	r0, [r7, #12]
 8013a78:	f000 f89b 	bl	8013bb2 <I2C_IsAcknowledgeFailed>
 8013a7c:	4603      	mov	r3, r0
 8013a7e:	2b00      	cmp	r3, #0
 8013a80:	d001      	beq.n	8013a86 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8013a82:	2301      	movs	r3, #1
 8013a84:	e034      	b.n	8013af0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8013a86:	68bb      	ldr	r3, [r7, #8]
 8013a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013a8c:	d028      	beq.n	8013ae0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8013a8e:	f7fd fe71 	bl	8011774 <HAL_GetTick>
 8013a92:	4602      	mov	r2, r0
 8013a94:	687b      	ldr	r3, [r7, #4]
 8013a96:	1ad3      	subs	r3, r2, r3
 8013a98:	68ba      	ldr	r2, [r7, #8]
 8013a9a:	429a      	cmp	r2, r3
 8013a9c:	d302      	bcc.n	8013aa4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8013a9e:	68bb      	ldr	r3, [r7, #8]
 8013aa0:	2b00      	cmp	r3, #0
 8013aa2:	d11d      	bne.n	8013ae0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8013aa4:	68fb      	ldr	r3, [r7, #12]
 8013aa6:	681b      	ldr	r3, [r3, #0]
 8013aa8:	695b      	ldr	r3, [r3, #20]
 8013aaa:	f003 0304 	and.w	r3, r3, #4
 8013aae:	2b04      	cmp	r3, #4
 8013ab0:	d016      	beq.n	8013ae0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8013ab2:	68fb      	ldr	r3, [r7, #12]
 8013ab4:	2200      	movs	r2, #0
 8013ab6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8013ab8:	68fb      	ldr	r3, [r7, #12]
 8013aba:	2220      	movs	r2, #32
 8013abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8013ac0:	68fb      	ldr	r3, [r7, #12]
 8013ac2:	2200      	movs	r2, #0
 8013ac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8013ac8:	68fb      	ldr	r3, [r7, #12]
 8013aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013acc:	f043 0220 	orr.w	r2, r3, #32
 8013ad0:	68fb      	ldr	r3, [r7, #12]
 8013ad2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8013ad4:	68fb      	ldr	r3, [r7, #12]
 8013ad6:	2200      	movs	r2, #0
 8013ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8013adc:	2301      	movs	r3, #1
 8013ade:	e007      	b.n	8013af0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8013ae0:	68fb      	ldr	r3, [r7, #12]
 8013ae2:	681b      	ldr	r3, [r3, #0]
 8013ae4:	695b      	ldr	r3, [r3, #20]
 8013ae6:	f003 0304 	and.w	r3, r3, #4
 8013aea:	2b04      	cmp	r3, #4
 8013aec:	d1c3      	bne.n	8013a76 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8013aee:	2300      	movs	r3, #0
}
 8013af0:	4618      	mov	r0, r3
 8013af2:	3710      	adds	r7, #16
 8013af4:	46bd      	mov	sp, r7
 8013af6:	bd80      	pop	{r7, pc}

08013af8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8013af8:	b580      	push	{r7, lr}
 8013afa:	b084      	sub	sp, #16
 8013afc:	af00      	add	r7, sp, #0
 8013afe:	60f8      	str	r0, [r7, #12]
 8013b00:	60b9      	str	r1, [r7, #8]
 8013b02:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8013b04:	e049      	b.n	8013b9a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8013b06:	68fb      	ldr	r3, [r7, #12]
 8013b08:	681b      	ldr	r3, [r3, #0]
 8013b0a:	695b      	ldr	r3, [r3, #20]
 8013b0c:	f003 0310 	and.w	r3, r3, #16
 8013b10:	2b10      	cmp	r3, #16
 8013b12:	d119      	bne.n	8013b48 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8013b14:	68fb      	ldr	r3, [r7, #12]
 8013b16:	681b      	ldr	r3, [r3, #0]
 8013b18:	f06f 0210 	mvn.w	r2, #16
 8013b1c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8013b1e:	68fb      	ldr	r3, [r7, #12]
 8013b20:	2200      	movs	r2, #0
 8013b22:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8013b24:	68fb      	ldr	r3, [r7, #12]
 8013b26:	2220      	movs	r2, #32
 8013b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8013b2c:	68fb      	ldr	r3, [r7, #12]
 8013b2e:	2200      	movs	r2, #0
 8013b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8013b34:	68fb      	ldr	r3, [r7, #12]
 8013b36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8013b38:	68fb      	ldr	r3, [r7, #12]
 8013b3a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8013b3c:	68fb      	ldr	r3, [r7, #12]
 8013b3e:	2200      	movs	r2, #0
 8013b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8013b44:	2301      	movs	r3, #1
 8013b46:	e030      	b.n	8013baa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8013b48:	f7fd fe14 	bl	8011774 <HAL_GetTick>
 8013b4c:	4602      	mov	r2, r0
 8013b4e:	687b      	ldr	r3, [r7, #4]
 8013b50:	1ad3      	subs	r3, r2, r3
 8013b52:	68ba      	ldr	r2, [r7, #8]
 8013b54:	429a      	cmp	r2, r3
 8013b56:	d302      	bcc.n	8013b5e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8013b58:	68bb      	ldr	r3, [r7, #8]
 8013b5a:	2b00      	cmp	r3, #0
 8013b5c:	d11d      	bne.n	8013b9a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8013b5e:	68fb      	ldr	r3, [r7, #12]
 8013b60:	681b      	ldr	r3, [r3, #0]
 8013b62:	695b      	ldr	r3, [r3, #20]
 8013b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013b68:	2b40      	cmp	r3, #64	; 0x40
 8013b6a:	d016      	beq.n	8013b9a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8013b6c:	68fb      	ldr	r3, [r7, #12]
 8013b6e:	2200      	movs	r2, #0
 8013b70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8013b72:	68fb      	ldr	r3, [r7, #12]
 8013b74:	2220      	movs	r2, #32
 8013b76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8013b7a:	68fb      	ldr	r3, [r7, #12]
 8013b7c:	2200      	movs	r2, #0
 8013b7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8013b82:	68fb      	ldr	r3, [r7, #12]
 8013b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013b86:	f043 0220 	orr.w	r2, r3, #32
 8013b8a:	68fb      	ldr	r3, [r7, #12]
 8013b8c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8013b8e:	68fb      	ldr	r3, [r7, #12]
 8013b90:	2200      	movs	r2, #0
 8013b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8013b96:	2301      	movs	r3, #1
 8013b98:	e007      	b.n	8013baa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8013b9a:	68fb      	ldr	r3, [r7, #12]
 8013b9c:	681b      	ldr	r3, [r3, #0]
 8013b9e:	695b      	ldr	r3, [r3, #20]
 8013ba0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013ba4:	2b40      	cmp	r3, #64	; 0x40
 8013ba6:	d1ae      	bne.n	8013b06 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8013ba8:	2300      	movs	r3, #0
}
 8013baa:	4618      	mov	r0, r3
 8013bac:	3710      	adds	r7, #16
 8013bae:	46bd      	mov	sp, r7
 8013bb0:	bd80      	pop	{r7, pc}

08013bb2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8013bb2:	b480      	push	{r7}
 8013bb4:	b083      	sub	sp, #12
 8013bb6:	af00      	add	r7, sp, #0
 8013bb8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8013bba:	687b      	ldr	r3, [r7, #4]
 8013bbc:	681b      	ldr	r3, [r3, #0]
 8013bbe:	695b      	ldr	r3, [r3, #20]
 8013bc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8013bc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013bc8:	d11b      	bne.n	8013c02 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8013bca:	687b      	ldr	r3, [r7, #4]
 8013bcc:	681b      	ldr	r3, [r3, #0]
 8013bce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8013bd2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8013bd4:	687b      	ldr	r3, [r7, #4]
 8013bd6:	2200      	movs	r2, #0
 8013bd8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8013bda:	687b      	ldr	r3, [r7, #4]
 8013bdc:	2220      	movs	r2, #32
 8013bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8013be2:	687b      	ldr	r3, [r7, #4]
 8013be4:	2200      	movs	r2, #0
 8013be6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013bee:	f043 0204 	orr.w	r2, r3, #4
 8013bf2:	687b      	ldr	r3, [r7, #4]
 8013bf4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	2200      	movs	r2, #0
 8013bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8013bfe:	2301      	movs	r3, #1
 8013c00:	e000      	b.n	8013c04 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8013c02:	2300      	movs	r3, #0
}
 8013c04:	4618      	mov	r0, r3
 8013c06:	370c      	adds	r7, #12
 8013c08:	46bd      	mov	sp, r7
 8013c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c0e:	4770      	bx	lr

08013c10 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8013c10:	b580      	push	{r7, lr}
 8013c12:	b084      	sub	sp, #16
 8013c14:	af00      	add	r7, sp, #0
 8013c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8013c18:	687b      	ldr	r3, [r7, #4]
 8013c1a:	2b00      	cmp	r3, #0
 8013c1c:	d101      	bne.n	8013c22 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8013c1e:	2301      	movs	r3, #1
 8013c20:	e034      	b.n	8013c8c <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8013c22:	687b      	ldr	r3, [r7, #4]
 8013c24:	681b      	ldr	r3, [r3, #0]
 8013c26:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8013c2a:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	681b      	ldr	r3, [r3, #0]
 8013c30:	f245 5255 	movw	r2, #21845	; 0x5555
 8013c34:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8013c36:	687b      	ldr	r3, [r7, #4]
 8013c38:	681b      	ldr	r3, [r3, #0]
 8013c3a:	687a      	ldr	r2, [r7, #4]
 8013c3c:	6852      	ldr	r2, [r2, #4]
 8013c3e:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8013c40:	687b      	ldr	r3, [r7, #4]
 8013c42:	681b      	ldr	r3, [r3, #0]
 8013c44:	687a      	ldr	r2, [r7, #4]
 8013c46:	6892      	ldr	r2, [r2, #8]
 8013c48:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8013c4a:	f7fd fd93 	bl	8011774 <HAL_GetTick>
 8013c4e:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8013c50:	e00f      	b.n	8013c72 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8013c52:	f7fd fd8f 	bl	8011774 <HAL_GetTick>
 8013c56:	4602      	mov	r2, r0
 8013c58:	68fb      	ldr	r3, [r7, #12]
 8013c5a:	1ad3      	subs	r3, r2, r3
 8013c5c:	2b31      	cmp	r3, #49	; 0x31
 8013c5e:	d908      	bls.n	8013c72 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	681b      	ldr	r3, [r3, #0]
 8013c64:	68db      	ldr	r3, [r3, #12]
 8013c66:	f003 0303 	and.w	r3, r3, #3
 8013c6a:	2b00      	cmp	r3, #0
 8013c6c:	d001      	beq.n	8013c72 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8013c6e:	2303      	movs	r3, #3
 8013c70:	e00c      	b.n	8013c8c <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8013c72:	687b      	ldr	r3, [r7, #4]
 8013c74:	681b      	ldr	r3, [r3, #0]
 8013c76:	68db      	ldr	r3, [r3, #12]
 8013c78:	f003 0303 	and.w	r3, r3, #3
 8013c7c:	2b00      	cmp	r3, #0
 8013c7e:	d1e8      	bne.n	8013c52 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8013c80:	687b      	ldr	r3, [r7, #4]
 8013c82:	681b      	ldr	r3, [r3, #0]
 8013c84:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8013c88:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8013c8a:	2300      	movs	r3, #0
}
 8013c8c:	4618      	mov	r0, r3
 8013c8e:	3710      	adds	r7, #16
 8013c90:	46bd      	mov	sp, r7
 8013c92:	bd80      	pop	{r7, pc}

08013c94 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8013c94:	b480      	push	{r7}
 8013c96:	b083      	sub	sp, #12
 8013c98:	af00      	add	r7, sp, #0
 8013c9a:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8013c9c:	687b      	ldr	r3, [r7, #4]
 8013c9e:	681b      	ldr	r3, [r3, #0]
 8013ca0:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8013ca4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8013ca6:	2300      	movs	r3, #0
}
 8013ca8:	4618      	mov	r0, r3
 8013caa:	370c      	adds	r7, #12
 8013cac:	46bd      	mov	sp, r7
 8013cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cb2:	4770      	bx	lr

08013cb4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8013cb4:	b580      	push	{r7, lr}
 8013cb6:	b086      	sub	sp, #24
 8013cb8:	af00      	add	r7, sp, #0
 8013cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	2b00      	cmp	r3, #0
 8013cc0:	d101      	bne.n	8013cc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8013cc2:	2301      	movs	r3, #1
 8013cc4:	e267      	b.n	8014196 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8013cc6:	687b      	ldr	r3, [r7, #4]
 8013cc8:	681b      	ldr	r3, [r3, #0]
 8013cca:	f003 0301 	and.w	r3, r3, #1
 8013cce:	2b00      	cmp	r3, #0
 8013cd0:	d075      	beq.n	8013dbe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8013cd2:	4b88      	ldr	r3, [pc, #544]	; (8013ef4 <HAL_RCC_OscConfig+0x240>)
 8013cd4:	689b      	ldr	r3, [r3, #8]
 8013cd6:	f003 030c 	and.w	r3, r3, #12
 8013cda:	2b04      	cmp	r3, #4
 8013cdc:	d00c      	beq.n	8013cf8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8013cde:	4b85      	ldr	r3, [pc, #532]	; (8013ef4 <HAL_RCC_OscConfig+0x240>)
 8013ce0:	689b      	ldr	r3, [r3, #8]
 8013ce2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8013ce6:	2b08      	cmp	r3, #8
 8013ce8:	d112      	bne.n	8013d10 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8013cea:	4b82      	ldr	r3, [pc, #520]	; (8013ef4 <HAL_RCC_OscConfig+0x240>)
 8013cec:	685b      	ldr	r3, [r3, #4]
 8013cee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8013cf2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8013cf6:	d10b      	bne.n	8013d10 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8013cf8:	4b7e      	ldr	r3, [pc, #504]	; (8013ef4 <HAL_RCC_OscConfig+0x240>)
 8013cfa:	681b      	ldr	r3, [r3, #0]
 8013cfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013d00:	2b00      	cmp	r3, #0
 8013d02:	d05b      	beq.n	8013dbc <HAL_RCC_OscConfig+0x108>
 8013d04:	687b      	ldr	r3, [r7, #4]
 8013d06:	685b      	ldr	r3, [r3, #4]
 8013d08:	2b00      	cmp	r3, #0
 8013d0a:	d157      	bne.n	8013dbc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8013d0c:	2301      	movs	r3, #1
 8013d0e:	e242      	b.n	8014196 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8013d10:	687b      	ldr	r3, [r7, #4]
 8013d12:	685b      	ldr	r3, [r3, #4]
 8013d14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013d18:	d106      	bne.n	8013d28 <HAL_RCC_OscConfig+0x74>
 8013d1a:	4b76      	ldr	r3, [pc, #472]	; (8013ef4 <HAL_RCC_OscConfig+0x240>)
 8013d1c:	681b      	ldr	r3, [r3, #0]
 8013d1e:	4a75      	ldr	r2, [pc, #468]	; (8013ef4 <HAL_RCC_OscConfig+0x240>)
 8013d20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8013d24:	6013      	str	r3, [r2, #0]
 8013d26:	e01d      	b.n	8013d64 <HAL_RCC_OscConfig+0xb0>
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	685b      	ldr	r3, [r3, #4]
 8013d2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8013d30:	d10c      	bne.n	8013d4c <HAL_RCC_OscConfig+0x98>
 8013d32:	4b70      	ldr	r3, [pc, #448]	; (8013ef4 <HAL_RCC_OscConfig+0x240>)
 8013d34:	681b      	ldr	r3, [r3, #0]
 8013d36:	4a6f      	ldr	r2, [pc, #444]	; (8013ef4 <HAL_RCC_OscConfig+0x240>)
 8013d38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8013d3c:	6013      	str	r3, [r2, #0]
 8013d3e:	4b6d      	ldr	r3, [pc, #436]	; (8013ef4 <HAL_RCC_OscConfig+0x240>)
 8013d40:	681b      	ldr	r3, [r3, #0]
 8013d42:	4a6c      	ldr	r2, [pc, #432]	; (8013ef4 <HAL_RCC_OscConfig+0x240>)
 8013d44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8013d48:	6013      	str	r3, [r2, #0]
 8013d4a:	e00b      	b.n	8013d64 <HAL_RCC_OscConfig+0xb0>
 8013d4c:	4b69      	ldr	r3, [pc, #420]	; (8013ef4 <HAL_RCC_OscConfig+0x240>)
 8013d4e:	681b      	ldr	r3, [r3, #0]
 8013d50:	4a68      	ldr	r2, [pc, #416]	; (8013ef4 <HAL_RCC_OscConfig+0x240>)
 8013d52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8013d56:	6013      	str	r3, [r2, #0]
 8013d58:	4b66      	ldr	r3, [pc, #408]	; (8013ef4 <HAL_RCC_OscConfig+0x240>)
 8013d5a:	681b      	ldr	r3, [r3, #0]
 8013d5c:	4a65      	ldr	r2, [pc, #404]	; (8013ef4 <HAL_RCC_OscConfig+0x240>)
 8013d5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8013d62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8013d64:	687b      	ldr	r3, [r7, #4]
 8013d66:	685b      	ldr	r3, [r3, #4]
 8013d68:	2b00      	cmp	r3, #0
 8013d6a:	d013      	beq.n	8013d94 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013d6c:	f7fd fd02 	bl	8011774 <HAL_GetTick>
 8013d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8013d72:	e008      	b.n	8013d86 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8013d74:	f7fd fcfe 	bl	8011774 <HAL_GetTick>
 8013d78:	4602      	mov	r2, r0
 8013d7a:	693b      	ldr	r3, [r7, #16]
 8013d7c:	1ad3      	subs	r3, r2, r3
 8013d7e:	2b64      	cmp	r3, #100	; 0x64
 8013d80:	d901      	bls.n	8013d86 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8013d82:	2303      	movs	r3, #3
 8013d84:	e207      	b.n	8014196 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8013d86:	4b5b      	ldr	r3, [pc, #364]	; (8013ef4 <HAL_RCC_OscConfig+0x240>)
 8013d88:	681b      	ldr	r3, [r3, #0]
 8013d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013d8e:	2b00      	cmp	r3, #0
 8013d90:	d0f0      	beq.n	8013d74 <HAL_RCC_OscConfig+0xc0>
 8013d92:	e014      	b.n	8013dbe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013d94:	f7fd fcee 	bl	8011774 <HAL_GetTick>
 8013d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8013d9a:	e008      	b.n	8013dae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8013d9c:	f7fd fcea 	bl	8011774 <HAL_GetTick>
 8013da0:	4602      	mov	r2, r0
 8013da2:	693b      	ldr	r3, [r7, #16]
 8013da4:	1ad3      	subs	r3, r2, r3
 8013da6:	2b64      	cmp	r3, #100	; 0x64
 8013da8:	d901      	bls.n	8013dae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8013daa:	2303      	movs	r3, #3
 8013dac:	e1f3      	b.n	8014196 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8013dae:	4b51      	ldr	r3, [pc, #324]	; (8013ef4 <HAL_RCC_OscConfig+0x240>)
 8013db0:	681b      	ldr	r3, [r3, #0]
 8013db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013db6:	2b00      	cmp	r3, #0
 8013db8:	d1f0      	bne.n	8013d9c <HAL_RCC_OscConfig+0xe8>
 8013dba:	e000      	b.n	8013dbe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8013dbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8013dbe:	687b      	ldr	r3, [r7, #4]
 8013dc0:	681b      	ldr	r3, [r3, #0]
 8013dc2:	f003 0302 	and.w	r3, r3, #2
 8013dc6:	2b00      	cmp	r3, #0
 8013dc8:	d063      	beq.n	8013e92 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8013dca:	4b4a      	ldr	r3, [pc, #296]	; (8013ef4 <HAL_RCC_OscConfig+0x240>)
 8013dcc:	689b      	ldr	r3, [r3, #8]
 8013dce:	f003 030c 	and.w	r3, r3, #12
 8013dd2:	2b00      	cmp	r3, #0
 8013dd4:	d00b      	beq.n	8013dee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8013dd6:	4b47      	ldr	r3, [pc, #284]	; (8013ef4 <HAL_RCC_OscConfig+0x240>)
 8013dd8:	689b      	ldr	r3, [r3, #8]
 8013dda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8013dde:	2b08      	cmp	r3, #8
 8013de0:	d11c      	bne.n	8013e1c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8013de2:	4b44      	ldr	r3, [pc, #272]	; (8013ef4 <HAL_RCC_OscConfig+0x240>)
 8013de4:	685b      	ldr	r3, [r3, #4]
 8013de6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8013dea:	2b00      	cmp	r3, #0
 8013dec:	d116      	bne.n	8013e1c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8013dee:	4b41      	ldr	r3, [pc, #260]	; (8013ef4 <HAL_RCC_OscConfig+0x240>)
 8013df0:	681b      	ldr	r3, [r3, #0]
 8013df2:	f003 0302 	and.w	r3, r3, #2
 8013df6:	2b00      	cmp	r3, #0
 8013df8:	d005      	beq.n	8013e06 <HAL_RCC_OscConfig+0x152>
 8013dfa:	687b      	ldr	r3, [r7, #4]
 8013dfc:	68db      	ldr	r3, [r3, #12]
 8013dfe:	2b01      	cmp	r3, #1
 8013e00:	d001      	beq.n	8013e06 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8013e02:	2301      	movs	r3, #1
 8013e04:	e1c7      	b.n	8014196 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8013e06:	4b3b      	ldr	r3, [pc, #236]	; (8013ef4 <HAL_RCC_OscConfig+0x240>)
 8013e08:	681b      	ldr	r3, [r3, #0]
 8013e0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8013e0e:	687b      	ldr	r3, [r7, #4]
 8013e10:	691b      	ldr	r3, [r3, #16]
 8013e12:	00db      	lsls	r3, r3, #3
 8013e14:	4937      	ldr	r1, [pc, #220]	; (8013ef4 <HAL_RCC_OscConfig+0x240>)
 8013e16:	4313      	orrs	r3, r2
 8013e18:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8013e1a:	e03a      	b.n	8013e92 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8013e1c:	687b      	ldr	r3, [r7, #4]
 8013e1e:	68db      	ldr	r3, [r3, #12]
 8013e20:	2b00      	cmp	r3, #0
 8013e22:	d020      	beq.n	8013e66 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8013e24:	4b34      	ldr	r3, [pc, #208]	; (8013ef8 <HAL_RCC_OscConfig+0x244>)
 8013e26:	2201      	movs	r2, #1
 8013e28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013e2a:	f7fd fca3 	bl	8011774 <HAL_GetTick>
 8013e2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8013e30:	e008      	b.n	8013e44 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8013e32:	f7fd fc9f 	bl	8011774 <HAL_GetTick>
 8013e36:	4602      	mov	r2, r0
 8013e38:	693b      	ldr	r3, [r7, #16]
 8013e3a:	1ad3      	subs	r3, r2, r3
 8013e3c:	2b02      	cmp	r3, #2
 8013e3e:	d901      	bls.n	8013e44 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8013e40:	2303      	movs	r3, #3
 8013e42:	e1a8      	b.n	8014196 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8013e44:	4b2b      	ldr	r3, [pc, #172]	; (8013ef4 <HAL_RCC_OscConfig+0x240>)
 8013e46:	681b      	ldr	r3, [r3, #0]
 8013e48:	f003 0302 	and.w	r3, r3, #2
 8013e4c:	2b00      	cmp	r3, #0
 8013e4e:	d0f0      	beq.n	8013e32 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8013e50:	4b28      	ldr	r3, [pc, #160]	; (8013ef4 <HAL_RCC_OscConfig+0x240>)
 8013e52:	681b      	ldr	r3, [r3, #0]
 8013e54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8013e58:	687b      	ldr	r3, [r7, #4]
 8013e5a:	691b      	ldr	r3, [r3, #16]
 8013e5c:	00db      	lsls	r3, r3, #3
 8013e5e:	4925      	ldr	r1, [pc, #148]	; (8013ef4 <HAL_RCC_OscConfig+0x240>)
 8013e60:	4313      	orrs	r3, r2
 8013e62:	600b      	str	r3, [r1, #0]
 8013e64:	e015      	b.n	8013e92 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8013e66:	4b24      	ldr	r3, [pc, #144]	; (8013ef8 <HAL_RCC_OscConfig+0x244>)
 8013e68:	2200      	movs	r2, #0
 8013e6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013e6c:	f7fd fc82 	bl	8011774 <HAL_GetTick>
 8013e70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8013e72:	e008      	b.n	8013e86 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8013e74:	f7fd fc7e 	bl	8011774 <HAL_GetTick>
 8013e78:	4602      	mov	r2, r0
 8013e7a:	693b      	ldr	r3, [r7, #16]
 8013e7c:	1ad3      	subs	r3, r2, r3
 8013e7e:	2b02      	cmp	r3, #2
 8013e80:	d901      	bls.n	8013e86 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8013e82:	2303      	movs	r3, #3
 8013e84:	e187      	b.n	8014196 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8013e86:	4b1b      	ldr	r3, [pc, #108]	; (8013ef4 <HAL_RCC_OscConfig+0x240>)
 8013e88:	681b      	ldr	r3, [r3, #0]
 8013e8a:	f003 0302 	and.w	r3, r3, #2
 8013e8e:	2b00      	cmp	r3, #0
 8013e90:	d1f0      	bne.n	8013e74 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8013e92:	687b      	ldr	r3, [r7, #4]
 8013e94:	681b      	ldr	r3, [r3, #0]
 8013e96:	f003 0308 	and.w	r3, r3, #8
 8013e9a:	2b00      	cmp	r3, #0
 8013e9c:	d036      	beq.n	8013f0c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8013e9e:	687b      	ldr	r3, [r7, #4]
 8013ea0:	695b      	ldr	r3, [r3, #20]
 8013ea2:	2b00      	cmp	r3, #0
 8013ea4:	d016      	beq.n	8013ed4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8013ea6:	4b15      	ldr	r3, [pc, #84]	; (8013efc <HAL_RCC_OscConfig+0x248>)
 8013ea8:	2201      	movs	r2, #1
 8013eaa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8013eac:	f7fd fc62 	bl	8011774 <HAL_GetTick>
 8013eb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8013eb2:	e008      	b.n	8013ec6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8013eb4:	f7fd fc5e 	bl	8011774 <HAL_GetTick>
 8013eb8:	4602      	mov	r2, r0
 8013eba:	693b      	ldr	r3, [r7, #16]
 8013ebc:	1ad3      	subs	r3, r2, r3
 8013ebe:	2b02      	cmp	r3, #2
 8013ec0:	d901      	bls.n	8013ec6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8013ec2:	2303      	movs	r3, #3
 8013ec4:	e167      	b.n	8014196 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8013ec6:	4b0b      	ldr	r3, [pc, #44]	; (8013ef4 <HAL_RCC_OscConfig+0x240>)
 8013ec8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013eca:	f003 0302 	and.w	r3, r3, #2
 8013ece:	2b00      	cmp	r3, #0
 8013ed0:	d0f0      	beq.n	8013eb4 <HAL_RCC_OscConfig+0x200>
 8013ed2:	e01b      	b.n	8013f0c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8013ed4:	4b09      	ldr	r3, [pc, #36]	; (8013efc <HAL_RCC_OscConfig+0x248>)
 8013ed6:	2200      	movs	r2, #0
 8013ed8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8013eda:	f7fd fc4b 	bl	8011774 <HAL_GetTick>
 8013ede:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8013ee0:	e00e      	b.n	8013f00 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8013ee2:	f7fd fc47 	bl	8011774 <HAL_GetTick>
 8013ee6:	4602      	mov	r2, r0
 8013ee8:	693b      	ldr	r3, [r7, #16]
 8013eea:	1ad3      	subs	r3, r2, r3
 8013eec:	2b02      	cmp	r3, #2
 8013eee:	d907      	bls.n	8013f00 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8013ef0:	2303      	movs	r3, #3
 8013ef2:	e150      	b.n	8014196 <HAL_RCC_OscConfig+0x4e2>
 8013ef4:	40023800 	.word	0x40023800
 8013ef8:	42470000 	.word	0x42470000
 8013efc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8013f00:	4b88      	ldr	r3, [pc, #544]	; (8014124 <HAL_RCC_OscConfig+0x470>)
 8013f02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013f04:	f003 0302 	and.w	r3, r3, #2
 8013f08:	2b00      	cmp	r3, #0
 8013f0a:	d1ea      	bne.n	8013ee2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8013f0c:	687b      	ldr	r3, [r7, #4]
 8013f0e:	681b      	ldr	r3, [r3, #0]
 8013f10:	f003 0304 	and.w	r3, r3, #4
 8013f14:	2b00      	cmp	r3, #0
 8013f16:	f000 8097 	beq.w	8014048 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8013f1a:	2300      	movs	r3, #0
 8013f1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8013f1e:	4b81      	ldr	r3, [pc, #516]	; (8014124 <HAL_RCC_OscConfig+0x470>)
 8013f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013f22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013f26:	2b00      	cmp	r3, #0
 8013f28:	d10f      	bne.n	8013f4a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8013f2a:	2300      	movs	r3, #0
 8013f2c:	60bb      	str	r3, [r7, #8]
 8013f2e:	4b7d      	ldr	r3, [pc, #500]	; (8014124 <HAL_RCC_OscConfig+0x470>)
 8013f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013f32:	4a7c      	ldr	r2, [pc, #496]	; (8014124 <HAL_RCC_OscConfig+0x470>)
 8013f34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013f38:	6413      	str	r3, [r2, #64]	; 0x40
 8013f3a:	4b7a      	ldr	r3, [pc, #488]	; (8014124 <HAL_RCC_OscConfig+0x470>)
 8013f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013f3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013f42:	60bb      	str	r3, [r7, #8]
 8013f44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8013f46:	2301      	movs	r3, #1
 8013f48:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8013f4a:	4b77      	ldr	r3, [pc, #476]	; (8014128 <HAL_RCC_OscConfig+0x474>)
 8013f4c:	681b      	ldr	r3, [r3, #0]
 8013f4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013f52:	2b00      	cmp	r3, #0
 8013f54:	d118      	bne.n	8013f88 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8013f56:	4b74      	ldr	r3, [pc, #464]	; (8014128 <HAL_RCC_OscConfig+0x474>)
 8013f58:	681b      	ldr	r3, [r3, #0]
 8013f5a:	4a73      	ldr	r2, [pc, #460]	; (8014128 <HAL_RCC_OscConfig+0x474>)
 8013f5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013f60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8013f62:	f7fd fc07 	bl	8011774 <HAL_GetTick>
 8013f66:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8013f68:	e008      	b.n	8013f7c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8013f6a:	f7fd fc03 	bl	8011774 <HAL_GetTick>
 8013f6e:	4602      	mov	r2, r0
 8013f70:	693b      	ldr	r3, [r7, #16]
 8013f72:	1ad3      	subs	r3, r2, r3
 8013f74:	2b02      	cmp	r3, #2
 8013f76:	d901      	bls.n	8013f7c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8013f78:	2303      	movs	r3, #3
 8013f7a:	e10c      	b.n	8014196 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8013f7c:	4b6a      	ldr	r3, [pc, #424]	; (8014128 <HAL_RCC_OscConfig+0x474>)
 8013f7e:	681b      	ldr	r3, [r3, #0]
 8013f80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013f84:	2b00      	cmp	r3, #0
 8013f86:	d0f0      	beq.n	8013f6a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8013f88:	687b      	ldr	r3, [r7, #4]
 8013f8a:	689b      	ldr	r3, [r3, #8]
 8013f8c:	2b01      	cmp	r3, #1
 8013f8e:	d106      	bne.n	8013f9e <HAL_RCC_OscConfig+0x2ea>
 8013f90:	4b64      	ldr	r3, [pc, #400]	; (8014124 <HAL_RCC_OscConfig+0x470>)
 8013f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013f94:	4a63      	ldr	r2, [pc, #396]	; (8014124 <HAL_RCC_OscConfig+0x470>)
 8013f96:	f043 0301 	orr.w	r3, r3, #1
 8013f9a:	6713      	str	r3, [r2, #112]	; 0x70
 8013f9c:	e01c      	b.n	8013fd8 <HAL_RCC_OscConfig+0x324>
 8013f9e:	687b      	ldr	r3, [r7, #4]
 8013fa0:	689b      	ldr	r3, [r3, #8]
 8013fa2:	2b05      	cmp	r3, #5
 8013fa4:	d10c      	bne.n	8013fc0 <HAL_RCC_OscConfig+0x30c>
 8013fa6:	4b5f      	ldr	r3, [pc, #380]	; (8014124 <HAL_RCC_OscConfig+0x470>)
 8013fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013faa:	4a5e      	ldr	r2, [pc, #376]	; (8014124 <HAL_RCC_OscConfig+0x470>)
 8013fac:	f043 0304 	orr.w	r3, r3, #4
 8013fb0:	6713      	str	r3, [r2, #112]	; 0x70
 8013fb2:	4b5c      	ldr	r3, [pc, #368]	; (8014124 <HAL_RCC_OscConfig+0x470>)
 8013fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013fb6:	4a5b      	ldr	r2, [pc, #364]	; (8014124 <HAL_RCC_OscConfig+0x470>)
 8013fb8:	f043 0301 	orr.w	r3, r3, #1
 8013fbc:	6713      	str	r3, [r2, #112]	; 0x70
 8013fbe:	e00b      	b.n	8013fd8 <HAL_RCC_OscConfig+0x324>
 8013fc0:	4b58      	ldr	r3, [pc, #352]	; (8014124 <HAL_RCC_OscConfig+0x470>)
 8013fc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013fc4:	4a57      	ldr	r2, [pc, #348]	; (8014124 <HAL_RCC_OscConfig+0x470>)
 8013fc6:	f023 0301 	bic.w	r3, r3, #1
 8013fca:	6713      	str	r3, [r2, #112]	; 0x70
 8013fcc:	4b55      	ldr	r3, [pc, #340]	; (8014124 <HAL_RCC_OscConfig+0x470>)
 8013fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013fd0:	4a54      	ldr	r2, [pc, #336]	; (8014124 <HAL_RCC_OscConfig+0x470>)
 8013fd2:	f023 0304 	bic.w	r3, r3, #4
 8013fd6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8013fd8:	687b      	ldr	r3, [r7, #4]
 8013fda:	689b      	ldr	r3, [r3, #8]
 8013fdc:	2b00      	cmp	r3, #0
 8013fde:	d015      	beq.n	801400c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8013fe0:	f7fd fbc8 	bl	8011774 <HAL_GetTick>
 8013fe4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8013fe6:	e00a      	b.n	8013ffe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8013fe8:	f7fd fbc4 	bl	8011774 <HAL_GetTick>
 8013fec:	4602      	mov	r2, r0
 8013fee:	693b      	ldr	r3, [r7, #16]
 8013ff0:	1ad3      	subs	r3, r2, r3
 8013ff2:	f241 3288 	movw	r2, #5000	; 0x1388
 8013ff6:	4293      	cmp	r3, r2
 8013ff8:	d901      	bls.n	8013ffe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8013ffa:	2303      	movs	r3, #3
 8013ffc:	e0cb      	b.n	8014196 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8013ffe:	4b49      	ldr	r3, [pc, #292]	; (8014124 <HAL_RCC_OscConfig+0x470>)
 8014000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014002:	f003 0302 	and.w	r3, r3, #2
 8014006:	2b00      	cmp	r3, #0
 8014008:	d0ee      	beq.n	8013fe8 <HAL_RCC_OscConfig+0x334>
 801400a:	e014      	b.n	8014036 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801400c:	f7fd fbb2 	bl	8011774 <HAL_GetTick>
 8014010:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8014012:	e00a      	b.n	801402a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8014014:	f7fd fbae 	bl	8011774 <HAL_GetTick>
 8014018:	4602      	mov	r2, r0
 801401a:	693b      	ldr	r3, [r7, #16]
 801401c:	1ad3      	subs	r3, r2, r3
 801401e:	f241 3288 	movw	r2, #5000	; 0x1388
 8014022:	4293      	cmp	r3, r2
 8014024:	d901      	bls.n	801402a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8014026:	2303      	movs	r3, #3
 8014028:	e0b5      	b.n	8014196 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801402a:	4b3e      	ldr	r3, [pc, #248]	; (8014124 <HAL_RCC_OscConfig+0x470>)
 801402c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801402e:	f003 0302 	and.w	r3, r3, #2
 8014032:	2b00      	cmp	r3, #0
 8014034:	d1ee      	bne.n	8014014 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8014036:	7dfb      	ldrb	r3, [r7, #23]
 8014038:	2b01      	cmp	r3, #1
 801403a:	d105      	bne.n	8014048 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801403c:	4b39      	ldr	r3, [pc, #228]	; (8014124 <HAL_RCC_OscConfig+0x470>)
 801403e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014040:	4a38      	ldr	r2, [pc, #224]	; (8014124 <HAL_RCC_OscConfig+0x470>)
 8014042:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8014046:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	699b      	ldr	r3, [r3, #24]
 801404c:	2b00      	cmp	r3, #0
 801404e:	f000 80a1 	beq.w	8014194 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8014052:	4b34      	ldr	r3, [pc, #208]	; (8014124 <HAL_RCC_OscConfig+0x470>)
 8014054:	689b      	ldr	r3, [r3, #8]
 8014056:	f003 030c 	and.w	r3, r3, #12
 801405a:	2b08      	cmp	r3, #8
 801405c:	d05c      	beq.n	8014118 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801405e:	687b      	ldr	r3, [r7, #4]
 8014060:	699b      	ldr	r3, [r3, #24]
 8014062:	2b02      	cmp	r3, #2
 8014064:	d141      	bne.n	80140ea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8014066:	4b31      	ldr	r3, [pc, #196]	; (801412c <HAL_RCC_OscConfig+0x478>)
 8014068:	2200      	movs	r2, #0
 801406a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801406c:	f7fd fb82 	bl	8011774 <HAL_GetTick>
 8014070:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8014072:	e008      	b.n	8014086 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8014074:	f7fd fb7e 	bl	8011774 <HAL_GetTick>
 8014078:	4602      	mov	r2, r0
 801407a:	693b      	ldr	r3, [r7, #16]
 801407c:	1ad3      	subs	r3, r2, r3
 801407e:	2b02      	cmp	r3, #2
 8014080:	d901      	bls.n	8014086 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8014082:	2303      	movs	r3, #3
 8014084:	e087      	b.n	8014196 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8014086:	4b27      	ldr	r3, [pc, #156]	; (8014124 <HAL_RCC_OscConfig+0x470>)
 8014088:	681b      	ldr	r3, [r3, #0]
 801408a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801408e:	2b00      	cmp	r3, #0
 8014090:	d1f0      	bne.n	8014074 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8014092:	687b      	ldr	r3, [r7, #4]
 8014094:	69da      	ldr	r2, [r3, #28]
 8014096:	687b      	ldr	r3, [r7, #4]
 8014098:	6a1b      	ldr	r3, [r3, #32]
 801409a:	431a      	orrs	r2, r3
 801409c:	687b      	ldr	r3, [r7, #4]
 801409e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80140a0:	019b      	lsls	r3, r3, #6
 80140a2:	431a      	orrs	r2, r3
 80140a4:	687b      	ldr	r3, [r7, #4]
 80140a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80140a8:	085b      	lsrs	r3, r3, #1
 80140aa:	3b01      	subs	r3, #1
 80140ac:	041b      	lsls	r3, r3, #16
 80140ae:	431a      	orrs	r2, r3
 80140b0:	687b      	ldr	r3, [r7, #4]
 80140b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80140b4:	061b      	lsls	r3, r3, #24
 80140b6:	491b      	ldr	r1, [pc, #108]	; (8014124 <HAL_RCC_OscConfig+0x470>)
 80140b8:	4313      	orrs	r3, r2
 80140ba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80140bc:	4b1b      	ldr	r3, [pc, #108]	; (801412c <HAL_RCC_OscConfig+0x478>)
 80140be:	2201      	movs	r2, #1
 80140c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80140c2:	f7fd fb57 	bl	8011774 <HAL_GetTick>
 80140c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80140c8:	e008      	b.n	80140dc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80140ca:	f7fd fb53 	bl	8011774 <HAL_GetTick>
 80140ce:	4602      	mov	r2, r0
 80140d0:	693b      	ldr	r3, [r7, #16]
 80140d2:	1ad3      	subs	r3, r2, r3
 80140d4:	2b02      	cmp	r3, #2
 80140d6:	d901      	bls.n	80140dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80140d8:	2303      	movs	r3, #3
 80140da:	e05c      	b.n	8014196 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80140dc:	4b11      	ldr	r3, [pc, #68]	; (8014124 <HAL_RCC_OscConfig+0x470>)
 80140de:	681b      	ldr	r3, [r3, #0]
 80140e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80140e4:	2b00      	cmp	r3, #0
 80140e6:	d0f0      	beq.n	80140ca <HAL_RCC_OscConfig+0x416>
 80140e8:	e054      	b.n	8014194 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80140ea:	4b10      	ldr	r3, [pc, #64]	; (801412c <HAL_RCC_OscConfig+0x478>)
 80140ec:	2200      	movs	r2, #0
 80140ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80140f0:	f7fd fb40 	bl	8011774 <HAL_GetTick>
 80140f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80140f6:	e008      	b.n	801410a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80140f8:	f7fd fb3c 	bl	8011774 <HAL_GetTick>
 80140fc:	4602      	mov	r2, r0
 80140fe:	693b      	ldr	r3, [r7, #16]
 8014100:	1ad3      	subs	r3, r2, r3
 8014102:	2b02      	cmp	r3, #2
 8014104:	d901      	bls.n	801410a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8014106:	2303      	movs	r3, #3
 8014108:	e045      	b.n	8014196 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801410a:	4b06      	ldr	r3, [pc, #24]	; (8014124 <HAL_RCC_OscConfig+0x470>)
 801410c:	681b      	ldr	r3, [r3, #0]
 801410e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8014112:	2b00      	cmp	r3, #0
 8014114:	d1f0      	bne.n	80140f8 <HAL_RCC_OscConfig+0x444>
 8014116:	e03d      	b.n	8014194 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8014118:	687b      	ldr	r3, [r7, #4]
 801411a:	699b      	ldr	r3, [r3, #24]
 801411c:	2b01      	cmp	r3, #1
 801411e:	d107      	bne.n	8014130 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8014120:	2301      	movs	r3, #1
 8014122:	e038      	b.n	8014196 <HAL_RCC_OscConfig+0x4e2>
 8014124:	40023800 	.word	0x40023800
 8014128:	40007000 	.word	0x40007000
 801412c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8014130:	4b1b      	ldr	r3, [pc, #108]	; (80141a0 <HAL_RCC_OscConfig+0x4ec>)
 8014132:	685b      	ldr	r3, [r3, #4]
 8014134:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8014136:	687b      	ldr	r3, [r7, #4]
 8014138:	699b      	ldr	r3, [r3, #24]
 801413a:	2b01      	cmp	r3, #1
 801413c:	d028      	beq.n	8014190 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801413e:	68fb      	ldr	r3, [r7, #12]
 8014140:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8014144:	687b      	ldr	r3, [r7, #4]
 8014146:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8014148:	429a      	cmp	r2, r3
 801414a:	d121      	bne.n	8014190 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 801414c:	68fb      	ldr	r3, [r7, #12]
 801414e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8014152:	687b      	ldr	r3, [r7, #4]
 8014154:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8014156:	429a      	cmp	r2, r3
 8014158:	d11a      	bne.n	8014190 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 801415a:	68fa      	ldr	r2, [r7, #12]
 801415c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8014160:	4013      	ands	r3, r2
 8014162:	687a      	ldr	r2, [r7, #4]
 8014164:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8014166:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8014168:	4293      	cmp	r3, r2
 801416a:	d111      	bne.n	8014190 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 801416c:	68fb      	ldr	r3, [r7, #12]
 801416e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8014172:	687b      	ldr	r3, [r7, #4]
 8014174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014176:	085b      	lsrs	r3, r3, #1
 8014178:	3b01      	subs	r3, #1
 801417a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 801417c:	429a      	cmp	r2, r3
 801417e:	d107      	bne.n	8014190 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8014180:	68fb      	ldr	r3, [r7, #12]
 8014182:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8014186:	687b      	ldr	r3, [r7, #4]
 8014188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801418a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 801418c:	429a      	cmp	r2, r3
 801418e:	d001      	beq.n	8014194 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8014190:	2301      	movs	r3, #1
 8014192:	e000      	b.n	8014196 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8014194:	2300      	movs	r3, #0
}
 8014196:	4618      	mov	r0, r3
 8014198:	3718      	adds	r7, #24
 801419a:	46bd      	mov	sp, r7
 801419c:	bd80      	pop	{r7, pc}
 801419e:	bf00      	nop
 80141a0:	40023800 	.word	0x40023800

080141a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80141a4:	b580      	push	{r7, lr}
 80141a6:	b084      	sub	sp, #16
 80141a8:	af00      	add	r7, sp, #0
 80141aa:	6078      	str	r0, [r7, #4]
 80141ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80141ae:	687b      	ldr	r3, [r7, #4]
 80141b0:	2b00      	cmp	r3, #0
 80141b2:	d101      	bne.n	80141b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80141b4:	2301      	movs	r3, #1
 80141b6:	e0cc      	b.n	8014352 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80141b8:	4b68      	ldr	r3, [pc, #416]	; (801435c <HAL_RCC_ClockConfig+0x1b8>)
 80141ba:	681b      	ldr	r3, [r3, #0]
 80141bc:	f003 0307 	and.w	r3, r3, #7
 80141c0:	683a      	ldr	r2, [r7, #0]
 80141c2:	429a      	cmp	r2, r3
 80141c4:	d90c      	bls.n	80141e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80141c6:	4b65      	ldr	r3, [pc, #404]	; (801435c <HAL_RCC_ClockConfig+0x1b8>)
 80141c8:	683a      	ldr	r2, [r7, #0]
 80141ca:	b2d2      	uxtb	r2, r2
 80141cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80141ce:	4b63      	ldr	r3, [pc, #396]	; (801435c <HAL_RCC_ClockConfig+0x1b8>)
 80141d0:	681b      	ldr	r3, [r3, #0]
 80141d2:	f003 0307 	and.w	r3, r3, #7
 80141d6:	683a      	ldr	r2, [r7, #0]
 80141d8:	429a      	cmp	r2, r3
 80141da:	d001      	beq.n	80141e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80141dc:	2301      	movs	r3, #1
 80141de:	e0b8      	b.n	8014352 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80141e0:	687b      	ldr	r3, [r7, #4]
 80141e2:	681b      	ldr	r3, [r3, #0]
 80141e4:	f003 0302 	and.w	r3, r3, #2
 80141e8:	2b00      	cmp	r3, #0
 80141ea:	d020      	beq.n	801422e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80141ec:	687b      	ldr	r3, [r7, #4]
 80141ee:	681b      	ldr	r3, [r3, #0]
 80141f0:	f003 0304 	and.w	r3, r3, #4
 80141f4:	2b00      	cmp	r3, #0
 80141f6:	d005      	beq.n	8014204 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80141f8:	4b59      	ldr	r3, [pc, #356]	; (8014360 <HAL_RCC_ClockConfig+0x1bc>)
 80141fa:	689b      	ldr	r3, [r3, #8]
 80141fc:	4a58      	ldr	r2, [pc, #352]	; (8014360 <HAL_RCC_ClockConfig+0x1bc>)
 80141fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8014202:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8014204:	687b      	ldr	r3, [r7, #4]
 8014206:	681b      	ldr	r3, [r3, #0]
 8014208:	f003 0308 	and.w	r3, r3, #8
 801420c:	2b00      	cmp	r3, #0
 801420e:	d005      	beq.n	801421c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8014210:	4b53      	ldr	r3, [pc, #332]	; (8014360 <HAL_RCC_ClockConfig+0x1bc>)
 8014212:	689b      	ldr	r3, [r3, #8]
 8014214:	4a52      	ldr	r2, [pc, #328]	; (8014360 <HAL_RCC_ClockConfig+0x1bc>)
 8014216:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 801421a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801421c:	4b50      	ldr	r3, [pc, #320]	; (8014360 <HAL_RCC_ClockConfig+0x1bc>)
 801421e:	689b      	ldr	r3, [r3, #8]
 8014220:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8014224:	687b      	ldr	r3, [r7, #4]
 8014226:	689b      	ldr	r3, [r3, #8]
 8014228:	494d      	ldr	r1, [pc, #308]	; (8014360 <HAL_RCC_ClockConfig+0x1bc>)
 801422a:	4313      	orrs	r3, r2
 801422c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	681b      	ldr	r3, [r3, #0]
 8014232:	f003 0301 	and.w	r3, r3, #1
 8014236:	2b00      	cmp	r3, #0
 8014238:	d044      	beq.n	80142c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801423a:	687b      	ldr	r3, [r7, #4]
 801423c:	685b      	ldr	r3, [r3, #4]
 801423e:	2b01      	cmp	r3, #1
 8014240:	d107      	bne.n	8014252 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8014242:	4b47      	ldr	r3, [pc, #284]	; (8014360 <HAL_RCC_ClockConfig+0x1bc>)
 8014244:	681b      	ldr	r3, [r3, #0]
 8014246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801424a:	2b00      	cmp	r3, #0
 801424c:	d119      	bne.n	8014282 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801424e:	2301      	movs	r3, #1
 8014250:	e07f      	b.n	8014352 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8014252:	687b      	ldr	r3, [r7, #4]
 8014254:	685b      	ldr	r3, [r3, #4]
 8014256:	2b02      	cmp	r3, #2
 8014258:	d003      	beq.n	8014262 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 801425a:	687b      	ldr	r3, [r7, #4]
 801425c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801425e:	2b03      	cmp	r3, #3
 8014260:	d107      	bne.n	8014272 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8014262:	4b3f      	ldr	r3, [pc, #252]	; (8014360 <HAL_RCC_ClockConfig+0x1bc>)
 8014264:	681b      	ldr	r3, [r3, #0]
 8014266:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801426a:	2b00      	cmp	r3, #0
 801426c:	d109      	bne.n	8014282 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801426e:	2301      	movs	r3, #1
 8014270:	e06f      	b.n	8014352 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8014272:	4b3b      	ldr	r3, [pc, #236]	; (8014360 <HAL_RCC_ClockConfig+0x1bc>)
 8014274:	681b      	ldr	r3, [r3, #0]
 8014276:	f003 0302 	and.w	r3, r3, #2
 801427a:	2b00      	cmp	r3, #0
 801427c:	d101      	bne.n	8014282 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801427e:	2301      	movs	r3, #1
 8014280:	e067      	b.n	8014352 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8014282:	4b37      	ldr	r3, [pc, #220]	; (8014360 <HAL_RCC_ClockConfig+0x1bc>)
 8014284:	689b      	ldr	r3, [r3, #8]
 8014286:	f023 0203 	bic.w	r2, r3, #3
 801428a:	687b      	ldr	r3, [r7, #4]
 801428c:	685b      	ldr	r3, [r3, #4]
 801428e:	4934      	ldr	r1, [pc, #208]	; (8014360 <HAL_RCC_ClockConfig+0x1bc>)
 8014290:	4313      	orrs	r3, r2
 8014292:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8014294:	f7fd fa6e 	bl	8011774 <HAL_GetTick>
 8014298:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801429a:	e00a      	b.n	80142b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801429c:	f7fd fa6a 	bl	8011774 <HAL_GetTick>
 80142a0:	4602      	mov	r2, r0
 80142a2:	68fb      	ldr	r3, [r7, #12]
 80142a4:	1ad3      	subs	r3, r2, r3
 80142a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80142aa:	4293      	cmp	r3, r2
 80142ac:	d901      	bls.n	80142b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80142ae:	2303      	movs	r3, #3
 80142b0:	e04f      	b.n	8014352 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80142b2:	4b2b      	ldr	r3, [pc, #172]	; (8014360 <HAL_RCC_ClockConfig+0x1bc>)
 80142b4:	689b      	ldr	r3, [r3, #8]
 80142b6:	f003 020c 	and.w	r2, r3, #12
 80142ba:	687b      	ldr	r3, [r7, #4]
 80142bc:	685b      	ldr	r3, [r3, #4]
 80142be:	009b      	lsls	r3, r3, #2
 80142c0:	429a      	cmp	r2, r3
 80142c2:	d1eb      	bne.n	801429c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80142c4:	4b25      	ldr	r3, [pc, #148]	; (801435c <HAL_RCC_ClockConfig+0x1b8>)
 80142c6:	681b      	ldr	r3, [r3, #0]
 80142c8:	f003 0307 	and.w	r3, r3, #7
 80142cc:	683a      	ldr	r2, [r7, #0]
 80142ce:	429a      	cmp	r2, r3
 80142d0:	d20c      	bcs.n	80142ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80142d2:	4b22      	ldr	r3, [pc, #136]	; (801435c <HAL_RCC_ClockConfig+0x1b8>)
 80142d4:	683a      	ldr	r2, [r7, #0]
 80142d6:	b2d2      	uxtb	r2, r2
 80142d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80142da:	4b20      	ldr	r3, [pc, #128]	; (801435c <HAL_RCC_ClockConfig+0x1b8>)
 80142dc:	681b      	ldr	r3, [r3, #0]
 80142de:	f003 0307 	and.w	r3, r3, #7
 80142e2:	683a      	ldr	r2, [r7, #0]
 80142e4:	429a      	cmp	r2, r3
 80142e6:	d001      	beq.n	80142ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80142e8:	2301      	movs	r3, #1
 80142ea:	e032      	b.n	8014352 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80142ec:	687b      	ldr	r3, [r7, #4]
 80142ee:	681b      	ldr	r3, [r3, #0]
 80142f0:	f003 0304 	and.w	r3, r3, #4
 80142f4:	2b00      	cmp	r3, #0
 80142f6:	d008      	beq.n	801430a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80142f8:	4b19      	ldr	r3, [pc, #100]	; (8014360 <HAL_RCC_ClockConfig+0x1bc>)
 80142fa:	689b      	ldr	r3, [r3, #8]
 80142fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8014300:	687b      	ldr	r3, [r7, #4]
 8014302:	68db      	ldr	r3, [r3, #12]
 8014304:	4916      	ldr	r1, [pc, #88]	; (8014360 <HAL_RCC_ClockConfig+0x1bc>)
 8014306:	4313      	orrs	r3, r2
 8014308:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801430a:	687b      	ldr	r3, [r7, #4]
 801430c:	681b      	ldr	r3, [r3, #0]
 801430e:	f003 0308 	and.w	r3, r3, #8
 8014312:	2b00      	cmp	r3, #0
 8014314:	d009      	beq.n	801432a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8014316:	4b12      	ldr	r3, [pc, #72]	; (8014360 <HAL_RCC_ClockConfig+0x1bc>)
 8014318:	689b      	ldr	r3, [r3, #8]
 801431a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 801431e:	687b      	ldr	r3, [r7, #4]
 8014320:	691b      	ldr	r3, [r3, #16]
 8014322:	00db      	lsls	r3, r3, #3
 8014324:	490e      	ldr	r1, [pc, #56]	; (8014360 <HAL_RCC_ClockConfig+0x1bc>)
 8014326:	4313      	orrs	r3, r2
 8014328:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 801432a:	f000 f821 	bl	8014370 <HAL_RCC_GetSysClockFreq>
 801432e:	4602      	mov	r2, r0
 8014330:	4b0b      	ldr	r3, [pc, #44]	; (8014360 <HAL_RCC_ClockConfig+0x1bc>)
 8014332:	689b      	ldr	r3, [r3, #8]
 8014334:	091b      	lsrs	r3, r3, #4
 8014336:	f003 030f 	and.w	r3, r3, #15
 801433a:	490a      	ldr	r1, [pc, #40]	; (8014364 <HAL_RCC_ClockConfig+0x1c0>)
 801433c:	5ccb      	ldrb	r3, [r1, r3]
 801433e:	fa22 f303 	lsr.w	r3, r2, r3
 8014342:	4a09      	ldr	r2, [pc, #36]	; (8014368 <HAL_RCC_ClockConfig+0x1c4>)
 8014344:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8014346:	4b09      	ldr	r3, [pc, #36]	; (801436c <HAL_RCC_ClockConfig+0x1c8>)
 8014348:	681b      	ldr	r3, [r3, #0]
 801434a:	4618      	mov	r0, r3
 801434c:	f7fd f9ce 	bl	80116ec <HAL_InitTick>

  return HAL_OK;
 8014350:	2300      	movs	r3, #0
}
 8014352:	4618      	mov	r0, r3
 8014354:	3710      	adds	r7, #16
 8014356:	46bd      	mov	sp, r7
 8014358:	bd80      	pop	{r7, pc}
 801435a:	bf00      	nop
 801435c:	40023c00 	.word	0x40023c00
 8014360:	40023800 	.word	0x40023800
 8014364:	0801b05c 	.word	0x0801b05c
 8014368:	20000000 	.word	0x20000000
 801436c:	20000004 	.word	0x20000004

08014370 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8014370:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8014374:	b094      	sub	sp, #80	; 0x50
 8014376:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8014378:	2300      	movs	r3, #0
 801437a:	647b      	str	r3, [r7, #68]	; 0x44
 801437c:	2300      	movs	r3, #0
 801437e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014380:	2300      	movs	r3, #0
 8014382:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8014384:	2300      	movs	r3, #0
 8014386:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8014388:	4b79      	ldr	r3, [pc, #484]	; (8014570 <HAL_RCC_GetSysClockFreq+0x200>)
 801438a:	689b      	ldr	r3, [r3, #8]
 801438c:	f003 030c 	and.w	r3, r3, #12
 8014390:	2b08      	cmp	r3, #8
 8014392:	d00d      	beq.n	80143b0 <HAL_RCC_GetSysClockFreq+0x40>
 8014394:	2b08      	cmp	r3, #8
 8014396:	f200 80e1 	bhi.w	801455c <HAL_RCC_GetSysClockFreq+0x1ec>
 801439a:	2b00      	cmp	r3, #0
 801439c:	d002      	beq.n	80143a4 <HAL_RCC_GetSysClockFreq+0x34>
 801439e:	2b04      	cmp	r3, #4
 80143a0:	d003      	beq.n	80143aa <HAL_RCC_GetSysClockFreq+0x3a>
 80143a2:	e0db      	b.n	801455c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80143a4:	4b73      	ldr	r3, [pc, #460]	; (8014574 <HAL_RCC_GetSysClockFreq+0x204>)
 80143a6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80143a8:	e0db      	b.n	8014562 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80143aa:	4b73      	ldr	r3, [pc, #460]	; (8014578 <HAL_RCC_GetSysClockFreq+0x208>)
 80143ac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80143ae:	e0d8      	b.n	8014562 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80143b0:	4b6f      	ldr	r3, [pc, #444]	; (8014570 <HAL_RCC_GetSysClockFreq+0x200>)
 80143b2:	685b      	ldr	r3, [r3, #4]
 80143b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80143b8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80143ba:	4b6d      	ldr	r3, [pc, #436]	; (8014570 <HAL_RCC_GetSysClockFreq+0x200>)
 80143bc:	685b      	ldr	r3, [r3, #4]
 80143be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80143c2:	2b00      	cmp	r3, #0
 80143c4:	d063      	beq.n	801448e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80143c6:	4b6a      	ldr	r3, [pc, #424]	; (8014570 <HAL_RCC_GetSysClockFreq+0x200>)
 80143c8:	685b      	ldr	r3, [r3, #4]
 80143ca:	099b      	lsrs	r3, r3, #6
 80143cc:	2200      	movs	r2, #0
 80143ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80143d0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80143d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80143d8:	633b      	str	r3, [r7, #48]	; 0x30
 80143da:	2300      	movs	r3, #0
 80143dc:	637b      	str	r3, [r7, #52]	; 0x34
 80143de:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80143e2:	4622      	mov	r2, r4
 80143e4:	462b      	mov	r3, r5
 80143e6:	f04f 0000 	mov.w	r0, #0
 80143ea:	f04f 0100 	mov.w	r1, #0
 80143ee:	0159      	lsls	r1, r3, #5
 80143f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80143f4:	0150      	lsls	r0, r2, #5
 80143f6:	4602      	mov	r2, r0
 80143f8:	460b      	mov	r3, r1
 80143fa:	4621      	mov	r1, r4
 80143fc:	1a51      	subs	r1, r2, r1
 80143fe:	6139      	str	r1, [r7, #16]
 8014400:	4629      	mov	r1, r5
 8014402:	eb63 0301 	sbc.w	r3, r3, r1
 8014406:	617b      	str	r3, [r7, #20]
 8014408:	f04f 0200 	mov.w	r2, #0
 801440c:	f04f 0300 	mov.w	r3, #0
 8014410:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8014414:	4659      	mov	r1, fp
 8014416:	018b      	lsls	r3, r1, #6
 8014418:	4651      	mov	r1, sl
 801441a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 801441e:	4651      	mov	r1, sl
 8014420:	018a      	lsls	r2, r1, #6
 8014422:	4651      	mov	r1, sl
 8014424:	ebb2 0801 	subs.w	r8, r2, r1
 8014428:	4659      	mov	r1, fp
 801442a:	eb63 0901 	sbc.w	r9, r3, r1
 801442e:	f04f 0200 	mov.w	r2, #0
 8014432:	f04f 0300 	mov.w	r3, #0
 8014436:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 801443a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 801443e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8014442:	4690      	mov	r8, r2
 8014444:	4699      	mov	r9, r3
 8014446:	4623      	mov	r3, r4
 8014448:	eb18 0303 	adds.w	r3, r8, r3
 801444c:	60bb      	str	r3, [r7, #8]
 801444e:	462b      	mov	r3, r5
 8014450:	eb49 0303 	adc.w	r3, r9, r3
 8014454:	60fb      	str	r3, [r7, #12]
 8014456:	f04f 0200 	mov.w	r2, #0
 801445a:	f04f 0300 	mov.w	r3, #0
 801445e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8014462:	4629      	mov	r1, r5
 8014464:	024b      	lsls	r3, r1, #9
 8014466:	4621      	mov	r1, r4
 8014468:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 801446c:	4621      	mov	r1, r4
 801446e:	024a      	lsls	r2, r1, #9
 8014470:	4610      	mov	r0, r2
 8014472:	4619      	mov	r1, r3
 8014474:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014476:	2200      	movs	r2, #0
 8014478:	62bb      	str	r3, [r7, #40]	; 0x28
 801447a:	62fa      	str	r2, [r7, #44]	; 0x2c
 801447c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8014480:	f7fb ff16 	bl	80102b0 <__aeabi_uldivmod>
 8014484:	4602      	mov	r2, r0
 8014486:	460b      	mov	r3, r1
 8014488:	4613      	mov	r3, r2
 801448a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801448c:	e058      	b.n	8014540 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801448e:	4b38      	ldr	r3, [pc, #224]	; (8014570 <HAL_RCC_GetSysClockFreq+0x200>)
 8014490:	685b      	ldr	r3, [r3, #4]
 8014492:	099b      	lsrs	r3, r3, #6
 8014494:	2200      	movs	r2, #0
 8014496:	4618      	mov	r0, r3
 8014498:	4611      	mov	r1, r2
 801449a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 801449e:	623b      	str	r3, [r7, #32]
 80144a0:	2300      	movs	r3, #0
 80144a2:	627b      	str	r3, [r7, #36]	; 0x24
 80144a4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80144a8:	4642      	mov	r2, r8
 80144aa:	464b      	mov	r3, r9
 80144ac:	f04f 0000 	mov.w	r0, #0
 80144b0:	f04f 0100 	mov.w	r1, #0
 80144b4:	0159      	lsls	r1, r3, #5
 80144b6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80144ba:	0150      	lsls	r0, r2, #5
 80144bc:	4602      	mov	r2, r0
 80144be:	460b      	mov	r3, r1
 80144c0:	4641      	mov	r1, r8
 80144c2:	ebb2 0a01 	subs.w	sl, r2, r1
 80144c6:	4649      	mov	r1, r9
 80144c8:	eb63 0b01 	sbc.w	fp, r3, r1
 80144cc:	f04f 0200 	mov.w	r2, #0
 80144d0:	f04f 0300 	mov.w	r3, #0
 80144d4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80144d8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80144dc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80144e0:	ebb2 040a 	subs.w	r4, r2, sl
 80144e4:	eb63 050b 	sbc.w	r5, r3, fp
 80144e8:	f04f 0200 	mov.w	r2, #0
 80144ec:	f04f 0300 	mov.w	r3, #0
 80144f0:	00eb      	lsls	r3, r5, #3
 80144f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80144f6:	00e2      	lsls	r2, r4, #3
 80144f8:	4614      	mov	r4, r2
 80144fa:	461d      	mov	r5, r3
 80144fc:	4643      	mov	r3, r8
 80144fe:	18e3      	adds	r3, r4, r3
 8014500:	603b      	str	r3, [r7, #0]
 8014502:	464b      	mov	r3, r9
 8014504:	eb45 0303 	adc.w	r3, r5, r3
 8014508:	607b      	str	r3, [r7, #4]
 801450a:	f04f 0200 	mov.w	r2, #0
 801450e:	f04f 0300 	mov.w	r3, #0
 8014512:	e9d7 4500 	ldrd	r4, r5, [r7]
 8014516:	4629      	mov	r1, r5
 8014518:	028b      	lsls	r3, r1, #10
 801451a:	4621      	mov	r1, r4
 801451c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8014520:	4621      	mov	r1, r4
 8014522:	028a      	lsls	r2, r1, #10
 8014524:	4610      	mov	r0, r2
 8014526:	4619      	mov	r1, r3
 8014528:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801452a:	2200      	movs	r2, #0
 801452c:	61bb      	str	r3, [r7, #24]
 801452e:	61fa      	str	r2, [r7, #28]
 8014530:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8014534:	f7fb febc 	bl	80102b0 <__aeabi_uldivmod>
 8014538:	4602      	mov	r2, r0
 801453a:	460b      	mov	r3, r1
 801453c:	4613      	mov	r3, r2
 801453e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8014540:	4b0b      	ldr	r3, [pc, #44]	; (8014570 <HAL_RCC_GetSysClockFreq+0x200>)
 8014542:	685b      	ldr	r3, [r3, #4]
 8014544:	0c1b      	lsrs	r3, r3, #16
 8014546:	f003 0303 	and.w	r3, r3, #3
 801454a:	3301      	adds	r3, #1
 801454c:	005b      	lsls	r3, r3, #1
 801454e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8014550:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014552:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014554:	fbb2 f3f3 	udiv	r3, r2, r3
 8014558:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 801455a:	e002      	b.n	8014562 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 801455c:	4b05      	ldr	r3, [pc, #20]	; (8014574 <HAL_RCC_GetSysClockFreq+0x204>)
 801455e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8014560:	bf00      	nop
    }
  }
  return sysclockfreq;
 8014562:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8014564:	4618      	mov	r0, r3
 8014566:	3750      	adds	r7, #80	; 0x50
 8014568:	46bd      	mov	sp, r7
 801456a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801456e:	bf00      	nop
 8014570:	40023800 	.word	0x40023800
 8014574:	00f42400 	.word	0x00f42400
 8014578:	007a1200 	.word	0x007a1200

0801457c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801457c:	b480      	push	{r7}
 801457e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8014580:	4b03      	ldr	r3, [pc, #12]	; (8014590 <HAL_RCC_GetHCLKFreq+0x14>)
 8014582:	681b      	ldr	r3, [r3, #0]
}
 8014584:	4618      	mov	r0, r3
 8014586:	46bd      	mov	sp, r7
 8014588:	f85d 7b04 	ldr.w	r7, [sp], #4
 801458c:	4770      	bx	lr
 801458e:	bf00      	nop
 8014590:	20000000 	.word	0x20000000

08014594 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8014594:	b580      	push	{r7, lr}
 8014596:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8014598:	f7ff fff0 	bl	801457c <HAL_RCC_GetHCLKFreq>
 801459c:	4602      	mov	r2, r0
 801459e:	4b05      	ldr	r3, [pc, #20]	; (80145b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80145a0:	689b      	ldr	r3, [r3, #8]
 80145a2:	0a9b      	lsrs	r3, r3, #10
 80145a4:	f003 0307 	and.w	r3, r3, #7
 80145a8:	4903      	ldr	r1, [pc, #12]	; (80145b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80145aa:	5ccb      	ldrb	r3, [r1, r3]
 80145ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80145b0:	4618      	mov	r0, r3
 80145b2:	bd80      	pop	{r7, pc}
 80145b4:	40023800 	.word	0x40023800
 80145b8:	0801b06c 	.word	0x0801b06c

080145bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80145bc:	b580      	push	{r7, lr}
 80145be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80145c0:	f7ff ffdc 	bl	801457c <HAL_RCC_GetHCLKFreq>
 80145c4:	4602      	mov	r2, r0
 80145c6:	4b05      	ldr	r3, [pc, #20]	; (80145dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80145c8:	689b      	ldr	r3, [r3, #8]
 80145ca:	0b5b      	lsrs	r3, r3, #13
 80145cc:	f003 0307 	and.w	r3, r3, #7
 80145d0:	4903      	ldr	r1, [pc, #12]	; (80145e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80145d2:	5ccb      	ldrb	r3, [r1, r3]
 80145d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80145d8:	4618      	mov	r0, r3
 80145da:	bd80      	pop	{r7, pc}
 80145dc:	40023800 	.word	0x40023800
 80145e0:	0801b06c 	.word	0x0801b06c

080145e4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80145e4:	b580      	push	{r7, lr}
 80145e6:	b086      	sub	sp, #24
 80145e8:	af00      	add	r7, sp, #0
 80145ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80145ec:	2300      	movs	r3, #0
 80145ee:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80145f0:	2300      	movs	r3, #0
 80145f2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80145f4:	687b      	ldr	r3, [r7, #4]
 80145f6:	681b      	ldr	r3, [r3, #0]
 80145f8:	f003 0301 	and.w	r3, r3, #1
 80145fc:	2b00      	cmp	r3, #0
 80145fe:	d105      	bne.n	801460c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8014600:	687b      	ldr	r3, [r7, #4]
 8014602:	681b      	ldr	r3, [r3, #0]
 8014604:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8014608:	2b00      	cmp	r3, #0
 801460a:	d035      	beq.n	8014678 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 801460c:	4b67      	ldr	r3, [pc, #412]	; (80147ac <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 801460e:	2200      	movs	r2, #0
 8014610:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8014612:	f7fd f8af 	bl	8011774 <HAL_GetTick>
 8014616:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8014618:	e008      	b.n	801462c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 801461a:	f7fd f8ab 	bl	8011774 <HAL_GetTick>
 801461e:	4602      	mov	r2, r0
 8014620:	697b      	ldr	r3, [r7, #20]
 8014622:	1ad3      	subs	r3, r2, r3
 8014624:	2b02      	cmp	r3, #2
 8014626:	d901      	bls.n	801462c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8014628:	2303      	movs	r3, #3
 801462a:	e0ba      	b.n	80147a2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 801462c:	4b60      	ldr	r3, [pc, #384]	; (80147b0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 801462e:	681b      	ldr	r3, [r3, #0]
 8014630:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8014634:	2b00      	cmp	r3, #0
 8014636:	d1f0      	bne.n	801461a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8014638:	687b      	ldr	r3, [r7, #4]
 801463a:	685b      	ldr	r3, [r3, #4]
 801463c:	019a      	lsls	r2, r3, #6
 801463e:	687b      	ldr	r3, [r7, #4]
 8014640:	689b      	ldr	r3, [r3, #8]
 8014642:	071b      	lsls	r3, r3, #28
 8014644:	495a      	ldr	r1, [pc, #360]	; (80147b0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8014646:	4313      	orrs	r3, r2
 8014648:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 801464c:	4b57      	ldr	r3, [pc, #348]	; (80147ac <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 801464e:	2201      	movs	r2, #1
 8014650:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8014652:	f7fd f88f 	bl	8011774 <HAL_GetTick>
 8014656:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8014658:	e008      	b.n	801466c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 801465a:	f7fd f88b 	bl	8011774 <HAL_GetTick>
 801465e:	4602      	mov	r2, r0
 8014660:	697b      	ldr	r3, [r7, #20]
 8014662:	1ad3      	subs	r3, r2, r3
 8014664:	2b02      	cmp	r3, #2
 8014666:	d901      	bls.n	801466c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8014668:	2303      	movs	r3, #3
 801466a:	e09a      	b.n	80147a2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 801466c:	4b50      	ldr	r3, [pc, #320]	; (80147b0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 801466e:	681b      	ldr	r3, [r3, #0]
 8014670:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8014674:	2b00      	cmp	r3, #0
 8014676:	d0f0      	beq.n	801465a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8014678:	687b      	ldr	r3, [r7, #4]
 801467a:	681b      	ldr	r3, [r3, #0]
 801467c:	f003 0302 	and.w	r3, r3, #2
 8014680:	2b00      	cmp	r3, #0
 8014682:	f000 8083 	beq.w	801478c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8014686:	2300      	movs	r3, #0
 8014688:	60fb      	str	r3, [r7, #12]
 801468a:	4b49      	ldr	r3, [pc, #292]	; (80147b0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 801468c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801468e:	4a48      	ldr	r2, [pc, #288]	; (80147b0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8014690:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014694:	6413      	str	r3, [r2, #64]	; 0x40
 8014696:	4b46      	ldr	r3, [pc, #280]	; (80147b0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8014698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801469a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801469e:	60fb      	str	r3, [r7, #12]
 80146a0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80146a2:	4b44      	ldr	r3, [pc, #272]	; (80147b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80146a4:	681b      	ldr	r3, [r3, #0]
 80146a6:	4a43      	ldr	r2, [pc, #268]	; (80147b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80146a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80146ac:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80146ae:	f7fd f861 	bl	8011774 <HAL_GetTick>
 80146b2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80146b4:	e008      	b.n	80146c8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80146b6:	f7fd f85d 	bl	8011774 <HAL_GetTick>
 80146ba:	4602      	mov	r2, r0
 80146bc:	697b      	ldr	r3, [r7, #20]
 80146be:	1ad3      	subs	r3, r2, r3
 80146c0:	2b02      	cmp	r3, #2
 80146c2:	d901      	bls.n	80146c8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80146c4:	2303      	movs	r3, #3
 80146c6:	e06c      	b.n	80147a2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80146c8:	4b3a      	ldr	r3, [pc, #232]	; (80147b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80146ca:	681b      	ldr	r3, [r3, #0]
 80146cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80146d0:	2b00      	cmp	r3, #0
 80146d2:	d0f0      	beq.n	80146b6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80146d4:	4b36      	ldr	r3, [pc, #216]	; (80147b0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80146d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80146d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80146dc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80146de:	693b      	ldr	r3, [r7, #16]
 80146e0:	2b00      	cmp	r3, #0
 80146e2:	d02f      	beq.n	8014744 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80146e4:	687b      	ldr	r3, [r7, #4]
 80146e6:	68db      	ldr	r3, [r3, #12]
 80146e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80146ec:	693a      	ldr	r2, [r7, #16]
 80146ee:	429a      	cmp	r2, r3
 80146f0:	d028      	beq.n	8014744 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80146f2:	4b2f      	ldr	r3, [pc, #188]	; (80147b0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80146f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80146f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80146fa:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80146fc:	4b2e      	ldr	r3, [pc, #184]	; (80147b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80146fe:	2201      	movs	r2, #1
 8014700:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8014702:	4b2d      	ldr	r3, [pc, #180]	; (80147b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8014704:	2200      	movs	r2, #0
 8014706:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8014708:	4a29      	ldr	r2, [pc, #164]	; (80147b0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 801470a:	693b      	ldr	r3, [r7, #16]
 801470c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 801470e:	4b28      	ldr	r3, [pc, #160]	; (80147b0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8014710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014712:	f003 0301 	and.w	r3, r3, #1
 8014716:	2b01      	cmp	r3, #1
 8014718:	d114      	bne.n	8014744 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 801471a:	f7fd f82b 	bl	8011774 <HAL_GetTick>
 801471e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8014720:	e00a      	b.n	8014738 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8014722:	f7fd f827 	bl	8011774 <HAL_GetTick>
 8014726:	4602      	mov	r2, r0
 8014728:	697b      	ldr	r3, [r7, #20]
 801472a:	1ad3      	subs	r3, r2, r3
 801472c:	f241 3288 	movw	r2, #5000	; 0x1388
 8014730:	4293      	cmp	r3, r2
 8014732:	d901      	bls.n	8014738 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8014734:	2303      	movs	r3, #3
 8014736:	e034      	b.n	80147a2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8014738:	4b1d      	ldr	r3, [pc, #116]	; (80147b0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 801473a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801473c:	f003 0302 	and.w	r3, r3, #2
 8014740:	2b00      	cmp	r3, #0
 8014742:	d0ee      	beq.n	8014722 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8014744:	687b      	ldr	r3, [r7, #4]
 8014746:	68db      	ldr	r3, [r3, #12]
 8014748:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801474c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8014750:	d10d      	bne.n	801476e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8014752:	4b17      	ldr	r3, [pc, #92]	; (80147b0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8014754:	689b      	ldr	r3, [r3, #8]
 8014756:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 801475a:	687b      	ldr	r3, [r7, #4]
 801475c:	68db      	ldr	r3, [r3, #12]
 801475e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8014762:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8014766:	4912      	ldr	r1, [pc, #72]	; (80147b0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8014768:	4313      	orrs	r3, r2
 801476a:	608b      	str	r3, [r1, #8]
 801476c:	e005      	b.n	801477a <HAL_RCCEx_PeriphCLKConfig+0x196>
 801476e:	4b10      	ldr	r3, [pc, #64]	; (80147b0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8014770:	689b      	ldr	r3, [r3, #8]
 8014772:	4a0f      	ldr	r2, [pc, #60]	; (80147b0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8014774:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8014778:	6093      	str	r3, [r2, #8]
 801477a:	4b0d      	ldr	r3, [pc, #52]	; (80147b0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 801477c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801477e:	687b      	ldr	r3, [r7, #4]
 8014780:	68db      	ldr	r3, [r3, #12]
 8014782:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8014786:	490a      	ldr	r1, [pc, #40]	; (80147b0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8014788:	4313      	orrs	r3, r2
 801478a:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 801478c:	687b      	ldr	r3, [r7, #4]
 801478e:	681b      	ldr	r3, [r3, #0]
 8014790:	f003 0308 	and.w	r3, r3, #8
 8014794:	2b00      	cmp	r3, #0
 8014796:	d003      	beq.n	80147a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8014798:	687b      	ldr	r3, [r7, #4]
 801479a:	7c1a      	ldrb	r2, [r3, #16]
 801479c:	4b07      	ldr	r3, [pc, #28]	; (80147bc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 801479e:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80147a0:	2300      	movs	r3, #0
}
 80147a2:	4618      	mov	r0, r3
 80147a4:	3718      	adds	r7, #24
 80147a6:	46bd      	mov	sp, r7
 80147a8:	bd80      	pop	{r7, pc}
 80147aa:	bf00      	nop
 80147ac:	42470068 	.word	0x42470068
 80147b0:	40023800 	.word	0x40023800
 80147b4:	40007000 	.word	0x40007000
 80147b8:	42470e40 	.word	0x42470e40
 80147bc:	424711e0 	.word	0x424711e0

080147c0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80147c0:	b580      	push	{r7, lr}
 80147c2:	b084      	sub	sp, #16
 80147c4:	af00      	add	r7, sp, #0
 80147c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80147c8:	2301      	movs	r3, #1
 80147ca:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80147cc:	687b      	ldr	r3, [r7, #4]
 80147ce:	2b00      	cmp	r3, #0
 80147d0:	d101      	bne.n	80147d6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80147d2:	2301      	movs	r3, #1
 80147d4:	e073      	b.n	80148be <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80147d6:	687b      	ldr	r3, [r7, #4]
 80147d8:	7f5b      	ldrb	r3, [r3, #29]
 80147da:	b2db      	uxtb	r3, r3
 80147dc:	2b00      	cmp	r3, #0
 80147de:	d105      	bne.n	80147ec <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80147e0:	687b      	ldr	r3, [r7, #4]
 80147e2:	2200      	movs	r2, #0
 80147e4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80147e6:	6878      	ldr	r0, [r7, #4]
 80147e8:	f7fc fb86 	bl	8010ef8 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80147ec:	687b      	ldr	r3, [r7, #4]
 80147ee:	2202      	movs	r2, #2
 80147f0:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80147f2:	687b      	ldr	r3, [r7, #4]
 80147f4:	681b      	ldr	r3, [r3, #0]
 80147f6:	68db      	ldr	r3, [r3, #12]
 80147f8:	f003 0310 	and.w	r3, r3, #16
 80147fc:	2b10      	cmp	r3, #16
 80147fe:	d055      	beq.n	80148ac <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8014800:	687b      	ldr	r3, [r7, #4]
 8014802:	681b      	ldr	r3, [r3, #0]
 8014804:	22ca      	movs	r2, #202	; 0xca
 8014806:	625a      	str	r2, [r3, #36]	; 0x24
 8014808:	687b      	ldr	r3, [r7, #4]
 801480a:	681b      	ldr	r3, [r3, #0]
 801480c:	2253      	movs	r2, #83	; 0x53
 801480e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8014810:	6878      	ldr	r0, [r7, #4]
 8014812:	f000 fac7 	bl	8014da4 <RTC_EnterInitMode>
 8014816:	4603      	mov	r3, r0
 8014818:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 801481a:	7bfb      	ldrb	r3, [r7, #15]
 801481c:	2b00      	cmp	r3, #0
 801481e:	d12c      	bne.n	801487a <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8014820:	687b      	ldr	r3, [r7, #4]
 8014822:	681b      	ldr	r3, [r3, #0]
 8014824:	689b      	ldr	r3, [r3, #8]
 8014826:	687a      	ldr	r2, [r7, #4]
 8014828:	6812      	ldr	r2, [r2, #0]
 801482a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801482e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014832:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8014834:	687b      	ldr	r3, [r7, #4]
 8014836:	681b      	ldr	r3, [r3, #0]
 8014838:	6899      	ldr	r1, [r3, #8]
 801483a:	687b      	ldr	r3, [r7, #4]
 801483c:	685a      	ldr	r2, [r3, #4]
 801483e:	687b      	ldr	r3, [r7, #4]
 8014840:	691b      	ldr	r3, [r3, #16]
 8014842:	431a      	orrs	r2, r3
 8014844:	687b      	ldr	r3, [r7, #4]
 8014846:	695b      	ldr	r3, [r3, #20]
 8014848:	431a      	orrs	r2, r3
 801484a:	687b      	ldr	r3, [r7, #4]
 801484c:	681b      	ldr	r3, [r3, #0]
 801484e:	430a      	orrs	r2, r1
 8014850:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8014852:	687b      	ldr	r3, [r7, #4]
 8014854:	681b      	ldr	r3, [r3, #0]
 8014856:	687a      	ldr	r2, [r7, #4]
 8014858:	68d2      	ldr	r2, [r2, #12]
 801485a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 801485c:	687b      	ldr	r3, [r7, #4]
 801485e:	681b      	ldr	r3, [r3, #0]
 8014860:	6919      	ldr	r1, [r3, #16]
 8014862:	687b      	ldr	r3, [r7, #4]
 8014864:	689b      	ldr	r3, [r3, #8]
 8014866:	041a      	lsls	r2, r3, #16
 8014868:	687b      	ldr	r3, [r7, #4]
 801486a:	681b      	ldr	r3, [r3, #0]
 801486c:	430a      	orrs	r2, r1
 801486e:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8014870:	6878      	ldr	r0, [r7, #4]
 8014872:	f000 face 	bl	8014e12 <RTC_ExitInitMode>
 8014876:	4603      	mov	r3, r0
 8014878:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 801487a:	7bfb      	ldrb	r3, [r7, #15]
 801487c:	2b00      	cmp	r3, #0
 801487e:	d110      	bne.n	80148a2 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8014880:	687b      	ldr	r3, [r7, #4]
 8014882:	681b      	ldr	r3, [r3, #0]
 8014884:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8014886:	687b      	ldr	r3, [r7, #4]
 8014888:	681b      	ldr	r3, [r3, #0]
 801488a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 801488e:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8014890:	687b      	ldr	r3, [r7, #4]
 8014892:	681b      	ldr	r3, [r3, #0]
 8014894:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8014896:	687b      	ldr	r3, [r7, #4]
 8014898:	699a      	ldr	r2, [r3, #24]
 801489a:	687b      	ldr	r3, [r7, #4]
 801489c:	681b      	ldr	r3, [r3, #0]
 801489e:	430a      	orrs	r2, r1
 80148a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80148a2:	687b      	ldr	r3, [r7, #4]
 80148a4:	681b      	ldr	r3, [r3, #0]
 80148a6:	22ff      	movs	r2, #255	; 0xff
 80148a8:	625a      	str	r2, [r3, #36]	; 0x24
 80148aa:	e001      	b.n	80148b0 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80148ac:	2300      	movs	r3, #0
 80148ae:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80148b0:	7bfb      	ldrb	r3, [r7, #15]
 80148b2:	2b00      	cmp	r3, #0
 80148b4:	d102      	bne.n	80148bc <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80148b6:	687b      	ldr	r3, [r7, #4]
 80148b8:	2201      	movs	r2, #1
 80148ba:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80148bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80148be:	4618      	mov	r0, r3
 80148c0:	3710      	adds	r7, #16
 80148c2:	46bd      	mov	sp, r7
 80148c4:	bd80      	pop	{r7, pc}

080148c6 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80148c6:	b590      	push	{r4, r7, lr}
 80148c8:	b087      	sub	sp, #28
 80148ca:	af00      	add	r7, sp, #0
 80148cc:	60f8      	str	r0, [r7, #12]
 80148ce:	60b9      	str	r1, [r7, #8]
 80148d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80148d2:	2300      	movs	r3, #0
 80148d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80148d6:	68fb      	ldr	r3, [r7, #12]
 80148d8:	7f1b      	ldrb	r3, [r3, #28]
 80148da:	2b01      	cmp	r3, #1
 80148dc:	d101      	bne.n	80148e2 <HAL_RTC_SetTime+0x1c>
 80148de:	2302      	movs	r3, #2
 80148e0:	e087      	b.n	80149f2 <HAL_RTC_SetTime+0x12c>
 80148e2:	68fb      	ldr	r3, [r7, #12]
 80148e4:	2201      	movs	r2, #1
 80148e6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80148e8:	68fb      	ldr	r3, [r7, #12]
 80148ea:	2202      	movs	r2, #2
 80148ec:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80148ee:	687b      	ldr	r3, [r7, #4]
 80148f0:	2b00      	cmp	r3, #0
 80148f2:	d126      	bne.n	8014942 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80148f4:	68fb      	ldr	r3, [r7, #12]
 80148f6:	681b      	ldr	r3, [r3, #0]
 80148f8:	689b      	ldr	r3, [r3, #8]
 80148fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80148fe:	2b00      	cmp	r3, #0
 8014900:	d102      	bne.n	8014908 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8014902:	68bb      	ldr	r3, [r7, #8]
 8014904:	2200      	movs	r2, #0
 8014906:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8014908:	68bb      	ldr	r3, [r7, #8]
 801490a:	781b      	ldrb	r3, [r3, #0]
 801490c:	4618      	mov	r0, r3
 801490e:	f000 faa5 	bl	8014e5c <RTC_ByteToBcd2>
 8014912:	4603      	mov	r3, r0
 8014914:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8014916:	68bb      	ldr	r3, [r7, #8]
 8014918:	785b      	ldrb	r3, [r3, #1]
 801491a:	4618      	mov	r0, r3
 801491c:	f000 fa9e 	bl	8014e5c <RTC_ByteToBcd2>
 8014920:	4603      	mov	r3, r0
 8014922:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8014924:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8014926:	68bb      	ldr	r3, [r7, #8]
 8014928:	789b      	ldrb	r3, [r3, #2]
 801492a:	4618      	mov	r0, r3
 801492c:	f000 fa96 	bl	8014e5c <RTC_ByteToBcd2>
 8014930:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8014932:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8014936:	68bb      	ldr	r3, [r7, #8]
 8014938:	78db      	ldrb	r3, [r3, #3]
 801493a:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 801493c:	4313      	orrs	r3, r2
 801493e:	617b      	str	r3, [r7, #20]
 8014940:	e018      	b.n	8014974 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8014942:	68fb      	ldr	r3, [r7, #12]
 8014944:	681b      	ldr	r3, [r3, #0]
 8014946:	689b      	ldr	r3, [r3, #8]
 8014948:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801494c:	2b00      	cmp	r3, #0
 801494e:	d102      	bne.n	8014956 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8014950:	68bb      	ldr	r3, [r7, #8]
 8014952:	2200      	movs	r2, #0
 8014954:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8014956:	68bb      	ldr	r3, [r7, #8]
 8014958:	781b      	ldrb	r3, [r3, #0]
 801495a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 801495c:	68bb      	ldr	r3, [r7, #8]
 801495e:	785b      	ldrb	r3, [r3, #1]
 8014960:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8014962:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8014964:	68ba      	ldr	r2, [r7, #8]
 8014966:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8014968:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 801496a:	68bb      	ldr	r3, [r7, #8]
 801496c:	78db      	ldrb	r3, [r3, #3]
 801496e:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8014970:	4313      	orrs	r3, r2
 8014972:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8014974:	68fb      	ldr	r3, [r7, #12]
 8014976:	681b      	ldr	r3, [r3, #0]
 8014978:	22ca      	movs	r2, #202	; 0xca
 801497a:	625a      	str	r2, [r3, #36]	; 0x24
 801497c:	68fb      	ldr	r3, [r7, #12]
 801497e:	681b      	ldr	r3, [r3, #0]
 8014980:	2253      	movs	r2, #83	; 0x53
 8014982:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8014984:	68f8      	ldr	r0, [r7, #12]
 8014986:	f000 fa0d 	bl	8014da4 <RTC_EnterInitMode>
 801498a:	4603      	mov	r3, r0
 801498c:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 801498e:	7cfb      	ldrb	r3, [r7, #19]
 8014990:	2b00      	cmp	r3, #0
 8014992:	d120      	bne.n	80149d6 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8014994:	68fb      	ldr	r3, [r7, #12]
 8014996:	681a      	ldr	r2, [r3, #0]
 8014998:	697b      	ldr	r3, [r7, #20]
 801499a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 801499e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80149a2:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80149a4:	68fb      	ldr	r3, [r7, #12]
 80149a6:	681b      	ldr	r3, [r3, #0]
 80149a8:	689a      	ldr	r2, [r3, #8]
 80149aa:	68fb      	ldr	r3, [r7, #12]
 80149ac:	681b      	ldr	r3, [r3, #0]
 80149ae:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80149b2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80149b4:	68fb      	ldr	r3, [r7, #12]
 80149b6:	681b      	ldr	r3, [r3, #0]
 80149b8:	6899      	ldr	r1, [r3, #8]
 80149ba:	68bb      	ldr	r3, [r7, #8]
 80149bc:	68da      	ldr	r2, [r3, #12]
 80149be:	68bb      	ldr	r3, [r7, #8]
 80149c0:	691b      	ldr	r3, [r3, #16]
 80149c2:	431a      	orrs	r2, r3
 80149c4:	68fb      	ldr	r3, [r7, #12]
 80149c6:	681b      	ldr	r3, [r3, #0]
 80149c8:	430a      	orrs	r2, r1
 80149ca:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80149cc:	68f8      	ldr	r0, [r7, #12]
 80149ce:	f000 fa20 	bl	8014e12 <RTC_ExitInitMode>
 80149d2:	4603      	mov	r3, r0
 80149d4:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80149d6:	7cfb      	ldrb	r3, [r7, #19]
 80149d8:	2b00      	cmp	r3, #0
 80149da:	d102      	bne.n	80149e2 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80149dc:	68fb      	ldr	r3, [r7, #12]
 80149de:	2201      	movs	r2, #1
 80149e0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80149e2:	68fb      	ldr	r3, [r7, #12]
 80149e4:	681b      	ldr	r3, [r3, #0]
 80149e6:	22ff      	movs	r2, #255	; 0xff
 80149e8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80149ea:	68fb      	ldr	r3, [r7, #12]
 80149ec:	2200      	movs	r2, #0
 80149ee:	771a      	strb	r2, [r3, #28]

  return status;
 80149f0:	7cfb      	ldrb	r3, [r7, #19]
}
 80149f2:	4618      	mov	r0, r3
 80149f4:	371c      	adds	r7, #28
 80149f6:	46bd      	mov	sp, r7
 80149f8:	bd90      	pop	{r4, r7, pc}

080149fa <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80149fa:	b590      	push	{r4, r7, lr}
 80149fc:	b087      	sub	sp, #28
 80149fe:	af00      	add	r7, sp, #0
 8014a00:	60f8      	str	r0, [r7, #12]
 8014a02:	60b9      	str	r1, [r7, #8]
 8014a04:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8014a06:	2300      	movs	r3, #0
 8014a08:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8014a0a:	68fb      	ldr	r3, [r7, #12]
 8014a0c:	7f1b      	ldrb	r3, [r3, #28]
 8014a0e:	2b01      	cmp	r3, #1
 8014a10:	d101      	bne.n	8014a16 <HAL_RTC_SetDate+0x1c>
 8014a12:	2302      	movs	r3, #2
 8014a14:	e071      	b.n	8014afa <HAL_RTC_SetDate+0x100>
 8014a16:	68fb      	ldr	r3, [r7, #12]
 8014a18:	2201      	movs	r2, #1
 8014a1a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8014a1c:	68fb      	ldr	r3, [r7, #12]
 8014a1e:	2202      	movs	r2, #2
 8014a20:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8014a22:	687b      	ldr	r3, [r7, #4]
 8014a24:	2b00      	cmp	r3, #0
 8014a26:	d10e      	bne.n	8014a46 <HAL_RTC_SetDate+0x4c>
 8014a28:	68bb      	ldr	r3, [r7, #8]
 8014a2a:	785b      	ldrb	r3, [r3, #1]
 8014a2c:	f003 0310 	and.w	r3, r3, #16
 8014a30:	2b00      	cmp	r3, #0
 8014a32:	d008      	beq.n	8014a46 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8014a34:	68bb      	ldr	r3, [r7, #8]
 8014a36:	785b      	ldrb	r3, [r3, #1]
 8014a38:	f023 0310 	bic.w	r3, r3, #16
 8014a3c:	b2db      	uxtb	r3, r3
 8014a3e:	330a      	adds	r3, #10
 8014a40:	b2da      	uxtb	r2, r3
 8014a42:	68bb      	ldr	r3, [r7, #8]
 8014a44:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8014a46:	687b      	ldr	r3, [r7, #4]
 8014a48:	2b00      	cmp	r3, #0
 8014a4a:	d11c      	bne.n	8014a86 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8014a4c:	68bb      	ldr	r3, [r7, #8]
 8014a4e:	78db      	ldrb	r3, [r3, #3]
 8014a50:	4618      	mov	r0, r3
 8014a52:	f000 fa03 	bl	8014e5c <RTC_ByteToBcd2>
 8014a56:	4603      	mov	r3, r0
 8014a58:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8014a5a:	68bb      	ldr	r3, [r7, #8]
 8014a5c:	785b      	ldrb	r3, [r3, #1]
 8014a5e:	4618      	mov	r0, r3
 8014a60:	f000 f9fc 	bl	8014e5c <RTC_ByteToBcd2>
 8014a64:	4603      	mov	r3, r0
 8014a66:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8014a68:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8014a6a:	68bb      	ldr	r3, [r7, #8]
 8014a6c:	789b      	ldrb	r3, [r3, #2]
 8014a6e:	4618      	mov	r0, r3
 8014a70:	f000 f9f4 	bl	8014e5c <RTC_ByteToBcd2>
 8014a74:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8014a76:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8014a7a:	68bb      	ldr	r3, [r7, #8]
 8014a7c:	781b      	ldrb	r3, [r3, #0]
 8014a7e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8014a80:	4313      	orrs	r3, r2
 8014a82:	617b      	str	r3, [r7, #20]
 8014a84:	e00e      	b.n	8014aa4 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8014a86:	68bb      	ldr	r3, [r7, #8]
 8014a88:	78db      	ldrb	r3, [r3, #3]
 8014a8a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8014a8c:	68bb      	ldr	r3, [r7, #8]
 8014a8e:	785b      	ldrb	r3, [r3, #1]
 8014a90:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8014a92:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8014a94:	68ba      	ldr	r2, [r7, #8]
 8014a96:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8014a98:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8014a9a:	68bb      	ldr	r3, [r7, #8]
 8014a9c:	781b      	ldrb	r3, [r3, #0]
 8014a9e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8014aa0:	4313      	orrs	r3, r2
 8014aa2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8014aa4:	68fb      	ldr	r3, [r7, #12]
 8014aa6:	681b      	ldr	r3, [r3, #0]
 8014aa8:	22ca      	movs	r2, #202	; 0xca
 8014aaa:	625a      	str	r2, [r3, #36]	; 0x24
 8014aac:	68fb      	ldr	r3, [r7, #12]
 8014aae:	681b      	ldr	r3, [r3, #0]
 8014ab0:	2253      	movs	r2, #83	; 0x53
 8014ab2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8014ab4:	68f8      	ldr	r0, [r7, #12]
 8014ab6:	f000 f975 	bl	8014da4 <RTC_EnterInitMode>
 8014aba:	4603      	mov	r3, r0
 8014abc:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8014abe:	7cfb      	ldrb	r3, [r7, #19]
 8014ac0:	2b00      	cmp	r3, #0
 8014ac2:	d10c      	bne.n	8014ade <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8014ac4:	68fb      	ldr	r3, [r7, #12]
 8014ac6:	681a      	ldr	r2, [r3, #0]
 8014ac8:	697b      	ldr	r3, [r7, #20]
 8014aca:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8014ace:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8014ad2:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8014ad4:	68f8      	ldr	r0, [r7, #12]
 8014ad6:	f000 f99c 	bl	8014e12 <RTC_ExitInitMode>
 8014ada:	4603      	mov	r3, r0
 8014adc:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8014ade:	7cfb      	ldrb	r3, [r7, #19]
 8014ae0:	2b00      	cmp	r3, #0
 8014ae2:	d102      	bne.n	8014aea <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8014ae4:	68fb      	ldr	r3, [r7, #12]
 8014ae6:	2201      	movs	r2, #1
 8014ae8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8014aea:	68fb      	ldr	r3, [r7, #12]
 8014aec:	681b      	ldr	r3, [r3, #0]
 8014aee:	22ff      	movs	r2, #255	; 0xff
 8014af0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8014af2:	68fb      	ldr	r3, [r7, #12]
 8014af4:	2200      	movs	r2, #0
 8014af6:	771a      	strb	r2, [r3, #28]

  return status;
 8014af8:	7cfb      	ldrb	r3, [r7, #19]
}
 8014afa:	4618      	mov	r0, r3
 8014afc:	371c      	adds	r7, #28
 8014afe:	46bd      	mov	sp, r7
 8014b00:	bd90      	pop	{r4, r7, pc}

08014b02 <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8014b02:	b590      	push	{r4, r7, lr}
 8014b04:	b089      	sub	sp, #36	; 0x24
 8014b06:	af00      	add	r7, sp, #0
 8014b08:	60f8      	str	r0, [r7, #12]
 8014b0a:	60b9      	str	r1, [r7, #8]
 8014b0c:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8014b0e:	2300      	movs	r3, #0
 8014b10:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 8014b12:	2300      	movs	r3, #0
 8014b14:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 8014b16:	2300      	movs	r3, #0
 8014b18:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8014b1a:	68fb      	ldr	r3, [r7, #12]
 8014b1c:	7f1b      	ldrb	r3, [r3, #28]
 8014b1e:	2b01      	cmp	r3, #1
 8014b20:	d101      	bne.n	8014b26 <HAL_RTC_SetAlarm+0x24>
 8014b22:	2302      	movs	r3, #2
 8014b24:	e113      	b.n	8014d4e <HAL_RTC_SetAlarm+0x24c>
 8014b26:	68fb      	ldr	r3, [r7, #12]
 8014b28:	2201      	movs	r2, #1
 8014b2a:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8014b2c:	68fb      	ldr	r3, [r7, #12]
 8014b2e:	2202      	movs	r2, #2
 8014b30:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8014b32:	687b      	ldr	r3, [r7, #4]
 8014b34:	2b00      	cmp	r3, #0
 8014b36:	d137      	bne.n	8014ba8 <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8014b38:	68fb      	ldr	r3, [r7, #12]
 8014b3a:	681b      	ldr	r3, [r3, #0]
 8014b3c:	689b      	ldr	r3, [r3, #8]
 8014b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014b42:	2b00      	cmp	r3, #0
 8014b44:	d102      	bne.n	8014b4c <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8014b46:	68bb      	ldr	r3, [r7, #8]
 8014b48:	2200      	movs	r2, #0
 8014b4a:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8014b4c:	68bb      	ldr	r3, [r7, #8]
 8014b4e:	781b      	ldrb	r3, [r3, #0]
 8014b50:	4618      	mov	r0, r3
 8014b52:	f000 f983 	bl	8014e5c <RTC_ByteToBcd2>
 8014b56:	4603      	mov	r3, r0
 8014b58:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8014b5a:	68bb      	ldr	r3, [r7, #8]
 8014b5c:	785b      	ldrb	r3, [r3, #1]
 8014b5e:	4618      	mov	r0, r3
 8014b60:	f000 f97c 	bl	8014e5c <RTC_ByteToBcd2>
 8014b64:	4603      	mov	r3, r0
 8014b66:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8014b68:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8014b6a:	68bb      	ldr	r3, [r7, #8]
 8014b6c:	789b      	ldrb	r3, [r3, #2]
 8014b6e:	4618      	mov	r0, r3
 8014b70:	f000 f974 	bl	8014e5c <RTC_ByteToBcd2>
 8014b74:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8014b76:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8014b7a:	68bb      	ldr	r3, [r7, #8]
 8014b7c:	78db      	ldrb	r3, [r3, #3]
 8014b7e:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8014b80:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8014b84:	68bb      	ldr	r3, [r7, #8]
 8014b86:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014b8a:	4618      	mov	r0, r3
 8014b8c:	f000 f966 	bl	8014e5c <RTC_ByteToBcd2>
 8014b90:	4603      	mov	r3, r0
 8014b92:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8014b94:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8014b98:	68bb      	ldr	r3, [r7, #8]
 8014b9a:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8014b9c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8014b9e:	68bb      	ldr	r3, [r7, #8]
 8014ba0:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8014ba2:	4313      	orrs	r3, r2
 8014ba4:	61fb      	str	r3, [r7, #28]
 8014ba6:	e023      	b.n	8014bf0 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8014ba8:	68fb      	ldr	r3, [r7, #12]
 8014baa:	681b      	ldr	r3, [r3, #0]
 8014bac:	689b      	ldr	r3, [r3, #8]
 8014bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014bb2:	2b00      	cmp	r3, #0
 8014bb4:	d102      	bne.n	8014bbc <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8014bb6:	68bb      	ldr	r3, [r7, #8]
 8014bb8:	2200      	movs	r2, #0
 8014bba:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8014bbc:	68bb      	ldr	r3, [r7, #8]
 8014bbe:	781b      	ldrb	r3, [r3, #0]
 8014bc0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8014bc2:	68bb      	ldr	r3, [r7, #8]
 8014bc4:	785b      	ldrb	r3, [r3, #1]
 8014bc6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8014bc8:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8014bca:	68ba      	ldr	r2, [r7, #8]
 8014bcc:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8014bce:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8014bd0:	68bb      	ldr	r3, [r7, #8]
 8014bd2:	78db      	ldrb	r3, [r3, #3]
 8014bd4:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8014bd6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8014bd8:	68bb      	ldr	r3, [r7, #8]
 8014bda:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014bde:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8014be0:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8014be2:	68bb      	ldr	r3, [r7, #8]
 8014be4:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8014be6:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8014be8:	68bb      	ldr	r3, [r7, #8]
 8014bea:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8014bec:	4313      	orrs	r3, r2
 8014bee:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8014bf0:	68bb      	ldr	r3, [r7, #8]
 8014bf2:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8014bf4:	68bb      	ldr	r3, [r7, #8]
 8014bf6:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8014bf8:	4313      	orrs	r3, r2
 8014bfa:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8014bfc:	68fb      	ldr	r3, [r7, #12]
 8014bfe:	681b      	ldr	r3, [r3, #0]
 8014c00:	22ca      	movs	r2, #202	; 0xca
 8014c02:	625a      	str	r2, [r3, #36]	; 0x24
 8014c04:	68fb      	ldr	r3, [r7, #12]
 8014c06:	681b      	ldr	r3, [r3, #0]
 8014c08:	2253      	movs	r2, #83	; 0x53
 8014c0a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8014c0c:	68bb      	ldr	r3, [r7, #8]
 8014c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014c10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014c14:	d148      	bne.n	8014ca8 <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8014c16:	68fb      	ldr	r3, [r7, #12]
 8014c18:	681b      	ldr	r3, [r3, #0]
 8014c1a:	689a      	ldr	r2, [r3, #8]
 8014c1c:	68fb      	ldr	r3, [r7, #12]
 8014c1e:	681b      	ldr	r3, [r3, #0]
 8014c20:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8014c24:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8014c26:	68fb      	ldr	r3, [r7, #12]
 8014c28:	681b      	ldr	r3, [r3, #0]
 8014c2a:	689a      	ldr	r2, [r3, #8]
 8014c2c:	68fb      	ldr	r3, [r7, #12]
 8014c2e:	681b      	ldr	r3, [r3, #0]
 8014c30:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8014c34:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8014c36:	68fb      	ldr	r3, [r7, #12]
 8014c38:	681b      	ldr	r3, [r3, #0]
 8014c3a:	68db      	ldr	r3, [r3, #12]
 8014c3c:	b2da      	uxtb	r2, r3
 8014c3e:	68fb      	ldr	r3, [r7, #12]
 8014c40:	681b      	ldr	r3, [r3, #0]
 8014c42:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8014c46:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8014c48:	f7fc fd94 	bl	8011774 <HAL_GetTick>
 8014c4c:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8014c4e:	e013      	b.n	8014c78 <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8014c50:	f7fc fd90 	bl	8011774 <HAL_GetTick>
 8014c54:	4602      	mov	r2, r0
 8014c56:	69bb      	ldr	r3, [r7, #24]
 8014c58:	1ad3      	subs	r3, r2, r3
 8014c5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8014c5e:	d90b      	bls.n	8014c78 <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8014c60:	68fb      	ldr	r3, [r7, #12]
 8014c62:	681b      	ldr	r3, [r3, #0]
 8014c64:	22ff      	movs	r2, #255	; 0xff
 8014c66:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8014c68:	68fb      	ldr	r3, [r7, #12]
 8014c6a:	2203      	movs	r2, #3
 8014c6c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8014c6e:	68fb      	ldr	r3, [r7, #12]
 8014c70:	2200      	movs	r2, #0
 8014c72:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8014c74:	2303      	movs	r3, #3
 8014c76:	e06a      	b.n	8014d4e <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8014c78:	68fb      	ldr	r3, [r7, #12]
 8014c7a:	681b      	ldr	r3, [r3, #0]
 8014c7c:	68db      	ldr	r3, [r3, #12]
 8014c7e:	f003 0301 	and.w	r3, r3, #1
 8014c82:	2b00      	cmp	r3, #0
 8014c84:	d0e4      	beq.n	8014c50 <HAL_RTC_SetAlarm+0x14e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8014c86:	68fb      	ldr	r3, [r7, #12]
 8014c88:	681b      	ldr	r3, [r3, #0]
 8014c8a:	69fa      	ldr	r2, [r7, #28]
 8014c8c:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8014c8e:	68fb      	ldr	r3, [r7, #12]
 8014c90:	681b      	ldr	r3, [r3, #0]
 8014c92:	697a      	ldr	r2, [r7, #20]
 8014c94:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8014c96:	68fb      	ldr	r3, [r7, #12]
 8014c98:	681b      	ldr	r3, [r3, #0]
 8014c9a:	689a      	ldr	r2, [r3, #8]
 8014c9c:	68fb      	ldr	r3, [r7, #12]
 8014c9e:	681b      	ldr	r3, [r3, #0]
 8014ca0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8014ca4:	609a      	str	r2, [r3, #8]
 8014ca6:	e047      	b.n	8014d38 <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8014ca8:	68fb      	ldr	r3, [r7, #12]
 8014caa:	681b      	ldr	r3, [r3, #0]
 8014cac:	689a      	ldr	r2, [r3, #8]
 8014cae:	68fb      	ldr	r3, [r7, #12]
 8014cb0:	681b      	ldr	r3, [r3, #0]
 8014cb2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8014cb6:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8014cb8:	68fb      	ldr	r3, [r7, #12]
 8014cba:	681b      	ldr	r3, [r3, #0]
 8014cbc:	689a      	ldr	r2, [r3, #8]
 8014cbe:	68fb      	ldr	r3, [r7, #12]
 8014cc0:	681b      	ldr	r3, [r3, #0]
 8014cc2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8014cc6:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8014cc8:	68fb      	ldr	r3, [r7, #12]
 8014cca:	681b      	ldr	r3, [r3, #0]
 8014ccc:	68db      	ldr	r3, [r3, #12]
 8014cce:	b2da      	uxtb	r2, r3
 8014cd0:	68fb      	ldr	r3, [r7, #12]
 8014cd2:	681b      	ldr	r3, [r3, #0]
 8014cd4:	f462 7220 	orn	r2, r2, #640	; 0x280
 8014cd8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8014cda:	f7fc fd4b 	bl	8011774 <HAL_GetTick>
 8014cde:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8014ce0:	e013      	b.n	8014d0a <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8014ce2:	f7fc fd47 	bl	8011774 <HAL_GetTick>
 8014ce6:	4602      	mov	r2, r0
 8014ce8:	69bb      	ldr	r3, [r7, #24]
 8014cea:	1ad3      	subs	r3, r2, r3
 8014cec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8014cf0:	d90b      	bls.n	8014d0a <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8014cf2:	68fb      	ldr	r3, [r7, #12]
 8014cf4:	681b      	ldr	r3, [r3, #0]
 8014cf6:	22ff      	movs	r2, #255	; 0xff
 8014cf8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8014cfa:	68fb      	ldr	r3, [r7, #12]
 8014cfc:	2203      	movs	r2, #3
 8014cfe:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8014d00:	68fb      	ldr	r3, [r7, #12]
 8014d02:	2200      	movs	r2, #0
 8014d04:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8014d06:	2303      	movs	r3, #3
 8014d08:	e021      	b.n	8014d4e <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8014d0a:	68fb      	ldr	r3, [r7, #12]
 8014d0c:	681b      	ldr	r3, [r3, #0]
 8014d0e:	68db      	ldr	r3, [r3, #12]
 8014d10:	f003 0302 	and.w	r3, r3, #2
 8014d14:	2b00      	cmp	r3, #0
 8014d16:	d0e4      	beq.n	8014ce2 <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8014d18:	68fb      	ldr	r3, [r7, #12]
 8014d1a:	681b      	ldr	r3, [r3, #0]
 8014d1c:	69fa      	ldr	r2, [r7, #28]
 8014d1e:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8014d20:	68fb      	ldr	r3, [r7, #12]
 8014d22:	681b      	ldr	r3, [r3, #0]
 8014d24:	697a      	ldr	r2, [r7, #20]
 8014d26:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8014d28:	68fb      	ldr	r3, [r7, #12]
 8014d2a:	681b      	ldr	r3, [r3, #0]
 8014d2c:	689a      	ldr	r2, [r3, #8]
 8014d2e:	68fb      	ldr	r3, [r7, #12]
 8014d30:	681b      	ldr	r3, [r3, #0]
 8014d32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8014d36:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8014d38:	68fb      	ldr	r3, [r7, #12]
 8014d3a:	681b      	ldr	r3, [r3, #0]
 8014d3c:	22ff      	movs	r2, #255	; 0xff
 8014d3e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8014d40:	68fb      	ldr	r3, [r7, #12]
 8014d42:	2201      	movs	r2, #1
 8014d44:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8014d46:	68fb      	ldr	r3, [r7, #12]
 8014d48:	2200      	movs	r2, #0
 8014d4a:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8014d4c:	2300      	movs	r3, #0
}
 8014d4e:	4618      	mov	r0, r3
 8014d50:	3724      	adds	r7, #36	; 0x24
 8014d52:	46bd      	mov	sp, r7
 8014d54:	bd90      	pop	{r4, r7, pc}
	...

08014d58 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8014d58:	b580      	push	{r7, lr}
 8014d5a:	b084      	sub	sp, #16
 8014d5c:	af00      	add	r7, sp, #0
 8014d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8014d60:	2300      	movs	r3, #0
 8014d62:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8014d64:	687b      	ldr	r3, [r7, #4]
 8014d66:	681b      	ldr	r3, [r3, #0]
 8014d68:	4a0d      	ldr	r2, [pc, #52]	; (8014da0 <HAL_RTC_WaitForSynchro+0x48>)
 8014d6a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8014d6c:	f7fc fd02 	bl	8011774 <HAL_GetTick>
 8014d70:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8014d72:	e009      	b.n	8014d88 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8014d74:	f7fc fcfe 	bl	8011774 <HAL_GetTick>
 8014d78:	4602      	mov	r2, r0
 8014d7a:	68fb      	ldr	r3, [r7, #12]
 8014d7c:	1ad3      	subs	r3, r2, r3
 8014d7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8014d82:	d901      	bls.n	8014d88 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8014d84:	2303      	movs	r3, #3
 8014d86:	e007      	b.n	8014d98 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8014d88:	687b      	ldr	r3, [r7, #4]
 8014d8a:	681b      	ldr	r3, [r3, #0]
 8014d8c:	68db      	ldr	r3, [r3, #12]
 8014d8e:	f003 0320 	and.w	r3, r3, #32
 8014d92:	2b00      	cmp	r3, #0
 8014d94:	d0ee      	beq.n	8014d74 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8014d96:	2300      	movs	r3, #0
}
 8014d98:	4618      	mov	r0, r3
 8014d9a:	3710      	adds	r7, #16
 8014d9c:	46bd      	mov	sp, r7
 8014d9e:	bd80      	pop	{r7, pc}
 8014da0:	00013f5f 	.word	0x00013f5f

08014da4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8014da4:	b580      	push	{r7, lr}
 8014da6:	b084      	sub	sp, #16
 8014da8:	af00      	add	r7, sp, #0
 8014daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8014dac:	2300      	movs	r3, #0
 8014dae:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8014db0:	2300      	movs	r3, #0
 8014db2:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8014db4:	687b      	ldr	r3, [r7, #4]
 8014db6:	681b      	ldr	r3, [r3, #0]
 8014db8:	68db      	ldr	r3, [r3, #12]
 8014dba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014dbe:	2b00      	cmp	r3, #0
 8014dc0:	d122      	bne.n	8014e08 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8014dc2:	687b      	ldr	r3, [r7, #4]
 8014dc4:	681b      	ldr	r3, [r3, #0]
 8014dc6:	68da      	ldr	r2, [r3, #12]
 8014dc8:	687b      	ldr	r3, [r7, #4]
 8014dca:	681b      	ldr	r3, [r3, #0]
 8014dcc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8014dd0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8014dd2:	f7fc fccf 	bl	8011774 <HAL_GetTick>
 8014dd6:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8014dd8:	e00c      	b.n	8014df4 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8014dda:	f7fc fccb 	bl	8011774 <HAL_GetTick>
 8014dde:	4602      	mov	r2, r0
 8014de0:	68bb      	ldr	r3, [r7, #8]
 8014de2:	1ad3      	subs	r3, r2, r3
 8014de4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8014de8:	d904      	bls.n	8014df4 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8014dea:	687b      	ldr	r3, [r7, #4]
 8014dec:	2204      	movs	r2, #4
 8014dee:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8014df0:	2301      	movs	r3, #1
 8014df2:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8014df4:	687b      	ldr	r3, [r7, #4]
 8014df6:	681b      	ldr	r3, [r3, #0]
 8014df8:	68db      	ldr	r3, [r3, #12]
 8014dfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014dfe:	2b00      	cmp	r3, #0
 8014e00:	d102      	bne.n	8014e08 <RTC_EnterInitMode+0x64>
 8014e02:	7bfb      	ldrb	r3, [r7, #15]
 8014e04:	2b01      	cmp	r3, #1
 8014e06:	d1e8      	bne.n	8014dda <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8014e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8014e0a:	4618      	mov	r0, r3
 8014e0c:	3710      	adds	r7, #16
 8014e0e:	46bd      	mov	sp, r7
 8014e10:	bd80      	pop	{r7, pc}

08014e12 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8014e12:	b580      	push	{r7, lr}
 8014e14:	b084      	sub	sp, #16
 8014e16:	af00      	add	r7, sp, #0
 8014e18:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8014e1a:	2300      	movs	r3, #0
 8014e1c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8014e1e:	687b      	ldr	r3, [r7, #4]
 8014e20:	681b      	ldr	r3, [r3, #0]
 8014e22:	68da      	ldr	r2, [r3, #12]
 8014e24:	687b      	ldr	r3, [r7, #4]
 8014e26:	681b      	ldr	r3, [r3, #0]
 8014e28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8014e2c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8014e2e:	687b      	ldr	r3, [r7, #4]
 8014e30:	681b      	ldr	r3, [r3, #0]
 8014e32:	689b      	ldr	r3, [r3, #8]
 8014e34:	f003 0320 	and.w	r3, r3, #32
 8014e38:	2b00      	cmp	r3, #0
 8014e3a:	d10a      	bne.n	8014e52 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8014e3c:	6878      	ldr	r0, [r7, #4]
 8014e3e:	f7ff ff8b 	bl	8014d58 <HAL_RTC_WaitForSynchro>
 8014e42:	4603      	mov	r3, r0
 8014e44:	2b00      	cmp	r3, #0
 8014e46:	d004      	beq.n	8014e52 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8014e48:	687b      	ldr	r3, [r7, #4]
 8014e4a:	2204      	movs	r2, #4
 8014e4c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8014e4e:	2301      	movs	r3, #1
 8014e50:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8014e52:	7bfb      	ldrb	r3, [r7, #15]
}
 8014e54:	4618      	mov	r0, r3
 8014e56:	3710      	adds	r7, #16
 8014e58:	46bd      	mov	sp, r7
 8014e5a:	bd80      	pop	{r7, pc}

08014e5c <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8014e5c:	b480      	push	{r7}
 8014e5e:	b085      	sub	sp, #20
 8014e60:	af00      	add	r7, sp, #0
 8014e62:	4603      	mov	r3, r0
 8014e64:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8014e66:	2300      	movs	r3, #0
 8014e68:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8014e6a:	e005      	b.n	8014e78 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8014e6c:	68fb      	ldr	r3, [r7, #12]
 8014e6e:	3301      	adds	r3, #1
 8014e70:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8014e72:	79fb      	ldrb	r3, [r7, #7]
 8014e74:	3b0a      	subs	r3, #10
 8014e76:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8014e78:	79fb      	ldrb	r3, [r7, #7]
 8014e7a:	2b09      	cmp	r3, #9
 8014e7c:	d8f6      	bhi.n	8014e6c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8014e7e:	68fb      	ldr	r3, [r7, #12]
 8014e80:	b2db      	uxtb	r3, r3
 8014e82:	011b      	lsls	r3, r3, #4
 8014e84:	b2da      	uxtb	r2, r3
 8014e86:	79fb      	ldrb	r3, [r7, #7]
 8014e88:	4313      	orrs	r3, r2
 8014e8a:	b2db      	uxtb	r3, r3
}
 8014e8c:	4618      	mov	r0, r3
 8014e8e:	3714      	adds	r7, #20
 8014e90:	46bd      	mov	sp, r7
 8014e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e96:	4770      	bx	lr

08014e98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8014e98:	b580      	push	{r7, lr}
 8014e9a:	b082      	sub	sp, #8
 8014e9c:	af00      	add	r7, sp, #0
 8014e9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8014ea0:	687b      	ldr	r3, [r7, #4]
 8014ea2:	2b00      	cmp	r3, #0
 8014ea4:	d101      	bne.n	8014eaa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8014ea6:	2301      	movs	r3, #1
 8014ea8:	e041      	b.n	8014f2e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8014eaa:	687b      	ldr	r3, [r7, #4]
 8014eac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014eb0:	b2db      	uxtb	r3, r3
 8014eb2:	2b00      	cmp	r3, #0
 8014eb4:	d106      	bne.n	8014ec4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8014eb6:	687b      	ldr	r3, [r7, #4]
 8014eb8:	2200      	movs	r2, #0
 8014eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8014ebe:	6878      	ldr	r0, [r7, #4]
 8014ec0:	f7fc fa18 	bl	80112f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8014ec4:	687b      	ldr	r3, [r7, #4]
 8014ec6:	2202      	movs	r2, #2
 8014ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8014ecc:	687b      	ldr	r3, [r7, #4]
 8014ece:	681a      	ldr	r2, [r3, #0]
 8014ed0:	687b      	ldr	r3, [r7, #4]
 8014ed2:	3304      	adds	r3, #4
 8014ed4:	4619      	mov	r1, r3
 8014ed6:	4610      	mov	r0, r2
 8014ed8:	f000 fb16 	bl	8015508 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8014edc:	687b      	ldr	r3, [r7, #4]
 8014ede:	2201      	movs	r2, #1
 8014ee0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8014ee4:	687b      	ldr	r3, [r7, #4]
 8014ee6:	2201      	movs	r2, #1
 8014ee8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8014eec:	687b      	ldr	r3, [r7, #4]
 8014eee:	2201      	movs	r2, #1
 8014ef0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8014ef4:	687b      	ldr	r3, [r7, #4]
 8014ef6:	2201      	movs	r2, #1
 8014ef8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8014efc:	687b      	ldr	r3, [r7, #4]
 8014efe:	2201      	movs	r2, #1
 8014f00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8014f04:	687b      	ldr	r3, [r7, #4]
 8014f06:	2201      	movs	r2, #1
 8014f08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8014f0c:	687b      	ldr	r3, [r7, #4]
 8014f0e:	2201      	movs	r2, #1
 8014f10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8014f14:	687b      	ldr	r3, [r7, #4]
 8014f16:	2201      	movs	r2, #1
 8014f18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014f1c:	687b      	ldr	r3, [r7, #4]
 8014f1e:	2201      	movs	r2, #1
 8014f20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8014f24:	687b      	ldr	r3, [r7, #4]
 8014f26:	2201      	movs	r2, #1
 8014f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8014f2c:	2300      	movs	r3, #0
}
 8014f2e:	4618      	mov	r0, r3
 8014f30:	3708      	adds	r7, #8
 8014f32:	46bd      	mov	sp, r7
 8014f34:	bd80      	pop	{r7, pc}

08014f36 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8014f36:	b580      	push	{r7, lr}
 8014f38:	b082      	sub	sp, #8
 8014f3a:	af00      	add	r7, sp, #0
 8014f3c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8014f3e:	687b      	ldr	r3, [r7, #4]
 8014f40:	2b00      	cmp	r3, #0
 8014f42:	d101      	bne.n	8014f48 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8014f44:	2301      	movs	r3, #1
 8014f46:	e041      	b.n	8014fcc <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8014f48:	687b      	ldr	r3, [r7, #4]
 8014f4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014f4e:	b2db      	uxtb	r3, r3
 8014f50:	2b00      	cmp	r3, #0
 8014f52:	d106      	bne.n	8014f62 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8014f54:	687b      	ldr	r3, [r7, #4]
 8014f56:	2200      	movs	r2, #0
 8014f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8014f5c:	6878      	ldr	r0, [r7, #4]
 8014f5e:	f7fc f9a1 	bl	80112a4 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8014f62:	687b      	ldr	r3, [r7, #4]
 8014f64:	2202      	movs	r2, #2
 8014f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8014f6a:	687b      	ldr	r3, [r7, #4]
 8014f6c:	681a      	ldr	r2, [r3, #0]
 8014f6e:	687b      	ldr	r3, [r7, #4]
 8014f70:	3304      	adds	r3, #4
 8014f72:	4619      	mov	r1, r3
 8014f74:	4610      	mov	r0, r2
 8014f76:	f000 fac7 	bl	8015508 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8014f7a:	687b      	ldr	r3, [r7, #4]
 8014f7c:	2201      	movs	r2, #1
 8014f7e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8014f82:	687b      	ldr	r3, [r7, #4]
 8014f84:	2201      	movs	r2, #1
 8014f86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8014f8a:	687b      	ldr	r3, [r7, #4]
 8014f8c:	2201      	movs	r2, #1
 8014f8e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8014f92:	687b      	ldr	r3, [r7, #4]
 8014f94:	2201      	movs	r2, #1
 8014f96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8014f9a:	687b      	ldr	r3, [r7, #4]
 8014f9c:	2201      	movs	r2, #1
 8014f9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8014fa2:	687b      	ldr	r3, [r7, #4]
 8014fa4:	2201      	movs	r2, #1
 8014fa6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8014faa:	687b      	ldr	r3, [r7, #4]
 8014fac:	2201      	movs	r2, #1
 8014fae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8014fb2:	687b      	ldr	r3, [r7, #4]
 8014fb4:	2201      	movs	r2, #1
 8014fb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014fba:	687b      	ldr	r3, [r7, #4]
 8014fbc:	2201      	movs	r2, #1
 8014fbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8014fc2:	687b      	ldr	r3, [r7, #4]
 8014fc4:	2201      	movs	r2, #1
 8014fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8014fca:	2300      	movs	r3, #0
}
 8014fcc:	4618      	mov	r0, r3
 8014fce:	3708      	adds	r7, #8
 8014fd0:	46bd      	mov	sp, r7
 8014fd2:	bd80      	pop	{r7, pc}

08014fd4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8014fd4:	b580      	push	{r7, lr}
 8014fd6:	b082      	sub	sp, #8
 8014fd8:	af00      	add	r7, sp, #0
 8014fda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8014fdc:	687b      	ldr	r3, [r7, #4]
 8014fde:	2b00      	cmp	r3, #0
 8014fe0:	d101      	bne.n	8014fe6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8014fe2:	2301      	movs	r3, #1
 8014fe4:	e041      	b.n	801506a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8014fe6:	687b      	ldr	r3, [r7, #4]
 8014fe8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014fec:	b2db      	uxtb	r3, r3
 8014fee:	2b00      	cmp	r3, #0
 8014ff0:	d106      	bne.n	8015000 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8014ff2:	687b      	ldr	r3, [r7, #4]
 8014ff4:	2200      	movs	r2, #0
 8014ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8014ffa:	6878      	ldr	r0, [r7, #4]
 8014ffc:	f000 f839 	bl	8015072 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015000:	687b      	ldr	r3, [r7, #4]
 8015002:	2202      	movs	r2, #2
 8015004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8015008:	687b      	ldr	r3, [r7, #4]
 801500a:	681a      	ldr	r2, [r3, #0]
 801500c:	687b      	ldr	r3, [r7, #4]
 801500e:	3304      	adds	r3, #4
 8015010:	4619      	mov	r1, r3
 8015012:	4610      	mov	r0, r2
 8015014:	f000 fa78 	bl	8015508 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8015018:	687b      	ldr	r3, [r7, #4]
 801501a:	2201      	movs	r2, #1
 801501c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8015020:	687b      	ldr	r3, [r7, #4]
 8015022:	2201      	movs	r2, #1
 8015024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8015028:	687b      	ldr	r3, [r7, #4]
 801502a:	2201      	movs	r2, #1
 801502c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8015030:	687b      	ldr	r3, [r7, #4]
 8015032:	2201      	movs	r2, #1
 8015034:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8015038:	687b      	ldr	r3, [r7, #4]
 801503a:	2201      	movs	r2, #1
 801503c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8015040:	687b      	ldr	r3, [r7, #4]
 8015042:	2201      	movs	r2, #1
 8015044:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8015048:	687b      	ldr	r3, [r7, #4]
 801504a:	2201      	movs	r2, #1
 801504c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8015050:	687b      	ldr	r3, [r7, #4]
 8015052:	2201      	movs	r2, #1
 8015054:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015058:	687b      	ldr	r3, [r7, #4]
 801505a:	2201      	movs	r2, #1
 801505c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8015060:	687b      	ldr	r3, [r7, #4]
 8015062:	2201      	movs	r2, #1
 8015064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8015068:	2300      	movs	r3, #0
}
 801506a:	4618      	mov	r0, r3
 801506c:	3708      	adds	r7, #8
 801506e:	46bd      	mov	sp, r7
 8015070:	bd80      	pop	{r7, pc}

08015072 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8015072:	b480      	push	{r7}
 8015074:	b083      	sub	sp, #12
 8015076:	af00      	add	r7, sp, #0
 8015078:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 801507a:	bf00      	nop
 801507c:	370c      	adds	r7, #12
 801507e:	46bd      	mov	sp, r7
 8015080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015084:	4770      	bx	lr

08015086 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8015086:	b580      	push	{r7, lr}
 8015088:	b084      	sub	sp, #16
 801508a:	af00      	add	r7, sp, #0
 801508c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 801508e:	687b      	ldr	r3, [r7, #4]
 8015090:	681b      	ldr	r3, [r3, #0]
 8015092:	68db      	ldr	r3, [r3, #12]
 8015094:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8015096:	687b      	ldr	r3, [r7, #4]
 8015098:	681b      	ldr	r3, [r3, #0]
 801509a:	691b      	ldr	r3, [r3, #16]
 801509c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 801509e:	68bb      	ldr	r3, [r7, #8]
 80150a0:	f003 0302 	and.w	r3, r3, #2
 80150a4:	2b00      	cmp	r3, #0
 80150a6:	d020      	beq.n	80150ea <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80150a8:	68fb      	ldr	r3, [r7, #12]
 80150aa:	f003 0302 	and.w	r3, r3, #2
 80150ae:	2b00      	cmp	r3, #0
 80150b0:	d01b      	beq.n	80150ea <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80150b2:	687b      	ldr	r3, [r7, #4]
 80150b4:	681b      	ldr	r3, [r3, #0]
 80150b6:	f06f 0202 	mvn.w	r2, #2
 80150ba:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80150bc:	687b      	ldr	r3, [r7, #4]
 80150be:	2201      	movs	r2, #1
 80150c0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80150c2:	687b      	ldr	r3, [r7, #4]
 80150c4:	681b      	ldr	r3, [r3, #0]
 80150c6:	699b      	ldr	r3, [r3, #24]
 80150c8:	f003 0303 	and.w	r3, r3, #3
 80150cc:	2b00      	cmp	r3, #0
 80150ce:	d003      	beq.n	80150d8 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80150d0:	6878      	ldr	r0, [r7, #4]
 80150d2:	f000 f9fb 	bl	80154cc <HAL_TIM_IC_CaptureCallback>
 80150d6:	e005      	b.n	80150e4 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80150d8:	6878      	ldr	r0, [r7, #4]
 80150da:	f000 f9ed 	bl	80154b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80150de:	6878      	ldr	r0, [r7, #4]
 80150e0:	f000 f9fe 	bl	80154e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80150e4:	687b      	ldr	r3, [r7, #4]
 80150e6:	2200      	movs	r2, #0
 80150e8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80150ea:	68bb      	ldr	r3, [r7, #8]
 80150ec:	f003 0304 	and.w	r3, r3, #4
 80150f0:	2b00      	cmp	r3, #0
 80150f2:	d020      	beq.n	8015136 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80150f4:	68fb      	ldr	r3, [r7, #12]
 80150f6:	f003 0304 	and.w	r3, r3, #4
 80150fa:	2b00      	cmp	r3, #0
 80150fc:	d01b      	beq.n	8015136 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80150fe:	687b      	ldr	r3, [r7, #4]
 8015100:	681b      	ldr	r3, [r3, #0]
 8015102:	f06f 0204 	mvn.w	r2, #4
 8015106:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8015108:	687b      	ldr	r3, [r7, #4]
 801510a:	2202      	movs	r2, #2
 801510c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801510e:	687b      	ldr	r3, [r7, #4]
 8015110:	681b      	ldr	r3, [r3, #0]
 8015112:	699b      	ldr	r3, [r3, #24]
 8015114:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8015118:	2b00      	cmp	r3, #0
 801511a:	d003      	beq.n	8015124 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801511c:	6878      	ldr	r0, [r7, #4]
 801511e:	f000 f9d5 	bl	80154cc <HAL_TIM_IC_CaptureCallback>
 8015122:	e005      	b.n	8015130 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8015124:	6878      	ldr	r0, [r7, #4]
 8015126:	f000 f9c7 	bl	80154b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801512a:	6878      	ldr	r0, [r7, #4]
 801512c:	f000 f9d8 	bl	80154e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8015130:	687b      	ldr	r3, [r7, #4]
 8015132:	2200      	movs	r2, #0
 8015134:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8015136:	68bb      	ldr	r3, [r7, #8]
 8015138:	f003 0308 	and.w	r3, r3, #8
 801513c:	2b00      	cmp	r3, #0
 801513e:	d020      	beq.n	8015182 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8015140:	68fb      	ldr	r3, [r7, #12]
 8015142:	f003 0308 	and.w	r3, r3, #8
 8015146:	2b00      	cmp	r3, #0
 8015148:	d01b      	beq.n	8015182 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 801514a:	687b      	ldr	r3, [r7, #4]
 801514c:	681b      	ldr	r3, [r3, #0]
 801514e:	f06f 0208 	mvn.w	r2, #8
 8015152:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8015154:	687b      	ldr	r3, [r7, #4]
 8015156:	2204      	movs	r2, #4
 8015158:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801515a:	687b      	ldr	r3, [r7, #4]
 801515c:	681b      	ldr	r3, [r3, #0]
 801515e:	69db      	ldr	r3, [r3, #28]
 8015160:	f003 0303 	and.w	r3, r3, #3
 8015164:	2b00      	cmp	r3, #0
 8015166:	d003      	beq.n	8015170 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8015168:	6878      	ldr	r0, [r7, #4]
 801516a:	f000 f9af 	bl	80154cc <HAL_TIM_IC_CaptureCallback>
 801516e:	e005      	b.n	801517c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8015170:	6878      	ldr	r0, [r7, #4]
 8015172:	f000 f9a1 	bl	80154b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8015176:	6878      	ldr	r0, [r7, #4]
 8015178:	f000 f9b2 	bl	80154e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801517c:	687b      	ldr	r3, [r7, #4]
 801517e:	2200      	movs	r2, #0
 8015180:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8015182:	68bb      	ldr	r3, [r7, #8]
 8015184:	f003 0310 	and.w	r3, r3, #16
 8015188:	2b00      	cmp	r3, #0
 801518a:	d020      	beq.n	80151ce <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 801518c:	68fb      	ldr	r3, [r7, #12]
 801518e:	f003 0310 	and.w	r3, r3, #16
 8015192:	2b00      	cmp	r3, #0
 8015194:	d01b      	beq.n	80151ce <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8015196:	687b      	ldr	r3, [r7, #4]
 8015198:	681b      	ldr	r3, [r3, #0]
 801519a:	f06f 0210 	mvn.w	r2, #16
 801519e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80151a0:	687b      	ldr	r3, [r7, #4]
 80151a2:	2208      	movs	r2, #8
 80151a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80151a6:	687b      	ldr	r3, [r7, #4]
 80151a8:	681b      	ldr	r3, [r3, #0]
 80151aa:	69db      	ldr	r3, [r3, #28]
 80151ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80151b0:	2b00      	cmp	r3, #0
 80151b2:	d003      	beq.n	80151bc <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80151b4:	6878      	ldr	r0, [r7, #4]
 80151b6:	f000 f989 	bl	80154cc <HAL_TIM_IC_CaptureCallback>
 80151ba:	e005      	b.n	80151c8 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80151bc:	6878      	ldr	r0, [r7, #4]
 80151be:	f000 f97b 	bl	80154b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80151c2:	6878      	ldr	r0, [r7, #4]
 80151c4:	f000 f98c 	bl	80154e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80151c8:	687b      	ldr	r3, [r7, #4]
 80151ca:	2200      	movs	r2, #0
 80151cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80151ce:	68bb      	ldr	r3, [r7, #8]
 80151d0:	f003 0301 	and.w	r3, r3, #1
 80151d4:	2b00      	cmp	r3, #0
 80151d6:	d00c      	beq.n	80151f2 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80151d8:	68fb      	ldr	r3, [r7, #12]
 80151da:	f003 0301 	and.w	r3, r3, #1
 80151de:	2b00      	cmp	r3, #0
 80151e0:	d007      	beq.n	80151f2 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80151e2:	687b      	ldr	r3, [r7, #4]
 80151e4:	681b      	ldr	r3, [r3, #0]
 80151e6:	f06f 0201 	mvn.w	r2, #1
 80151ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80151ec:	6878      	ldr	r0, [r7, #4]
 80151ee:	f000 f959 	bl	80154a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80151f2:	68bb      	ldr	r3, [r7, #8]
 80151f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80151f8:	2b00      	cmp	r3, #0
 80151fa:	d00c      	beq.n	8015216 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80151fc:	68fb      	ldr	r3, [r7, #12]
 80151fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015202:	2b00      	cmp	r3, #0
 8015204:	d007      	beq.n	8015216 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8015206:	687b      	ldr	r3, [r7, #4]
 8015208:	681b      	ldr	r3, [r3, #0]
 801520a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801520e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8015210:	6878      	ldr	r0, [r7, #4]
 8015212:	f000 fb9b 	bl	801594c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8015216:	68bb      	ldr	r3, [r7, #8]
 8015218:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801521c:	2b00      	cmp	r3, #0
 801521e:	d00c      	beq.n	801523a <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8015220:	68fb      	ldr	r3, [r7, #12]
 8015222:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015226:	2b00      	cmp	r3, #0
 8015228:	d007      	beq.n	801523a <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 801522a:	687b      	ldr	r3, [r7, #4]
 801522c:	681b      	ldr	r3, [r3, #0]
 801522e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8015232:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8015234:	6878      	ldr	r0, [r7, #4]
 8015236:	f000 f95d 	bl	80154f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 801523a:	68bb      	ldr	r3, [r7, #8]
 801523c:	f003 0320 	and.w	r3, r3, #32
 8015240:	2b00      	cmp	r3, #0
 8015242:	d00c      	beq.n	801525e <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8015244:	68fb      	ldr	r3, [r7, #12]
 8015246:	f003 0320 	and.w	r3, r3, #32
 801524a:	2b00      	cmp	r3, #0
 801524c:	d007      	beq.n	801525e <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 801524e:	687b      	ldr	r3, [r7, #4]
 8015250:	681b      	ldr	r3, [r3, #0]
 8015252:	f06f 0220 	mvn.w	r2, #32
 8015256:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8015258:	6878      	ldr	r0, [r7, #4]
 801525a:	f000 fb6d 	bl	8015938 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801525e:	bf00      	nop
 8015260:	3710      	adds	r7, #16
 8015262:	46bd      	mov	sp, r7
 8015264:	bd80      	pop	{r7, pc}
	...

08015268 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8015268:	b580      	push	{r7, lr}
 801526a:	b086      	sub	sp, #24
 801526c:	af00      	add	r7, sp, #0
 801526e:	60f8      	str	r0, [r7, #12]
 8015270:	60b9      	str	r1, [r7, #8]
 8015272:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8015274:	2300      	movs	r3, #0
 8015276:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8015278:	68fb      	ldr	r3, [r7, #12]
 801527a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801527e:	2b01      	cmp	r3, #1
 8015280:	d101      	bne.n	8015286 <HAL_TIM_OC_ConfigChannel+0x1e>
 8015282:	2302      	movs	r3, #2
 8015284:	e048      	b.n	8015318 <HAL_TIM_OC_ConfigChannel+0xb0>
 8015286:	68fb      	ldr	r3, [r7, #12]
 8015288:	2201      	movs	r2, #1
 801528a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 801528e:	687b      	ldr	r3, [r7, #4]
 8015290:	2b0c      	cmp	r3, #12
 8015292:	d839      	bhi.n	8015308 <HAL_TIM_OC_ConfigChannel+0xa0>
 8015294:	a201      	add	r2, pc, #4	; (adr r2, 801529c <HAL_TIM_OC_ConfigChannel+0x34>)
 8015296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801529a:	bf00      	nop
 801529c:	080152d1 	.word	0x080152d1
 80152a0:	08015309 	.word	0x08015309
 80152a4:	08015309 	.word	0x08015309
 80152a8:	08015309 	.word	0x08015309
 80152ac:	080152df 	.word	0x080152df
 80152b0:	08015309 	.word	0x08015309
 80152b4:	08015309 	.word	0x08015309
 80152b8:	08015309 	.word	0x08015309
 80152bc:	080152ed 	.word	0x080152ed
 80152c0:	08015309 	.word	0x08015309
 80152c4:	08015309 	.word	0x08015309
 80152c8:	08015309 	.word	0x08015309
 80152cc:	080152fb 	.word	0x080152fb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80152d0:	68fb      	ldr	r3, [r7, #12]
 80152d2:	681b      	ldr	r3, [r3, #0]
 80152d4:	68b9      	ldr	r1, [r7, #8]
 80152d6:	4618      	mov	r0, r3
 80152d8:	f000 f9a2 	bl	8015620 <TIM_OC1_SetConfig>
      break;
 80152dc:	e017      	b.n	801530e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80152de:	68fb      	ldr	r3, [r7, #12]
 80152e0:	681b      	ldr	r3, [r3, #0]
 80152e2:	68b9      	ldr	r1, [r7, #8]
 80152e4:	4618      	mov	r0, r3
 80152e6:	f000 fa01 	bl	80156ec <TIM_OC2_SetConfig>
      break;
 80152ea:	e010      	b.n	801530e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80152ec:	68fb      	ldr	r3, [r7, #12]
 80152ee:	681b      	ldr	r3, [r3, #0]
 80152f0:	68b9      	ldr	r1, [r7, #8]
 80152f2:	4618      	mov	r0, r3
 80152f4:	f000 fa66 	bl	80157c4 <TIM_OC3_SetConfig>
      break;
 80152f8:	e009      	b.n	801530e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80152fa:	68fb      	ldr	r3, [r7, #12]
 80152fc:	681b      	ldr	r3, [r3, #0]
 80152fe:	68b9      	ldr	r1, [r7, #8]
 8015300:	4618      	mov	r0, r3
 8015302:	f000 fac9 	bl	8015898 <TIM_OC4_SetConfig>
      break;
 8015306:	e002      	b.n	801530e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8015308:	2301      	movs	r3, #1
 801530a:	75fb      	strb	r3, [r7, #23]
      break;
 801530c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801530e:	68fb      	ldr	r3, [r7, #12]
 8015310:	2200      	movs	r2, #0
 8015312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8015316:	7dfb      	ldrb	r3, [r7, #23]
}
 8015318:	4618      	mov	r0, r3
 801531a:	3718      	adds	r7, #24
 801531c:	46bd      	mov	sp, r7
 801531e:	bd80      	pop	{r7, pc}

08015320 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8015320:	b580      	push	{r7, lr}
 8015322:	b086      	sub	sp, #24
 8015324:	af00      	add	r7, sp, #0
 8015326:	60f8      	str	r0, [r7, #12]
 8015328:	60b9      	str	r1, [r7, #8]
 801532a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801532c:	2300      	movs	r3, #0
 801532e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8015330:	68fb      	ldr	r3, [r7, #12]
 8015332:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015336:	2b01      	cmp	r3, #1
 8015338:	d101      	bne.n	801533e <HAL_TIM_PWM_ConfigChannel+0x1e>
 801533a:	2302      	movs	r3, #2
 801533c:	e0ae      	b.n	801549c <HAL_TIM_PWM_ConfigChannel+0x17c>
 801533e:	68fb      	ldr	r3, [r7, #12]
 8015340:	2201      	movs	r2, #1
 8015342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8015346:	687b      	ldr	r3, [r7, #4]
 8015348:	2b0c      	cmp	r3, #12
 801534a:	f200 809f 	bhi.w	801548c <HAL_TIM_PWM_ConfigChannel+0x16c>
 801534e:	a201      	add	r2, pc, #4	; (adr r2, 8015354 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8015350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015354:	08015389 	.word	0x08015389
 8015358:	0801548d 	.word	0x0801548d
 801535c:	0801548d 	.word	0x0801548d
 8015360:	0801548d 	.word	0x0801548d
 8015364:	080153c9 	.word	0x080153c9
 8015368:	0801548d 	.word	0x0801548d
 801536c:	0801548d 	.word	0x0801548d
 8015370:	0801548d 	.word	0x0801548d
 8015374:	0801540b 	.word	0x0801540b
 8015378:	0801548d 	.word	0x0801548d
 801537c:	0801548d 	.word	0x0801548d
 8015380:	0801548d 	.word	0x0801548d
 8015384:	0801544b 	.word	0x0801544b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8015388:	68fb      	ldr	r3, [r7, #12]
 801538a:	681b      	ldr	r3, [r3, #0]
 801538c:	68b9      	ldr	r1, [r7, #8]
 801538e:	4618      	mov	r0, r3
 8015390:	f000 f946 	bl	8015620 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8015394:	68fb      	ldr	r3, [r7, #12]
 8015396:	681b      	ldr	r3, [r3, #0]
 8015398:	699a      	ldr	r2, [r3, #24]
 801539a:	68fb      	ldr	r3, [r7, #12]
 801539c:	681b      	ldr	r3, [r3, #0]
 801539e:	f042 0208 	orr.w	r2, r2, #8
 80153a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80153a4:	68fb      	ldr	r3, [r7, #12]
 80153a6:	681b      	ldr	r3, [r3, #0]
 80153a8:	699a      	ldr	r2, [r3, #24]
 80153aa:	68fb      	ldr	r3, [r7, #12]
 80153ac:	681b      	ldr	r3, [r3, #0]
 80153ae:	f022 0204 	bic.w	r2, r2, #4
 80153b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80153b4:	68fb      	ldr	r3, [r7, #12]
 80153b6:	681b      	ldr	r3, [r3, #0]
 80153b8:	6999      	ldr	r1, [r3, #24]
 80153ba:	68bb      	ldr	r3, [r7, #8]
 80153bc:	691a      	ldr	r2, [r3, #16]
 80153be:	68fb      	ldr	r3, [r7, #12]
 80153c0:	681b      	ldr	r3, [r3, #0]
 80153c2:	430a      	orrs	r2, r1
 80153c4:	619a      	str	r2, [r3, #24]
      break;
 80153c6:	e064      	b.n	8015492 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80153c8:	68fb      	ldr	r3, [r7, #12]
 80153ca:	681b      	ldr	r3, [r3, #0]
 80153cc:	68b9      	ldr	r1, [r7, #8]
 80153ce:	4618      	mov	r0, r3
 80153d0:	f000 f98c 	bl	80156ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80153d4:	68fb      	ldr	r3, [r7, #12]
 80153d6:	681b      	ldr	r3, [r3, #0]
 80153d8:	699a      	ldr	r2, [r3, #24]
 80153da:	68fb      	ldr	r3, [r7, #12]
 80153dc:	681b      	ldr	r3, [r3, #0]
 80153de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80153e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80153e4:	68fb      	ldr	r3, [r7, #12]
 80153e6:	681b      	ldr	r3, [r3, #0]
 80153e8:	699a      	ldr	r2, [r3, #24]
 80153ea:	68fb      	ldr	r3, [r7, #12]
 80153ec:	681b      	ldr	r3, [r3, #0]
 80153ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80153f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80153f4:	68fb      	ldr	r3, [r7, #12]
 80153f6:	681b      	ldr	r3, [r3, #0]
 80153f8:	6999      	ldr	r1, [r3, #24]
 80153fa:	68bb      	ldr	r3, [r7, #8]
 80153fc:	691b      	ldr	r3, [r3, #16]
 80153fe:	021a      	lsls	r2, r3, #8
 8015400:	68fb      	ldr	r3, [r7, #12]
 8015402:	681b      	ldr	r3, [r3, #0]
 8015404:	430a      	orrs	r2, r1
 8015406:	619a      	str	r2, [r3, #24]
      break;
 8015408:	e043      	b.n	8015492 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801540a:	68fb      	ldr	r3, [r7, #12]
 801540c:	681b      	ldr	r3, [r3, #0]
 801540e:	68b9      	ldr	r1, [r7, #8]
 8015410:	4618      	mov	r0, r3
 8015412:	f000 f9d7 	bl	80157c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8015416:	68fb      	ldr	r3, [r7, #12]
 8015418:	681b      	ldr	r3, [r3, #0]
 801541a:	69da      	ldr	r2, [r3, #28]
 801541c:	68fb      	ldr	r3, [r7, #12]
 801541e:	681b      	ldr	r3, [r3, #0]
 8015420:	f042 0208 	orr.w	r2, r2, #8
 8015424:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8015426:	68fb      	ldr	r3, [r7, #12]
 8015428:	681b      	ldr	r3, [r3, #0]
 801542a:	69da      	ldr	r2, [r3, #28]
 801542c:	68fb      	ldr	r3, [r7, #12]
 801542e:	681b      	ldr	r3, [r3, #0]
 8015430:	f022 0204 	bic.w	r2, r2, #4
 8015434:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8015436:	68fb      	ldr	r3, [r7, #12]
 8015438:	681b      	ldr	r3, [r3, #0]
 801543a:	69d9      	ldr	r1, [r3, #28]
 801543c:	68bb      	ldr	r3, [r7, #8]
 801543e:	691a      	ldr	r2, [r3, #16]
 8015440:	68fb      	ldr	r3, [r7, #12]
 8015442:	681b      	ldr	r3, [r3, #0]
 8015444:	430a      	orrs	r2, r1
 8015446:	61da      	str	r2, [r3, #28]
      break;
 8015448:	e023      	b.n	8015492 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801544a:	68fb      	ldr	r3, [r7, #12]
 801544c:	681b      	ldr	r3, [r3, #0]
 801544e:	68b9      	ldr	r1, [r7, #8]
 8015450:	4618      	mov	r0, r3
 8015452:	f000 fa21 	bl	8015898 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8015456:	68fb      	ldr	r3, [r7, #12]
 8015458:	681b      	ldr	r3, [r3, #0]
 801545a:	69da      	ldr	r2, [r3, #28]
 801545c:	68fb      	ldr	r3, [r7, #12]
 801545e:	681b      	ldr	r3, [r3, #0]
 8015460:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8015464:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8015466:	68fb      	ldr	r3, [r7, #12]
 8015468:	681b      	ldr	r3, [r3, #0]
 801546a:	69da      	ldr	r2, [r3, #28]
 801546c:	68fb      	ldr	r3, [r7, #12]
 801546e:	681b      	ldr	r3, [r3, #0]
 8015470:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8015474:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8015476:	68fb      	ldr	r3, [r7, #12]
 8015478:	681b      	ldr	r3, [r3, #0]
 801547a:	69d9      	ldr	r1, [r3, #28]
 801547c:	68bb      	ldr	r3, [r7, #8]
 801547e:	691b      	ldr	r3, [r3, #16]
 8015480:	021a      	lsls	r2, r3, #8
 8015482:	68fb      	ldr	r3, [r7, #12]
 8015484:	681b      	ldr	r3, [r3, #0]
 8015486:	430a      	orrs	r2, r1
 8015488:	61da      	str	r2, [r3, #28]
      break;
 801548a:	e002      	b.n	8015492 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 801548c:	2301      	movs	r3, #1
 801548e:	75fb      	strb	r3, [r7, #23]
      break;
 8015490:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8015492:	68fb      	ldr	r3, [r7, #12]
 8015494:	2200      	movs	r2, #0
 8015496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801549a:	7dfb      	ldrb	r3, [r7, #23]
}
 801549c:	4618      	mov	r0, r3
 801549e:	3718      	adds	r7, #24
 80154a0:	46bd      	mov	sp, r7
 80154a2:	bd80      	pop	{r7, pc}

080154a4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80154a4:	b480      	push	{r7}
 80154a6:	b083      	sub	sp, #12
 80154a8:	af00      	add	r7, sp, #0
 80154aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80154ac:	bf00      	nop
 80154ae:	370c      	adds	r7, #12
 80154b0:	46bd      	mov	sp, r7
 80154b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154b6:	4770      	bx	lr

080154b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80154b8:	b480      	push	{r7}
 80154ba:	b083      	sub	sp, #12
 80154bc:	af00      	add	r7, sp, #0
 80154be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80154c0:	bf00      	nop
 80154c2:	370c      	adds	r7, #12
 80154c4:	46bd      	mov	sp, r7
 80154c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154ca:	4770      	bx	lr

080154cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80154cc:	b480      	push	{r7}
 80154ce:	b083      	sub	sp, #12
 80154d0:	af00      	add	r7, sp, #0
 80154d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80154d4:	bf00      	nop
 80154d6:	370c      	adds	r7, #12
 80154d8:	46bd      	mov	sp, r7
 80154da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154de:	4770      	bx	lr

080154e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80154e0:	b480      	push	{r7}
 80154e2:	b083      	sub	sp, #12
 80154e4:	af00      	add	r7, sp, #0
 80154e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80154e8:	bf00      	nop
 80154ea:	370c      	adds	r7, #12
 80154ec:	46bd      	mov	sp, r7
 80154ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154f2:	4770      	bx	lr

080154f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80154f4:	b480      	push	{r7}
 80154f6:	b083      	sub	sp, #12
 80154f8:	af00      	add	r7, sp, #0
 80154fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80154fc:	bf00      	nop
 80154fe:	370c      	adds	r7, #12
 8015500:	46bd      	mov	sp, r7
 8015502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015506:	4770      	bx	lr

08015508 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8015508:	b480      	push	{r7}
 801550a:	b085      	sub	sp, #20
 801550c:	af00      	add	r7, sp, #0
 801550e:	6078      	str	r0, [r7, #4]
 8015510:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8015512:	687b      	ldr	r3, [r7, #4]
 8015514:	681b      	ldr	r3, [r3, #0]
 8015516:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8015518:	687b      	ldr	r3, [r7, #4]
 801551a:	4a3a      	ldr	r2, [pc, #232]	; (8015604 <TIM_Base_SetConfig+0xfc>)
 801551c:	4293      	cmp	r3, r2
 801551e:	d00f      	beq.n	8015540 <TIM_Base_SetConfig+0x38>
 8015520:	687b      	ldr	r3, [r7, #4]
 8015522:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015526:	d00b      	beq.n	8015540 <TIM_Base_SetConfig+0x38>
 8015528:	687b      	ldr	r3, [r7, #4]
 801552a:	4a37      	ldr	r2, [pc, #220]	; (8015608 <TIM_Base_SetConfig+0x100>)
 801552c:	4293      	cmp	r3, r2
 801552e:	d007      	beq.n	8015540 <TIM_Base_SetConfig+0x38>
 8015530:	687b      	ldr	r3, [r7, #4]
 8015532:	4a36      	ldr	r2, [pc, #216]	; (801560c <TIM_Base_SetConfig+0x104>)
 8015534:	4293      	cmp	r3, r2
 8015536:	d003      	beq.n	8015540 <TIM_Base_SetConfig+0x38>
 8015538:	687b      	ldr	r3, [r7, #4]
 801553a:	4a35      	ldr	r2, [pc, #212]	; (8015610 <TIM_Base_SetConfig+0x108>)
 801553c:	4293      	cmp	r3, r2
 801553e:	d108      	bne.n	8015552 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8015540:	68fb      	ldr	r3, [r7, #12]
 8015542:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8015546:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8015548:	683b      	ldr	r3, [r7, #0]
 801554a:	685b      	ldr	r3, [r3, #4]
 801554c:	68fa      	ldr	r2, [r7, #12]
 801554e:	4313      	orrs	r3, r2
 8015550:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8015552:	687b      	ldr	r3, [r7, #4]
 8015554:	4a2b      	ldr	r2, [pc, #172]	; (8015604 <TIM_Base_SetConfig+0xfc>)
 8015556:	4293      	cmp	r3, r2
 8015558:	d01b      	beq.n	8015592 <TIM_Base_SetConfig+0x8a>
 801555a:	687b      	ldr	r3, [r7, #4]
 801555c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015560:	d017      	beq.n	8015592 <TIM_Base_SetConfig+0x8a>
 8015562:	687b      	ldr	r3, [r7, #4]
 8015564:	4a28      	ldr	r2, [pc, #160]	; (8015608 <TIM_Base_SetConfig+0x100>)
 8015566:	4293      	cmp	r3, r2
 8015568:	d013      	beq.n	8015592 <TIM_Base_SetConfig+0x8a>
 801556a:	687b      	ldr	r3, [r7, #4]
 801556c:	4a27      	ldr	r2, [pc, #156]	; (801560c <TIM_Base_SetConfig+0x104>)
 801556e:	4293      	cmp	r3, r2
 8015570:	d00f      	beq.n	8015592 <TIM_Base_SetConfig+0x8a>
 8015572:	687b      	ldr	r3, [r7, #4]
 8015574:	4a26      	ldr	r2, [pc, #152]	; (8015610 <TIM_Base_SetConfig+0x108>)
 8015576:	4293      	cmp	r3, r2
 8015578:	d00b      	beq.n	8015592 <TIM_Base_SetConfig+0x8a>
 801557a:	687b      	ldr	r3, [r7, #4]
 801557c:	4a25      	ldr	r2, [pc, #148]	; (8015614 <TIM_Base_SetConfig+0x10c>)
 801557e:	4293      	cmp	r3, r2
 8015580:	d007      	beq.n	8015592 <TIM_Base_SetConfig+0x8a>
 8015582:	687b      	ldr	r3, [r7, #4]
 8015584:	4a24      	ldr	r2, [pc, #144]	; (8015618 <TIM_Base_SetConfig+0x110>)
 8015586:	4293      	cmp	r3, r2
 8015588:	d003      	beq.n	8015592 <TIM_Base_SetConfig+0x8a>
 801558a:	687b      	ldr	r3, [r7, #4]
 801558c:	4a23      	ldr	r2, [pc, #140]	; (801561c <TIM_Base_SetConfig+0x114>)
 801558e:	4293      	cmp	r3, r2
 8015590:	d108      	bne.n	80155a4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8015592:	68fb      	ldr	r3, [r7, #12]
 8015594:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8015598:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801559a:	683b      	ldr	r3, [r7, #0]
 801559c:	68db      	ldr	r3, [r3, #12]
 801559e:	68fa      	ldr	r2, [r7, #12]
 80155a0:	4313      	orrs	r3, r2
 80155a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80155a4:	68fb      	ldr	r3, [r7, #12]
 80155a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80155aa:	683b      	ldr	r3, [r7, #0]
 80155ac:	695b      	ldr	r3, [r3, #20]
 80155ae:	4313      	orrs	r3, r2
 80155b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80155b2:	687b      	ldr	r3, [r7, #4]
 80155b4:	68fa      	ldr	r2, [r7, #12]
 80155b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80155b8:	683b      	ldr	r3, [r7, #0]
 80155ba:	689a      	ldr	r2, [r3, #8]
 80155bc:	687b      	ldr	r3, [r7, #4]
 80155be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80155c0:	683b      	ldr	r3, [r7, #0]
 80155c2:	681a      	ldr	r2, [r3, #0]
 80155c4:	687b      	ldr	r3, [r7, #4]
 80155c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80155c8:	687b      	ldr	r3, [r7, #4]
 80155ca:	4a0e      	ldr	r2, [pc, #56]	; (8015604 <TIM_Base_SetConfig+0xfc>)
 80155cc:	4293      	cmp	r3, r2
 80155ce:	d103      	bne.n	80155d8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80155d0:	683b      	ldr	r3, [r7, #0]
 80155d2:	691a      	ldr	r2, [r3, #16]
 80155d4:	687b      	ldr	r3, [r7, #4]
 80155d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80155d8:	687b      	ldr	r3, [r7, #4]
 80155da:	2201      	movs	r2, #1
 80155dc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80155de:	687b      	ldr	r3, [r7, #4]
 80155e0:	691b      	ldr	r3, [r3, #16]
 80155e2:	f003 0301 	and.w	r3, r3, #1
 80155e6:	2b01      	cmp	r3, #1
 80155e8:	d105      	bne.n	80155f6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80155ea:	687b      	ldr	r3, [r7, #4]
 80155ec:	691b      	ldr	r3, [r3, #16]
 80155ee:	f023 0201 	bic.w	r2, r3, #1
 80155f2:	687b      	ldr	r3, [r7, #4]
 80155f4:	611a      	str	r2, [r3, #16]
  }
}
 80155f6:	bf00      	nop
 80155f8:	3714      	adds	r7, #20
 80155fa:	46bd      	mov	sp, r7
 80155fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015600:	4770      	bx	lr
 8015602:	bf00      	nop
 8015604:	40010000 	.word	0x40010000
 8015608:	40000400 	.word	0x40000400
 801560c:	40000800 	.word	0x40000800
 8015610:	40000c00 	.word	0x40000c00
 8015614:	40014000 	.word	0x40014000
 8015618:	40014400 	.word	0x40014400
 801561c:	40014800 	.word	0x40014800

08015620 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8015620:	b480      	push	{r7}
 8015622:	b087      	sub	sp, #28
 8015624:	af00      	add	r7, sp, #0
 8015626:	6078      	str	r0, [r7, #4]
 8015628:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801562a:	687b      	ldr	r3, [r7, #4]
 801562c:	6a1b      	ldr	r3, [r3, #32]
 801562e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8015630:	687b      	ldr	r3, [r7, #4]
 8015632:	6a1b      	ldr	r3, [r3, #32]
 8015634:	f023 0201 	bic.w	r2, r3, #1
 8015638:	687b      	ldr	r3, [r7, #4]
 801563a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801563c:	687b      	ldr	r3, [r7, #4]
 801563e:	685b      	ldr	r3, [r3, #4]
 8015640:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8015642:	687b      	ldr	r3, [r7, #4]
 8015644:	699b      	ldr	r3, [r3, #24]
 8015646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8015648:	68fb      	ldr	r3, [r7, #12]
 801564a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801564e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8015650:	68fb      	ldr	r3, [r7, #12]
 8015652:	f023 0303 	bic.w	r3, r3, #3
 8015656:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8015658:	683b      	ldr	r3, [r7, #0]
 801565a:	681b      	ldr	r3, [r3, #0]
 801565c:	68fa      	ldr	r2, [r7, #12]
 801565e:	4313      	orrs	r3, r2
 8015660:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8015662:	697b      	ldr	r3, [r7, #20]
 8015664:	f023 0302 	bic.w	r3, r3, #2
 8015668:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801566a:	683b      	ldr	r3, [r7, #0]
 801566c:	689b      	ldr	r3, [r3, #8]
 801566e:	697a      	ldr	r2, [r7, #20]
 8015670:	4313      	orrs	r3, r2
 8015672:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8015674:	687b      	ldr	r3, [r7, #4]
 8015676:	4a1c      	ldr	r2, [pc, #112]	; (80156e8 <TIM_OC1_SetConfig+0xc8>)
 8015678:	4293      	cmp	r3, r2
 801567a:	d10c      	bne.n	8015696 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801567c:	697b      	ldr	r3, [r7, #20]
 801567e:	f023 0308 	bic.w	r3, r3, #8
 8015682:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8015684:	683b      	ldr	r3, [r7, #0]
 8015686:	68db      	ldr	r3, [r3, #12]
 8015688:	697a      	ldr	r2, [r7, #20]
 801568a:	4313      	orrs	r3, r2
 801568c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801568e:	697b      	ldr	r3, [r7, #20]
 8015690:	f023 0304 	bic.w	r3, r3, #4
 8015694:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8015696:	687b      	ldr	r3, [r7, #4]
 8015698:	4a13      	ldr	r2, [pc, #76]	; (80156e8 <TIM_OC1_SetConfig+0xc8>)
 801569a:	4293      	cmp	r3, r2
 801569c:	d111      	bne.n	80156c2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801569e:	693b      	ldr	r3, [r7, #16]
 80156a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80156a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80156a6:	693b      	ldr	r3, [r7, #16]
 80156a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80156ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80156ae:	683b      	ldr	r3, [r7, #0]
 80156b0:	695b      	ldr	r3, [r3, #20]
 80156b2:	693a      	ldr	r2, [r7, #16]
 80156b4:	4313      	orrs	r3, r2
 80156b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80156b8:	683b      	ldr	r3, [r7, #0]
 80156ba:	699b      	ldr	r3, [r3, #24]
 80156bc:	693a      	ldr	r2, [r7, #16]
 80156be:	4313      	orrs	r3, r2
 80156c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80156c2:	687b      	ldr	r3, [r7, #4]
 80156c4:	693a      	ldr	r2, [r7, #16]
 80156c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80156c8:	687b      	ldr	r3, [r7, #4]
 80156ca:	68fa      	ldr	r2, [r7, #12]
 80156cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80156ce:	683b      	ldr	r3, [r7, #0]
 80156d0:	685a      	ldr	r2, [r3, #4]
 80156d2:	687b      	ldr	r3, [r7, #4]
 80156d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80156d6:	687b      	ldr	r3, [r7, #4]
 80156d8:	697a      	ldr	r2, [r7, #20]
 80156da:	621a      	str	r2, [r3, #32]
}
 80156dc:	bf00      	nop
 80156de:	371c      	adds	r7, #28
 80156e0:	46bd      	mov	sp, r7
 80156e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156e6:	4770      	bx	lr
 80156e8:	40010000 	.word	0x40010000

080156ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80156ec:	b480      	push	{r7}
 80156ee:	b087      	sub	sp, #28
 80156f0:	af00      	add	r7, sp, #0
 80156f2:	6078      	str	r0, [r7, #4]
 80156f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80156f6:	687b      	ldr	r3, [r7, #4]
 80156f8:	6a1b      	ldr	r3, [r3, #32]
 80156fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80156fc:	687b      	ldr	r3, [r7, #4]
 80156fe:	6a1b      	ldr	r3, [r3, #32]
 8015700:	f023 0210 	bic.w	r2, r3, #16
 8015704:	687b      	ldr	r3, [r7, #4]
 8015706:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8015708:	687b      	ldr	r3, [r7, #4]
 801570a:	685b      	ldr	r3, [r3, #4]
 801570c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801570e:	687b      	ldr	r3, [r7, #4]
 8015710:	699b      	ldr	r3, [r3, #24]
 8015712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8015714:	68fb      	ldr	r3, [r7, #12]
 8015716:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801571a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801571c:	68fb      	ldr	r3, [r7, #12]
 801571e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8015722:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8015724:	683b      	ldr	r3, [r7, #0]
 8015726:	681b      	ldr	r3, [r3, #0]
 8015728:	021b      	lsls	r3, r3, #8
 801572a:	68fa      	ldr	r2, [r7, #12]
 801572c:	4313      	orrs	r3, r2
 801572e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8015730:	697b      	ldr	r3, [r7, #20]
 8015732:	f023 0320 	bic.w	r3, r3, #32
 8015736:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8015738:	683b      	ldr	r3, [r7, #0]
 801573a:	689b      	ldr	r3, [r3, #8]
 801573c:	011b      	lsls	r3, r3, #4
 801573e:	697a      	ldr	r2, [r7, #20]
 8015740:	4313      	orrs	r3, r2
 8015742:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8015744:	687b      	ldr	r3, [r7, #4]
 8015746:	4a1e      	ldr	r2, [pc, #120]	; (80157c0 <TIM_OC2_SetConfig+0xd4>)
 8015748:	4293      	cmp	r3, r2
 801574a:	d10d      	bne.n	8015768 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 801574c:	697b      	ldr	r3, [r7, #20]
 801574e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8015752:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8015754:	683b      	ldr	r3, [r7, #0]
 8015756:	68db      	ldr	r3, [r3, #12]
 8015758:	011b      	lsls	r3, r3, #4
 801575a:	697a      	ldr	r2, [r7, #20]
 801575c:	4313      	orrs	r3, r2
 801575e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8015760:	697b      	ldr	r3, [r7, #20]
 8015762:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015766:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8015768:	687b      	ldr	r3, [r7, #4]
 801576a:	4a15      	ldr	r2, [pc, #84]	; (80157c0 <TIM_OC2_SetConfig+0xd4>)
 801576c:	4293      	cmp	r3, r2
 801576e:	d113      	bne.n	8015798 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8015770:	693b      	ldr	r3, [r7, #16]
 8015772:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8015776:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8015778:	693b      	ldr	r3, [r7, #16]
 801577a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801577e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8015780:	683b      	ldr	r3, [r7, #0]
 8015782:	695b      	ldr	r3, [r3, #20]
 8015784:	009b      	lsls	r3, r3, #2
 8015786:	693a      	ldr	r2, [r7, #16]
 8015788:	4313      	orrs	r3, r2
 801578a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801578c:	683b      	ldr	r3, [r7, #0]
 801578e:	699b      	ldr	r3, [r3, #24]
 8015790:	009b      	lsls	r3, r3, #2
 8015792:	693a      	ldr	r2, [r7, #16]
 8015794:	4313      	orrs	r3, r2
 8015796:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8015798:	687b      	ldr	r3, [r7, #4]
 801579a:	693a      	ldr	r2, [r7, #16]
 801579c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801579e:	687b      	ldr	r3, [r7, #4]
 80157a0:	68fa      	ldr	r2, [r7, #12]
 80157a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80157a4:	683b      	ldr	r3, [r7, #0]
 80157a6:	685a      	ldr	r2, [r3, #4]
 80157a8:	687b      	ldr	r3, [r7, #4]
 80157aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80157ac:	687b      	ldr	r3, [r7, #4]
 80157ae:	697a      	ldr	r2, [r7, #20]
 80157b0:	621a      	str	r2, [r3, #32]
}
 80157b2:	bf00      	nop
 80157b4:	371c      	adds	r7, #28
 80157b6:	46bd      	mov	sp, r7
 80157b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157bc:	4770      	bx	lr
 80157be:	bf00      	nop
 80157c0:	40010000 	.word	0x40010000

080157c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80157c4:	b480      	push	{r7}
 80157c6:	b087      	sub	sp, #28
 80157c8:	af00      	add	r7, sp, #0
 80157ca:	6078      	str	r0, [r7, #4]
 80157cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80157ce:	687b      	ldr	r3, [r7, #4]
 80157d0:	6a1b      	ldr	r3, [r3, #32]
 80157d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80157d4:	687b      	ldr	r3, [r7, #4]
 80157d6:	6a1b      	ldr	r3, [r3, #32]
 80157d8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80157dc:	687b      	ldr	r3, [r7, #4]
 80157de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80157e0:	687b      	ldr	r3, [r7, #4]
 80157e2:	685b      	ldr	r3, [r3, #4]
 80157e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80157e6:	687b      	ldr	r3, [r7, #4]
 80157e8:	69db      	ldr	r3, [r3, #28]
 80157ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80157ec:	68fb      	ldr	r3, [r7, #12]
 80157ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80157f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80157f4:	68fb      	ldr	r3, [r7, #12]
 80157f6:	f023 0303 	bic.w	r3, r3, #3
 80157fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80157fc:	683b      	ldr	r3, [r7, #0]
 80157fe:	681b      	ldr	r3, [r3, #0]
 8015800:	68fa      	ldr	r2, [r7, #12]
 8015802:	4313      	orrs	r3, r2
 8015804:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8015806:	697b      	ldr	r3, [r7, #20]
 8015808:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801580c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801580e:	683b      	ldr	r3, [r7, #0]
 8015810:	689b      	ldr	r3, [r3, #8]
 8015812:	021b      	lsls	r3, r3, #8
 8015814:	697a      	ldr	r2, [r7, #20]
 8015816:	4313      	orrs	r3, r2
 8015818:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801581a:	687b      	ldr	r3, [r7, #4]
 801581c:	4a1d      	ldr	r2, [pc, #116]	; (8015894 <TIM_OC3_SetConfig+0xd0>)
 801581e:	4293      	cmp	r3, r2
 8015820:	d10d      	bne.n	801583e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8015822:	697b      	ldr	r3, [r7, #20]
 8015824:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8015828:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801582a:	683b      	ldr	r3, [r7, #0]
 801582c:	68db      	ldr	r3, [r3, #12]
 801582e:	021b      	lsls	r3, r3, #8
 8015830:	697a      	ldr	r2, [r7, #20]
 8015832:	4313      	orrs	r3, r2
 8015834:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8015836:	697b      	ldr	r3, [r7, #20]
 8015838:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801583c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801583e:	687b      	ldr	r3, [r7, #4]
 8015840:	4a14      	ldr	r2, [pc, #80]	; (8015894 <TIM_OC3_SetConfig+0xd0>)
 8015842:	4293      	cmp	r3, r2
 8015844:	d113      	bne.n	801586e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8015846:	693b      	ldr	r3, [r7, #16]
 8015848:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801584c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801584e:	693b      	ldr	r3, [r7, #16]
 8015850:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8015854:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8015856:	683b      	ldr	r3, [r7, #0]
 8015858:	695b      	ldr	r3, [r3, #20]
 801585a:	011b      	lsls	r3, r3, #4
 801585c:	693a      	ldr	r2, [r7, #16]
 801585e:	4313      	orrs	r3, r2
 8015860:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8015862:	683b      	ldr	r3, [r7, #0]
 8015864:	699b      	ldr	r3, [r3, #24]
 8015866:	011b      	lsls	r3, r3, #4
 8015868:	693a      	ldr	r2, [r7, #16]
 801586a:	4313      	orrs	r3, r2
 801586c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801586e:	687b      	ldr	r3, [r7, #4]
 8015870:	693a      	ldr	r2, [r7, #16]
 8015872:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8015874:	687b      	ldr	r3, [r7, #4]
 8015876:	68fa      	ldr	r2, [r7, #12]
 8015878:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801587a:	683b      	ldr	r3, [r7, #0]
 801587c:	685a      	ldr	r2, [r3, #4]
 801587e:	687b      	ldr	r3, [r7, #4]
 8015880:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8015882:	687b      	ldr	r3, [r7, #4]
 8015884:	697a      	ldr	r2, [r7, #20]
 8015886:	621a      	str	r2, [r3, #32]
}
 8015888:	bf00      	nop
 801588a:	371c      	adds	r7, #28
 801588c:	46bd      	mov	sp, r7
 801588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015892:	4770      	bx	lr
 8015894:	40010000 	.word	0x40010000

08015898 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8015898:	b480      	push	{r7}
 801589a:	b087      	sub	sp, #28
 801589c:	af00      	add	r7, sp, #0
 801589e:	6078      	str	r0, [r7, #4]
 80158a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80158a2:	687b      	ldr	r3, [r7, #4]
 80158a4:	6a1b      	ldr	r3, [r3, #32]
 80158a6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80158a8:	687b      	ldr	r3, [r7, #4]
 80158aa:	6a1b      	ldr	r3, [r3, #32]
 80158ac:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80158b0:	687b      	ldr	r3, [r7, #4]
 80158b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80158b4:	687b      	ldr	r3, [r7, #4]
 80158b6:	685b      	ldr	r3, [r3, #4]
 80158b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80158ba:	687b      	ldr	r3, [r7, #4]
 80158bc:	69db      	ldr	r3, [r3, #28]
 80158be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80158c0:	68fb      	ldr	r3, [r7, #12]
 80158c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80158c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80158c8:	68fb      	ldr	r3, [r7, #12]
 80158ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80158ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80158d0:	683b      	ldr	r3, [r7, #0]
 80158d2:	681b      	ldr	r3, [r3, #0]
 80158d4:	021b      	lsls	r3, r3, #8
 80158d6:	68fa      	ldr	r2, [r7, #12]
 80158d8:	4313      	orrs	r3, r2
 80158da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80158dc:	693b      	ldr	r3, [r7, #16]
 80158de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80158e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80158e4:	683b      	ldr	r3, [r7, #0]
 80158e6:	689b      	ldr	r3, [r3, #8]
 80158e8:	031b      	lsls	r3, r3, #12
 80158ea:	693a      	ldr	r2, [r7, #16]
 80158ec:	4313      	orrs	r3, r2
 80158ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80158f0:	687b      	ldr	r3, [r7, #4]
 80158f2:	4a10      	ldr	r2, [pc, #64]	; (8015934 <TIM_OC4_SetConfig+0x9c>)
 80158f4:	4293      	cmp	r3, r2
 80158f6:	d109      	bne.n	801590c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80158f8:	697b      	ldr	r3, [r7, #20]
 80158fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80158fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8015900:	683b      	ldr	r3, [r7, #0]
 8015902:	695b      	ldr	r3, [r3, #20]
 8015904:	019b      	lsls	r3, r3, #6
 8015906:	697a      	ldr	r2, [r7, #20]
 8015908:	4313      	orrs	r3, r2
 801590a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801590c:	687b      	ldr	r3, [r7, #4]
 801590e:	697a      	ldr	r2, [r7, #20]
 8015910:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8015912:	687b      	ldr	r3, [r7, #4]
 8015914:	68fa      	ldr	r2, [r7, #12]
 8015916:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8015918:	683b      	ldr	r3, [r7, #0]
 801591a:	685a      	ldr	r2, [r3, #4]
 801591c:	687b      	ldr	r3, [r7, #4]
 801591e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8015920:	687b      	ldr	r3, [r7, #4]
 8015922:	693a      	ldr	r2, [r7, #16]
 8015924:	621a      	str	r2, [r3, #32]
}
 8015926:	bf00      	nop
 8015928:	371c      	adds	r7, #28
 801592a:	46bd      	mov	sp, r7
 801592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015930:	4770      	bx	lr
 8015932:	bf00      	nop
 8015934:	40010000 	.word	0x40010000

08015938 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8015938:	b480      	push	{r7}
 801593a:	b083      	sub	sp, #12
 801593c:	af00      	add	r7, sp, #0
 801593e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8015940:	bf00      	nop
 8015942:	370c      	adds	r7, #12
 8015944:	46bd      	mov	sp, r7
 8015946:	f85d 7b04 	ldr.w	r7, [sp], #4
 801594a:	4770      	bx	lr

0801594c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801594c:	b480      	push	{r7}
 801594e:	b083      	sub	sp, #12
 8015950:	af00      	add	r7, sp, #0
 8015952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8015954:	bf00      	nop
 8015956:	370c      	adds	r7, #12
 8015958:	46bd      	mov	sp, r7
 801595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801595e:	4770      	bx	lr

08015960 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8015960:	b580      	push	{r7, lr}
 8015962:	b082      	sub	sp, #8
 8015964:	af00      	add	r7, sp, #0
 8015966:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8015968:	687b      	ldr	r3, [r7, #4]
 801596a:	2b00      	cmp	r3, #0
 801596c:	d101      	bne.n	8015972 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801596e:	2301      	movs	r3, #1
 8015970:	e042      	b.n	80159f8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8015972:	687b      	ldr	r3, [r7, #4]
 8015974:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8015978:	b2db      	uxtb	r3, r3
 801597a:	2b00      	cmp	r3, #0
 801597c:	d106      	bne.n	801598c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801597e:	687b      	ldr	r3, [r7, #4]
 8015980:	2200      	movs	r2, #0
 8015982:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8015986:	6878      	ldr	r0, [r7, #4]
 8015988:	f7fb fdaa 	bl	80114e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801598c:	687b      	ldr	r3, [r7, #4]
 801598e:	2224      	movs	r2, #36	; 0x24
 8015990:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8015994:	687b      	ldr	r3, [r7, #4]
 8015996:	681b      	ldr	r3, [r3, #0]
 8015998:	68da      	ldr	r2, [r3, #12]
 801599a:	687b      	ldr	r3, [r7, #4]
 801599c:	681b      	ldr	r3, [r3, #0]
 801599e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80159a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80159a4:	6878      	ldr	r0, [r7, #4]
 80159a6:	f000 fdf3 	bl	8016590 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80159aa:	687b      	ldr	r3, [r7, #4]
 80159ac:	681b      	ldr	r3, [r3, #0]
 80159ae:	691a      	ldr	r2, [r3, #16]
 80159b0:	687b      	ldr	r3, [r7, #4]
 80159b2:	681b      	ldr	r3, [r3, #0]
 80159b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80159b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80159ba:	687b      	ldr	r3, [r7, #4]
 80159bc:	681b      	ldr	r3, [r3, #0]
 80159be:	695a      	ldr	r2, [r3, #20]
 80159c0:	687b      	ldr	r3, [r7, #4]
 80159c2:	681b      	ldr	r3, [r3, #0]
 80159c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80159c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80159ca:	687b      	ldr	r3, [r7, #4]
 80159cc:	681b      	ldr	r3, [r3, #0]
 80159ce:	68da      	ldr	r2, [r3, #12]
 80159d0:	687b      	ldr	r3, [r7, #4]
 80159d2:	681b      	ldr	r3, [r3, #0]
 80159d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80159d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80159da:	687b      	ldr	r3, [r7, #4]
 80159dc:	2200      	movs	r2, #0
 80159de:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80159e0:	687b      	ldr	r3, [r7, #4]
 80159e2:	2220      	movs	r2, #32
 80159e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80159e8:	687b      	ldr	r3, [r7, #4]
 80159ea:	2220      	movs	r2, #32
 80159ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80159f0:	687b      	ldr	r3, [r7, #4]
 80159f2:	2200      	movs	r2, #0
 80159f4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80159f6:	2300      	movs	r3, #0
}
 80159f8:	4618      	mov	r0, r3
 80159fa:	3708      	adds	r7, #8
 80159fc:	46bd      	mov	sp, r7
 80159fe:	bd80      	pop	{r7, pc}

08015a00 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8015a00:	b580      	push	{r7, lr}
 8015a02:	b08a      	sub	sp, #40	; 0x28
 8015a04:	af02      	add	r7, sp, #8
 8015a06:	60f8      	str	r0, [r7, #12]
 8015a08:	60b9      	str	r1, [r7, #8]
 8015a0a:	603b      	str	r3, [r7, #0]
 8015a0c:	4613      	mov	r3, r2
 8015a0e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8015a10:	2300      	movs	r3, #0
 8015a12:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8015a14:	68fb      	ldr	r3, [r7, #12]
 8015a16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8015a1a:	b2db      	uxtb	r3, r3
 8015a1c:	2b20      	cmp	r3, #32
 8015a1e:	d175      	bne.n	8015b0c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8015a20:	68bb      	ldr	r3, [r7, #8]
 8015a22:	2b00      	cmp	r3, #0
 8015a24:	d002      	beq.n	8015a2c <HAL_UART_Transmit+0x2c>
 8015a26:	88fb      	ldrh	r3, [r7, #6]
 8015a28:	2b00      	cmp	r3, #0
 8015a2a:	d101      	bne.n	8015a30 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8015a2c:	2301      	movs	r3, #1
 8015a2e:	e06e      	b.n	8015b0e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015a30:	68fb      	ldr	r3, [r7, #12]
 8015a32:	2200      	movs	r2, #0
 8015a34:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8015a36:	68fb      	ldr	r3, [r7, #12]
 8015a38:	2221      	movs	r2, #33	; 0x21
 8015a3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8015a3e:	f7fb fe99 	bl	8011774 <HAL_GetTick>
 8015a42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8015a44:	68fb      	ldr	r3, [r7, #12]
 8015a46:	88fa      	ldrh	r2, [r7, #6]
 8015a48:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8015a4a:	68fb      	ldr	r3, [r7, #12]
 8015a4c:	88fa      	ldrh	r2, [r7, #6]
 8015a4e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8015a50:	68fb      	ldr	r3, [r7, #12]
 8015a52:	689b      	ldr	r3, [r3, #8]
 8015a54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015a58:	d108      	bne.n	8015a6c <HAL_UART_Transmit+0x6c>
 8015a5a:	68fb      	ldr	r3, [r7, #12]
 8015a5c:	691b      	ldr	r3, [r3, #16]
 8015a5e:	2b00      	cmp	r3, #0
 8015a60:	d104      	bne.n	8015a6c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8015a62:	2300      	movs	r3, #0
 8015a64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8015a66:	68bb      	ldr	r3, [r7, #8]
 8015a68:	61bb      	str	r3, [r7, #24]
 8015a6a:	e003      	b.n	8015a74 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8015a6c:	68bb      	ldr	r3, [r7, #8]
 8015a6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8015a70:	2300      	movs	r3, #0
 8015a72:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8015a74:	e02e      	b.n	8015ad4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8015a76:	683b      	ldr	r3, [r7, #0]
 8015a78:	9300      	str	r3, [sp, #0]
 8015a7a:	697b      	ldr	r3, [r7, #20]
 8015a7c:	2200      	movs	r2, #0
 8015a7e:	2180      	movs	r1, #128	; 0x80
 8015a80:	68f8      	ldr	r0, [r7, #12]
 8015a82:	f000 fb55 	bl	8016130 <UART_WaitOnFlagUntilTimeout>
 8015a86:	4603      	mov	r3, r0
 8015a88:	2b00      	cmp	r3, #0
 8015a8a:	d005      	beq.n	8015a98 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8015a8c:	68fb      	ldr	r3, [r7, #12]
 8015a8e:	2220      	movs	r2, #32
 8015a90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8015a94:	2303      	movs	r3, #3
 8015a96:	e03a      	b.n	8015b0e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8015a98:	69fb      	ldr	r3, [r7, #28]
 8015a9a:	2b00      	cmp	r3, #0
 8015a9c:	d10b      	bne.n	8015ab6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8015a9e:	69bb      	ldr	r3, [r7, #24]
 8015aa0:	881b      	ldrh	r3, [r3, #0]
 8015aa2:	461a      	mov	r2, r3
 8015aa4:	68fb      	ldr	r3, [r7, #12]
 8015aa6:	681b      	ldr	r3, [r3, #0]
 8015aa8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8015aac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8015aae:	69bb      	ldr	r3, [r7, #24]
 8015ab0:	3302      	adds	r3, #2
 8015ab2:	61bb      	str	r3, [r7, #24]
 8015ab4:	e007      	b.n	8015ac6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8015ab6:	69fb      	ldr	r3, [r7, #28]
 8015ab8:	781a      	ldrb	r2, [r3, #0]
 8015aba:	68fb      	ldr	r3, [r7, #12]
 8015abc:	681b      	ldr	r3, [r3, #0]
 8015abe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8015ac0:	69fb      	ldr	r3, [r7, #28]
 8015ac2:	3301      	adds	r3, #1
 8015ac4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8015ac6:	68fb      	ldr	r3, [r7, #12]
 8015ac8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8015aca:	b29b      	uxth	r3, r3
 8015acc:	3b01      	subs	r3, #1
 8015ace:	b29a      	uxth	r2, r3
 8015ad0:	68fb      	ldr	r3, [r7, #12]
 8015ad2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8015ad4:	68fb      	ldr	r3, [r7, #12]
 8015ad6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8015ad8:	b29b      	uxth	r3, r3
 8015ada:	2b00      	cmp	r3, #0
 8015adc:	d1cb      	bne.n	8015a76 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8015ade:	683b      	ldr	r3, [r7, #0]
 8015ae0:	9300      	str	r3, [sp, #0]
 8015ae2:	697b      	ldr	r3, [r7, #20]
 8015ae4:	2200      	movs	r2, #0
 8015ae6:	2140      	movs	r1, #64	; 0x40
 8015ae8:	68f8      	ldr	r0, [r7, #12]
 8015aea:	f000 fb21 	bl	8016130 <UART_WaitOnFlagUntilTimeout>
 8015aee:	4603      	mov	r3, r0
 8015af0:	2b00      	cmp	r3, #0
 8015af2:	d005      	beq.n	8015b00 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8015af4:	68fb      	ldr	r3, [r7, #12]
 8015af6:	2220      	movs	r2, #32
 8015af8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8015afc:	2303      	movs	r3, #3
 8015afe:	e006      	b.n	8015b0e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8015b00:	68fb      	ldr	r3, [r7, #12]
 8015b02:	2220      	movs	r2, #32
 8015b04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8015b08:	2300      	movs	r3, #0
 8015b0a:	e000      	b.n	8015b0e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8015b0c:	2302      	movs	r3, #2
  }
}
 8015b0e:	4618      	mov	r0, r3
 8015b10:	3720      	adds	r7, #32
 8015b12:	46bd      	mov	sp, r7
 8015b14:	bd80      	pop	{r7, pc}

08015b16 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8015b16:	b580      	push	{r7, lr}
 8015b18:	b08c      	sub	sp, #48	; 0x30
 8015b1a:	af00      	add	r7, sp, #0
 8015b1c:	60f8      	str	r0, [r7, #12]
 8015b1e:	60b9      	str	r1, [r7, #8]
 8015b20:	4613      	mov	r3, r2
 8015b22:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8015b24:	68fb      	ldr	r3, [r7, #12]
 8015b26:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015b2a:	b2db      	uxtb	r3, r3
 8015b2c:	2b20      	cmp	r3, #32
 8015b2e:	d14a      	bne.n	8015bc6 <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8015b30:	68bb      	ldr	r3, [r7, #8]
 8015b32:	2b00      	cmp	r3, #0
 8015b34:	d002      	beq.n	8015b3c <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8015b36:	88fb      	ldrh	r3, [r7, #6]
 8015b38:	2b00      	cmp	r3, #0
 8015b3a:	d101      	bne.n	8015b40 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 8015b3c:	2301      	movs	r3, #1
 8015b3e:	e043      	b.n	8015bc8 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8015b40:	68fb      	ldr	r3, [r7, #12]
 8015b42:	2201      	movs	r2, #1
 8015b44:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8015b46:	68fb      	ldr	r3, [r7, #12]
 8015b48:	2200      	movs	r2, #0
 8015b4a:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8015b4c:	88fb      	ldrh	r3, [r7, #6]
 8015b4e:	461a      	mov	r2, r3
 8015b50:	68b9      	ldr	r1, [r7, #8]
 8015b52:	68f8      	ldr	r0, [r7, #12]
 8015b54:	f000 fb45 	bl	80161e2 <UART_Start_Receive_IT>
 8015b58:	4603      	mov	r3, r0
 8015b5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8015b5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015b62:	2b00      	cmp	r3, #0
 8015b64:	d12c      	bne.n	8015bc0 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015b66:	68fb      	ldr	r3, [r7, #12]
 8015b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015b6a:	2b01      	cmp	r3, #1
 8015b6c:	d125      	bne.n	8015bba <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8015b6e:	2300      	movs	r3, #0
 8015b70:	613b      	str	r3, [r7, #16]
 8015b72:	68fb      	ldr	r3, [r7, #12]
 8015b74:	681b      	ldr	r3, [r3, #0]
 8015b76:	681b      	ldr	r3, [r3, #0]
 8015b78:	613b      	str	r3, [r7, #16]
 8015b7a:	68fb      	ldr	r3, [r7, #12]
 8015b7c:	681b      	ldr	r3, [r3, #0]
 8015b7e:	685b      	ldr	r3, [r3, #4]
 8015b80:	613b      	str	r3, [r7, #16]
 8015b82:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015b84:	68fb      	ldr	r3, [r7, #12]
 8015b86:	681b      	ldr	r3, [r3, #0]
 8015b88:	330c      	adds	r3, #12
 8015b8a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015b8c:	69bb      	ldr	r3, [r7, #24]
 8015b8e:	e853 3f00 	ldrex	r3, [r3]
 8015b92:	617b      	str	r3, [r7, #20]
   return(result);
 8015b94:	697b      	ldr	r3, [r7, #20]
 8015b96:	f043 0310 	orr.w	r3, r3, #16
 8015b9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8015b9c:	68fb      	ldr	r3, [r7, #12]
 8015b9e:	681b      	ldr	r3, [r3, #0]
 8015ba0:	330c      	adds	r3, #12
 8015ba2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015ba4:	627a      	str	r2, [r7, #36]	; 0x24
 8015ba6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015ba8:	6a39      	ldr	r1, [r7, #32]
 8015baa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015bac:	e841 2300 	strex	r3, r2, [r1]
 8015bb0:	61fb      	str	r3, [r7, #28]
   return(result);
 8015bb2:	69fb      	ldr	r3, [r7, #28]
 8015bb4:	2b00      	cmp	r3, #0
 8015bb6:	d1e5      	bne.n	8015b84 <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 8015bb8:	e002      	b.n	8015bc0 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8015bba:	2301      	movs	r3, #1
 8015bbc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8015bc0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015bc4:	e000      	b.n	8015bc8 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8015bc6:	2302      	movs	r3, #2
  }
}
 8015bc8:	4618      	mov	r0, r3
 8015bca:	3730      	adds	r7, #48	; 0x30
 8015bcc:	46bd      	mov	sp, r7
 8015bce:	bd80      	pop	{r7, pc}

08015bd0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8015bd0:	b580      	push	{r7, lr}
 8015bd2:	b0ba      	sub	sp, #232	; 0xe8
 8015bd4:	af00      	add	r7, sp, #0
 8015bd6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8015bd8:	687b      	ldr	r3, [r7, #4]
 8015bda:	681b      	ldr	r3, [r3, #0]
 8015bdc:	681b      	ldr	r3, [r3, #0]
 8015bde:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8015be2:	687b      	ldr	r3, [r7, #4]
 8015be4:	681b      	ldr	r3, [r3, #0]
 8015be6:	68db      	ldr	r3, [r3, #12]
 8015be8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8015bec:	687b      	ldr	r3, [r7, #4]
 8015bee:	681b      	ldr	r3, [r3, #0]
 8015bf0:	695b      	ldr	r3, [r3, #20]
 8015bf2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8015bf6:	2300      	movs	r3, #0
 8015bf8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8015bfc:	2300      	movs	r3, #0
 8015bfe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8015c02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015c06:	f003 030f 	and.w	r3, r3, #15
 8015c0a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8015c0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8015c12:	2b00      	cmp	r3, #0
 8015c14:	d10f      	bne.n	8015c36 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8015c16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015c1a:	f003 0320 	and.w	r3, r3, #32
 8015c1e:	2b00      	cmp	r3, #0
 8015c20:	d009      	beq.n	8015c36 <HAL_UART_IRQHandler+0x66>
 8015c22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8015c26:	f003 0320 	and.w	r3, r3, #32
 8015c2a:	2b00      	cmp	r3, #0
 8015c2c:	d003      	beq.n	8015c36 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8015c2e:	6878      	ldr	r0, [r7, #4]
 8015c30:	f000 fbf0 	bl	8016414 <UART_Receive_IT>
      return;
 8015c34:	e25b      	b.n	80160ee <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8015c36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8015c3a:	2b00      	cmp	r3, #0
 8015c3c:	f000 80de 	beq.w	8015dfc <HAL_UART_IRQHandler+0x22c>
 8015c40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8015c44:	f003 0301 	and.w	r3, r3, #1
 8015c48:	2b00      	cmp	r3, #0
 8015c4a:	d106      	bne.n	8015c5a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8015c4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8015c50:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8015c54:	2b00      	cmp	r3, #0
 8015c56:	f000 80d1 	beq.w	8015dfc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8015c5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015c5e:	f003 0301 	and.w	r3, r3, #1
 8015c62:	2b00      	cmp	r3, #0
 8015c64:	d00b      	beq.n	8015c7e <HAL_UART_IRQHandler+0xae>
 8015c66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8015c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015c6e:	2b00      	cmp	r3, #0
 8015c70:	d005      	beq.n	8015c7e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8015c72:	687b      	ldr	r3, [r7, #4]
 8015c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015c76:	f043 0201 	orr.w	r2, r3, #1
 8015c7a:	687b      	ldr	r3, [r7, #4]
 8015c7c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8015c7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015c82:	f003 0304 	and.w	r3, r3, #4
 8015c86:	2b00      	cmp	r3, #0
 8015c88:	d00b      	beq.n	8015ca2 <HAL_UART_IRQHandler+0xd2>
 8015c8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8015c8e:	f003 0301 	and.w	r3, r3, #1
 8015c92:	2b00      	cmp	r3, #0
 8015c94:	d005      	beq.n	8015ca2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8015c96:	687b      	ldr	r3, [r7, #4]
 8015c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015c9a:	f043 0202 	orr.w	r2, r3, #2
 8015c9e:	687b      	ldr	r3, [r7, #4]
 8015ca0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8015ca2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015ca6:	f003 0302 	and.w	r3, r3, #2
 8015caa:	2b00      	cmp	r3, #0
 8015cac:	d00b      	beq.n	8015cc6 <HAL_UART_IRQHandler+0xf6>
 8015cae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8015cb2:	f003 0301 	and.w	r3, r3, #1
 8015cb6:	2b00      	cmp	r3, #0
 8015cb8:	d005      	beq.n	8015cc6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8015cba:	687b      	ldr	r3, [r7, #4]
 8015cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015cbe:	f043 0204 	orr.w	r2, r3, #4
 8015cc2:	687b      	ldr	r3, [r7, #4]
 8015cc4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8015cc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015cca:	f003 0308 	and.w	r3, r3, #8
 8015cce:	2b00      	cmp	r3, #0
 8015cd0:	d011      	beq.n	8015cf6 <HAL_UART_IRQHandler+0x126>
 8015cd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8015cd6:	f003 0320 	and.w	r3, r3, #32
 8015cda:	2b00      	cmp	r3, #0
 8015cdc:	d105      	bne.n	8015cea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8015cde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8015ce2:	f003 0301 	and.w	r3, r3, #1
 8015ce6:	2b00      	cmp	r3, #0
 8015ce8:	d005      	beq.n	8015cf6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8015cea:	687b      	ldr	r3, [r7, #4]
 8015cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015cee:	f043 0208 	orr.w	r2, r3, #8
 8015cf2:	687b      	ldr	r3, [r7, #4]
 8015cf4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8015cf6:	687b      	ldr	r3, [r7, #4]
 8015cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015cfa:	2b00      	cmp	r3, #0
 8015cfc:	f000 81f2 	beq.w	80160e4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8015d00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015d04:	f003 0320 	and.w	r3, r3, #32
 8015d08:	2b00      	cmp	r3, #0
 8015d0a:	d008      	beq.n	8015d1e <HAL_UART_IRQHandler+0x14e>
 8015d0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8015d10:	f003 0320 	and.w	r3, r3, #32
 8015d14:	2b00      	cmp	r3, #0
 8015d16:	d002      	beq.n	8015d1e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8015d18:	6878      	ldr	r0, [r7, #4]
 8015d1a:	f000 fb7b 	bl	8016414 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8015d1e:	687b      	ldr	r3, [r7, #4]
 8015d20:	681b      	ldr	r3, [r3, #0]
 8015d22:	695b      	ldr	r3, [r3, #20]
 8015d24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015d28:	2b40      	cmp	r3, #64	; 0x40
 8015d2a:	bf0c      	ite	eq
 8015d2c:	2301      	moveq	r3, #1
 8015d2e:	2300      	movne	r3, #0
 8015d30:	b2db      	uxtb	r3, r3
 8015d32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8015d36:	687b      	ldr	r3, [r7, #4]
 8015d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015d3a:	f003 0308 	and.w	r3, r3, #8
 8015d3e:	2b00      	cmp	r3, #0
 8015d40:	d103      	bne.n	8015d4a <HAL_UART_IRQHandler+0x17a>
 8015d42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8015d46:	2b00      	cmp	r3, #0
 8015d48:	d04f      	beq.n	8015dea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8015d4a:	6878      	ldr	r0, [r7, #4]
 8015d4c:	f000 fa83 	bl	8016256 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8015d50:	687b      	ldr	r3, [r7, #4]
 8015d52:	681b      	ldr	r3, [r3, #0]
 8015d54:	695b      	ldr	r3, [r3, #20]
 8015d56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015d5a:	2b40      	cmp	r3, #64	; 0x40
 8015d5c:	d141      	bne.n	8015de2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8015d5e:	687b      	ldr	r3, [r7, #4]
 8015d60:	681b      	ldr	r3, [r3, #0]
 8015d62:	3314      	adds	r3, #20
 8015d64:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015d68:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8015d6c:	e853 3f00 	ldrex	r3, [r3]
 8015d70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8015d74:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8015d78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015d7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8015d80:	687b      	ldr	r3, [r7, #4]
 8015d82:	681b      	ldr	r3, [r3, #0]
 8015d84:	3314      	adds	r3, #20
 8015d86:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8015d8a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8015d8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015d92:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8015d96:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8015d9a:	e841 2300 	strex	r3, r2, [r1]
 8015d9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8015da2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8015da6:	2b00      	cmp	r3, #0
 8015da8:	d1d9      	bne.n	8015d5e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8015daa:	687b      	ldr	r3, [r7, #4]
 8015dac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015dae:	2b00      	cmp	r3, #0
 8015db0:	d013      	beq.n	8015dda <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8015db2:	687b      	ldr	r3, [r7, #4]
 8015db4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015db6:	4a7e      	ldr	r2, [pc, #504]	; (8015fb0 <HAL_UART_IRQHandler+0x3e0>)
 8015db8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8015dba:	687b      	ldr	r3, [r7, #4]
 8015dbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015dbe:	4618      	mov	r0, r3
 8015dc0:	f7fc f99a 	bl	80120f8 <HAL_DMA_Abort_IT>
 8015dc4:	4603      	mov	r3, r0
 8015dc6:	2b00      	cmp	r3, #0
 8015dc8:	d016      	beq.n	8015df8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8015dca:	687b      	ldr	r3, [r7, #4]
 8015dcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015dce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015dd0:	687a      	ldr	r2, [r7, #4]
 8015dd2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8015dd4:	4610      	mov	r0, r2
 8015dd6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8015dd8:	e00e      	b.n	8015df8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8015dda:	6878      	ldr	r0, [r7, #4]
 8015ddc:	f000 f99e 	bl	801611c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8015de0:	e00a      	b.n	8015df8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8015de2:	6878      	ldr	r0, [r7, #4]
 8015de4:	f000 f99a 	bl	801611c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8015de8:	e006      	b.n	8015df8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8015dea:	6878      	ldr	r0, [r7, #4]
 8015dec:	f000 f996 	bl	801611c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015df0:	687b      	ldr	r3, [r7, #4]
 8015df2:	2200      	movs	r2, #0
 8015df4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8015df6:	e175      	b.n	80160e4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8015df8:	bf00      	nop
    return;
 8015dfa:	e173      	b.n	80160e4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015dfc:	687b      	ldr	r3, [r7, #4]
 8015dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015e00:	2b01      	cmp	r3, #1
 8015e02:	f040 814f 	bne.w	80160a4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8015e06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015e0a:	f003 0310 	and.w	r3, r3, #16
 8015e0e:	2b00      	cmp	r3, #0
 8015e10:	f000 8148 	beq.w	80160a4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8015e14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8015e18:	f003 0310 	and.w	r3, r3, #16
 8015e1c:	2b00      	cmp	r3, #0
 8015e1e:	f000 8141 	beq.w	80160a4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8015e22:	2300      	movs	r3, #0
 8015e24:	60bb      	str	r3, [r7, #8]
 8015e26:	687b      	ldr	r3, [r7, #4]
 8015e28:	681b      	ldr	r3, [r3, #0]
 8015e2a:	681b      	ldr	r3, [r3, #0]
 8015e2c:	60bb      	str	r3, [r7, #8]
 8015e2e:	687b      	ldr	r3, [r7, #4]
 8015e30:	681b      	ldr	r3, [r3, #0]
 8015e32:	685b      	ldr	r3, [r3, #4]
 8015e34:	60bb      	str	r3, [r7, #8]
 8015e36:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8015e38:	687b      	ldr	r3, [r7, #4]
 8015e3a:	681b      	ldr	r3, [r3, #0]
 8015e3c:	695b      	ldr	r3, [r3, #20]
 8015e3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015e42:	2b40      	cmp	r3, #64	; 0x40
 8015e44:	f040 80b6 	bne.w	8015fb4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8015e48:	687b      	ldr	r3, [r7, #4]
 8015e4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015e4c:	681b      	ldr	r3, [r3, #0]
 8015e4e:	685b      	ldr	r3, [r3, #4]
 8015e50:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8015e54:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8015e58:	2b00      	cmp	r3, #0
 8015e5a:	f000 8145 	beq.w	80160e8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8015e5e:	687b      	ldr	r3, [r7, #4]
 8015e60:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8015e62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8015e66:	429a      	cmp	r2, r3
 8015e68:	f080 813e 	bcs.w	80160e8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8015e6c:	687b      	ldr	r3, [r7, #4]
 8015e6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8015e72:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8015e74:	687b      	ldr	r3, [r7, #4]
 8015e76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015e78:	69db      	ldr	r3, [r3, #28]
 8015e7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015e7e:	f000 8088 	beq.w	8015f92 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8015e82:	687b      	ldr	r3, [r7, #4]
 8015e84:	681b      	ldr	r3, [r3, #0]
 8015e86:	330c      	adds	r3, #12
 8015e88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015e8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8015e90:	e853 3f00 	ldrex	r3, [r3]
 8015e94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8015e98:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8015e9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8015ea0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8015ea4:	687b      	ldr	r3, [r7, #4]
 8015ea6:	681b      	ldr	r3, [r3, #0]
 8015ea8:	330c      	adds	r3, #12
 8015eaa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8015eae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8015eb2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015eb6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8015eba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8015ebe:	e841 2300 	strex	r3, r2, [r1]
 8015ec2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8015ec6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015eca:	2b00      	cmp	r3, #0
 8015ecc:	d1d9      	bne.n	8015e82 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015ece:	687b      	ldr	r3, [r7, #4]
 8015ed0:	681b      	ldr	r3, [r3, #0]
 8015ed2:	3314      	adds	r3, #20
 8015ed4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015ed6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015ed8:	e853 3f00 	ldrex	r3, [r3]
 8015edc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8015ede:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015ee0:	f023 0301 	bic.w	r3, r3, #1
 8015ee4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8015ee8:	687b      	ldr	r3, [r7, #4]
 8015eea:	681b      	ldr	r3, [r3, #0]
 8015eec:	3314      	adds	r3, #20
 8015eee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8015ef2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8015ef6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015ef8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8015efa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8015efe:	e841 2300 	strex	r3, r2, [r1]
 8015f02:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8015f04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015f06:	2b00      	cmp	r3, #0
 8015f08:	d1e1      	bne.n	8015ece <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8015f0a:	687b      	ldr	r3, [r7, #4]
 8015f0c:	681b      	ldr	r3, [r3, #0]
 8015f0e:	3314      	adds	r3, #20
 8015f10:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015f12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015f14:	e853 3f00 	ldrex	r3, [r3]
 8015f18:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8015f1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015f1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015f20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8015f24:	687b      	ldr	r3, [r7, #4]
 8015f26:	681b      	ldr	r3, [r3, #0]
 8015f28:	3314      	adds	r3, #20
 8015f2a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8015f2e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8015f30:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015f32:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8015f34:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8015f36:	e841 2300 	strex	r3, r2, [r1]
 8015f3a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8015f3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015f3e:	2b00      	cmp	r3, #0
 8015f40:	d1e3      	bne.n	8015f0a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8015f42:	687b      	ldr	r3, [r7, #4]
 8015f44:	2220      	movs	r2, #32
 8015f46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015f4a:	687b      	ldr	r3, [r7, #4]
 8015f4c:	2200      	movs	r2, #0
 8015f4e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015f50:	687b      	ldr	r3, [r7, #4]
 8015f52:	681b      	ldr	r3, [r3, #0]
 8015f54:	330c      	adds	r3, #12
 8015f56:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015f58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015f5a:	e853 3f00 	ldrex	r3, [r3]
 8015f5e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8015f60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015f62:	f023 0310 	bic.w	r3, r3, #16
 8015f66:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8015f6a:	687b      	ldr	r3, [r7, #4]
 8015f6c:	681b      	ldr	r3, [r3, #0]
 8015f6e:	330c      	adds	r3, #12
 8015f70:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8015f74:	65ba      	str	r2, [r7, #88]	; 0x58
 8015f76:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015f78:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8015f7a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8015f7c:	e841 2300 	strex	r3, r2, [r1]
 8015f80:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8015f82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015f84:	2b00      	cmp	r3, #0
 8015f86:	d1e3      	bne.n	8015f50 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8015f88:	687b      	ldr	r3, [r7, #4]
 8015f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015f8c:	4618      	mov	r0, r3
 8015f8e:	f7fc f843 	bl	8012018 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8015f92:	687b      	ldr	r3, [r7, #4]
 8015f94:	2202      	movs	r2, #2
 8015f96:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8015f98:	687b      	ldr	r3, [r7, #4]
 8015f9a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8015f9c:	687b      	ldr	r3, [r7, #4]
 8015f9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8015fa0:	b29b      	uxth	r3, r3
 8015fa2:	1ad3      	subs	r3, r2, r3
 8015fa4:	b29b      	uxth	r3, r3
 8015fa6:	4619      	mov	r1, r3
 8015fa8:	6878      	ldr	r0, [r7, #4]
 8015faa:	f000 fe41 	bl	8016c30 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8015fae:	e09b      	b.n	80160e8 <HAL_UART_IRQHandler+0x518>
 8015fb0:	0801631d 	.word	0x0801631d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8015fb4:	687b      	ldr	r3, [r7, #4]
 8015fb6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8015fb8:	687b      	ldr	r3, [r7, #4]
 8015fba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8015fbc:	b29b      	uxth	r3, r3
 8015fbe:	1ad3      	subs	r3, r2, r3
 8015fc0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8015fc4:	687b      	ldr	r3, [r7, #4]
 8015fc6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8015fc8:	b29b      	uxth	r3, r3
 8015fca:	2b00      	cmp	r3, #0
 8015fcc:	f000 808e 	beq.w	80160ec <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8015fd0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8015fd4:	2b00      	cmp	r3, #0
 8015fd6:	f000 8089 	beq.w	80160ec <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8015fda:	687b      	ldr	r3, [r7, #4]
 8015fdc:	681b      	ldr	r3, [r3, #0]
 8015fde:	330c      	adds	r3, #12
 8015fe0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015fe4:	e853 3f00 	ldrex	r3, [r3]
 8015fe8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8015fea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015fec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8015ff0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8015ff4:	687b      	ldr	r3, [r7, #4]
 8015ff6:	681b      	ldr	r3, [r3, #0]
 8015ff8:	330c      	adds	r3, #12
 8015ffa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8015ffe:	647a      	str	r2, [r7, #68]	; 0x44
 8016000:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016002:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8016004:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016006:	e841 2300 	strex	r3, r2, [r1]
 801600a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801600c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801600e:	2b00      	cmp	r3, #0
 8016010:	d1e3      	bne.n	8015fda <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016012:	687b      	ldr	r3, [r7, #4]
 8016014:	681b      	ldr	r3, [r3, #0]
 8016016:	3314      	adds	r3, #20
 8016018:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801601a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801601c:	e853 3f00 	ldrex	r3, [r3]
 8016020:	623b      	str	r3, [r7, #32]
   return(result);
 8016022:	6a3b      	ldr	r3, [r7, #32]
 8016024:	f023 0301 	bic.w	r3, r3, #1
 8016028:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801602c:	687b      	ldr	r3, [r7, #4]
 801602e:	681b      	ldr	r3, [r3, #0]
 8016030:	3314      	adds	r3, #20
 8016032:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8016036:	633a      	str	r2, [r7, #48]	; 0x30
 8016038:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801603a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801603c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801603e:	e841 2300 	strex	r3, r2, [r1]
 8016042:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8016044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016046:	2b00      	cmp	r3, #0
 8016048:	d1e3      	bne.n	8016012 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801604a:	687b      	ldr	r3, [r7, #4]
 801604c:	2220      	movs	r2, #32
 801604e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016052:	687b      	ldr	r3, [r7, #4]
 8016054:	2200      	movs	r2, #0
 8016056:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8016058:	687b      	ldr	r3, [r7, #4]
 801605a:	681b      	ldr	r3, [r3, #0]
 801605c:	330c      	adds	r3, #12
 801605e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016060:	693b      	ldr	r3, [r7, #16]
 8016062:	e853 3f00 	ldrex	r3, [r3]
 8016066:	60fb      	str	r3, [r7, #12]
   return(result);
 8016068:	68fb      	ldr	r3, [r7, #12]
 801606a:	f023 0310 	bic.w	r3, r3, #16
 801606e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8016072:	687b      	ldr	r3, [r7, #4]
 8016074:	681b      	ldr	r3, [r3, #0]
 8016076:	330c      	adds	r3, #12
 8016078:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 801607c:	61fa      	str	r2, [r7, #28]
 801607e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016080:	69b9      	ldr	r1, [r7, #24]
 8016082:	69fa      	ldr	r2, [r7, #28]
 8016084:	e841 2300 	strex	r3, r2, [r1]
 8016088:	617b      	str	r3, [r7, #20]
   return(result);
 801608a:	697b      	ldr	r3, [r7, #20]
 801608c:	2b00      	cmp	r3, #0
 801608e:	d1e3      	bne.n	8016058 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8016090:	687b      	ldr	r3, [r7, #4]
 8016092:	2202      	movs	r2, #2
 8016094:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8016096:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801609a:	4619      	mov	r1, r3
 801609c:	6878      	ldr	r0, [r7, #4]
 801609e:	f000 fdc7 	bl	8016c30 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80160a2:	e023      	b.n	80160ec <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80160a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80160a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80160ac:	2b00      	cmp	r3, #0
 80160ae:	d009      	beq.n	80160c4 <HAL_UART_IRQHandler+0x4f4>
 80160b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80160b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80160b8:	2b00      	cmp	r3, #0
 80160ba:	d003      	beq.n	80160c4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80160bc:	6878      	ldr	r0, [r7, #4]
 80160be:	f000 f941 	bl	8016344 <UART_Transmit_IT>
    return;
 80160c2:	e014      	b.n	80160ee <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80160c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80160c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80160cc:	2b00      	cmp	r3, #0
 80160ce:	d00e      	beq.n	80160ee <HAL_UART_IRQHandler+0x51e>
 80160d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80160d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80160d8:	2b00      	cmp	r3, #0
 80160da:	d008      	beq.n	80160ee <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80160dc:	6878      	ldr	r0, [r7, #4]
 80160de:	f000 f981 	bl	80163e4 <UART_EndTransmit_IT>
    return;
 80160e2:	e004      	b.n	80160ee <HAL_UART_IRQHandler+0x51e>
    return;
 80160e4:	bf00      	nop
 80160e6:	e002      	b.n	80160ee <HAL_UART_IRQHandler+0x51e>
      return;
 80160e8:	bf00      	nop
 80160ea:	e000      	b.n	80160ee <HAL_UART_IRQHandler+0x51e>
      return;
 80160ec:	bf00      	nop
  }
}
 80160ee:	37e8      	adds	r7, #232	; 0xe8
 80160f0:	46bd      	mov	sp, r7
 80160f2:	bd80      	pop	{r7, pc}

080160f4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80160f4:	b480      	push	{r7}
 80160f6:	b083      	sub	sp, #12
 80160f8:	af00      	add	r7, sp, #0
 80160fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80160fc:	bf00      	nop
 80160fe:	370c      	adds	r7, #12
 8016100:	46bd      	mov	sp, r7
 8016102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016106:	4770      	bx	lr

08016108 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8016108:	b480      	push	{r7}
 801610a:	b083      	sub	sp, #12
 801610c:	af00      	add	r7, sp, #0
 801610e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8016110:	bf00      	nop
 8016112:	370c      	adds	r7, #12
 8016114:	46bd      	mov	sp, r7
 8016116:	f85d 7b04 	ldr.w	r7, [sp], #4
 801611a:	4770      	bx	lr

0801611c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 801611c:	b480      	push	{r7}
 801611e:	b083      	sub	sp, #12
 8016120:	af00      	add	r7, sp, #0
 8016122:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8016124:	bf00      	nop
 8016126:	370c      	adds	r7, #12
 8016128:	46bd      	mov	sp, r7
 801612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801612e:	4770      	bx	lr

08016130 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8016130:	b580      	push	{r7, lr}
 8016132:	b086      	sub	sp, #24
 8016134:	af00      	add	r7, sp, #0
 8016136:	60f8      	str	r0, [r7, #12]
 8016138:	60b9      	str	r1, [r7, #8]
 801613a:	603b      	str	r3, [r7, #0]
 801613c:	4613      	mov	r3, r2
 801613e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8016140:	e03b      	b.n	80161ba <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8016142:	6a3b      	ldr	r3, [r7, #32]
 8016144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016148:	d037      	beq.n	80161ba <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801614a:	f7fb fb13 	bl	8011774 <HAL_GetTick>
 801614e:	4602      	mov	r2, r0
 8016150:	683b      	ldr	r3, [r7, #0]
 8016152:	1ad3      	subs	r3, r2, r3
 8016154:	6a3a      	ldr	r2, [r7, #32]
 8016156:	429a      	cmp	r2, r3
 8016158:	d302      	bcc.n	8016160 <UART_WaitOnFlagUntilTimeout+0x30>
 801615a:	6a3b      	ldr	r3, [r7, #32]
 801615c:	2b00      	cmp	r3, #0
 801615e:	d101      	bne.n	8016164 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8016160:	2303      	movs	r3, #3
 8016162:	e03a      	b.n	80161da <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8016164:	68fb      	ldr	r3, [r7, #12]
 8016166:	681b      	ldr	r3, [r3, #0]
 8016168:	68db      	ldr	r3, [r3, #12]
 801616a:	f003 0304 	and.w	r3, r3, #4
 801616e:	2b00      	cmp	r3, #0
 8016170:	d023      	beq.n	80161ba <UART_WaitOnFlagUntilTimeout+0x8a>
 8016172:	68bb      	ldr	r3, [r7, #8]
 8016174:	2b80      	cmp	r3, #128	; 0x80
 8016176:	d020      	beq.n	80161ba <UART_WaitOnFlagUntilTimeout+0x8a>
 8016178:	68bb      	ldr	r3, [r7, #8]
 801617a:	2b40      	cmp	r3, #64	; 0x40
 801617c:	d01d      	beq.n	80161ba <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801617e:	68fb      	ldr	r3, [r7, #12]
 8016180:	681b      	ldr	r3, [r3, #0]
 8016182:	681b      	ldr	r3, [r3, #0]
 8016184:	f003 0308 	and.w	r3, r3, #8
 8016188:	2b08      	cmp	r3, #8
 801618a:	d116      	bne.n	80161ba <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 801618c:	2300      	movs	r3, #0
 801618e:	617b      	str	r3, [r7, #20]
 8016190:	68fb      	ldr	r3, [r7, #12]
 8016192:	681b      	ldr	r3, [r3, #0]
 8016194:	681b      	ldr	r3, [r3, #0]
 8016196:	617b      	str	r3, [r7, #20]
 8016198:	68fb      	ldr	r3, [r7, #12]
 801619a:	681b      	ldr	r3, [r3, #0]
 801619c:	685b      	ldr	r3, [r3, #4]
 801619e:	617b      	str	r3, [r7, #20]
 80161a0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80161a2:	68f8      	ldr	r0, [r7, #12]
 80161a4:	f000 f857 	bl	8016256 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80161a8:	68fb      	ldr	r3, [r7, #12]
 80161aa:	2208      	movs	r2, #8
 80161ac:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80161ae:	68fb      	ldr	r3, [r7, #12]
 80161b0:	2200      	movs	r2, #0
 80161b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80161b6:	2301      	movs	r3, #1
 80161b8:	e00f      	b.n	80161da <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80161ba:	68fb      	ldr	r3, [r7, #12]
 80161bc:	681b      	ldr	r3, [r3, #0]
 80161be:	681a      	ldr	r2, [r3, #0]
 80161c0:	68bb      	ldr	r3, [r7, #8]
 80161c2:	4013      	ands	r3, r2
 80161c4:	68ba      	ldr	r2, [r7, #8]
 80161c6:	429a      	cmp	r2, r3
 80161c8:	bf0c      	ite	eq
 80161ca:	2301      	moveq	r3, #1
 80161cc:	2300      	movne	r3, #0
 80161ce:	b2db      	uxtb	r3, r3
 80161d0:	461a      	mov	r2, r3
 80161d2:	79fb      	ldrb	r3, [r7, #7]
 80161d4:	429a      	cmp	r2, r3
 80161d6:	d0b4      	beq.n	8016142 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80161d8:	2300      	movs	r3, #0
}
 80161da:	4618      	mov	r0, r3
 80161dc:	3718      	adds	r7, #24
 80161de:	46bd      	mov	sp, r7
 80161e0:	bd80      	pop	{r7, pc}

080161e2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80161e2:	b480      	push	{r7}
 80161e4:	b085      	sub	sp, #20
 80161e6:	af00      	add	r7, sp, #0
 80161e8:	60f8      	str	r0, [r7, #12]
 80161ea:	60b9      	str	r1, [r7, #8]
 80161ec:	4613      	mov	r3, r2
 80161ee:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80161f0:	68fb      	ldr	r3, [r7, #12]
 80161f2:	68ba      	ldr	r2, [r7, #8]
 80161f4:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80161f6:	68fb      	ldr	r3, [r7, #12]
 80161f8:	88fa      	ldrh	r2, [r7, #6]
 80161fa:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80161fc:	68fb      	ldr	r3, [r7, #12]
 80161fe:	88fa      	ldrh	r2, [r7, #6]
 8016200:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016202:	68fb      	ldr	r3, [r7, #12]
 8016204:	2200      	movs	r2, #0
 8016206:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8016208:	68fb      	ldr	r3, [r7, #12]
 801620a:	2222      	movs	r2, #34	; 0x22
 801620c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8016210:	68fb      	ldr	r3, [r7, #12]
 8016212:	691b      	ldr	r3, [r3, #16]
 8016214:	2b00      	cmp	r3, #0
 8016216:	d007      	beq.n	8016228 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8016218:	68fb      	ldr	r3, [r7, #12]
 801621a:	681b      	ldr	r3, [r3, #0]
 801621c:	68da      	ldr	r2, [r3, #12]
 801621e:	68fb      	ldr	r3, [r7, #12]
 8016220:	681b      	ldr	r3, [r3, #0]
 8016222:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8016226:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8016228:	68fb      	ldr	r3, [r7, #12]
 801622a:	681b      	ldr	r3, [r3, #0]
 801622c:	695a      	ldr	r2, [r3, #20]
 801622e:	68fb      	ldr	r3, [r7, #12]
 8016230:	681b      	ldr	r3, [r3, #0]
 8016232:	f042 0201 	orr.w	r2, r2, #1
 8016236:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8016238:	68fb      	ldr	r3, [r7, #12]
 801623a:	681b      	ldr	r3, [r3, #0]
 801623c:	68da      	ldr	r2, [r3, #12]
 801623e:	68fb      	ldr	r3, [r7, #12]
 8016240:	681b      	ldr	r3, [r3, #0]
 8016242:	f042 0220 	orr.w	r2, r2, #32
 8016246:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8016248:	2300      	movs	r3, #0
}
 801624a:	4618      	mov	r0, r3
 801624c:	3714      	adds	r7, #20
 801624e:	46bd      	mov	sp, r7
 8016250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016254:	4770      	bx	lr

08016256 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8016256:	b480      	push	{r7}
 8016258:	b095      	sub	sp, #84	; 0x54
 801625a:	af00      	add	r7, sp, #0
 801625c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801625e:	687b      	ldr	r3, [r7, #4]
 8016260:	681b      	ldr	r3, [r3, #0]
 8016262:	330c      	adds	r3, #12
 8016264:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016268:	e853 3f00 	ldrex	r3, [r3]
 801626c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801626e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016270:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8016274:	64fb      	str	r3, [r7, #76]	; 0x4c
 8016276:	687b      	ldr	r3, [r7, #4]
 8016278:	681b      	ldr	r3, [r3, #0]
 801627a:	330c      	adds	r3, #12
 801627c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801627e:	643a      	str	r2, [r7, #64]	; 0x40
 8016280:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016282:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8016284:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8016286:	e841 2300 	strex	r3, r2, [r1]
 801628a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801628c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801628e:	2b00      	cmp	r3, #0
 8016290:	d1e5      	bne.n	801625e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016292:	687b      	ldr	r3, [r7, #4]
 8016294:	681b      	ldr	r3, [r3, #0]
 8016296:	3314      	adds	r3, #20
 8016298:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801629a:	6a3b      	ldr	r3, [r7, #32]
 801629c:	e853 3f00 	ldrex	r3, [r3]
 80162a0:	61fb      	str	r3, [r7, #28]
   return(result);
 80162a2:	69fb      	ldr	r3, [r7, #28]
 80162a4:	f023 0301 	bic.w	r3, r3, #1
 80162a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80162aa:	687b      	ldr	r3, [r7, #4]
 80162ac:	681b      	ldr	r3, [r3, #0]
 80162ae:	3314      	adds	r3, #20
 80162b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80162b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80162b4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80162b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80162b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80162ba:	e841 2300 	strex	r3, r2, [r1]
 80162be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80162c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162c2:	2b00      	cmp	r3, #0
 80162c4:	d1e5      	bne.n	8016292 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80162c6:	687b      	ldr	r3, [r7, #4]
 80162c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80162ca:	2b01      	cmp	r3, #1
 80162cc:	d119      	bne.n	8016302 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80162ce:	687b      	ldr	r3, [r7, #4]
 80162d0:	681b      	ldr	r3, [r3, #0]
 80162d2:	330c      	adds	r3, #12
 80162d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80162d6:	68fb      	ldr	r3, [r7, #12]
 80162d8:	e853 3f00 	ldrex	r3, [r3]
 80162dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80162de:	68bb      	ldr	r3, [r7, #8]
 80162e0:	f023 0310 	bic.w	r3, r3, #16
 80162e4:	647b      	str	r3, [r7, #68]	; 0x44
 80162e6:	687b      	ldr	r3, [r7, #4]
 80162e8:	681b      	ldr	r3, [r3, #0]
 80162ea:	330c      	adds	r3, #12
 80162ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80162ee:	61ba      	str	r2, [r7, #24]
 80162f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80162f2:	6979      	ldr	r1, [r7, #20]
 80162f4:	69ba      	ldr	r2, [r7, #24]
 80162f6:	e841 2300 	strex	r3, r2, [r1]
 80162fa:	613b      	str	r3, [r7, #16]
   return(result);
 80162fc:	693b      	ldr	r3, [r7, #16]
 80162fe:	2b00      	cmp	r3, #0
 8016300:	d1e5      	bne.n	80162ce <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8016302:	687b      	ldr	r3, [r7, #4]
 8016304:	2220      	movs	r2, #32
 8016306:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801630a:	687b      	ldr	r3, [r7, #4]
 801630c:	2200      	movs	r2, #0
 801630e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8016310:	bf00      	nop
 8016312:	3754      	adds	r7, #84	; 0x54
 8016314:	46bd      	mov	sp, r7
 8016316:	f85d 7b04 	ldr.w	r7, [sp], #4
 801631a:	4770      	bx	lr

0801631c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801631c:	b580      	push	{r7, lr}
 801631e:	b084      	sub	sp, #16
 8016320:	af00      	add	r7, sp, #0
 8016322:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8016324:	687b      	ldr	r3, [r7, #4]
 8016326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016328:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 801632a:	68fb      	ldr	r3, [r7, #12]
 801632c:	2200      	movs	r2, #0
 801632e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8016330:	68fb      	ldr	r3, [r7, #12]
 8016332:	2200      	movs	r2, #0
 8016334:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8016336:	68f8      	ldr	r0, [r7, #12]
 8016338:	f7ff fef0 	bl	801611c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801633c:	bf00      	nop
 801633e:	3710      	adds	r7, #16
 8016340:	46bd      	mov	sp, r7
 8016342:	bd80      	pop	{r7, pc}

08016344 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8016344:	b480      	push	{r7}
 8016346:	b085      	sub	sp, #20
 8016348:	af00      	add	r7, sp, #0
 801634a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 801634c:	687b      	ldr	r3, [r7, #4]
 801634e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8016352:	b2db      	uxtb	r3, r3
 8016354:	2b21      	cmp	r3, #33	; 0x21
 8016356:	d13e      	bne.n	80163d6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8016358:	687b      	ldr	r3, [r7, #4]
 801635a:	689b      	ldr	r3, [r3, #8]
 801635c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8016360:	d114      	bne.n	801638c <UART_Transmit_IT+0x48>
 8016362:	687b      	ldr	r3, [r7, #4]
 8016364:	691b      	ldr	r3, [r3, #16]
 8016366:	2b00      	cmp	r3, #0
 8016368:	d110      	bne.n	801638c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 801636a:	687b      	ldr	r3, [r7, #4]
 801636c:	6a1b      	ldr	r3, [r3, #32]
 801636e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8016370:	68fb      	ldr	r3, [r7, #12]
 8016372:	881b      	ldrh	r3, [r3, #0]
 8016374:	461a      	mov	r2, r3
 8016376:	687b      	ldr	r3, [r7, #4]
 8016378:	681b      	ldr	r3, [r3, #0]
 801637a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801637e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8016380:	687b      	ldr	r3, [r7, #4]
 8016382:	6a1b      	ldr	r3, [r3, #32]
 8016384:	1c9a      	adds	r2, r3, #2
 8016386:	687b      	ldr	r3, [r7, #4]
 8016388:	621a      	str	r2, [r3, #32]
 801638a:	e008      	b.n	801639e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 801638c:	687b      	ldr	r3, [r7, #4]
 801638e:	6a1b      	ldr	r3, [r3, #32]
 8016390:	1c59      	adds	r1, r3, #1
 8016392:	687a      	ldr	r2, [r7, #4]
 8016394:	6211      	str	r1, [r2, #32]
 8016396:	781a      	ldrb	r2, [r3, #0]
 8016398:	687b      	ldr	r3, [r7, #4]
 801639a:	681b      	ldr	r3, [r3, #0]
 801639c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 801639e:	687b      	ldr	r3, [r7, #4]
 80163a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80163a2:	b29b      	uxth	r3, r3
 80163a4:	3b01      	subs	r3, #1
 80163a6:	b29b      	uxth	r3, r3
 80163a8:	687a      	ldr	r2, [r7, #4]
 80163aa:	4619      	mov	r1, r3
 80163ac:	84d1      	strh	r1, [r2, #38]	; 0x26
 80163ae:	2b00      	cmp	r3, #0
 80163b0:	d10f      	bne.n	80163d2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80163b2:	687b      	ldr	r3, [r7, #4]
 80163b4:	681b      	ldr	r3, [r3, #0]
 80163b6:	68da      	ldr	r2, [r3, #12]
 80163b8:	687b      	ldr	r3, [r7, #4]
 80163ba:	681b      	ldr	r3, [r3, #0]
 80163bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80163c0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80163c2:	687b      	ldr	r3, [r7, #4]
 80163c4:	681b      	ldr	r3, [r3, #0]
 80163c6:	68da      	ldr	r2, [r3, #12]
 80163c8:	687b      	ldr	r3, [r7, #4]
 80163ca:	681b      	ldr	r3, [r3, #0]
 80163cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80163d0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80163d2:	2300      	movs	r3, #0
 80163d4:	e000      	b.n	80163d8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80163d6:	2302      	movs	r3, #2
  }
}
 80163d8:	4618      	mov	r0, r3
 80163da:	3714      	adds	r7, #20
 80163dc:	46bd      	mov	sp, r7
 80163de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163e2:	4770      	bx	lr

080163e4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80163e4:	b580      	push	{r7, lr}
 80163e6:	b082      	sub	sp, #8
 80163e8:	af00      	add	r7, sp, #0
 80163ea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80163ec:	687b      	ldr	r3, [r7, #4]
 80163ee:	681b      	ldr	r3, [r3, #0]
 80163f0:	68da      	ldr	r2, [r3, #12]
 80163f2:	687b      	ldr	r3, [r7, #4]
 80163f4:	681b      	ldr	r3, [r3, #0]
 80163f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80163fa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80163fc:	687b      	ldr	r3, [r7, #4]
 80163fe:	2220      	movs	r2, #32
 8016400:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8016404:	6878      	ldr	r0, [r7, #4]
 8016406:	f7ff fe75 	bl	80160f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 801640a:	2300      	movs	r3, #0
}
 801640c:	4618      	mov	r0, r3
 801640e:	3708      	adds	r7, #8
 8016410:	46bd      	mov	sp, r7
 8016412:	bd80      	pop	{r7, pc}

08016414 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8016414:	b580      	push	{r7, lr}
 8016416:	b08c      	sub	sp, #48	; 0x30
 8016418:	af00      	add	r7, sp, #0
 801641a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801641c:	687b      	ldr	r3, [r7, #4]
 801641e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016422:	b2db      	uxtb	r3, r3
 8016424:	2b22      	cmp	r3, #34	; 0x22
 8016426:	f040 80ae 	bne.w	8016586 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801642a:	687b      	ldr	r3, [r7, #4]
 801642c:	689b      	ldr	r3, [r3, #8]
 801642e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8016432:	d117      	bne.n	8016464 <UART_Receive_IT+0x50>
 8016434:	687b      	ldr	r3, [r7, #4]
 8016436:	691b      	ldr	r3, [r3, #16]
 8016438:	2b00      	cmp	r3, #0
 801643a:	d113      	bne.n	8016464 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 801643c:	2300      	movs	r3, #0
 801643e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8016440:	687b      	ldr	r3, [r7, #4]
 8016442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016444:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8016446:	687b      	ldr	r3, [r7, #4]
 8016448:	681b      	ldr	r3, [r3, #0]
 801644a:	685b      	ldr	r3, [r3, #4]
 801644c:	b29b      	uxth	r3, r3
 801644e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016452:	b29a      	uxth	r2, r3
 8016454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016456:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8016458:	687b      	ldr	r3, [r7, #4]
 801645a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801645c:	1c9a      	adds	r2, r3, #2
 801645e:	687b      	ldr	r3, [r7, #4]
 8016460:	629a      	str	r2, [r3, #40]	; 0x28
 8016462:	e026      	b.n	80164b2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8016464:	687b      	ldr	r3, [r7, #4]
 8016466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016468:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 801646a:	2300      	movs	r3, #0
 801646c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 801646e:	687b      	ldr	r3, [r7, #4]
 8016470:	689b      	ldr	r3, [r3, #8]
 8016472:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8016476:	d007      	beq.n	8016488 <UART_Receive_IT+0x74>
 8016478:	687b      	ldr	r3, [r7, #4]
 801647a:	689b      	ldr	r3, [r3, #8]
 801647c:	2b00      	cmp	r3, #0
 801647e:	d10a      	bne.n	8016496 <UART_Receive_IT+0x82>
 8016480:	687b      	ldr	r3, [r7, #4]
 8016482:	691b      	ldr	r3, [r3, #16]
 8016484:	2b00      	cmp	r3, #0
 8016486:	d106      	bne.n	8016496 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8016488:	687b      	ldr	r3, [r7, #4]
 801648a:	681b      	ldr	r3, [r3, #0]
 801648c:	685b      	ldr	r3, [r3, #4]
 801648e:	b2da      	uxtb	r2, r3
 8016490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016492:	701a      	strb	r2, [r3, #0]
 8016494:	e008      	b.n	80164a8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8016496:	687b      	ldr	r3, [r7, #4]
 8016498:	681b      	ldr	r3, [r3, #0]
 801649a:	685b      	ldr	r3, [r3, #4]
 801649c:	b2db      	uxtb	r3, r3
 801649e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80164a2:	b2da      	uxtb	r2, r3
 80164a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164a6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80164a8:	687b      	ldr	r3, [r7, #4]
 80164aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80164ac:	1c5a      	adds	r2, r3, #1
 80164ae:	687b      	ldr	r3, [r7, #4]
 80164b0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80164b2:	687b      	ldr	r3, [r7, #4]
 80164b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80164b6:	b29b      	uxth	r3, r3
 80164b8:	3b01      	subs	r3, #1
 80164ba:	b29b      	uxth	r3, r3
 80164bc:	687a      	ldr	r2, [r7, #4]
 80164be:	4619      	mov	r1, r3
 80164c0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80164c2:	2b00      	cmp	r3, #0
 80164c4:	d15d      	bne.n	8016582 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80164c6:	687b      	ldr	r3, [r7, #4]
 80164c8:	681b      	ldr	r3, [r3, #0]
 80164ca:	68da      	ldr	r2, [r3, #12]
 80164cc:	687b      	ldr	r3, [r7, #4]
 80164ce:	681b      	ldr	r3, [r3, #0]
 80164d0:	f022 0220 	bic.w	r2, r2, #32
 80164d4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80164d6:	687b      	ldr	r3, [r7, #4]
 80164d8:	681b      	ldr	r3, [r3, #0]
 80164da:	68da      	ldr	r2, [r3, #12]
 80164dc:	687b      	ldr	r3, [r7, #4]
 80164de:	681b      	ldr	r3, [r3, #0]
 80164e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80164e4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80164e6:	687b      	ldr	r3, [r7, #4]
 80164e8:	681b      	ldr	r3, [r3, #0]
 80164ea:	695a      	ldr	r2, [r3, #20]
 80164ec:	687b      	ldr	r3, [r7, #4]
 80164ee:	681b      	ldr	r3, [r3, #0]
 80164f0:	f022 0201 	bic.w	r2, r2, #1
 80164f4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80164f6:	687b      	ldr	r3, [r7, #4]
 80164f8:	2220      	movs	r2, #32
 80164fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80164fe:	687b      	ldr	r3, [r7, #4]
 8016500:	2200      	movs	r2, #0
 8016502:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016504:	687b      	ldr	r3, [r7, #4]
 8016506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016508:	2b01      	cmp	r3, #1
 801650a:	d135      	bne.n	8016578 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801650c:	687b      	ldr	r3, [r7, #4]
 801650e:	2200      	movs	r2, #0
 8016510:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8016512:	687b      	ldr	r3, [r7, #4]
 8016514:	681b      	ldr	r3, [r3, #0]
 8016516:	330c      	adds	r3, #12
 8016518:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801651a:	697b      	ldr	r3, [r7, #20]
 801651c:	e853 3f00 	ldrex	r3, [r3]
 8016520:	613b      	str	r3, [r7, #16]
   return(result);
 8016522:	693b      	ldr	r3, [r7, #16]
 8016524:	f023 0310 	bic.w	r3, r3, #16
 8016528:	627b      	str	r3, [r7, #36]	; 0x24
 801652a:	687b      	ldr	r3, [r7, #4]
 801652c:	681b      	ldr	r3, [r3, #0]
 801652e:	330c      	adds	r3, #12
 8016530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016532:	623a      	str	r2, [r7, #32]
 8016534:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016536:	69f9      	ldr	r1, [r7, #28]
 8016538:	6a3a      	ldr	r2, [r7, #32]
 801653a:	e841 2300 	strex	r3, r2, [r1]
 801653e:	61bb      	str	r3, [r7, #24]
   return(result);
 8016540:	69bb      	ldr	r3, [r7, #24]
 8016542:	2b00      	cmp	r3, #0
 8016544:	d1e5      	bne.n	8016512 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8016546:	687b      	ldr	r3, [r7, #4]
 8016548:	681b      	ldr	r3, [r3, #0]
 801654a:	681b      	ldr	r3, [r3, #0]
 801654c:	f003 0310 	and.w	r3, r3, #16
 8016550:	2b10      	cmp	r3, #16
 8016552:	d10a      	bne.n	801656a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8016554:	2300      	movs	r3, #0
 8016556:	60fb      	str	r3, [r7, #12]
 8016558:	687b      	ldr	r3, [r7, #4]
 801655a:	681b      	ldr	r3, [r3, #0]
 801655c:	681b      	ldr	r3, [r3, #0]
 801655e:	60fb      	str	r3, [r7, #12]
 8016560:	687b      	ldr	r3, [r7, #4]
 8016562:	681b      	ldr	r3, [r3, #0]
 8016564:	685b      	ldr	r3, [r3, #4]
 8016566:	60fb      	str	r3, [r7, #12]
 8016568:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801656a:	687b      	ldr	r3, [r7, #4]
 801656c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801656e:	4619      	mov	r1, r3
 8016570:	6878      	ldr	r0, [r7, #4]
 8016572:	f000 fb5d 	bl	8016c30 <HAL_UARTEx_RxEventCallback>
 8016576:	e002      	b.n	801657e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8016578:	6878      	ldr	r0, [r7, #4]
 801657a:	f7ff fdc5 	bl	8016108 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 801657e:	2300      	movs	r3, #0
 8016580:	e002      	b.n	8016588 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8016582:	2300      	movs	r3, #0
 8016584:	e000      	b.n	8016588 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8016586:	2302      	movs	r3, #2
  }
}
 8016588:	4618      	mov	r0, r3
 801658a:	3730      	adds	r7, #48	; 0x30
 801658c:	46bd      	mov	sp, r7
 801658e:	bd80      	pop	{r7, pc}

08016590 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8016590:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8016594:	b0c0      	sub	sp, #256	; 0x100
 8016596:	af00      	add	r7, sp, #0
 8016598:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801659c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80165a0:	681b      	ldr	r3, [r3, #0]
 80165a2:	691b      	ldr	r3, [r3, #16]
 80165a4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80165a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80165ac:	68d9      	ldr	r1, [r3, #12]
 80165ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80165b2:	681a      	ldr	r2, [r3, #0]
 80165b4:	ea40 0301 	orr.w	r3, r0, r1
 80165b8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80165ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80165be:	689a      	ldr	r2, [r3, #8]
 80165c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80165c4:	691b      	ldr	r3, [r3, #16]
 80165c6:	431a      	orrs	r2, r3
 80165c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80165cc:	695b      	ldr	r3, [r3, #20]
 80165ce:	431a      	orrs	r2, r3
 80165d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80165d4:	69db      	ldr	r3, [r3, #28]
 80165d6:	4313      	orrs	r3, r2
 80165d8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80165dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80165e0:	681b      	ldr	r3, [r3, #0]
 80165e2:	68db      	ldr	r3, [r3, #12]
 80165e4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80165e8:	f021 010c 	bic.w	r1, r1, #12
 80165ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80165f0:	681a      	ldr	r2, [r3, #0]
 80165f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80165f6:	430b      	orrs	r3, r1
 80165f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80165fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80165fe:	681b      	ldr	r3, [r3, #0]
 8016600:	695b      	ldr	r3, [r3, #20]
 8016602:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8016606:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801660a:	6999      	ldr	r1, [r3, #24]
 801660c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8016610:	681a      	ldr	r2, [r3, #0]
 8016612:	ea40 0301 	orr.w	r3, r0, r1
 8016616:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8016618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801661c:	681a      	ldr	r2, [r3, #0]
 801661e:	4b8f      	ldr	r3, [pc, #572]	; (801685c <UART_SetConfig+0x2cc>)
 8016620:	429a      	cmp	r2, r3
 8016622:	d005      	beq.n	8016630 <UART_SetConfig+0xa0>
 8016624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8016628:	681a      	ldr	r2, [r3, #0]
 801662a:	4b8d      	ldr	r3, [pc, #564]	; (8016860 <UART_SetConfig+0x2d0>)
 801662c:	429a      	cmp	r2, r3
 801662e:	d104      	bne.n	801663a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8016630:	f7fd ffc4 	bl	80145bc <HAL_RCC_GetPCLK2Freq>
 8016634:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8016638:	e003      	b.n	8016642 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 801663a:	f7fd ffab 	bl	8014594 <HAL_RCC_GetPCLK1Freq>
 801663e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8016642:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8016646:	69db      	ldr	r3, [r3, #28]
 8016648:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801664c:	f040 810c 	bne.w	8016868 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8016650:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8016654:	2200      	movs	r2, #0
 8016656:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 801665a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 801665e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8016662:	4622      	mov	r2, r4
 8016664:	462b      	mov	r3, r5
 8016666:	1891      	adds	r1, r2, r2
 8016668:	65b9      	str	r1, [r7, #88]	; 0x58
 801666a:	415b      	adcs	r3, r3
 801666c:	65fb      	str	r3, [r7, #92]	; 0x5c
 801666e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8016672:	4621      	mov	r1, r4
 8016674:	eb12 0801 	adds.w	r8, r2, r1
 8016678:	4629      	mov	r1, r5
 801667a:	eb43 0901 	adc.w	r9, r3, r1
 801667e:	f04f 0200 	mov.w	r2, #0
 8016682:	f04f 0300 	mov.w	r3, #0
 8016686:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 801668a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 801668e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8016692:	4690      	mov	r8, r2
 8016694:	4699      	mov	r9, r3
 8016696:	4623      	mov	r3, r4
 8016698:	eb18 0303 	adds.w	r3, r8, r3
 801669c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80166a0:	462b      	mov	r3, r5
 80166a2:	eb49 0303 	adc.w	r3, r9, r3
 80166a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80166aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80166ae:	685b      	ldr	r3, [r3, #4]
 80166b0:	2200      	movs	r2, #0
 80166b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80166b6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80166ba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80166be:	460b      	mov	r3, r1
 80166c0:	18db      	adds	r3, r3, r3
 80166c2:	653b      	str	r3, [r7, #80]	; 0x50
 80166c4:	4613      	mov	r3, r2
 80166c6:	eb42 0303 	adc.w	r3, r2, r3
 80166ca:	657b      	str	r3, [r7, #84]	; 0x54
 80166cc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80166d0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80166d4:	f7f9 fdec 	bl	80102b0 <__aeabi_uldivmod>
 80166d8:	4602      	mov	r2, r0
 80166da:	460b      	mov	r3, r1
 80166dc:	4b61      	ldr	r3, [pc, #388]	; (8016864 <UART_SetConfig+0x2d4>)
 80166de:	fba3 2302 	umull	r2, r3, r3, r2
 80166e2:	095b      	lsrs	r3, r3, #5
 80166e4:	011c      	lsls	r4, r3, #4
 80166e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80166ea:	2200      	movs	r2, #0
 80166ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80166f0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80166f4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80166f8:	4642      	mov	r2, r8
 80166fa:	464b      	mov	r3, r9
 80166fc:	1891      	adds	r1, r2, r2
 80166fe:	64b9      	str	r1, [r7, #72]	; 0x48
 8016700:	415b      	adcs	r3, r3
 8016702:	64fb      	str	r3, [r7, #76]	; 0x4c
 8016704:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8016708:	4641      	mov	r1, r8
 801670a:	eb12 0a01 	adds.w	sl, r2, r1
 801670e:	4649      	mov	r1, r9
 8016710:	eb43 0b01 	adc.w	fp, r3, r1
 8016714:	f04f 0200 	mov.w	r2, #0
 8016718:	f04f 0300 	mov.w	r3, #0
 801671c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8016720:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8016724:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8016728:	4692      	mov	sl, r2
 801672a:	469b      	mov	fp, r3
 801672c:	4643      	mov	r3, r8
 801672e:	eb1a 0303 	adds.w	r3, sl, r3
 8016732:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8016736:	464b      	mov	r3, r9
 8016738:	eb4b 0303 	adc.w	r3, fp, r3
 801673c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8016740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8016744:	685b      	ldr	r3, [r3, #4]
 8016746:	2200      	movs	r2, #0
 8016748:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801674c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8016750:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8016754:	460b      	mov	r3, r1
 8016756:	18db      	adds	r3, r3, r3
 8016758:	643b      	str	r3, [r7, #64]	; 0x40
 801675a:	4613      	mov	r3, r2
 801675c:	eb42 0303 	adc.w	r3, r2, r3
 8016760:	647b      	str	r3, [r7, #68]	; 0x44
 8016762:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8016766:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 801676a:	f7f9 fda1 	bl	80102b0 <__aeabi_uldivmod>
 801676e:	4602      	mov	r2, r0
 8016770:	460b      	mov	r3, r1
 8016772:	4611      	mov	r1, r2
 8016774:	4b3b      	ldr	r3, [pc, #236]	; (8016864 <UART_SetConfig+0x2d4>)
 8016776:	fba3 2301 	umull	r2, r3, r3, r1
 801677a:	095b      	lsrs	r3, r3, #5
 801677c:	2264      	movs	r2, #100	; 0x64
 801677e:	fb02 f303 	mul.w	r3, r2, r3
 8016782:	1acb      	subs	r3, r1, r3
 8016784:	00db      	lsls	r3, r3, #3
 8016786:	f103 0232 	add.w	r2, r3, #50	; 0x32
 801678a:	4b36      	ldr	r3, [pc, #216]	; (8016864 <UART_SetConfig+0x2d4>)
 801678c:	fba3 2302 	umull	r2, r3, r3, r2
 8016790:	095b      	lsrs	r3, r3, #5
 8016792:	005b      	lsls	r3, r3, #1
 8016794:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8016798:	441c      	add	r4, r3
 801679a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801679e:	2200      	movs	r2, #0
 80167a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80167a4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80167a8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80167ac:	4642      	mov	r2, r8
 80167ae:	464b      	mov	r3, r9
 80167b0:	1891      	adds	r1, r2, r2
 80167b2:	63b9      	str	r1, [r7, #56]	; 0x38
 80167b4:	415b      	adcs	r3, r3
 80167b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80167b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80167bc:	4641      	mov	r1, r8
 80167be:	1851      	adds	r1, r2, r1
 80167c0:	6339      	str	r1, [r7, #48]	; 0x30
 80167c2:	4649      	mov	r1, r9
 80167c4:	414b      	adcs	r3, r1
 80167c6:	637b      	str	r3, [r7, #52]	; 0x34
 80167c8:	f04f 0200 	mov.w	r2, #0
 80167cc:	f04f 0300 	mov.w	r3, #0
 80167d0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80167d4:	4659      	mov	r1, fp
 80167d6:	00cb      	lsls	r3, r1, #3
 80167d8:	4651      	mov	r1, sl
 80167da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80167de:	4651      	mov	r1, sl
 80167e0:	00ca      	lsls	r2, r1, #3
 80167e2:	4610      	mov	r0, r2
 80167e4:	4619      	mov	r1, r3
 80167e6:	4603      	mov	r3, r0
 80167e8:	4642      	mov	r2, r8
 80167ea:	189b      	adds	r3, r3, r2
 80167ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80167f0:	464b      	mov	r3, r9
 80167f2:	460a      	mov	r2, r1
 80167f4:	eb42 0303 	adc.w	r3, r2, r3
 80167f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80167fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8016800:	685b      	ldr	r3, [r3, #4]
 8016802:	2200      	movs	r2, #0
 8016804:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8016808:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 801680c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8016810:	460b      	mov	r3, r1
 8016812:	18db      	adds	r3, r3, r3
 8016814:	62bb      	str	r3, [r7, #40]	; 0x28
 8016816:	4613      	mov	r3, r2
 8016818:	eb42 0303 	adc.w	r3, r2, r3
 801681c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801681e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8016822:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8016826:	f7f9 fd43 	bl	80102b0 <__aeabi_uldivmod>
 801682a:	4602      	mov	r2, r0
 801682c:	460b      	mov	r3, r1
 801682e:	4b0d      	ldr	r3, [pc, #52]	; (8016864 <UART_SetConfig+0x2d4>)
 8016830:	fba3 1302 	umull	r1, r3, r3, r2
 8016834:	095b      	lsrs	r3, r3, #5
 8016836:	2164      	movs	r1, #100	; 0x64
 8016838:	fb01 f303 	mul.w	r3, r1, r3
 801683c:	1ad3      	subs	r3, r2, r3
 801683e:	00db      	lsls	r3, r3, #3
 8016840:	3332      	adds	r3, #50	; 0x32
 8016842:	4a08      	ldr	r2, [pc, #32]	; (8016864 <UART_SetConfig+0x2d4>)
 8016844:	fba2 2303 	umull	r2, r3, r2, r3
 8016848:	095b      	lsrs	r3, r3, #5
 801684a:	f003 0207 	and.w	r2, r3, #7
 801684e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8016852:	681b      	ldr	r3, [r3, #0]
 8016854:	4422      	add	r2, r4
 8016856:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8016858:	e106      	b.n	8016a68 <UART_SetConfig+0x4d8>
 801685a:	bf00      	nop
 801685c:	40011000 	.word	0x40011000
 8016860:	40011400 	.word	0x40011400
 8016864:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8016868:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801686c:	2200      	movs	r2, #0
 801686e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8016872:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8016876:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 801687a:	4642      	mov	r2, r8
 801687c:	464b      	mov	r3, r9
 801687e:	1891      	adds	r1, r2, r2
 8016880:	6239      	str	r1, [r7, #32]
 8016882:	415b      	adcs	r3, r3
 8016884:	627b      	str	r3, [r7, #36]	; 0x24
 8016886:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801688a:	4641      	mov	r1, r8
 801688c:	1854      	adds	r4, r2, r1
 801688e:	4649      	mov	r1, r9
 8016890:	eb43 0501 	adc.w	r5, r3, r1
 8016894:	f04f 0200 	mov.w	r2, #0
 8016898:	f04f 0300 	mov.w	r3, #0
 801689c:	00eb      	lsls	r3, r5, #3
 801689e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80168a2:	00e2      	lsls	r2, r4, #3
 80168a4:	4614      	mov	r4, r2
 80168a6:	461d      	mov	r5, r3
 80168a8:	4643      	mov	r3, r8
 80168aa:	18e3      	adds	r3, r4, r3
 80168ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80168b0:	464b      	mov	r3, r9
 80168b2:	eb45 0303 	adc.w	r3, r5, r3
 80168b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80168ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80168be:	685b      	ldr	r3, [r3, #4]
 80168c0:	2200      	movs	r2, #0
 80168c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80168c6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80168ca:	f04f 0200 	mov.w	r2, #0
 80168ce:	f04f 0300 	mov.w	r3, #0
 80168d2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80168d6:	4629      	mov	r1, r5
 80168d8:	008b      	lsls	r3, r1, #2
 80168da:	4621      	mov	r1, r4
 80168dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80168e0:	4621      	mov	r1, r4
 80168e2:	008a      	lsls	r2, r1, #2
 80168e4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80168e8:	f7f9 fce2 	bl	80102b0 <__aeabi_uldivmod>
 80168ec:	4602      	mov	r2, r0
 80168ee:	460b      	mov	r3, r1
 80168f0:	4b60      	ldr	r3, [pc, #384]	; (8016a74 <UART_SetConfig+0x4e4>)
 80168f2:	fba3 2302 	umull	r2, r3, r3, r2
 80168f6:	095b      	lsrs	r3, r3, #5
 80168f8:	011c      	lsls	r4, r3, #4
 80168fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80168fe:	2200      	movs	r2, #0
 8016900:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8016904:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8016908:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 801690c:	4642      	mov	r2, r8
 801690e:	464b      	mov	r3, r9
 8016910:	1891      	adds	r1, r2, r2
 8016912:	61b9      	str	r1, [r7, #24]
 8016914:	415b      	adcs	r3, r3
 8016916:	61fb      	str	r3, [r7, #28]
 8016918:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801691c:	4641      	mov	r1, r8
 801691e:	1851      	adds	r1, r2, r1
 8016920:	6139      	str	r1, [r7, #16]
 8016922:	4649      	mov	r1, r9
 8016924:	414b      	adcs	r3, r1
 8016926:	617b      	str	r3, [r7, #20]
 8016928:	f04f 0200 	mov.w	r2, #0
 801692c:	f04f 0300 	mov.w	r3, #0
 8016930:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8016934:	4659      	mov	r1, fp
 8016936:	00cb      	lsls	r3, r1, #3
 8016938:	4651      	mov	r1, sl
 801693a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801693e:	4651      	mov	r1, sl
 8016940:	00ca      	lsls	r2, r1, #3
 8016942:	4610      	mov	r0, r2
 8016944:	4619      	mov	r1, r3
 8016946:	4603      	mov	r3, r0
 8016948:	4642      	mov	r2, r8
 801694a:	189b      	adds	r3, r3, r2
 801694c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8016950:	464b      	mov	r3, r9
 8016952:	460a      	mov	r2, r1
 8016954:	eb42 0303 	adc.w	r3, r2, r3
 8016958:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801695c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8016960:	685b      	ldr	r3, [r3, #4]
 8016962:	2200      	movs	r2, #0
 8016964:	67bb      	str	r3, [r7, #120]	; 0x78
 8016966:	67fa      	str	r2, [r7, #124]	; 0x7c
 8016968:	f04f 0200 	mov.w	r2, #0
 801696c:	f04f 0300 	mov.w	r3, #0
 8016970:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8016974:	4649      	mov	r1, r9
 8016976:	008b      	lsls	r3, r1, #2
 8016978:	4641      	mov	r1, r8
 801697a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801697e:	4641      	mov	r1, r8
 8016980:	008a      	lsls	r2, r1, #2
 8016982:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8016986:	f7f9 fc93 	bl	80102b0 <__aeabi_uldivmod>
 801698a:	4602      	mov	r2, r0
 801698c:	460b      	mov	r3, r1
 801698e:	4611      	mov	r1, r2
 8016990:	4b38      	ldr	r3, [pc, #224]	; (8016a74 <UART_SetConfig+0x4e4>)
 8016992:	fba3 2301 	umull	r2, r3, r3, r1
 8016996:	095b      	lsrs	r3, r3, #5
 8016998:	2264      	movs	r2, #100	; 0x64
 801699a:	fb02 f303 	mul.w	r3, r2, r3
 801699e:	1acb      	subs	r3, r1, r3
 80169a0:	011b      	lsls	r3, r3, #4
 80169a2:	3332      	adds	r3, #50	; 0x32
 80169a4:	4a33      	ldr	r2, [pc, #204]	; (8016a74 <UART_SetConfig+0x4e4>)
 80169a6:	fba2 2303 	umull	r2, r3, r2, r3
 80169aa:	095b      	lsrs	r3, r3, #5
 80169ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80169b0:	441c      	add	r4, r3
 80169b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80169b6:	2200      	movs	r2, #0
 80169b8:	673b      	str	r3, [r7, #112]	; 0x70
 80169ba:	677a      	str	r2, [r7, #116]	; 0x74
 80169bc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80169c0:	4642      	mov	r2, r8
 80169c2:	464b      	mov	r3, r9
 80169c4:	1891      	adds	r1, r2, r2
 80169c6:	60b9      	str	r1, [r7, #8]
 80169c8:	415b      	adcs	r3, r3
 80169ca:	60fb      	str	r3, [r7, #12]
 80169cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80169d0:	4641      	mov	r1, r8
 80169d2:	1851      	adds	r1, r2, r1
 80169d4:	6039      	str	r1, [r7, #0]
 80169d6:	4649      	mov	r1, r9
 80169d8:	414b      	adcs	r3, r1
 80169da:	607b      	str	r3, [r7, #4]
 80169dc:	f04f 0200 	mov.w	r2, #0
 80169e0:	f04f 0300 	mov.w	r3, #0
 80169e4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80169e8:	4659      	mov	r1, fp
 80169ea:	00cb      	lsls	r3, r1, #3
 80169ec:	4651      	mov	r1, sl
 80169ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80169f2:	4651      	mov	r1, sl
 80169f4:	00ca      	lsls	r2, r1, #3
 80169f6:	4610      	mov	r0, r2
 80169f8:	4619      	mov	r1, r3
 80169fa:	4603      	mov	r3, r0
 80169fc:	4642      	mov	r2, r8
 80169fe:	189b      	adds	r3, r3, r2
 8016a00:	66bb      	str	r3, [r7, #104]	; 0x68
 8016a02:	464b      	mov	r3, r9
 8016a04:	460a      	mov	r2, r1
 8016a06:	eb42 0303 	adc.w	r3, r2, r3
 8016a0a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8016a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8016a10:	685b      	ldr	r3, [r3, #4]
 8016a12:	2200      	movs	r2, #0
 8016a14:	663b      	str	r3, [r7, #96]	; 0x60
 8016a16:	667a      	str	r2, [r7, #100]	; 0x64
 8016a18:	f04f 0200 	mov.w	r2, #0
 8016a1c:	f04f 0300 	mov.w	r3, #0
 8016a20:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8016a24:	4649      	mov	r1, r9
 8016a26:	008b      	lsls	r3, r1, #2
 8016a28:	4641      	mov	r1, r8
 8016a2a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8016a2e:	4641      	mov	r1, r8
 8016a30:	008a      	lsls	r2, r1, #2
 8016a32:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8016a36:	f7f9 fc3b 	bl	80102b0 <__aeabi_uldivmod>
 8016a3a:	4602      	mov	r2, r0
 8016a3c:	460b      	mov	r3, r1
 8016a3e:	4b0d      	ldr	r3, [pc, #52]	; (8016a74 <UART_SetConfig+0x4e4>)
 8016a40:	fba3 1302 	umull	r1, r3, r3, r2
 8016a44:	095b      	lsrs	r3, r3, #5
 8016a46:	2164      	movs	r1, #100	; 0x64
 8016a48:	fb01 f303 	mul.w	r3, r1, r3
 8016a4c:	1ad3      	subs	r3, r2, r3
 8016a4e:	011b      	lsls	r3, r3, #4
 8016a50:	3332      	adds	r3, #50	; 0x32
 8016a52:	4a08      	ldr	r2, [pc, #32]	; (8016a74 <UART_SetConfig+0x4e4>)
 8016a54:	fba2 2303 	umull	r2, r3, r2, r3
 8016a58:	095b      	lsrs	r3, r3, #5
 8016a5a:	f003 020f 	and.w	r2, r3, #15
 8016a5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8016a62:	681b      	ldr	r3, [r3, #0]
 8016a64:	4422      	add	r2, r4
 8016a66:	609a      	str	r2, [r3, #8]
}
 8016a68:	bf00      	nop
 8016a6a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8016a6e:	46bd      	mov	sp, r7
 8016a70:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8016a74:	51eb851f 	.word	0x51eb851f

08016a78 <ee24_isConnected>:
#endif

uint8_t ee24_lock = 0;
//################################################################################################################
bool ee24_isConnected(void)
{
 8016a78:	b580      	push	{r7, lr}
 8016a7a:	af00      	add	r7, sp, #0
  #if (_EEPROM_USE_WP_PIN==1)
  HAL_GPIO_WritePin(_EEPROM_WP_GPIO,_EEPROM_WP_PIN,GPIO_PIN_SET);
 8016a7c:	2201      	movs	r2, #1
 8016a7e:	2120      	movs	r1, #32
 8016a80:	4808      	ldr	r0, [pc, #32]	; (8016aa4 <ee24_isConnected+0x2c>)
 8016a82:	f7fb ff1b 	bl	80128bc <HAL_GPIO_WritePin>
  #endif
  if (HAL_I2C_IsDeviceReady(&_EEPROM_I2C, _EEPROM_ADDRESS, 2, 100)==HAL_OK)
 8016a86:	2364      	movs	r3, #100	; 0x64
 8016a88:	2202      	movs	r2, #2
 8016a8a:	21a0      	movs	r1, #160	; 0xa0
 8016a8c:	4806      	ldr	r0, [pc, #24]	; (8016aa8 <ee24_isConnected+0x30>)
 8016a8e:	f7fc fbdd 	bl	801324c <HAL_I2C_IsDeviceReady>
 8016a92:	4603      	mov	r3, r0
 8016a94:	2b00      	cmp	r3, #0
 8016a96:	d101      	bne.n	8016a9c <ee24_isConnected+0x24>
    return true;
 8016a98:	2301      	movs	r3, #1
 8016a9a:	e000      	b.n	8016a9e <ee24_isConnected+0x26>
  else
    return false;
 8016a9c:	2300      	movs	r3, #0
}
 8016a9e:	4618      	mov	r0, r3
 8016aa0:	bd80      	pop	{r7, pc}
 8016aa2:	bf00      	nop
 8016aa4:	40020400 	.word	0x40020400
 8016aa8:	20000120 	.word	0x20000120

08016aac <ee24_write>:
//################################################################################################################
bool ee24_write(uint16_t address, uint8_t *data, size_t len, uint32_t timeout)
{
 8016aac:	b580      	push	{r7, lr}
 8016aae:	b08a      	sub	sp, #40	; 0x28
 8016ab0:	af04      	add	r7, sp, #16
 8016ab2:	60b9      	str	r1, [r7, #8]
 8016ab4:	607a      	str	r2, [r7, #4]
 8016ab6:	603b      	str	r3, [r7, #0]
 8016ab8:	4603      	mov	r3, r0
 8016aba:	81fb      	strh	r3, [r7, #14]
  if (ee24_lock == 1)
 8016abc:	4b31      	ldr	r3, [pc, #196]	; (8016b84 <ee24_write+0xd8>)
 8016abe:	781b      	ldrb	r3, [r3, #0]
 8016ac0:	2b01      	cmp	r3, #1
 8016ac2:	d101      	bne.n	8016ac8 <ee24_write+0x1c>
    return false;
 8016ac4:	2300      	movs	r3, #0
 8016ac6:	e058      	b.n	8016b7a <ee24_write+0xce>
  ee24_lock = 1;
 8016ac8:	4b2e      	ldr	r3, [pc, #184]	; (8016b84 <ee24_write+0xd8>)
 8016aca:	2201      	movs	r2, #1
 8016acc:	701a      	strb	r2, [r3, #0]
  uint16_t w;
  uint32_t startTime = HAL_GetTick();
 8016ace:	f7fa fe51 	bl	8011774 <HAL_GetTick>
 8016ad2:	6138      	str	r0, [r7, #16]
  #if	(_EEPROM_USE_WP_PIN==1)
  HAL_GPIO_WritePin(_EEPROM_WP_GPIO, _EEPROM_WP_PIN,GPIO_PIN_RESET);
 8016ad4:	2200      	movs	r2, #0
 8016ad6:	2120      	movs	r1, #32
 8016ad8:	482b      	ldr	r0, [pc, #172]	; (8016b88 <ee24_write+0xdc>)
 8016ada:	f7fb feef 	bl	80128bc <HAL_GPIO_WritePin>
  #endif
  while (1)
  {
    w = _EEPROM_PSIZE - (address  % _EEPROM_PSIZE);
 8016ade:	89fb      	ldrh	r3, [r7, #14]
 8016ae0:	f003 031f 	and.w	r3, r3, #31
 8016ae4:	b29b      	uxth	r3, r3
 8016ae6:	f1c3 0320 	rsb	r3, r3, #32
 8016aea:	82fb      	strh	r3, [r7, #22]
    if (w > len)
 8016aec:	8afb      	ldrh	r3, [r7, #22]
 8016aee:	687a      	ldr	r2, [r7, #4]
 8016af0:	429a      	cmp	r2, r3
 8016af2:	d201      	bcs.n	8016af8 <ee24_write+0x4c>
      w = len;
 8016af4:	687b      	ldr	r3, [r7, #4]
 8016af6:	82fb      	strh	r3, [r7, #22]
    #elif (_EEPROM_SIZE_KBIT==8)
    if (HAL_I2C_Mem_Write(&_EEPROM_I2C, _EEPROM_ADDRESS | ((address & 0x0300) >> 7), (address & 0xff), I2C_MEMADD_SIZE_8BIT, data, w, 100) == HAL_OK)
    #elif (_EEPROM_SIZE_KBIT==16)
    if (HAL_I2C_Mem_Write(&_EEPROM_I2C, _EEPROM_ADDRESS | ((address & 0x0700) >> 7), (address & 0xff), I2C_MEMADD_SIZE_8BIT, data, w, 100) == HAL_OK)
    #else
    if (HAL_I2C_Mem_Write(&_EEPROM_I2C, _EEPROM_ADDRESS, address, I2C_MEMADD_SIZE_16BIT, data, w, 100) == HAL_OK)
 8016af8:	89fa      	ldrh	r2, [r7, #14]
 8016afa:	2364      	movs	r3, #100	; 0x64
 8016afc:	9302      	str	r3, [sp, #8]
 8016afe:	8afb      	ldrh	r3, [r7, #22]
 8016b00:	9301      	str	r3, [sp, #4]
 8016b02:	68bb      	ldr	r3, [r7, #8]
 8016b04:	9300      	str	r3, [sp, #0]
 8016b06:	2310      	movs	r3, #16
 8016b08:	21a0      	movs	r1, #160	; 0xa0
 8016b0a:	4820      	ldr	r0, [pc, #128]	; (8016b8c <ee24_write+0xe0>)
 8016b0c:	f7fc f872 	bl	8012bf4 <HAL_I2C_Mem_Write>
 8016b10:	4603      	mov	r3, r0
 8016b12:	2b00      	cmp	r3, #0
 8016b14:	d128      	bne.n	8016b68 <ee24_write+0xbc>
    #endif
    {
      ee24_delay(10);
 8016b16:	200a      	movs	r0, #10
 8016b18:	f7fa fe38 	bl	801178c <HAL_Delay>
      len -= w;
 8016b1c:	8afb      	ldrh	r3, [r7, #22]
 8016b1e:	687a      	ldr	r2, [r7, #4]
 8016b20:	1ad3      	subs	r3, r2, r3
 8016b22:	607b      	str	r3, [r7, #4]
      data += w;
 8016b24:	8afb      	ldrh	r3, [r7, #22]
 8016b26:	68ba      	ldr	r2, [r7, #8]
 8016b28:	4413      	add	r3, r2
 8016b2a:	60bb      	str	r3, [r7, #8]
      address += w;
 8016b2c:	89fa      	ldrh	r2, [r7, #14]
 8016b2e:	8afb      	ldrh	r3, [r7, #22]
 8016b30:	4413      	add	r3, r2
 8016b32:	81fb      	strh	r3, [r7, #14]
      if (len == 0)
 8016b34:	687b      	ldr	r3, [r7, #4]
 8016b36:	2b00      	cmp	r3, #0
 8016b38:	d109      	bne.n	8016b4e <ee24_write+0xa2>
      {
        #if (_EEPROM_USE_WP_PIN==1)
        HAL_GPIO_WritePin(_EEPROM_WP_GPIO, _EEPROM_WP_PIN, GPIO_PIN_SET);
 8016b3a:	2201      	movs	r2, #1
 8016b3c:	2120      	movs	r1, #32
 8016b3e:	4812      	ldr	r0, [pc, #72]	; (8016b88 <ee24_write+0xdc>)
 8016b40:	f7fb febc 	bl	80128bc <HAL_GPIO_WritePin>
        #endif
        ee24_lock = 0;
 8016b44:	4b0f      	ldr	r3, [pc, #60]	; (8016b84 <ee24_write+0xd8>)
 8016b46:	2200      	movs	r2, #0
 8016b48:	701a      	strb	r2, [r3, #0]
        return true;
 8016b4a:	2301      	movs	r3, #1
 8016b4c:	e015      	b.n	8016b7a <ee24_write+0xce>
      }
      if (HAL_GetTick() - startTime >= timeout)
 8016b4e:	f7fa fe11 	bl	8011774 <HAL_GetTick>
 8016b52:	4602      	mov	r2, r0
 8016b54:	693b      	ldr	r3, [r7, #16]
 8016b56:	1ad3      	subs	r3, r2, r3
 8016b58:	683a      	ldr	r2, [r7, #0]
 8016b5a:	429a      	cmp	r2, r3
 8016b5c:	d8bf      	bhi.n	8016ade <ee24_write+0x32>
      {
        ee24_lock = 0;
 8016b5e:	4b09      	ldr	r3, [pc, #36]	; (8016b84 <ee24_write+0xd8>)
 8016b60:	2200      	movs	r2, #0
 8016b62:	701a      	strb	r2, [r3, #0]
        return false;
 8016b64:	2300      	movs	r3, #0
 8016b66:	e008      	b.n	8016b7a <ee24_write+0xce>
      }
    }
    else
    {
      #if (_EEPROM_USE_WP_PIN==1)
      HAL_GPIO_WritePin(_EEPROM_WP_GPIO, _EEPROM_WP_PIN, GPIO_PIN_SET);
 8016b68:	2201      	movs	r2, #1
 8016b6a:	2120      	movs	r1, #32
 8016b6c:	4806      	ldr	r0, [pc, #24]	; (8016b88 <ee24_write+0xdc>)
 8016b6e:	f7fb fea5 	bl	80128bc <HAL_GPIO_WritePin>
      #endif
      ee24_lock = 0;
 8016b72:	4b04      	ldr	r3, [pc, #16]	; (8016b84 <ee24_write+0xd8>)
 8016b74:	2200      	movs	r2, #0
 8016b76:	701a      	strb	r2, [r3, #0]
      return false;
 8016b78:	2300      	movs	r3, #0
    }
  }
}
 8016b7a:	4618      	mov	r0, r3
 8016b7c:	3718      	adds	r7, #24
 8016b7e:	46bd      	mov	sp, r7
 8016b80:	bd80      	pop	{r7, pc}
 8016b82:	bf00      	nop
 8016b84:	20000650 	.word	0x20000650
 8016b88:	40020400 	.word	0x40020400
 8016b8c:	20000120 	.word	0x20000120

08016b90 <ee24_read>:
//################################################################################################################
bool ee24_read(uint16_t address, uint8_t *data, size_t len, uint32_t timeout)
{
 8016b90:	b580      	push	{r7, lr}
 8016b92:	b088      	sub	sp, #32
 8016b94:	af04      	add	r7, sp, #16
 8016b96:	60b9      	str	r1, [r7, #8]
 8016b98:	607a      	str	r2, [r7, #4]
 8016b9a:	603b      	str	r3, [r7, #0]
 8016b9c:	4603      	mov	r3, r0
 8016b9e:	81fb      	strh	r3, [r7, #14]
  if (ee24_lock == 1)
 8016ba0:	4b15      	ldr	r3, [pc, #84]	; (8016bf8 <ee24_read+0x68>)
 8016ba2:	781b      	ldrb	r3, [r3, #0]
 8016ba4:	2b01      	cmp	r3, #1
 8016ba6:	d101      	bne.n	8016bac <ee24_read+0x1c>
    return false;
 8016ba8:	2300      	movs	r3, #0
 8016baa:	e021      	b.n	8016bf0 <ee24_read+0x60>
  ee24_lock = 1;
 8016bac:	4b12      	ldr	r3, [pc, #72]	; (8016bf8 <ee24_read+0x68>)
 8016bae:	2201      	movs	r2, #1
 8016bb0:	701a      	strb	r2, [r3, #0]
  #if (_EEPROM_USE_WP_PIN==1)
  HAL_GPIO_WritePin(_EEPROM_WP_GPIO, _EEPROM_WP_PIN, GPIO_PIN_SET);
 8016bb2:	2201      	movs	r2, #1
 8016bb4:	2120      	movs	r1, #32
 8016bb6:	4811      	ldr	r0, [pc, #68]	; (8016bfc <ee24_read+0x6c>)
 8016bb8:	f7fb fe80 	bl	80128bc <HAL_GPIO_WritePin>
  #elif (_EEPROM_SIZE_KBIT == 8)
  if (HAL_I2C_Mem_Read(&_EEPROM_I2C, _EEPROM_ADDRESS | ((address & 0x0300) >> 7), (address & 0xff), I2C_MEMADD_SIZE_8BIT, data, len, 100) == HAL_OK)
  #elif (_EEPROM_SIZE_KBIT==16)
  if (HAL_I2C_Mem_Read(&_EEPROM_I2C, _EEPROM_ADDRESS | ((address & 0x0700) >> 7), (address & 0xff), I2C_MEMADD_SIZE_8BIT, data, len, 100) == HAL_OK)
  #else
  if (HAL_I2C_Mem_Read(&_EEPROM_I2C, _EEPROM_ADDRESS, address, I2C_MEMADD_SIZE_16BIT, data, len, timeout) == HAL_OK)
 8016bbc:	687b      	ldr	r3, [r7, #4]
 8016bbe:	b29b      	uxth	r3, r3
 8016bc0:	89f9      	ldrh	r1, [r7, #14]
 8016bc2:	683a      	ldr	r2, [r7, #0]
 8016bc4:	9202      	str	r2, [sp, #8]
 8016bc6:	9301      	str	r3, [sp, #4]
 8016bc8:	68bb      	ldr	r3, [r7, #8]
 8016bca:	9300      	str	r3, [sp, #0]
 8016bcc:	2310      	movs	r3, #16
 8016bce:	460a      	mov	r2, r1
 8016bd0:	21a0      	movs	r1, #160	; 0xa0
 8016bd2:	480b      	ldr	r0, [pc, #44]	; (8016c00 <ee24_read+0x70>)
 8016bd4:	f7fc f908 	bl	8012de8 <HAL_I2C_Mem_Read>
 8016bd8:	4603      	mov	r3, r0
 8016bda:	2b00      	cmp	r3, #0
 8016bdc:	d104      	bne.n	8016be8 <ee24_read+0x58>
  #endif
  {
    ee24_lock = 0;
 8016bde:	4b06      	ldr	r3, [pc, #24]	; (8016bf8 <ee24_read+0x68>)
 8016be0:	2200      	movs	r2, #0
 8016be2:	701a      	strb	r2, [r3, #0]
    return true;
 8016be4:	2301      	movs	r3, #1
 8016be6:	e003      	b.n	8016bf0 <ee24_read+0x60>
  }
  else
  {
    ee24_lock = 0;
 8016be8:	4b03      	ldr	r3, [pc, #12]	; (8016bf8 <ee24_read+0x68>)
 8016bea:	2200      	movs	r2, #0
 8016bec:	701a      	strb	r2, [r3, #0]
    return false;
 8016bee:	2300      	movs	r3, #0
  }
}
 8016bf0:	4618      	mov	r0, r3
 8016bf2:	3710      	adds	r7, #16
 8016bf4:	46bd      	mov	sp, r7
 8016bf6:	bd80      	pop	{r7, pc}
 8016bf8:	20000650 	.word	0x20000650
 8016bfc:	40020400 	.word	0x40020400
 8016c00:	20000120 	.word	0x20000120

08016c04 <__NVIC_SystemReset>:
{
 8016c04:	b480      	push	{r7}
 8016c06:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8016c08:	f3bf 8f4f 	dsb	sy
}
 8016c0c:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8016c0e:	4b06      	ldr	r3, [pc, #24]	; (8016c28 <__NVIC_SystemReset+0x24>)
 8016c10:	68db      	ldr	r3, [r3, #12]
 8016c12:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8016c16:	4904      	ldr	r1, [pc, #16]	; (8016c28 <__NVIC_SystemReset+0x24>)
 8016c18:	4b04      	ldr	r3, [pc, #16]	; (8016c2c <__NVIC_SystemReset+0x28>)
 8016c1a:	4313      	orrs	r3, r2
 8016c1c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8016c1e:	f3bf 8f4f 	dsb	sy
}
 8016c22:	bf00      	nop
    __NOP();
 8016c24:	bf00      	nop
 8016c26:	e7fd      	b.n	8016c24 <__NVIC_SystemReset+0x20>
 8016c28:	e000ed00 	.word	0xe000ed00
 8016c2c:	05fa0004 	.word	0x05fa0004

08016c30 <HAL_UARTEx_RxEventCallback>:

bool IOT_AT_REC_FLAG = false;

#define IOT_AT_UART	huart2

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8016c30:	b580      	push	{r7, lr}
 8016c32:	b082      	sub	sp, #8
 8016c34:	af00      	add	r7, sp, #0
 8016c36:	6078      	str	r0, [r7, #4]
 8016c38:	460b      	mov	r3, r1
 8016c3a:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == IOT_AT_UART.Instance) {
 8016c3c:	687b      	ldr	r3, [r7, #4]
 8016c3e:	681a      	ldr	r2, [r3, #0]
 8016c40:	4b0d      	ldr	r3, [pc, #52]	; (8016c78 <HAL_UARTEx_RxEventCallback+0x48>)
 8016c42:	681b      	ldr	r3, [r3, #0]
 8016c44:	429a      	cmp	r2, r3
 8016c46:	d112      	bne.n	8016c6e <HAL_UARTEx_RxEventCallback+0x3e>
//		HAL_UART_Transmit(&IOT_AT_UART, configRxBuf, Size, 1000);
		iotATConfig(configRxBuf, Size);
 8016c48:	887b      	ldrh	r3, [r7, #2]
 8016c4a:	b2db      	uxtb	r3, r3
 8016c4c:	4619      	mov	r1, r3
 8016c4e:	480b      	ldr	r0, [pc, #44]	; (8016c7c <HAL_UARTEx_RxEventCallback+0x4c>)
 8016c50:	f000 f818 	bl	8016c84 <iotATConfig>
		memset(configRxBuf, '\0', configRxBufLen);
 8016c54:	22fa      	movs	r2, #250	; 0xfa
 8016c56:	2100      	movs	r1, #0
 8016c58:	4808      	ldr	r0, [pc, #32]	; (8016c7c <HAL_UARTEx_RxEventCallback+0x4c>)
 8016c5a:	f002 fc51 	bl	8019500 <memset>
		IOT_AT_REC_FLAG = true;
 8016c5e:	4b08      	ldr	r3, [pc, #32]	; (8016c80 <HAL_UARTEx_RxEventCallback+0x50>)
 8016c60:	2201      	movs	r2, #1
 8016c62:	701a      	strb	r2, [r3, #0]
		/* start the IT again */
		HAL_UARTEx_ReceiveToIdle_IT(&IOT_AT_UART, configRxBuf, configRxBufLen);
 8016c64:	22fa      	movs	r2, #250	; 0xfa
 8016c66:	4905      	ldr	r1, [pc, #20]	; (8016c7c <HAL_UARTEx_RxEventCallback+0x4c>)
 8016c68:	4803      	ldr	r0, [pc, #12]	; (8016c78 <HAL_UARTEx_RxEventCallback+0x48>)
 8016c6a:	f7fe ff54 	bl	8015b16 <HAL_UARTEx_ReceiveToIdle_IT>
	}
}
 8016c6e:	bf00      	nop
 8016c70:	3708      	adds	r7, #8
 8016c72:	46bd      	mov	sp, r7
 8016c74:	bd80      	pop	{r7, pc}
 8016c76:	bf00      	nop
 8016c78:	200005bc 	.word	0x200005bc
 8016c7c:	200006bc 	.word	0x200006bc
 8016c80:	200007b6 	.word	0x200007b6

08016c84 <iotATConfig>:
		}
	}
	return false; // Extraction failed
}

void iotATConfig(char *command, uint8_t len) {
 8016c84:	b580      	push	{r7, lr}
 8016c86:	b082      	sub	sp, #8
 8016c88:	af00      	add	r7, sp, #0
 8016c8a:	6078      	str	r0, [r7, #4]
 8016c8c:	460b      	mov	r3, r1
 8016c8e:	70fb      	strb	r3, [r7, #3]
	strncpy(IOT_AT_DATA.atCmd, command, len);
 8016c90:	78fb      	ldrb	r3, [r7, #3]
 8016c92:	461a      	mov	r2, r3
 8016c94:	6879      	ldr	r1, [r7, #4]
 8016c96:	48a5      	ldr	r0, [pc, #660]	; (8016f2c <iotATConfig+0x2a8>)
 8016c98:	f002 fc4c 	bl	8019534 <strncpy>
	IOT_AT_DATA.len = len;
 8016c9c:	4aa4      	ldr	r2, [pc, #656]	; (8016f30 <iotATConfig+0x2ac>)
 8016c9e:	78fb      	ldrb	r3, [r7, #3]
 8016ca0:	f882 3065 	strb.w	r3, [r2, #101]	; 0x65
	if (strcmp(command, "AT\r\n") == 0) {
 8016ca4:	49a3      	ldr	r1, [pc, #652]	; (8016f34 <iotATConfig+0x2b0>)
 8016ca6:	6878      	ldr	r0, [r7, #4]
 8016ca8:	f7f9 fa9a 	bl	80101e0 <strcmp>
 8016cac:	4603      	mov	r3, r0
 8016cae:	2b00      	cmp	r3, #0
 8016cb0:	d103      	bne.n	8016cba <iotATConfig+0x36>
		IOT_AT_DATA.iotATCMD = isAT;
 8016cb2:	4b9f      	ldr	r3, [pc, #636]	; (8016f30 <iotATConfig+0x2ac>)
 8016cb4:	2201      	movs	r2, #1
 8016cb6:	701a      	strb	r2, [r3, #0]
	} else if (strcmp(command, "AT+RESET\r\n") == 0) {		// Reset
		IOT_AT_DATA.iotATCMD = isResetIOT;
	} else {
		IOT_AT_DATA.iotATCMD = isUnknownAT;
	}
}
 8016cb8:	e182      	b.n	8016fc0 <iotATConfig+0x33c>
	} else if (strcmp(command, "AT+BLUP?\r\n") == 0) {
 8016cba:	499f      	ldr	r1, [pc, #636]	; (8016f38 <iotATConfig+0x2b4>)
 8016cbc:	6878      	ldr	r0, [r7, #4]
 8016cbe:	f7f9 fa8f 	bl	80101e0 <strcmp>
 8016cc2:	4603      	mov	r3, r0
 8016cc4:	2b00      	cmp	r3, #0
 8016cc6:	d103      	bne.n	8016cd0 <iotATConfig+0x4c>
		IOT_AT_DATA.iotATCMD = isGetBLUpdateStat;
 8016cc8:	4b99      	ldr	r3, [pc, #612]	; (8016f30 <iotATConfig+0x2ac>)
 8016cca:	2203      	movs	r2, #3
 8016ccc:	701a      	strb	r2, [r3, #0]
}
 8016cce:	e177      	b.n	8016fc0 <iotATConfig+0x33c>
	} else if (strncmp(command, "AT+BLUP=", 8) == 0) {
 8016cd0:	2208      	movs	r2, #8
 8016cd2:	499a      	ldr	r1, [pc, #616]	; (8016f3c <iotATConfig+0x2b8>)
 8016cd4:	6878      	ldr	r0, [r7, #4]
 8016cd6:	f002 fc1b 	bl	8019510 <strncmp>
 8016cda:	4603      	mov	r3, r0
 8016cdc:	2b00      	cmp	r3, #0
 8016cde:	d103      	bne.n	8016ce8 <iotATConfig+0x64>
		IOT_AT_DATA.iotATCMD = isSetBLUpdateStat;
 8016ce0:	4b93      	ldr	r3, [pc, #588]	; (8016f30 <iotATConfig+0x2ac>)
 8016ce2:	2204      	movs	r2, #4
 8016ce4:	701a      	strb	r2, [r3, #0]
}
 8016ce6:	e16b      	b.n	8016fc0 <iotATConfig+0x33c>
	} else if (strcmp(command, "AT+BLFLN?\r\n") == 0) {
 8016ce8:	4995      	ldr	r1, [pc, #596]	; (8016f40 <iotATConfig+0x2bc>)
 8016cea:	6878      	ldr	r0, [r7, #4]
 8016cec:	f7f9 fa78 	bl	80101e0 <strcmp>
 8016cf0:	4603      	mov	r3, r0
 8016cf2:	2b00      	cmp	r3, #0
 8016cf4:	d103      	bne.n	8016cfe <iotATConfig+0x7a>
		IOT_AT_DATA.iotATCMD = isGetBLFileName;
 8016cf6:	4b8e      	ldr	r3, [pc, #568]	; (8016f30 <iotATConfig+0x2ac>)
 8016cf8:	2205      	movs	r2, #5
 8016cfa:	701a      	strb	r2, [r3, #0]
}
 8016cfc:	e160      	b.n	8016fc0 <iotATConfig+0x33c>
	} else if (strncmp(command, "AT+BLFLN=", 9) == 0) {
 8016cfe:	2209      	movs	r2, #9
 8016d00:	4990      	ldr	r1, [pc, #576]	; (8016f44 <iotATConfig+0x2c0>)
 8016d02:	6878      	ldr	r0, [r7, #4]
 8016d04:	f002 fc04 	bl	8019510 <strncmp>
 8016d08:	4603      	mov	r3, r0
 8016d0a:	2b00      	cmp	r3, #0
 8016d0c:	d103      	bne.n	8016d16 <iotATConfig+0x92>
		IOT_AT_DATA.iotATCMD = isSetBLFileName;
 8016d0e:	4b88      	ldr	r3, [pc, #544]	; (8016f30 <iotATConfig+0x2ac>)
 8016d10:	2206      	movs	r2, #6
 8016d12:	701a      	strb	r2, [r3, #0]
}
 8016d14:	e154      	b.n	8016fc0 <iotATConfig+0x33c>
	} else if (strcmp(command, "AT+DEVID?\r\n") == 0) {
 8016d16:	498c      	ldr	r1, [pc, #560]	; (8016f48 <iotATConfig+0x2c4>)
 8016d18:	6878      	ldr	r0, [r7, #4]
 8016d1a:	f7f9 fa61 	bl	80101e0 <strcmp>
 8016d1e:	4603      	mov	r3, r0
 8016d20:	2b00      	cmp	r3, #0
 8016d22:	d103      	bne.n	8016d2c <iotATConfig+0xa8>
		IOT_AT_DATA.iotATCMD = isGetDEVID;
 8016d24:	4b82      	ldr	r3, [pc, #520]	; (8016f30 <iotATConfig+0x2ac>)
 8016d26:	2207      	movs	r2, #7
 8016d28:	701a      	strb	r2, [r3, #0]
}
 8016d2a:	e149      	b.n	8016fc0 <iotATConfig+0x33c>
	} else if (strncmp(command, "AT+DEVID=", 9) == 0) {
 8016d2c:	2209      	movs	r2, #9
 8016d2e:	4987      	ldr	r1, [pc, #540]	; (8016f4c <iotATConfig+0x2c8>)
 8016d30:	6878      	ldr	r0, [r7, #4]
 8016d32:	f002 fbed 	bl	8019510 <strncmp>
 8016d36:	4603      	mov	r3, r0
 8016d38:	2b00      	cmp	r3, #0
 8016d3a:	d103      	bne.n	8016d44 <iotATConfig+0xc0>
		IOT_AT_DATA.iotATCMD = isSetDEVID;
 8016d3c:	4b7c      	ldr	r3, [pc, #496]	; (8016f30 <iotATConfig+0x2ac>)
 8016d3e:	2208      	movs	r2, #8
 8016d40:	701a      	strb	r2, [r3, #0]
}
 8016d42:	e13d      	b.n	8016fc0 <iotATConfig+0x33c>
	} else if (strcmp(command, "AT+PUBTOPIC?\r\n") == 0) {
 8016d44:	4982      	ldr	r1, [pc, #520]	; (8016f50 <iotATConfig+0x2cc>)
 8016d46:	6878      	ldr	r0, [r7, #4]
 8016d48:	f7f9 fa4a 	bl	80101e0 <strcmp>
 8016d4c:	4603      	mov	r3, r0
 8016d4e:	2b00      	cmp	r3, #0
 8016d50:	d103      	bne.n	8016d5a <iotATConfig+0xd6>
		IOT_AT_DATA.iotATCMD = isGetPUBTOPIC;
 8016d52:	4b77      	ldr	r3, [pc, #476]	; (8016f30 <iotATConfig+0x2ac>)
 8016d54:	2209      	movs	r2, #9
 8016d56:	701a      	strb	r2, [r3, #0]
}
 8016d58:	e132      	b.n	8016fc0 <iotATConfig+0x33c>
	} else if (strncmp(command, "AT+PUBTOPIC=", 12) == 0) {
 8016d5a:	220c      	movs	r2, #12
 8016d5c:	497d      	ldr	r1, [pc, #500]	; (8016f54 <iotATConfig+0x2d0>)
 8016d5e:	6878      	ldr	r0, [r7, #4]
 8016d60:	f002 fbd6 	bl	8019510 <strncmp>
 8016d64:	4603      	mov	r3, r0
 8016d66:	2b00      	cmp	r3, #0
 8016d68:	d103      	bne.n	8016d72 <iotATConfig+0xee>
		IOT_AT_DATA.iotATCMD = isSetPUBTOPIC;
 8016d6a:	4b71      	ldr	r3, [pc, #452]	; (8016f30 <iotATConfig+0x2ac>)
 8016d6c:	220a      	movs	r2, #10
 8016d6e:	701a      	strb	r2, [r3, #0]
}
 8016d70:	e126      	b.n	8016fc0 <iotATConfig+0x33c>
	} else if (strcmp(command, "AT+BKRADDR?\r\n") == 0) {
 8016d72:	4979      	ldr	r1, [pc, #484]	; (8016f58 <iotATConfig+0x2d4>)
 8016d74:	6878      	ldr	r0, [r7, #4]
 8016d76:	f7f9 fa33 	bl	80101e0 <strcmp>
 8016d7a:	4603      	mov	r3, r0
 8016d7c:	2b00      	cmp	r3, #0
 8016d7e:	d103      	bne.n	8016d88 <iotATConfig+0x104>
		IOT_AT_DATA.iotATCMD = isGetBKRADDR;
 8016d80:	4b6b      	ldr	r3, [pc, #428]	; (8016f30 <iotATConfig+0x2ac>)
 8016d82:	220d      	movs	r2, #13
 8016d84:	701a      	strb	r2, [r3, #0]
}
 8016d86:	e11b      	b.n	8016fc0 <iotATConfig+0x33c>
	} else if (strncmp(command, "AT+BKRADDR=", 11) == 0) {
 8016d88:	220b      	movs	r2, #11
 8016d8a:	4974      	ldr	r1, [pc, #464]	; (8016f5c <iotATConfig+0x2d8>)
 8016d8c:	6878      	ldr	r0, [r7, #4]
 8016d8e:	f002 fbbf 	bl	8019510 <strncmp>
 8016d92:	4603      	mov	r3, r0
 8016d94:	2b00      	cmp	r3, #0
 8016d96:	d103      	bne.n	8016da0 <iotATConfig+0x11c>
		IOT_AT_DATA.iotATCMD = isSetBKRADDR;
 8016d98:	4b65      	ldr	r3, [pc, #404]	; (8016f30 <iotATConfig+0x2ac>)
 8016d9a:	220e      	movs	r2, #14
 8016d9c:	701a      	strb	r2, [r3, #0]
}
 8016d9e:	e10f      	b.n	8016fc0 <iotATConfig+0x33c>
	} else if (strcmp(command, "AT+BKRPORT?\r\n") == 0) {
 8016da0:	496f      	ldr	r1, [pc, #444]	; (8016f60 <iotATConfig+0x2dc>)
 8016da2:	6878      	ldr	r0, [r7, #4]
 8016da4:	f7f9 fa1c 	bl	80101e0 <strcmp>
 8016da8:	4603      	mov	r3, r0
 8016daa:	2b00      	cmp	r3, #0
 8016dac:	d103      	bne.n	8016db6 <iotATConfig+0x132>
		IOT_AT_DATA.iotATCMD = isGetBKRPORT;
 8016dae:	4b60      	ldr	r3, [pc, #384]	; (8016f30 <iotATConfig+0x2ac>)
 8016db0:	220f      	movs	r2, #15
 8016db2:	701a      	strb	r2, [r3, #0]
}
 8016db4:	e104      	b.n	8016fc0 <iotATConfig+0x33c>
	} else if (strncmp(command, "AT+BKRPORT=", 11) == 0) {
 8016db6:	220b      	movs	r2, #11
 8016db8:	496a      	ldr	r1, [pc, #424]	; (8016f64 <iotATConfig+0x2e0>)
 8016dba:	6878      	ldr	r0, [r7, #4]
 8016dbc:	f002 fba8 	bl	8019510 <strncmp>
 8016dc0:	4603      	mov	r3, r0
 8016dc2:	2b00      	cmp	r3, #0
 8016dc4:	d103      	bne.n	8016dce <iotATConfig+0x14a>
		IOT_AT_DATA.iotATCMD = isSetBKRPORT;
 8016dc6:	4b5a      	ldr	r3, [pc, #360]	; (8016f30 <iotATConfig+0x2ac>)
 8016dc8:	2210      	movs	r2, #16
 8016dca:	701a      	strb	r2, [r3, #0]
}
 8016dcc:	e0f8      	b.n	8016fc0 <iotATConfig+0x33c>
	} else if (strcmp(command, "AT+CLNTID?\r\n") == 0) {
 8016dce:	4966      	ldr	r1, [pc, #408]	; (8016f68 <iotATConfig+0x2e4>)
 8016dd0:	6878      	ldr	r0, [r7, #4]
 8016dd2:	f7f9 fa05 	bl	80101e0 <strcmp>
 8016dd6:	4603      	mov	r3, r0
 8016dd8:	2b00      	cmp	r3, #0
 8016dda:	d103      	bne.n	8016de4 <iotATConfig+0x160>
		IOT_AT_DATA.iotATCMD = isGetCLIENTID;
 8016ddc:	4b54      	ldr	r3, [pc, #336]	; (8016f30 <iotATConfig+0x2ac>)
 8016dde:	2211      	movs	r2, #17
 8016de0:	701a      	strb	r2, [r3, #0]
}
 8016de2:	e0ed      	b.n	8016fc0 <iotATConfig+0x33c>
	} else if (strncmp(command, "AT+CLNTID=", 10) == 0) {
 8016de4:	220a      	movs	r2, #10
 8016de6:	4961      	ldr	r1, [pc, #388]	; (8016f6c <iotATConfig+0x2e8>)
 8016de8:	6878      	ldr	r0, [r7, #4]
 8016dea:	f002 fb91 	bl	8019510 <strncmp>
 8016dee:	4603      	mov	r3, r0
 8016df0:	2b00      	cmp	r3, #0
 8016df2:	d103      	bne.n	8016dfc <iotATConfig+0x178>
		IOT_AT_DATA.iotATCMD = isSetCLIENTID;
 8016df4:	4b4e      	ldr	r3, [pc, #312]	; (8016f30 <iotATConfig+0x2ac>)
 8016df6:	2212      	movs	r2, #18
 8016df8:	701a      	strb	r2, [r3, #0]
}
 8016dfa:	e0e1      	b.n	8016fc0 <iotATConfig+0x33c>
	} else if (strcmp(command, "AT+MUID?\r\n") == 0) {
 8016dfc:	495c      	ldr	r1, [pc, #368]	; (8016f70 <iotATConfig+0x2ec>)
 8016dfe:	6878      	ldr	r0, [r7, #4]
 8016e00:	f7f9 f9ee 	bl	80101e0 <strcmp>
 8016e04:	4603      	mov	r3, r0
 8016e06:	2b00      	cmp	r3, #0
 8016e08:	d103      	bne.n	8016e12 <iotATConfig+0x18e>
		IOT_AT_DATA.iotATCMD = isGetUSERID;
 8016e0a:	4b49      	ldr	r3, [pc, #292]	; (8016f30 <iotATConfig+0x2ac>)
 8016e0c:	2213      	movs	r2, #19
 8016e0e:	701a      	strb	r2, [r3, #0]
}
 8016e10:	e0d6      	b.n	8016fc0 <iotATConfig+0x33c>
	} else if (strncmp(command, "AT+MUID=", 8) == 0) {
 8016e12:	2208      	movs	r2, #8
 8016e14:	4957      	ldr	r1, [pc, #348]	; (8016f74 <iotATConfig+0x2f0>)
 8016e16:	6878      	ldr	r0, [r7, #4]
 8016e18:	f002 fb7a 	bl	8019510 <strncmp>
 8016e1c:	4603      	mov	r3, r0
 8016e1e:	2b00      	cmp	r3, #0
 8016e20:	d103      	bne.n	8016e2a <iotATConfig+0x1a6>
		IOT_AT_DATA.iotATCMD = isSetUSERID;
 8016e22:	4b43      	ldr	r3, [pc, #268]	; (8016f30 <iotATConfig+0x2ac>)
 8016e24:	2214      	movs	r2, #20
 8016e26:	701a      	strb	r2, [r3, #0]
}
 8016e28:	e0ca      	b.n	8016fc0 <iotATConfig+0x33c>
	} else if (strcmp(command, "AT+MUPWD?\r\n") == 0) {
 8016e2a:	4953      	ldr	r1, [pc, #332]	; (8016f78 <iotATConfig+0x2f4>)
 8016e2c:	6878      	ldr	r0, [r7, #4]
 8016e2e:	f7f9 f9d7 	bl	80101e0 <strcmp>
 8016e32:	4603      	mov	r3, r0
 8016e34:	2b00      	cmp	r3, #0
 8016e36:	d103      	bne.n	8016e40 <iotATConfig+0x1bc>
		IOT_AT_DATA.iotATCMD = isGetPASSWORD;
 8016e38:	4b3d      	ldr	r3, [pc, #244]	; (8016f30 <iotATConfig+0x2ac>)
 8016e3a:	2215      	movs	r2, #21
 8016e3c:	701a      	strb	r2, [r3, #0]
}
 8016e3e:	e0bf      	b.n	8016fc0 <iotATConfig+0x33c>
	} else if (strncmp(command, "AT+MUPWD=", 9) == 0) {
 8016e40:	2209      	movs	r2, #9
 8016e42:	494e      	ldr	r1, [pc, #312]	; (8016f7c <iotATConfig+0x2f8>)
 8016e44:	6878      	ldr	r0, [r7, #4]
 8016e46:	f002 fb63 	bl	8019510 <strncmp>
 8016e4a:	4603      	mov	r3, r0
 8016e4c:	2b00      	cmp	r3, #0
 8016e4e:	d103      	bne.n	8016e58 <iotATConfig+0x1d4>
		IOT_AT_DATA.iotATCMD = isSetPASSWORD;
 8016e50:	4b37      	ldr	r3, [pc, #220]	; (8016f30 <iotATConfig+0x2ac>)
 8016e52:	2216      	movs	r2, #22
 8016e54:	701a      	strb	r2, [r3, #0]
}
 8016e56:	e0b3      	b.n	8016fc0 <iotATConfig+0x33c>
	} else if (strcmp(command, "AT+SUBTOPIC?\r\n") == 0) {
 8016e58:	4949      	ldr	r1, [pc, #292]	; (8016f80 <iotATConfig+0x2fc>)
 8016e5a:	6878      	ldr	r0, [r7, #4]
 8016e5c:	f7f9 f9c0 	bl	80101e0 <strcmp>
 8016e60:	4603      	mov	r3, r0
 8016e62:	2b00      	cmp	r3, #0
 8016e64:	d103      	bne.n	8016e6e <iotATConfig+0x1ea>
		IOT_AT_DATA.iotATCMD = isGetSUBTOPIC;
 8016e66:	4b32      	ldr	r3, [pc, #200]	; (8016f30 <iotATConfig+0x2ac>)
 8016e68:	220b      	movs	r2, #11
 8016e6a:	701a      	strb	r2, [r3, #0]
}
 8016e6c:	e0a8      	b.n	8016fc0 <iotATConfig+0x33c>
	} else if (strncmp(command, "AT+SUBTOPIC=", 9) == 0) {	//
 8016e6e:	2209      	movs	r2, #9
 8016e70:	4944      	ldr	r1, [pc, #272]	; (8016f84 <iotATConfig+0x300>)
 8016e72:	6878      	ldr	r0, [r7, #4]
 8016e74:	f002 fb4c 	bl	8019510 <strncmp>
 8016e78:	4603      	mov	r3, r0
 8016e7a:	2b00      	cmp	r3, #0
 8016e7c:	d103      	bne.n	8016e86 <iotATConfig+0x202>
		IOT_AT_DATA.iotATCMD = isSetSUBTOPIC;
 8016e7e:	4b2c      	ldr	r3, [pc, #176]	; (8016f30 <iotATConfig+0x2ac>)
 8016e80:	220c      	movs	r2, #12
 8016e82:	701a      	strb	r2, [r3, #0]
}
 8016e84:	e09c      	b.n	8016fc0 <iotATConfig+0x33c>
	} else if (strcmp(command, "AT+RECDSETPOINTS?\r\n") == 0) {
 8016e86:	4940      	ldr	r1, [pc, #256]	; (8016f88 <iotATConfig+0x304>)
 8016e88:	6878      	ldr	r0, [r7, #4]
 8016e8a:	f7f9 f9a9 	bl	80101e0 <strcmp>
 8016e8e:	4603      	mov	r3, r0
 8016e90:	2b00      	cmp	r3, #0
 8016e92:	d103      	bne.n	8016e9c <iotATConfig+0x218>
		IOT_AT_DATA.iotATCMD = isGetRECDSetPoints;
 8016e94:	4b26      	ldr	r3, [pc, #152]	; (8016f30 <iotATConfig+0x2ac>)
 8016e96:	2217      	movs	r2, #23
 8016e98:	701a      	strb	r2, [r3, #0]
}
 8016e9a:	e091      	b.n	8016fc0 <iotATConfig+0x33c>
	} else if (strncmp(command, "AT+SETCTP=", 10) == 0) {
 8016e9c:	220a      	movs	r2, #10
 8016e9e:	493b      	ldr	r1, [pc, #236]	; (8016f8c <iotATConfig+0x308>)
 8016ea0:	6878      	ldr	r0, [r7, #4]
 8016ea2:	f002 fb35 	bl	8019510 <strncmp>
 8016ea6:	4603      	mov	r3, r0
 8016ea8:	2b00      	cmp	r3, #0
 8016eaa:	d103      	bne.n	8016eb4 <iotATConfig+0x230>
		IOT_AT_DATA.iotATCMD = isSetRECDPressurePt;
 8016eac:	4b20      	ldr	r3, [pc, #128]	; (8016f30 <iotATConfig+0x2ac>)
 8016eae:	2218      	movs	r2, #24
 8016eb0:	701a      	strb	r2, [r3, #0]
}
 8016eb2:	e085      	b.n	8016fc0 <iotATConfig+0x33c>
	} else if (strncmp(command, "AT+SETCTT=", 10) == 0) {
 8016eb4:	220a      	movs	r2, #10
 8016eb6:	4936      	ldr	r1, [pc, #216]	; (8016f90 <iotATConfig+0x30c>)
 8016eb8:	6878      	ldr	r0, [r7, #4]
 8016eba:	f002 fb29 	bl	8019510 <strncmp>
 8016ebe:	4603      	mov	r3, r0
 8016ec0:	2b00      	cmp	r3, #0
 8016ec2:	d103      	bne.n	8016ecc <iotATConfig+0x248>
		IOT_AT_DATA.iotATCMD = isSetRECDTempPt;
 8016ec4:	4b1a      	ldr	r3, [pc, #104]	; (8016f30 <iotATConfig+0x2ac>)
 8016ec6:	2219      	movs	r2, #25
 8016ec8:	701a      	strb	r2, [r3, #0]
}
 8016eca:	e079      	b.n	8016fc0 <iotATConfig+0x33c>
	} else if (strncmp(command, "AT+SETTAMB=", 10) == 0) {
 8016ecc:	220a      	movs	r2, #10
 8016ece:	4931      	ldr	r1, [pc, #196]	; (8016f94 <iotATConfig+0x310>)
 8016ed0:	6878      	ldr	r0, [r7, #4]
 8016ed2:	f002 fb1d 	bl	8019510 <strncmp>
 8016ed6:	4603      	mov	r3, r0
 8016ed8:	2b00      	cmp	r3, #0
 8016eda:	d103      	bne.n	8016ee4 <iotATConfig+0x260>
		IOT_AT_DATA.iotATCMD = isSetTAmb;
 8016edc:	4b14      	ldr	r3, [pc, #80]	; (8016f30 <iotATConfig+0x2ac>)
 8016ede:	221a      	movs	r2, #26
 8016ee0:	701a      	strb	r2, [r3, #0]
}
 8016ee2:	e06d      	b.n	8016fc0 <iotATConfig+0x33c>
	} else if (strncmp(command, "AT+SETEB1=", 10) == 0) {
 8016ee4:	220a      	movs	r2, #10
 8016ee6:	492c      	ldr	r1, [pc, #176]	; (8016f98 <iotATConfig+0x314>)
 8016ee8:	6878      	ldr	r0, [r7, #4]
 8016eea:	f002 fb11 	bl	8019510 <strncmp>
 8016eee:	4603      	mov	r3, r0
 8016ef0:	2b00      	cmp	r3, #0
 8016ef2:	d103      	bne.n	8016efc <iotATConfig+0x278>
		IOT_AT_DATA.iotATCMD = isSetEB1;
 8016ef4:	4b0e      	ldr	r3, [pc, #56]	; (8016f30 <iotATConfig+0x2ac>)
 8016ef6:	221b      	movs	r2, #27
 8016ef8:	701a      	strb	r2, [r3, #0]
}
 8016efa:	e061      	b.n	8016fc0 <iotATConfig+0x33c>
	} else if (strncmp(command, "AT+SETSLNCRBP=", 10) == 0) {
 8016efc:	220a      	movs	r2, #10
 8016efe:	4927      	ldr	r1, [pc, #156]	; (8016f9c <iotATConfig+0x318>)
 8016f00:	6878      	ldr	r0, [r7, #4]
 8016f02:	f002 fb05 	bl	8019510 <strncmp>
 8016f06:	4603      	mov	r3, r0
 8016f08:	2b00      	cmp	r3, #0
 8016f0a:	d103      	bne.n	8016f14 <iotATConfig+0x290>
		IOT_AT_DATA.iotATCMD = isSetSLNCR_BP;
 8016f0c:	4b08      	ldr	r3, [pc, #32]	; (8016f30 <iotATConfig+0x2ac>)
 8016f0e:	221c      	movs	r2, #28
 8016f10:	701a      	strb	r2, [r3, #0]
}
 8016f12:	e055      	b.n	8016fc0 <iotATConfig+0x33c>
	} else if (strncmp(command, "AT+SETP_OEM=", 10) == 0) {
 8016f14:	220a      	movs	r2, #10
 8016f16:	4922      	ldr	r1, [pc, #136]	; (8016fa0 <iotATConfig+0x31c>)
 8016f18:	6878      	ldr	r0, [r7, #4]
 8016f1a:	f002 faf9 	bl	8019510 <strncmp>
 8016f1e:	4603      	mov	r3, r0
 8016f20:	2b00      	cmp	r3, #0
 8016f22:	d13f      	bne.n	8016fa4 <iotATConfig+0x320>
		IOT_AT_DATA.iotATCMD = isSetP_OEM;
 8016f24:	4b02      	ldr	r3, [pc, #8]	; (8016f30 <iotATConfig+0x2ac>)
 8016f26:	221d      	movs	r2, #29
 8016f28:	701a      	strb	r2, [r3, #0]
}
 8016f2a:	e049      	b.n	8016fc0 <iotATConfig+0x33c>
 8016f2c:	20000655 	.word	0x20000655
 8016f30:	20000654 	.word	0x20000654
 8016f34:	0801a798 	.word	0x0801a798
 8016f38:	0801a7a0 	.word	0x0801a7a0
 8016f3c:	0801a7ac 	.word	0x0801a7ac
 8016f40:	0801a7b8 	.word	0x0801a7b8
 8016f44:	0801a7c4 	.word	0x0801a7c4
 8016f48:	0801a7d0 	.word	0x0801a7d0
 8016f4c:	0801a7dc 	.word	0x0801a7dc
 8016f50:	0801a7e8 	.word	0x0801a7e8
 8016f54:	0801a7f8 	.word	0x0801a7f8
 8016f58:	0801a808 	.word	0x0801a808
 8016f5c:	0801a818 	.word	0x0801a818
 8016f60:	0801a824 	.word	0x0801a824
 8016f64:	0801a834 	.word	0x0801a834
 8016f68:	0801a840 	.word	0x0801a840
 8016f6c:	0801a850 	.word	0x0801a850
 8016f70:	0801a85c 	.word	0x0801a85c
 8016f74:	0801a868 	.word	0x0801a868
 8016f78:	0801a874 	.word	0x0801a874
 8016f7c:	0801a880 	.word	0x0801a880
 8016f80:	0801a88c 	.word	0x0801a88c
 8016f84:	0801a89c 	.word	0x0801a89c
 8016f88:	0801a8ac 	.word	0x0801a8ac
 8016f8c:	0801a8c0 	.word	0x0801a8c0
 8016f90:	0801a8cc 	.word	0x0801a8cc
 8016f94:	0801a8d8 	.word	0x0801a8d8
 8016f98:	0801a8e4 	.word	0x0801a8e4
 8016f9c:	0801a8f0 	.word	0x0801a8f0
 8016fa0:	0801a900 	.word	0x0801a900
	} else if (strcmp(command, "AT+RESET\r\n") == 0) {		// Reset
 8016fa4:	4908      	ldr	r1, [pc, #32]	; (8016fc8 <iotATConfig+0x344>)
 8016fa6:	6878      	ldr	r0, [r7, #4]
 8016fa8:	f7f9 f91a 	bl	80101e0 <strcmp>
 8016fac:	4603      	mov	r3, r0
 8016fae:	2b00      	cmp	r3, #0
 8016fb0:	d103      	bne.n	8016fba <iotATConfig+0x336>
		IOT_AT_DATA.iotATCMD = isResetIOT;
 8016fb2:	4b06      	ldr	r3, [pc, #24]	; (8016fcc <iotATConfig+0x348>)
 8016fb4:	221e      	movs	r2, #30
 8016fb6:	701a      	strb	r2, [r3, #0]
}
 8016fb8:	e002      	b.n	8016fc0 <iotATConfig+0x33c>
		IOT_AT_DATA.iotATCMD = isUnknownAT;
 8016fba:	4b04      	ldr	r3, [pc, #16]	; (8016fcc <iotATConfig+0x348>)
 8016fbc:	2200      	movs	r2, #0
 8016fbe:	701a      	strb	r2, [r3, #0]
}
 8016fc0:	bf00      	nop
 8016fc2:	3708      	adds	r7, #8
 8016fc4:	46bd      	mov	sp, r7
 8016fc6:	bd80      	pop	{r7, pc}
 8016fc8:	0801a910 	.word	0x0801a910
 8016fcc:	20000654 	.word	0x20000654

08016fd0 <SetDEVID>:

void SetDEVID(iot_atdatatypedef *IOT_AT, iotParam_Typedef *iot) {
 8016fd0:	b590      	push	{r4, r7, lr}
 8016fd2:	b0d1      	sub	sp, #324	; 0x144
 8016fd4:	af00      	add	r7, sp, #0
 8016fd6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8016fda:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8016fde:	6018      	str	r0, [r3, #0]
 8016fe0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8016fe4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8016fe8:	6019      	str	r1, [r3, #0]
	char txBuffer[250];
	int result = sscanf(IOT_AT->atCmd, "AT+DEVID=\"%50[^\"]\"", iot->deviceID);
 8016fea:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8016fee:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8016ff2:	681b      	ldr	r3, [r3, #0]
 8016ff4:	1c58      	adds	r0, r3, #1
 8016ff6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8016ffa:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8016ffe:	681b      	ldr	r3, [r3, #0]
 8017000:	461a      	mov	r2, r3
 8017002:	4969      	ldr	r1, [pc, #420]	; (80171a8 <SetDEVID+0x1d8>)
 8017004:	f002 fa14 	bl	8019430 <siscanf>
 8017008:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c
	if (result == 1) {
 801700c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8017010:	2b01      	cmp	r3, #1
 8017012:	f040 80b0 	bne.w	8017176 <SetDEVID+0x1a6>
		iot->DEVICE_ID_LEN = strlen(iot->deviceID);
 8017016:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801701a:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 801701e:	681b      	ldr	r3, [r3, #0]
 8017020:	4618      	mov	r0, r3
 8017022:	f7f9 f8e7 	bl	80101f4 <strlen>
 8017026:	4603      	mov	r3, r0
 8017028:	b2da      	uxtb	r2, r3
 801702a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801702e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8017032:	681b      	ldr	r3, [r3, #0]
 8017034:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
		if (ee_setDeviceID(iot->deviceID, iot->DEVICE_ID_LEN)) {
 8017038:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801703c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8017040:	681a      	ldr	r2, [r3, #0]
 8017042:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8017046:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 801704a:	681b      	ldr	r3, [r3, #0]
 801704c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8017050:	4619      	mov	r1, r3
 8017052:	4610      	mov	r0, r2
 8017054:	f001 fc8f 	bl	8018976 <ee_setDeviceID>
 8017058:	4603      	mov	r3, r0
 801705a:	2b00      	cmp	r3, #0
 801705c:	d077      	beq.n	801714e <SetDEVID+0x17e>
			sprintf(txBuffer, "'%s' successfully set as Device ID\r\nOK\r\n",
					iot->deviceID);
 801705e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8017062:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8017066:	681a      	ldr	r2, [r3, #0]
			sprintf(txBuffer, "'%s' successfully set as Device ID\r\nOK\r\n",
 8017068:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801706c:	494f      	ldr	r1, [pc, #316]	; (80171ac <SetDEVID+0x1dc>)
 801706e:	4618      	mov	r0, r3
 8017070:	f002 f9be 	bl	80193f0 <siprintf>
			HAL_UART_Transmit(&IOT_AT_UART, txBuffer, strlen(txBuffer), 200);
 8017074:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8017078:	4618      	mov	r0, r3
 801707a:	f7f9 f8bb 	bl	80101f4 <strlen>
 801707e:	4603      	mov	r3, r0
 8017080:	b29a      	uxth	r2, r3
 8017082:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8017086:	23c8      	movs	r3, #200	; 0xc8
 8017088:	4849      	ldr	r0, [pc, #292]	; (80171b0 <SetDEVID+0x1e0>)
 801708a:	f7fe fcb9 	bl	8015a00 <HAL_UART_Transmit>
			char mbuf[50];
			snprintf(mbuf, 7 + iot->DEVICE_ID_LEN + 1, "device/%s",
 801708e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8017092:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8017096:	681b      	ldr	r3, [r3, #0]
 8017098:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 801709c:	3308      	adds	r3, #8
 801709e:	4619      	mov	r1, r3
					iot->deviceID);
 80170a0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80170a4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80170a8:	681b      	ldr	r3, [r3, #0]
			snprintf(mbuf, 7 + iot->DEVICE_ID_LEN + 1, "device/%s",
 80170aa:	f107 000c 	add.w	r0, r7, #12
 80170ae:	4a41      	ldr	r2, [pc, #260]	; (80171b4 <SetDEVID+0x1e4>)
 80170b0:	f002 f96a 	bl	8019388 <sniprintf>
			if (ee_setTopicSubscribe(mbuf, strlen(mbuf))) {
 80170b4:	f107 030c 	add.w	r3, r7, #12
 80170b8:	4618      	mov	r0, r3
 80170ba:	f7f9 f89b 	bl	80101f4 <strlen>
 80170be:	4602      	mov	r2, r0
 80170c0:	f107 030c 	add.w	r3, r7, #12
 80170c4:	4611      	mov	r1, r2
 80170c6:	4618      	mov	r0, r3
 80170c8:	f001 fed3 	bl	8018e72 <ee_setTopicSubscribe>
 80170cc:	4603      	mov	r3, r0
 80170ce:	2b00      	cmp	r3, #0
 80170d0:	d029      	beq.n	8017126 <SetDEVID+0x156>
				sprintf(txBuffer,
 80170d2:	f107 020c 	add.w	r2, r7, #12
 80170d6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80170da:	4937      	ldr	r1, [pc, #220]	; (80171b8 <SetDEVID+0x1e8>)
 80170dc:	4618      	mov	r0, r3
 80170de:	f002 f987 	bl	80193f0 <siprintf>
						"'%s'is updated as topic subscribed by device\r\nOK\r\n",
						mbuf);
				HAL_UART_Transmit(&IOT_AT_UART, txBuffer, strlen(txBuffer),
 80170e2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80170e6:	4618      	mov	r0, r3
 80170e8:	f7f9 f884 	bl	80101f4 <strlen>
 80170ec:	4603      	mov	r3, r0
 80170ee:	b29a      	uxth	r2, r3
 80170f0:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80170f4:	23c8      	movs	r3, #200	; 0xc8
 80170f6:	482e      	ldr	r0, [pc, #184]	; (80171b0 <SetDEVID+0x1e0>)
 80170f8:	f7fe fc82 	bl	8015a00 <HAL_UART_Transmit>
						200);
				snprintf(iot->mqtt.topicSubscribe, strlen(mbuf) + 1, "%s",
 80170fc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8017100:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8017104:	681b      	ldr	r3, [r3, #0]
 8017106:	f503 74d8 	add.w	r4, r3, #432	; 0x1b0
 801710a:	f107 030c 	add.w	r3, r7, #12
 801710e:	4618      	mov	r0, r3
 8017110:	f7f9 f870 	bl	80101f4 <strlen>
 8017114:	4603      	mov	r3, r0
 8017116:	1c59      	adds	r1, r3, #1
 8017118:	f107 030c 	add.w	r3, r7, #12
 801711c:	4a27      	ldr	r2, [pc, #156]	; (80171bc <SetDEVID+0x1ec>)
 801711e:	4620      	mov	r0, r4
 8017120:	f002 f932 	bl	8019388 <sniprintf>
		}
	} else {
		sprintf(txBuffer, "Incorrect Command\r\nERROR\r\n");
		HAL_UART_Transmit(&IOT_AT_UART, txBuffer, strlen(txBuffer), 200);
	}
}
 8017124:	e03a      	b.n	801719c <SetDEVID+0x1cc>
				sprintf(txBuffer,
 8017126:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801712a:	4925      	ldr	r1, [pc, #148]	; (80171c0 <SetDEVID+0x1f0>)
 801712c:	4618      	mov	r0, r3
 801712e:	f002 f95f 	bl	80193f0 <siprintf>
				HAL_UART_Transmit(&IOT_AT_UART, txBuffer, strlen(txBuffer),
 8017132:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8017136:	4618      	mov	r0, r3
 8017138:	f7f9 f85c 	bl	80101f4 <strlen>
 801713c:	4603      	mov	r3, r0
 801713e:	b29a      	uxth	r2, r3
 8017140:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8017144:	23c8      	movs	r3, #200	; 0xc8
 8017146:	481a      	ldr	r0, [pc, #104]	; (80171b0 <SetDEVID+0x1e0>)
 8017148:	f7fe fc5a 	bl	8015a00 <HAL_UART_Transmit>
}
 801714c:	e026      	b.n	801719c <SetDEVID+0x1cc>
			sprintf(txBuffer, "EEPROM not responding\r\nERROR\r\n");
 801714e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8017152:	491c      	ldr	r1, [pc, #112]	; (80171c4 <SetDEVID+0x1f4>)
 8017154:	4618      	mov	r0, r3
 8017156:	f002 f94b 	bl	80193f0 <siprintf>
			HAL_UART_Transmit(&IOT_AT_UART, txBuffer, strlen(txBuffer), 200);
 801715a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801715e:	4618      	mov	r0, r3
 8017160:	f7f9 f848 	bl	80101f4 <strlen>
 8017164:	4603      	mov	r3, r0
 8017166:	b29a      	uxth	r2, r3
 8017168:	f107 0140 	add.w	r1, r7, #64	; 0x40
 801716c:	23c8      	movs	r3, #200	; 0xc8
 801716e:	4810      	ldr	r0, [pc, #64]	; (80171b0 <SetDEVID+0x1e0>)
 8017170:	f7fe fc46 	bl	8015a00 <HAL_UART_Transmit>
}
 8017174:	e012      	b.n	801719c <SetDEVID+0x1cc>
		sprintf(txBuffer, "Incorrect Command\r\nERROR\r\n");
 8017176:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801717a:	4913      	ldr	r1, [pc, #76]	; (80171c8 <SetDEVID+0x1f8>)
 801717c:	4618      	mov	r0, r3
 801717e:	f002 f937 	bl	80193f0 <siprintf>
		HAL_UART_Transmit(&IOT_AT_UART, txBuffer, strlen(txBuffer), 200);
 8017182:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8017186:	4618      	mov	r0, r3
 8017188:	f7f9 f834 	bl	80101f4 <strlen>
 801718c:	4603      	mov	r3, r0
 801718e:	b29a      	uxth	r2, r3
 8017190:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8017194:	23c8      	movs	r3, #200	; 0xc8
 8017196:	4806      	ldr	r0, [pc, #24]	; (80171b0 <SetDEVID+0x1e0>)
 8017198:	f7fe fc32 	bl	8015a00 <HAL_UART_Transmit>
}
 801719c:	bf00      	nop
 801719e:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 80171a2:	46bd      	mov	sp, r7
 80171a4:	bd90      	pop	{r4, r7, pc}
 80171a6:	bf00      	nop
 80171a8:	0801a91c 	.word	0x0801a91c
 80171ac:	0801a930 	.word	0x0801a930
 80171b0:	200005bc 	.word	0x200005bc
 80171b4:	0801a95c 	.word	0x0801a95c
 80171b8:	0801a968 	.word	0x0801a968
 80171bc:	0801a99c 	.word	0x0801a99c
 80171c0:	0801a9a0 	.word	0x0801a9a0
 80171c4:	0801a9cc 	.word	0x0801a9cc
 80171c8:	0801a9ec 	.word	0x0801a9ec

080171cc <SetPUBTOPIC>:

void SetPUBTOPIC(iot_atdatatypedef *IOT_AT, iotParam_Typedef *iot) {
 80171cc:	b580      	push	{r7, lr}
 80171ce:	b0c2      	sub	sp, #264	; 0x108
 80171d0:	af00      	add	r7, sp, #0
 80171d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80171d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80171da:	6018      	str	r0, [r3, #0]
 80171dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80171e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80171e4:	6019      	str	r1, [r3, #0]
	char txBuffer[250];
	int result = sscanf(IOT_AT->atCmd, "AT+PUBTOPIC=\"%50[^\"]\"",
 80171e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80171ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80171ee:	681b      	ldr	r3, [r3, #0]
 80171f0:	1c58      	adds	r0, r3, #1
			iot->mqtt.topicPublish);
 80171f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80171f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80171fa:	681b      	ldr	r3, [r3, #0]
 80171fc:	33ac      	adds	r3, #172	; 0xac
	int result = sscanf(IOT_AT->atCmd, "AT+PUBTOPIC=\"%50[^\"]\"",
 80171fe:	461a      	mov	r2, r3
 8017200:	493b      	ldr	r1, [pc, #236]	; (80172f0 <SetPUBTOPIC+0x124>)
 8017202:	f002 f915 	bl	8019430 <siscanf>
 8017206:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
	if (result == 1) {
 801720a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801720e:	2b01      	cmp	r3, #1
 8017210:	d155      	bne.n	80172be <SetPUBTOPIC+0xf2>
		if (ee_setTopicPublish1(iot->mqtt.topicPublish,
 8017212:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8017216:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801721a:	681b      	ldr	r3, [r3, #0]
 801721c:	f103 02ac 	add.w	r2, r3, #172	; 0xac
				iot->mqtt.TOPIC_PUBLISH_LEN[0])) {
 8017220:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8017224:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8017228:	681b      	ldr	r3, [r3, #0]
 801722a:	f893 31ab 	ldrb.w	r3, [r3, #427]	; 0x1ab
		if (ee_setTopicPublish1(iot->mqtt.topicPublish,
 801722e:	4619      	mov	r1, r3
 8017230:	4610      	mov	r0, r2
 8017232:	f001 fdbb 	bl	8018dac <ee_setTopicPublish1>
 8017236:	4603      	mov	r3, r0
 8017238:	2b00      	cmp	r3, #0
 801723a:	d02c      	beq.n	8017296 <SetPUBTOPIC+0xca>
			iot->mqtt.TOPIC_PUBLISH_LEN[0] = strlen(iot->mqtt.topicPublish);
 801723c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8017240:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8017244:	681b      	ldr	r3, [r3, #0]
 8017246:	33ac      	adds	r3, #172	; 0xac
 8017248:	4618      	mov	r0, r3
 801724a:	f7f8 ffd3 	bl	80101f4 <strlen>
 801724e:	4603      	mov	r3, r0
 8017250:	b2da      	uxtb	r2, r3
 8017252:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8017256:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801725a:	681b      	ldr	r3, [r3, #0]
 801725c:	f883 21ab 	strb.w	r2, [r3, #427]	; 0x1ab
			sprintf(txBuffer,
					"'%s' successfully set Topic to publish\r\nOK\r\n",
					iot->mqtt.topicPublish);
 8017260:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8017264:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8017268:	681b      	ldr	r3, [r3, #0]
 801726a:	f103 02ac 	add.w	r2, r3, #172	; 0xac
			sprintf(txBuffer,
 801726e:	f107 0308 	add.w	r3, r7, #8
 8017272:	4920      	ldr	r1, [pc, #128]	; (80172f4 <SetPUBTOPIC+0x128>)
 8017274:	4618      	mov	r0, r3
 8017276:	f002 f8bb 	bl	80193f0 <siprintf>
			HAL_UART_Transmit(&IOT_AT_UART, txBuffer, strlen(txBuffer), 200);
 801727a:	f107 0308 	add.w	r3, r7, #8
 801727e:	4618      	mov	r0, r3
 8017280:	f7f8 ffb8 	bl	80101f4 <strlen>
 8017284:	4603      	mov	r3, r0
 8017286:	b29a      	uxth	r2, r3
 8017288:	f107 0108 	add.w	r1, r7, #8
 801728c:	23c8      	movs	r3, #200	; 0xc8
 801728e:	481a      	ldr	r0, [pc, #104]	; (80172f8 <SetPUBTOPIC+0x12c>)
 8017290:	f7fe fbb6 	bl	8015a00 <HAL_UART_Transmit>
		}
	} else {
		sprintf(txBuffer, "Incorrect Command\r\nERROR\r\n");
		HAL_UART_Transmit(&IOT_AT_UART, txBuffer, strlen(txBuffer), 200);
	}
}
 8017294:	e026      	b.n	80172e4 <SetPUBTOPIC+0x118>
			sprintf(txBuffer, "EEPROM not responding\r\nERROR\r\n");
 8017296:	f107 0308 	add.w	r3, r7, #8
 801729a:	4918      	ldr	r1, [pc, #96]	; (80172fc <SetPUBTOPIC+0x130>)
 801729c:	4618      	mov	r0, r3
 801729e:	f002 f8a7 	bl	80193f0 <siprintf>
			HAL_UART_Transmit(&IOT_AT_UART, txBuffer, strlen(txBuffer), 200);
 80172a2:	f107 0308 	add.w	r3, r7, #8
 80172a6:	4618      	mov	r0, r3
 80172a8:	f7f8 ffa4 	bl	80101f4 <strlen>
 80172ac:	4603      	mov	r3, r0
 80172ae:	b29a      	uxth	r2, r3
 80172b0:	f107 0108 	add.w	r1, r7, #8
 80172b4:	23c8      	movs	r3, #200	; 0xc8
 80172b6:	4810      	ldr	r0, [pc, #64]	; (80172f8 <SetPUBTOPIC+0x12c>)
 80172b8:	f7fe fba2 	bl	8015a00 <HAL_UART_Transmit>
}
 80172bc:	e012      	b.n	80172e4 <SetPUBTOPIC+0x118>
		sprintf(txBuffer, "Incorrect Command\r\nERROR\r\n");
 80172be:	f107 0308 	add.w	r3, r7, #8
 80172c2:	490f      	ldr	r1, [pc, #60]	; (8017300 <SetPUBTOPIC+0x134>)
 80172c4:	4618      	mov	r0, r3
 80172c6:	f002 f893 	bl	80193f0 <siprintf>
		HAL_UART_Transmit(&IOT_AT_UART, txBuffer, strlen(txBuffer), 200);
 80172ca:	f107 0308 	add.w	r3, r7, #8
 80172ce:	4618      	mov	r0, r3
 80172d0:	f7f8 ff90 	bl	80101f4 <strlen>
 80172d4:	4603      	mov	r3, r0
 80172d6:	b29a      	uxth	r2, r3
 80172d8:	f107 0108 	add.w	r1, r7, #8
 80172dc:	23c8      	movs	r3, #200	; 0xc8
 80172de:	4806      	ldr	r0, [pc, #24]	; (80172f8 <SetPUBTOPIC+0x12c>)
 80172e0:	f7fe fb8e 	bl	8015a00 <HAL_UART_Transmit>
}
 80172e4:	bf00      	nop
 80172e6:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80172ea:	46bd      	mov	sp, r7
 80172ec:	bd80      	pop	{r7, pc}
 80172ee:	bf00      	nop
 80172f0:	0801aa08 	.word	0x0801aa08
 80172f4:	0801aa20 	.word	0x0801aa20
 80172f8:	200005bc 	.word	0x200005bc
 80172fc:	0801a9cc 	.word	0x0801a9cc
 8017300:	0801a9ec 	.word	0x0801a9ec

08017304 <SetSUBTOPIC>:

void SetSUBTOPIC(iot_atdatatypedef *IOT_AT, iotParam_Typedef *iot) {
 8017304:	b580      	push	{r7, lr}
 8017306:	b0c2      	sub	sp, #264	; 0x108
 8017308:	af00      	add	r7, sp, #0
 801730a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801730e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8017312:	6018      	str	r0, [r3, #0]
 8017314:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8017318:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801731c:	6019      	str	r1, [r3, #0]
	char txBuffer[250];
	int result = sscanf(IOT_AT->atCmd, "AT+SUBTOPIC=\"%50[^\"]\"",
 801731e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8017322:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8017326:	681b      	ldr	r3, [r3, #0]
 8017328:	1c58      	adds	r0, r3, #1
			iot->mqtt.topicSubscribe);
 801732a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801732e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8017332:	681b      	ldr	r3, [r3, #0]
 8017334:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
	int result = sscanf(IOT_AT->atCmd, "AT+SUBTOPIC=\"%50[^\"]\"",
 8017338:	461a      	mov	r2, r3
 801733a:	493c      	ldr	r1, [pc, #240]	; (801742c <SetSUBTOPIC+0x128>)
 801733c:	f002 f878 	bl	8019430 <siscanf>
 8017340:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
	if (result == 1) {
 8017344:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8017348:	2b01      	cmp	r3, #1
 801734a:	d156      	bne.n	80173fa <SetSUBTOPIC+0xf6>
		iot->mqtt.TOPIC_SUBSCRIBE_LEN = strlen(iot->mqtt.topicSubscribe);
 801734c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8017350:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8017354:	681b      	ldr	r3, [r3, #0]
 8017356:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 801735a:	4618      	mov	r0, r3
 801735c:	f7f8 ff4a 	bl	80101f4 <strlen>
 8017360:	4603      	mov	r3, r0
 8017362:	b2da      	uxtb	r2, r3
 8017364:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8017368:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801736c:	681b      	ldr	r3, [r3, #0]
 801736e:	f883 21e3 	strb.w	r2, [r3, #483]	; 0x1e3
		if (ee_setTopicSubscribe(iot->mqtt.topicSubscribe,
 8017372:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8017376:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801737a:	681b      	ldr	r3, [r3, #0]
 801737c:	f503 72d8 	add.w	r2, r3, #432	; 0x1b0
				iot->mqtt.TOPIC_SUBSCRIBE_LEN)) {
 8017380:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8017384:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8017388:	681b      	ldr	r3, [r3, #0]
 801738a:	f893 31e3 	ldrb.w	r3, [r3, #483]	; 0x1e3
		if (ee_setTopicSubscribe(iot->mqtt.topicSubscribe,
 801738e:	4619      	mov	r1, r3
 8017390:	4610      	mov	r0, r2
 8017392:	f001 fd6e 	bl	8018e72 <ee_setTopicSubscribe>
 8017396:	4603      	mov	r3, r0
 8017398:	2b00      	cmp	r3, #0
 801739a:	d01a      	beq.n	80173d2 <SetSUBTOPIC+0xce>
			sprintf(txBuffer,
					"'%s' successfully set Topic to subscribe\r\nOK\r\n",
					iot->mqtt.topicSubscribe);
 801739c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80173a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80173a4:	681b      	ldr	r3, [r3, #0]
 80173a6:	f503 72d8 	add.w	r2, r3, #432	; 0x1b0
			sprintf(txBuffer,
 80173aa:	f107 0308 	add.w	r3, r7, #8
 80173ae:	4920      	ldr	r1, [pc, #128]	; (8017430 <SetSUBTOPIC+0x12c>)
 80173b0:	4618      	mov	r0, r3
 80173b2:	f002 f81d 	bl	80193f0 <siprintf>
			HAL_UART_Transmit(&IOT_AT_UART, txBuffer, strlen(txBuffer), 200);
 80173b6:	f107 0308 	add.w	r3, r7, #8
 80173ba:	4618      	mov	r0, r3
 80173bc:	f7f8 ff1a 	bl	80101f4 <strlen>
 80173c0:	4603      	mov	r3, r0
 80173c2:	b29a      	uxth	r2, r3
 80173c4:	f107 0108 	add.w	r1, r7, #8
 80173c8:	23c8      	movs	r3, #200	; 0xc8
 80173ca:	481a      	ldr	r0, [pc, #104]	; (8017434 <SetSUBTOPIC+0x130>)
 80173cc:	f7fe fb18 	bl	8015a00 <HAL_UART_Transmit>
		}
	} else {
		sprintf(txBuffer, "Incorrect Command\r\nERROR\r\n");
		HAL_UART_Transmit(&IOT_AT_UART, txBuffer, strlen(txBuffer), 200);
	}
}
 80173d0:	e026      	b.n	8017420 <SetSUBTOPIC+0x11c>
			sprintf(txBuffer, "EEPROM not responding\r\nERROR\r\n");
 80173d2:	f107 0308 	add.w	r3, r7, #8
 80173d6:	4918      	ldr	r1, [pc, #96]	; (8017438 <SetSUBTOPIC+0x134>)
 80173d8:	4618      	mov	r0, r3
 80173da:	f002 f809 	bl	80193f0 <siprintf>
			HAL_UART_Transmit(&IOT_AT_UART, txBuffer, strlen(txBuffer), 200);
 80173de:	f107 0308 	add.w	r3, r7, #8
 80173e2:	4618      	mov	r0, r3
 80173e4:	f7f8 ff06 	bl	80101f4 <strlen>
 80173e8:	4603      	mov	r3, r0
 80173ea:	b29a      	uxth	r2, r3
 80173ec:	f107 0108 	add.w	r1, r7, #8
 80173f0:	23c8      	movs	r3, #200	; 0xc8
 80173f2:	4810      	ldr	r0, [pc, #64]	; (8017434 <SetSUBTOPIC+0x130>)
 80173f4:	f7fe fb04 	bl	8015a00 <HAL_UART_Transmit>
}
 80173f8:	e012      	b.n	8017420 <SetSUBTOPIC+0x11c>
		sprintf(txBuffer, "Incorrect Command\r\nERROR\r\n");
 80173fa:	f107 0308 	add.w	r3, r7, #8
 80173fe:	490f      	ldr	r1, [pc, #60]	; (801743c <SetSUBTOPIC+0x138>)
 8017400:	4618      	mov	r0, r3
 8017402:	f001 fff5 	bl	80193f0 <siprintf>
		HAL_UART_Transmit(&IOT_AT_UART, txBuffer, strlen(txBuffer), 200);
 8017406:	f107 0308 	add.w	r3, r7, #8
 801740a:	4618      	mov	r0, r3
 801740c:	f7f8 fef2 	bl	80101f4 <strlen>
 8017410:	4603      	mov	r3, r0
 8017412:	b29a      	uxth	r2, r3
 8017414:	f107 0108 	add.w	r1, r7, #8
 8017418:	23c8      	movs	r3, #200	; 0xc8
 801741a:	4806      	ldr	r0, [pc, #24]	; (8017434 <SetSUBTOPIC+0x130>)
 801741c:	f7fe faf0 	bl	8015a00 <HAL_UART_Transmit>
}
 8017420:	bf00      	nop
 8017422:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8017426:	46bd      	mov	sp, r7
 8017428:	bd80      	pop	{r7, pc}
 801742a:	bf00      	nop
 801742c:	0801aa50 	.word	0x0801aa50
 8017430:	0801aa68 	.word	0x0801aa68
 8017434:	200005bc 	.word	0x200005bc
 8017438:	0801a9cc 	.word	0x0801a9cc
 801743c:	0801a9ec 	.word	0x0801a9ec

08017440 <SetBKRADDR>:

void SetBKRADDR(iot_atdatatypedef *IOT_AT, iotParam_Typedef *iot) {
 8017440:	b580      	push	{r7, lr}
 8017442:	b0c2      	sub	sp, #264	; 0x108
 8017444:	af00      	add	r7, sp, #0
 8017446:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801744a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801744e:	6018      	str	r0, [r3, #0]
 8017450:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8017454:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8017458:	6019      	str	r1, [r3, #0]
	char txBuffer[250];
	int result = sscanf(IOT_AT->atCmd, "AT+BKRADDR=\"%50[^\"]\"",
 801745a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801745e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8017462:	681b      	ldr	r3, [r3, #0]
 8017464:	1c58      	adds	r0, r3, #1
			iot->mqtt.BrokerAddress);
 8017466:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801746a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801746e:	681b      	ldr	r3, [r3, #0]
 8017470:	3334      	adds	r3, #52	; 0x34
	int result = sscanf(IOT_AT->atCmd, "AT+BKRADDR=\"%50[^\"]\"",
 8017472:	461a      	mov	r2, r3
 8017474:	493b      	ldr	r1, [pc, #236]	; (8017564 <SetBKRADDR+0x124>)
 8017476:	f001 ffdb 	bl	8019430 <siscanf>
 801747a:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
	if (result == 1) {
 801747e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8017482:	2b01      	cmp	r3, #1
 8017484:	d155      	bne.n	8017532 <SetBKRADDR+0xf2>
		iot->mqtt.BROKER_ADDRESS_LEN = strlen(iot->mqtt.BrokerAddress);
 8017486:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801748a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801748e:	681b      	ldr	r3, [r3, #0]
 8017490:	3334      	adds	r3, #52	; 0x34
 8017492:	4618      	mov	r0, r3
 8017494:	f7f8 feae 	bl	80101f4 <strlen>
 8017498:	4603      	mov	r3, r0
 801749a:	b2da      	uxtb	r2, r3
 801749c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80174a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80174a4:	681b      	ldr	r3, [r3, #0]
 80174a6:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
		if (ee_setBrokerAddress(iot->mqtt.BrokerAddress,
 80174aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80174ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80174b2:	681b      	ldr	r3, [r3, #0]
 80174b4:	f103 0234 	add.w	r2, r3, #52	; 0x34
				iot->mqtt.BROKER_ADDRESS_LEN)) {
 80174b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80174bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80174c0:	681b      	ldr	r3, [r3, #0]
 80174c2:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
		if (ee_setBrokerAddress(iot->mqtt.BrokerAddress,
 80174c6:	4619      	mov	r1, r3
 80174c8:	4610      	mov	r0, r2
 80174ca:	f001 fae7 	bl	8018a9c <ee_setBrokerAddress>
 80174ce:	4603      	mov	r3, r0
 80174d0:	2b00      	cmp	r3, #0
 80174d2:	d01a      	beq.n	801750a <SetBKRADDR+0xca>
			sprintf(txBuffer,
					"'%s' successfully set as Broker Address\r\nOK\r\n",
					iot->mqtt.BrokerAddress);
 80174d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80174d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80174dc:	681b      	ldr	r3, [r3, #0]
 80174de:	f103 0234 	add.w	r2, r3, #52	; 0x34
			sprintf(txBuffer,
 80174e2:	f107 0308 	add.w	r3, r7, #8
 80174e6:	4920      	ldr	r1, [pc, #128]	; (8017568 <SetBKRADDR+0x128>)
 80174e8:	4618      	mov	r0, r3
 80174ea:	f001 ff81 	bl	80193f0 <siprintf>
			HAL_UART_Transmit(&IOT_AT_UART, txBuffer, strlen(txBuffer), 200);
 80174ee:	f107 0308 	add.w	r3, r7, #8
 80174f2:	4618      	mov	r0, r3
 80174f4:	f7f8 fe7e 	bl	80101f4 <strlen>
 80174f8:	4603      	mov	r3, r0
 80174fa:	b29a      	uxth	r2, r3
 80174fc:	f107 0108 	add.w	r1, r7, #8
 8017500:	23c8      	movs	r3, #200	; 0xc8
 8017502:	481a      	ldr	r0, [pc, #104]	; (801756c <SetBKRADDR+0x12c>)
 8017504:	f7fe fa7c 	bl	8015a00 <HAL_UART_Transmit>
		}
	} else {
		sprintf(txBuffer, "Incorrect Command\r\nERROR\r\n");
		HAL_UART_Transmit(&IOT_AT_UART, txBuffer, strlen(txBuffer), 200);
	}
}
 8017508:	e026      	b.n	8017558 <SetBKRADDR+0x118>
			sprintf(txBuffer, "EEPROM not responding\r\nERROR\r\n");
 801750a:	f107 0308 	add.w	r3, r7, #8
 801750e:	4918      	ldr	r1, [pc, #96]	; (8017570 <SetBKRADDR+0x130>)
 8017510:	4618      	mov	r0, r3
 8017512:	f001 ff6d 	bl	80193f0 <siprintf>
			HAL_UART_Transmit(&IOT_AT_UART, txBuffer, strlen(txBuffer), 200);
 8017516:	f107 0308 	add.w	r3, r7, #8
 801751a:	4618      	mov	r0, r3
 801751c:	f7f8 fe6a 	bl	80101f4 <strlen>
 8017520:	4603      	mov	r3, r0
 8017522:	b29a      	uxth	r2, r3
 8017524:	f107 0108 	add.w	r1, r7, #8
 8017528:	23c8      	movs	r3, #200	; 0xc8
 801752a:	4810      	ldr	r0, [pc, #64]	; (801756c <SetBKRADDR+0x12c>)
 801752c:	f7fe fa68 	bl	8015a00 <HAL_UART_Transmit>
}
 8017530:	e012      	b.n	8017558 <SetBKRADDR+0x118>
		sprintf(txBuffer, "Incorrect Command\r\nERROR\r\n");
 8017532:	f107 0308 	add.w	r3, r7, #8
 8017536:	490f      	ldr	r1, [pc, #60]	; (8017574 <SetBKRADDR+0x134>)
 8017538:	4618      	mov	r0, r3
 801753a:	f001 ff59 	bl	80193f0 <siprintf>
		HAL_UART_Transmit(&IOT_AT_UART, txBuffer, strlen(txBuffer), 200);
 801753e:	f107 0308 	add.w	r3, r7, #8
 8017542:	4618      	mov	r0, r3
 8017544:	f7f8 fe56 	bl	80101f4 <strlen>
 8017548:	4603      	mov	r3, r0
 801754a:	b29a      	uxth	r2, r3
 801754c:	f107 0108 	add.w	r1, r7, #8
 8017550:	23c8      	movs	r3, #200	; 0xc8
 8017552:	4806      	ldr	r0, [pc, #24]	; (801756c <SetBKRADDR+0x12c>)
 8017554:	f7fe fa54 	bl	8015a00 <HAL_UART_Transmit>
}
 8017558:	bf00      	nop
 801755a:	f507 7784 	add.w	r7, r7, #264	; 0x108
 801755e:	46bd      	mov	sp, r7
 8017560:	bd80      	pop	{r7, pc}
 8017562:	bf00      	nop
 8017564:	0801aa98 	.word	0x0801aa98
 8017568:	0801aab0 	.word	0x0801aab0
 801756c:	200005bc 	.word	0x200005bc
 8017570:	0801a9cc 	.word	0x0801a9cc
 8017574:	0801a9ec 	.word	0x0801a9ec

08017578 <SetBKRPORT>:

void SetBKRPORT(iot_atdatatypedef *IOT_AT, iotParam_Typedef *iot) {
 8017578:	b580      	push	{r7, lr}
 801757a:	b0c2      	sub	sp, #264	; 0x108
 801757c:	af00      	add	r7, sp, #0
 801757e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8017582:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8017586:	6018      	str	r0, [r3, #0]
 8017588:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801758c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8017590:	6019      	str	r1, [r3, #0]
	char txBuffer[250];
	int result = sscanf(IOT_AT->atCmd, "AT+BKRPORT=\"%d\"",
 8017592:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8017596:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801759a:	681b      	ldr	r3, [r3, #0]
 801759c:	1c58      	adds	r0, r3, #1
 801759e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80175a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80175a6:	681b      	ldr	r3, [r3, #0]
 80175a8:	3368      	adds	r3, #104	; 0x68
 80175aa:	461a      	mov	r2, r3
 80175ac:	492e      	ldr	r1, [pc, #184]	; (8017668 <SetBKRPORT+0xf0>)
 80175ae:	f001 ff3f 	bl	8019430 <siscanf>
 80175b2:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
			&iot->mqtt.brokerPort);
	if (result == 1) {
 80175b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80175ba:	2b01      	cmp	r3, #1
 80175bc:	d13c      	bne.n	8017638 <SetBKRPORT+0xc0>
		if (ee_setBrokerPort(iot->mqtt.brokerPort)) {
 80175be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80175c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80175c6:	681b      	ldr	r3, [r3, #0]
 80175c8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80175cc:	4618      	mov	r0, r3
 80175ce:	f001 fa18 	bl	8018a02 <ee_setBrokerPort>
 80175d2:	4603      	mov	r3, r0
 80175d4:	2b00      	cmp	r3, #0
 80175d6:	d01b      	beq.n	8017610 <SetBKRPORT+0x98>
			sprintf(txBuffer, "'%d' successfully set as Broker Port\r\nOK\r\n",
					iot->mqtt.brokerPort);
 80175d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80175dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80175e0:	681b      	ldr	r3, [r3, #0]
 80175e2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
			sprintf(txBuffer, "'%d' successfully set as Broker Port\r\nOK\r\n",
 80175e6:	461a      	mov	r2, r3
 80175e8:	f107 0308 	add.w	r3, r7, #8
 80175ec:	491f      	ldr	r1, [pc, #124]	; (801766c <SetBKRPORT+0xf4>)
 80175ee:	4618      	mov	r0, r3
 80175f0:	f001 fefe 	bl	80193f0 <siprintf>
			HAL_UART_Transmit(&IOT_AT_UART, txBuffer, strlen(txBuffer), 200);
 80175f4:	f107 0308 	add.w	r3, r7, #8
 80175f8:	4618      	mov	r0, r3
 80175fa:	f7f8 fdfb 	bl	80101f4 <strlen>
 80175fe:	4603      	mov	r3, r0
 8017600:	b29a      	uxth	r2, r3
 8017602:	f107 0108 	add.w	r1, r7, #8
 8017606:	23c8      	movs	r3, #200	; 0xc8
 8017608:	4819      	ldr	r0, [pc, #100]	; (8017670 <SetBKRPORT+0xf8>)
 801760a:	f7fe f9f9 	bl	8015a00 <HAL_UART_Transmit>
		}
	} else {
		sprintf(txBuffer, "Incorrect Command\r\nERROR\r\n");
		HAL_UART_Transmit(&IOT_AT_UART, txBuffer, strlen(txBuffer), 200);
	}
}
 801760e:	e026      	b.n	801765e <SetBKRPORT+0xe6>
			sprintf(txBuffer, "EEPROM not responding\r\nERROR\r\n");
 8017610:	f107 0308 	add.w	r3, r7, #8
 8017614:	4917      	ldr	r1, [pc, #92]	; (8017674 <SetBKRPORT+0xfc>)
 8017616:	4618      	mov	r0, r3
 8017618:	f001 feea 	bl	80193f0 <siprintf>
			HAL_UART_Transmit(&IOT_AT_UART, txBuffer, strlen(txBuffer), 200);
 801761c:	f107 0308 	add.w	r3, r7, #8
 8017620:	4618      	mov	r0, r3
 8017622:	f7f8 fde7 	bl	80101f4 <strlen>
 8017626:	4603      	mov	r3, r0
 8017628:	b29a      	uxth	r2, r3
 801762a:	f107 0108 	add.w	r1, r7, #8
 801762e:	23c8      	movs	r3, #200	; 0xc8
 8017630:	480f      	ldr	r0, [pc, #60]	; (8017670 <SetBKRPORT+0xf8>)
 8017632:	f7fe f9e5 	bl	8015a00 <HAL_UART_Transmit>
}
 8017636:	e012      	b.n	801765e <SetBKRPORT+0xe6>
		sprintf(txBuffer, "Incorrect Command\r\nERROR\r\n");
 8017638:	f107 0308 	add.w	r3, r7, #8
 801763c:	490e      	ldr	r1, [pc, #56]	; (8017678 <SetBKRPORT+0x100>)
 801763e:	4618      	mov	r0, r3
 8017640:	f001 fed6 	bl	80193f0 <siprintf>
		HAL_UART_Transmit(&IOT_AT_UART, txBuffer, strlen(txBuffer), 200);
 8017644:	f107 0308 	add.w	r3, r7, #8
 8017648:	4618      	mov	r0, r3
 801764a:	f7f8 fdd3 	bl	80101f4 <strlen>
 801764e:	4603      	mov	r3, r0
 8017650:	b29a      	uxth	r2, r3
 8017652:	f107 0108 	add.w	r1, r7, #8
 8017656:	23c8      	movs	r3, #200	; 0xc8
 8017658:	4805      	ldr	r0, [pc, #20]	; (8017670 <SetBKRPORT+0xf8>)
 801765a:	f7fe f9d1 	bl	8015a00 <HAL_UART_Transmit>
}
 801765e:	bf00      	nop
 8017660:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8017664:	46bd      	mov	sp, r7
 8017666:	bd80      	pop	{r7, pc}
 8017668:	0801aae0 	.word	0x0801aae0
 801766c:	0801aaf0 	.word	0x0801aaf0
 8017670:	200005bc 	.word	0x200005bc
 8017674:	0801a9cc 	.word	0x0801a9cc
 8017678:	0801a9ec 	.word	0x0801a9ec

0801767c <SetCLIENTID>:

void SetCLIENTID(iot_atdatatypedef *IOT_AT, iotParam_Typedef *iot) {
 801767c:	b580      	push	{r7, lr}
 801767e:	b0c2      	sub	sp, #264	; 0x108
 8017680:	af00      	add	r7, sp, #0
 8017682:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8017686:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801768a:	6018      	str	r0, [r3, #0]
 801768c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8017690:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8017694:	6019      	str	r1, [r3, #0]
	char txBuffer[250];
	int result = sscanf(IOT_AT->atCmd, "AT+CLNTID=\"%50[^\"]\"",
 8017696:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801769a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801769e:	681b      	ldr	r3, [r3, #0]
 80176a0:	1c58      	adds	r0, r3, #1
			iot->mqtt.ClientID);
 80176a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80176a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80176aa:	681b      	ldr	r3, [r3, #0]
 80176ac:	336a      	adds	r3, #106	; 0x6a
	int result = sscanf(IOT_AT->atCmd, "AT+CLNTID=\"%50[^\"]\"",
 80176ae:	461a      	mov	r2, r3
 80176b0:	493b      	ldr	r1, [pc, #236]	; (80177a0 <SetCLIENTID+0x124>)
 80176b2:	f001 febd 	bl	8019430 <siscanf>
 80176b6:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
	if (result == 1) {
 80176ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80176be:	2b01      	cmp	r3, #1
 80176c0:	d155      	bne.n	801776e <SetCLIENTID+0xf2>
		iot->mqtt.CLIENT_ID_LEN = strlen(iot->mqtt.ClientID);
 80176c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80176c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80176ca:	681b      	ldr	r3, [r3, #0]
 80176cc:	336a      	adds	r3, #106	; 0x6a
 80176ce:	4618      	mov	r0, r3
 80176d0:	f7f8 fd90 	bl	80101f4 <strlen>
 80176d4:	4603      	mov	r3, r0
 80176d6:	b2da      	uxtb	r2, r3
 80176d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80176dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80176e0:	681b      	ldr	r3, [r3, #0]
 80176e2:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
		if (ee_setMqttClientID(iot->mqtt.ClientID, iot->mqtt.CLIENT_ID_LEN)) {
 80176e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80176ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80176ee:	681b      	ldr	r3, [r3, #0]
 80176f0:	f103 026a 	add.w	r2, r3, #106	; 0x6a
 80176f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80176f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80176fc:	681b      	ldr	r3, [r3, #0]
 80176fe:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8017702:	4619      	mov	r1, r3
 8017704:	4610      	mov	r0, r2
 8017706:	f001 fa2b 	bl	8018b60 <ee_setMqttClientID>
 801770a:	4603      	mov	r3, r0
 801770c:	2b00      	cmp	r3, #0
 801770e:	d01a      	beq.n	8017746 <SetCLIENTID+0xca>
			sprintf(txBuffer, "'%s' successfully set as Client ID\r\nOK\r\n",
					iot->mqtt.ClientID);
 8017710:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8017714:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8017718:	681b      	ldr	r3, [r3, #0]
 801771a:	f103 026a 	add.w	r2, r3, #106	; 0x6a
			sprintf(txBuffer, "'%s' successfully set as Client ID\r\nOK\r\n",
 801771e:	f107 0308 	add.w	r3, r7, #8
 8017722:	4920      	ldr	r1, [pc, #128]	; (80177a4 <SetCLIENTID+0x128>)
 8017724:	4618      	mov	r0, r3
 8017726:	f001 fe63 	bl	80193f0 <siprintf>
			HAL_UART_Transmit(&IOT_AT_UART, txBuffer, strlen(txBuffer), 200);
 801772a:	f107 0308 	add.w	r3, r7, #8
 801772e:	4618      	mov	r0, r3
 8017730:	f7f8 fd60 	bl	80101f4 <strlen>
 8017734:	4603      	mov	r3, r0
 8017736:	b29a      	uxth	r2, r3
 8017738:	f107 0108 	add.w	r1, r7, #8
 801773c:	23c8      	movs	r3, #200	; 0xc8
 801773e:	481a      	ldr	r0, [pc, #104]	; (80177a8 <SetCLIENTID+0x12c>)
 8017740:	f7fe f95e 	bl	8015a00 <HAL_UART_Transmit>
		}
	} else {
		sprintf(txBuffer, "Incorrect Command\r\nERROR\r\n");
		HAL_UART_Transmit(&IOT_AT_UART, txBuffer, strlen(txBuffer), 200);
	}
}
 8017744:	e026      	b.n	8017794 <SetCLIENTID+0x118>
			sprintf(txBuffer, "EEPROM not responding\r\nERROR\r\n");
 8017746:	f107 0308 	add.w	r3, r7, #8
 801774a:	4918      	ldr	r1, [pc, #96]	; (80177ac <SetCLIENTID+0x130>)
 801774c:	4618      	mov	r0, r3
 801774e:	f001 fe4f 	bl	80193f0 <siprintf>
			HAL_UART_Transmit(&IOT_AT_UART, txBuffer, strlen(txBuffer), 200);
 8017752:	f107 0308 	add.w	r3, r7, #8
 8017756:	4618      	mov	r0, r3
 8017758:	f7f8 fd4c 	bl	80101f4 <strlen>
 801775c:	4603      	mov	r3, r0
 801775e:	b29a      	uxth	r2, r3
 8017760:	f107 0108 	add.w	r1, r7, #8
 8017764:	23c8      	movs	r3, #200	; 0xc8
 8017766:	4810      	ldr	r0, [pc, #64]	; (80177a8 <SetCLIENTID+0x12c>)
 8017768:	f7fe f94a 	bl	8015a00 <HAL_UART_Transmit>
}
 801776c:	e012      	b.n	8017794 <SetCLIENTID+0x118>
		sprintf(txBuffer, "Incorrect Command\r\nERROR\r\n");
 801776e:	f107 0308 	add.w	r3, r7, #8
 8017772:	490f      	ldr	r1, [pc, #60]	; (80177b0 <SetCLIENTID+0x134>)
 8017774:	4618      	mov	r0, r3
 8017776:	f001 fe3b 	bl	80193f0 <siprintf>
		HAL_UART_Transmit(&IOT_AT_UART, txBuffer, strlen(txBuffer), 200);
 801777a:	f107 0308 	add.w	r3, r7, #8
 801777e:	4618      	mov	r0, r3
 8017780:	f7f8 fd38 	bl	80101f4 <strlen>
 8017784:	4603      	mov	r3, r0
 8017786:	b29a      	uxth	r2, r3
 8017788:	f107 0108 	add.w	r1, r7, #8
 801778c:	23c8      	movs	r3, #200	; 0xc8
 801778e:	4806      	ldr	r0, [pc, #24]	; (80177a8 <SetCLIENTID+0x12c>)
 8017790:	f7fe f936 	bl	8015a00 <HAL_UART_Transmit>
}
 8017794:	bf00      	nop
 8017796:	f507 7784 	add.w	r7, r7, #264	; 0x108
 801779a:	46bd      	mov	sp, r7
 801779c:	bd80      	pop	{r7, pc}
 801779e:	bf00      	nop
 80177a0:	0801ab1c 	.word	0x0801ab1c
 80177a4:	0801ab30 	.word	0x0801ab30
 80177a8:	200005bc 	.word	0x200005bc
 80177ac:	0801a9cc 	.word	0x0801a9cc
 80177b0:	0801a9ec 	.word	0x0801a9ec

080177b4 <SetUSERID>:

void SetUSERID(iot_atdatatypedef *IOT_AT, iotParam_Typedef *iot) {
 80177b4:	b580      	push	{r7, lr}
 80177b6:	b0c2      	sub	sp, #264	; 0x108
 80177b8:	af00      	add	r7, sp, #0
 80177ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80177be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80177c2:	6018      	str	r0, [r3, #0]
 80177c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80177c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80177cc:	6019      	str	r1, [r3, #0]
	char txBuffer[250];
	int result = sscanf(IOT_AT->atCmd, "AT+MUID=\"%20[^\"]\"",
 80177ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80177d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80177d6:	681b      	ldr	r3, [r3, #0]
 80177d8:	1c58      	adds	r0, r3, #1
			iot->mqtt.userID);
 80177da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80177de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80177e2:	681b      	ldr	r3, [r3, #0]
 80177e4:	3380      	adds	r3, #128	; 0x80
	int result = sscanf(IOT_AT->atCmd, "AT+MUID=\"%20[^\"]\"",
 80177e6:	461a      	mov	r2, r3
 80177e8:	493b      	ldr	r1, [pc, #236]	; (80178d8 <SetUSERID+0x124>)
 80177ea:	f001 fe21 	bl	8019430 <siscanf>
 80177ee:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
	if (result == 1) {
 80177f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80177f6:	2b01      	cmp	r3, #1
 80177f8:	d155      	bne.n	80178a6 <SetUSERID+0xf2>
		iot->mqtt.USER_ID_LEN = strlen(iot->mqtt.userID);
 80177fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80177fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8017802:	681b      	ldr	r3, [r3, #0]
 8017804:	3380      	adds	r3, #128	; 0x80
 8017806:	4618      	mov	r0, r3
 8017808:	f7f8 fcf4 	bl	80101f4 <strlen>
 801780c:	4603      	mov	r3, r0
 801780e:	b2da      	uxtb	r2, r3
 8017810:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8017814:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8017818:	681b      	ldr	r3, [r3, #0]
 801781a:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
		if (ee_setMqttUserID(iot->mqtt.userID, iot->mqtt.USER_ID_LEN)) {
 801781e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8017822:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8017826:	681b      	ldr	r3, [r3, #0]
 8017828:	f103 0280 	add.w	r2, r3, #128	; 0x80
 801782c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8017830:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8017834:	681b      	ldr	r3, [r3, #0]
 8017836:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 801783a:	4619      	mov	r1, r3
 801783c:	4610      	mov	r0, r2
 801783e:	f001 f9f1 	bl	8018c24 <ee_setMqttUserID>
 8017842:	4603      	mov	r3, r0
 8017844:	2b00      	cmp	r3, #0
 8017846:	d01a      	beq.n	801787e <SetUSERID+0xca>
			sprintf(txBuffer, "'%s' successfully set as User ID\r\nOK\r\n",
					iot->mqtt.userID);
 8017848:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801784c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8017850:	681b      	ldr	r3, [r3, #0]
 8017852:	f103 0280 	add.w	r2, r3, #128	; 0x80
			sprintf(txBuffer, "'%s' successfully set as User ID\r\nOK\r\n",
 8017856:	f107 0308 	add.w	r3, r7, #8
 801785a:	4920      	ldr	r1, [pc, #128]	; (80178dc <SetUSERID+0x128>)
 801785c:	4618      	mov	r0, r3
 801785e:	f001 fdc7 	bl	80193f0 <siprintf>
			HAL_UART_Transmit(&IOT_AT_UART, txBuffer, strlen(txBuffer), 200);
 8017862:	f107 0308 	add.w	r3, r7, #8
 8017866:	4618      	mov	r0, r3
 8017868:	f7f8 fcc4 	bl	80101f4 <strlen>
 801786c:	4603      	mov	r3, r0
 801786e:	b29a      	uxth	r2, r3
 8017870:	f107 0108 	add.w	r1, r7, #8
 8017874:	23c8      	movs	r3, #200	; 0xc8
 8017876:	481a      	ldr	r0, [pc, #104]	; (80178e0 <SetUSERID+0x12c>)
 8017878:	f7fe f8c2 	bl	8015a00 <HAL_UART_Transmit>
		}
	} else {
		sprintf(txBuffer, "Incorrect Command\r\nERROR\r\n");
		HAL_UART_Transmit(&IOT_AT_UART, txBuffer, strlen(txBuffer), 200);
	}
}
 801787c:	e026      	b.n	80178cc <SetUSERID+0x118>
			sprintf(txBuffer, "EEPROM not responding\r\nERROR\r\n");
 801787e:	f107 0308 	add.w	r3, r7, #8
 8017882:	4918      	ldr	r1, [pc, #96]	; (80178e4 <SetUSERID+0x130>)
 8017884:	4618      	mov	r0, r3
 8017886:	f001 fdb3 	bl	80193f0 <siprintf>
			HAL_UART_Transmit(&IOT_AT_UART, txBuffer, strlen(txBuffer), 200);
 801788a:	f107 0308 	add.w	r3, r7, #8
 801788e:	4618      	mov	r0, r3
 8017890:	f7f8 fcb0 	bl	80101f4 <strlen>
 8017894:	4603      	mov	r3, r0
 8017896:	b29a      	uxth	r2, r3
 8017898:	f107 0108 	add.w	r1, r7, #8
 801789c:	23c8      	movs	r3, #200	; 0xc8
 801789e:	4810      	ldr	r0, [pc, #64]	; (80178e0 <SetUSERID+0x12c>)
 80178a0:	f7fe f8ae 	bl	8015a00 <HAL_UART_Transmit>
}
 80178a4:	e012      	b.n	80178cc <SetUSERID+0x118>
		sprintf(txBuffer, "Incorrect Command\r\nERROR\r\n");
 80178a6:	f107 0308 	add.w	r3, r7, #8
 80178aa:	490f      	ldr	r1, [pc, #60]	; (80178e8 <SetUSERID+0x134>)
 80178ac:	4618      	mov	r0, r3
 80178ae:	f001 fd9f 	bl	80193f0 <siprintf>
		HAL_UART_Transmit(&IOT_AT_UART, txBuffer, strlen(txBuffer), 200);
 80178b2:	f107 0308 	add.w	r3, r7, #8
 80178b6:	4618      	mov	r0, r3
 80178b8:	f7f8 fc9c 	bl	80101f4 <strlen>
 80178bc:	4603      	mov	r3, r0
 80178be:	b29a      	uxth	r2, r3
 80178c0:	f107 0108 	add.w	r1, r7, #8
 80178c4:	23c8      	movs	r3, #200	; 0xc8
 80178c6:	4806      	ldr	r0, [pc, #24]	; (80178e0 <SetUSERID+0x12c>)
 80178c8:	f7fe f89a 	bl	8015a00 <HAL_UART_Transmit>
}
 80178cc:	bf00      	nop
 80178ce:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80178d2:	46bd      	mov	sp, r7
 80178d4:	bd80      	pop	{r7, pc}
 80178d6:	bf00      	nop
 80178d8:	0801ab5c 	.word	0x0801ab5c
 80178dc:	0801ab70 	.word	0x0801ab70
 80178e0:	200005bc 	.word	0x200005bc
 80178e4:	0801a9cc 	.word	0x0801a9cc
 80178e8:	0801a9ec 	.word	0x0801a9ec

080178ec <SetPASSWORD>:

void SetPASSWORD(iot_atdatatypedef *IOT_AT, iotParam_Typedef *iot) {
 80178ec:	b580      	push	{r7, lr}
 80178ee:	b0c2      	sub	sp, #264	; 0x108
 80178f0:	af00      	add	r7, sp, #0
 80178f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80178f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80178fa:	6018      	str	r0, [r3, #0]
 80178fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8017900:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8017904:	6019      	str	r1, [r3, #0]
	char txBuffer[250];
	int result = sscanf(IOT_AT->atCmd, "AT+MUPWD=\"%20[^\"]\"",
 8017906:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801790a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801790e:	681b      	ldr	r3, [r3, #0]
 8017910:	1c58      	adds	r0, r3, #1
			iot->mqtt.userPassword);
 8017912:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8017916:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801791a:	681b      	ldr	r3, [r3, #0]
 801791c:	3396      	adds	r3, #150	; 0x96
	int result = sscanf(IOT_AT->atCmd, "AT+MUPWD=\"%20[^\"]\"",
 801791e:	461a      	mov	r2, r3
 8017920:	493b      	ldr	r1, [pc, #236]	; (8017a10 <SetPASSWORD+0x124>)
 8017922:	f001 fd85 	bl	8019430 <siscanf>
 8017926:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
	if (result == 1) {
 801792a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801792e:	2b01      	cmp	r3, #1
 8017930:	d155      	bne.n	80179de <SetPASSWORD+0xf2>
		iot->mqtt.USER_PASSWORD_LEN = strlen(iot->mqtt.userPassword);
 8017932:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8017936:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801793a:	681b      	ldr	r3, [r3, #0]
 801793c:	3396      	adds	r3, #150	; 0x96
 801793e:	4618      	mov	r0, r3
 8017940:	f7f8 fc58 	bl	80101f4 <strlen>
 8017944:	4603      	mov	r3, r0
 8017946:	b2da      	uxtb	r2, r3
 8017948:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801794c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8017950:	681b      	ldr	r3, [r3, #0]
 8017952:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
		if (ee_setMqttUserPassword(iot->mqtt.userPassword,
 8017956:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801795a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801795e:	681b      	ldr	r3, [r3, #0]
 8017960:	f103 0296 	add.w	r2, r3, #150	; 0x96
				iot->mqtt.USER_PASSWORD_LEN)) {
 8017964:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8017968:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801796c:	681b      	ldr	r3, [r3, #0]
 801796e:	f893 30ab 	ldrb.w	r3, [r3, #171]	; 0xab
		if (ee_setMqttUserPassword(iot->mqtt.userPassword,
 8017972:	4619      	mov	r1, r3
 8017974:	4610      	mov	r0, r2
 8017976:	f001 f9b7 	bl	8018ce8 <ee_setMqttUserPassword>
 801797a:	4603      	mov	r3, r0
 801797c:	2b00      	cmp	r3, #0
 801797e:	d01a      	beq.n	80179b6 <SetPASSWORD+0xca>
			sprintf(txBuffer,
					"'%s' successfully set as User Password\r\nOK\r\n",
					iot->mqtt.userPassword);
 8017980:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8017984:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8017988:	681b      	ldr	r3, [r3, #0]
 801798a:	f103 0296 	add.w	r2, r3, #150	; 0x96
			sprintf(txBuffer,
 801798e:	f107 0308 	add.w	r3, r7, #8
 8017992:	4920      	ldr	r1, [pc, #128]	; (8017a14 <SetPASSWORD+0x128>)
 8017994:	4618      	mov	r0, r3
 8017996:	f001 fd2b 	bl	80193f0 <siprintf>
			HAL_UART_Transmit(&IOT_AT_UART, txBuffer, strlen(txBuffer), 200);
 801799a:	f107 0308 	add.w	r3, r7, #8
 801799e:	4618      	mov	r0, r3
 80179a0:	f7f8 fc28 	bl	80101f4 <strlen>
 80179a4:	4603      	mov	r3, r0
 80179a6:	b29a      	uxth	r2, r3
 80179a8:	f107 0108 	add.w	r1, r7, #8
 80179ac:	23c8      	movs	r3, #200	; 0xc8
 80179ae:	481a      	ldr	r0, [pc, #104]	; (8017a18 <SetPASSWORD+0x12c>)
 80179b0:	f7fe f826 	bl	8015a00 <HAL_UART_Transmit>
		}
	} else {
		sprintf(txBuffer, "Incorrect Command\r\nERROR\r\n");
		HAL_UART_Transmit(&IOT_AT_UART, txBuffer, strlen(txBuffer), 200);
	}
}
 80179b4:	e026      	b.n	8017a04 <SetPASSWORD+0x118>
			sprintf(txBuffer, "EEPROM not responding\r\nERROR\r\n");
 80179b6:	f107 0308 	add.w	r3, r7, #8
 80179ba:	4918      	ldr	r1, [pc, #96]	; (8017a1c <SetPASSWORD+0x130>)
 80179bc:	4618      	mov	r0, r3
 80179be:	f001 fd17 	bl	80193f0 <siprintf>
			HAL_UART_Transmit(&IOT_AT_UART, txBuffer, strlen(txBuffer), 200);
 80179c2:	f107 0308 	add.w	r3, r7, #8
 80179c6:	4618      	mov	r0, r3
 80179c8:	f7f8 fc14 	bl	80101f4 <strlen>
 80179cc:	4603      	mov	r3, r0
 80179ce:	b29a      	uxth	r2, r3
 80179d0:	f107 0108 	add.w	r1, r7, #8
 80179d4:	23c8      	movs	r3, #200	; 0xc8
 80179d6:	4810      	ldr	r0, [pc, #64]	; (8017a18 <SetPASSWORD+0x12c>)
 80179d8:	f7fe f812 	bl	8015a00 <HAL_UART_Transmit>
}
 80179dc:	e012      	b.n	8017a04 <SetPASSWORD+0x118>
		sprintf(txBuffer, "Incorrect Command\r\nERROR\r\n");
 80179de:	f107 0308 	add.w	r3, r7, #8
 80179e2:	490f      	ldr	r1, [pc, #60]	; (8017a20 <SetPASSWORD+0x134>)
 80179e4:	4618      	mov	r0, r3
 80179e6:	f001 fd03 	bl	80193f0 <siprintf>
		HAL_UART_Transmit(&IOT_AT_UART, txBuffer, strlen(txBuffer), 200);
 80179ea:	f107 0308 	add.w	r3, r7, #8
 80179ee:	4618      	mov	r0, r3
 80179f0:	f7f8 fc00 	bl	80101f4 <strlen>
 80179f4:	4603      	mov	r3, r0
 80179f6:	b29a      	uxth	r2, r3
 80179f8:	f107 0108 	add.w	r1, r7, #8
 80179fc:	23c8      	movs	r3, #200	; 0xc8
 80179fe:	4806      	ldr	r0, [pc, #24]	; (8017a18 <SetPASSWORD+0x12c>)
 8017a00:	f7fd fffe 	bl	8015a00 <HAL_UART_Transmit>
}
 8017a04:	bf00      	nop
 8017a06:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8017a0a:	46bd      	mov	sp, r7
 8017a0c:	bd80      	pop	{r7, pc}
 8017a0e:	bf00      	nop
 8017a10:	0801ab98 	.word	0x0801ab98
 8017a14:	0801abac 	.word	0x0801abac
 8017a18:	200005bc 	.word	0x200005bc
 8017a1c:	0801a9cc 	.word	0x0801a9cc
 8017a20:	0801a9ec 	.word	0x0801a9ec

08017a24 <SetPointTemp>:

void SetPointTemp(iot_atdatatypedef *IOT_AT, recdCPointsTypedef *recdconstpts) {
 8017a24:	b580      	push	{r7, lr}
 8017a26:	b0c4      	sub	sp, #272	; 0x110
 8017a28:	af00      	add	r7, sp, #0
 8017a2a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8017a2e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8017a32:	6018      	str	r0, [r3, #0]
 8017a34:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8017a38:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8017a3c:	6019      	str	r1, [r3, #0]
	char txBuffer[250];
	uint16_t data1 = 0, data2 = 0;
 8017a3e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8017a42:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8017a46:	2200      	movs	r2, #0
 8017a48:	801a      	strh	r2, [r3, #0]
 8017a4a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8017a4e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8017a52:	2200      	movs	r2, #0
 8017a54:	801a      	strh	r2, [r3, #0]
	int result = sscanf(IOT_AT->atCmd, "AT+SETCTT=\"%d,%d\"", &data1, &data2);
 8017a56:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8017a5a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8017a5e:	681b      	ldr	r3, [r3, #0]
 8017a60:	1c58      	adds	r0, r3, #1
 8017a62:	f107 030c 	add.w	r3, r7, #12
 8017a66:	f107 020e 	add.w	r2, r7, #14
 8017a6a:	4939      	ldr	r1, [pc, #228]	; (8017b50 <SetPointTemp+0x12c>)
 8017a6c:	f001 fce0 	bl	8019430 <siscanf>
 8017a70:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
	if (result == 2) {
 8017a74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8017a78:	2b02      	cmp	r3, #2
 8017a7a:	d151      	bne.n	8017b20 <SetPointTemp+0xfc>
		recdconstpts->setPointT[0] = data1;
 8017a7c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8017a80:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8017a84:	881a      	ldrh	r2, [r3, #0]
 8017a86:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8017a8a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8017a8e:	681b      	ldr	r3, [r3, #0]
 8017a90:	809a      	strh	r2, [r3, #4]
		recdconstpts->setPointT[1] = data2;
 8017a92:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8017a96:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8017a9a:	881a      	ldrh	r2, [r3, #0]
 8017a9c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8017aa0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8017aa4:	681b      	ldr	r3, [r3, #0]
 8017aa6:	80da      	strh	r2, [r3, #6]
		if (ee_setrecdcpStruct(recdconstpts)) {
 8017aa8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8017aac:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8017ab0:	6818      	ldr	r0, [r3, #0]
 8017ab2:	f001 fa26 	bl	8018f02 <ee_setrecdcpStruct>
 8017ab6:	4603      	mov	r3, r0
 8017ab8:	2b00      	cmp	r3, #0
 8017aba:	d01d      	beq.n	8017af8 <SetPointTemp+0xd4>
			sprintf(txBuffer,
 8017abc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8017ac0:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8017ac4:	881b      	ldrh	r3, [r3, #0]
 8017ac6:	461a      	mov	r2, r3
 8017ac8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8017acc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8017ad0:	881b      	ldrh	r3, [r3, #0]
 8017ad2:	f107 0010 	add.w	r0, r7, #16
 8017ad6:	491f      	ldr	r1, [pc, #124]	; (8017b54 <SetPointTemp+0x130>)
 8017ad8:	f001 fc8a 	bl	80193f0 <siprintf>
					"'%d and %d' successfully set as 'T01' and 'T02'\r\nOK\r\n",
					data1, data2);
			HAL_UART_Transmit(&IOT_AT_UART, txBuffer, strlen(txBuffer), 200);
 8017adc:	f107 0310 	add.w	r3, r7, #16
 8017ae0:	4618      	mov	r0, r3
 8017ae2:	f7f8 fb87 	bl	80101f4 <strlen>
 8017ae6:	4603      	mov	r3, r0
 8017ae8:	b29a      	uxth	r2, r3
 8017aea:	f107 0110 	add.w	r1, r7, #16
 8017aee:	23c8      	movs	r3, #200	; 0xc8
 8017af0:	4819      	ldr	r0, [pc, #100]	; (8017b58 <SetPointTemp+0x134>)
 8017af2:	f7fd ff85 	bl	8015a00 <HAL_UART_Transmit>
		}
	} else {
		sprintf(txBuffer, "Incorrect Command\r\nError\r\n");
		HAL_UART_Transmit(&IOT_AT_UART, txBuffer, strlen(txBuffer), 200);
	}
}
 8017af6:	e026      	b.n	8017b46 <SetPointTemp+0x122>
			sprintf(txBuffer, "EEPROM not responding\r\nERROR\r\n");
 8017af8:	f107 0310 	add.w	r3, r7, #16
 8017afc:	4917      	ldr	r1, [pc, #92]	; (8017b5c <SetPointTemp+0x138>)
 8017afe:	4618      	mov	r0, r3
 8017b00:	f001 fc76 	bl	80193f0 <siprintf>
			HAL_UART_Transmit(&IOT_AT_UART, txBuffer, strlen(txBuffer), 200);
 8017b04:	f107 0310 	add.w	r3, r7, #16
 8017b08:	4618      	mov	r0, r3
 8017b0a:	f7f8 fb73 	bl	80101f4 <strlen>
 8017b0e:	4603      	mov	r3, r0
 8017b10:	b29a      	uxth	r2, r3
 8017b12:	f107 0110 	add.w	r1, r7, #16
 8017b16:	23c8      	movs	r3, #200	; 0xc8
 8017b18:	480f      	ldr	r0, [pc, #60]	; (8017b58 <SetPointTemp+0x134>)
 8017b1a:	f7fd ff71 	bl	8015a00 <HAL_UART_Transmit>
}
 8017b1e:	e012      	b.n	8017b46 <SetPointTemp+0x122>
		sprintf(txBuffer, "Incorrect Command\r\nError\r\n");
 8017b20:	f107 0310 	add.w	r3, r7, #16
 8017b24:	490e      	ldr	r1, [pc, #56]	; (8017b60 <SetPointTemp+0x13c>)
 8017b26:	4618      	mov	r0, r3
 8017b28:	f001 fc62 	bl	80193f0 <siprintf>
		HAL_UART_Transmit(&IOT_AT_UART, txBuffer, strlen(txBuffer), 200);
 8017b2c:	f107 0310 	add.w	r3, r7, #16
 8017b30:	4618      	mov	r0, r3
 8017b32:	f7f8 fb5f 	bl	80101f4 <strlen>
 8017b36:	4603      	mov	r3, r0
 8017b38:	b29a      	uxth	r2, r3
 8017b3a:	f107 0110 	add.w	r1, r7, #16
 8017b3e:	23c8      	movs	r3, #200	; 0xc8
 8017b40:	4805      	ldr	r0, [pc, #20]	; (8017b58 <SetPointTemp+0x134>)
 8017b42:	f7fd ff5d 	bl	8015a00 <HAL_UART_Transmit>
}
 8017b46:	bf00      	nop
 8017b48:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8017b4c:	46bd      	mov	sp, r7
 8017b4e:	bd80      	pop	{r7, pc}
 8017b50:	0801abdc 	.word	0x0801abdc
 8017b54:	0801abf0 	.word	0x0801abf0
 8017b58:	200005bc 	.word	0x200005bc
 8017b5c:	0801a9cc 	.word	0x0801a9cc
 8017b60:	0801ac28 	.word	0x0801ac28

08017b64 <SetPointPressure>:

void SetPointPressure(iot_atdatatypedef *IOT_AT,
		recdCPointsTypedef *recdconstpts) {
 8017b64:	b580      	push	{r7, lr}
 8017b66:	b0c4      	sub	sp, #272	; 0x110
 8017b68:	af00      	add	r7, sp, #0
 8017b6a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8017b6e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8017b72:	6018      	str	r0, [r3, #0]
 8017b74:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8017b78:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8017b7c:	6019      	str	r1, [r3, #0]
	char txBuffer[250];
	uint16_t data1 = 0, data2 = 0;
 8017b7e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8017b82:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8017b86:	2200      	movs	r2, #0
 8017b88:	801a      	strh	r2, [r3, #0]
 8017b8a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8017b8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8017b92:	2200      	movs	r2, #0
 8017b94:	801a      	strh	r2, [r3, #0]
	int result = sscanf(IOT_AT->atCmd, "AT+SETCTP=\"%d,%d\"", &data1, &data2);
 8017b96:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8017b9a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8017b9e:	681b      	ldr	r3, [r3, #0]
 8017ba0:	1c58      	adds	r0, r3, #1
 8017ba2:	f107 030c 	add.w	r3, r7, #12
 8017ba6:	f107 020e 	add.w	r2, r7, #14
 8017baa:	4939      	ldr	r1, [pc, #228]	; (8017c90 <SetPointPressure+0x12c>)
 8017bac:	f001 fc40 	bl	8019430 <siscanf>
 8017bb0:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
	if (result == 2) {
 8017bb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8017bb8:	2b02      	cmp	r3, #2
 8017bba:	d151      	bne.n	8017c60 <SetPointPressure+0xfc>
		recdconstpts->setPointP[0] = data1;
 8017bbc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8017bc0:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8017bc4:	881a      	ldrh	r2, [r3, #0]
 8017bc6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8017bca:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8017bce:	681b      	ldr	r3, [r3, #0]
 8017bd0:	801a      	strh	r2, [r3, #0]
		recdconstpts->setPointP[1] = data2;
 8017bd2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8017bd6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8017bda:	881a      	ldrh	r2, [r3, #0]
 8017bdc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8017be0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8017be4:	681b      	ldr	r3, [r3, #0]
 8017be6:	805a      	strh	r2, [r3, #2]
		if (ee_setrecdcpStruct(recdconstpts)) {
 8017be8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8017bec:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8017bf0:	6818      	ldr	r0, [r3, #0]
 8017bf2:	f001 f986 	bl	8018f02 <ee_setrecdcpStruct>
 8017bf6:	4603      	mov	r3, r0
 8017bf8:	2b00      	cmp	r3, #0
 8017bfa:	d01d      	beq.n	8017c38 <SetPointPressure+0xd4>
			sprintf(txBuffer,
 8017bfc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8017c00:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8017c04:	881b      	ldrh	r3, [r3, #0]
 8017c06:	461a      	mov	r2, r3
 8017c08:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8017c0c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8017c10:	881b      	ldrh	r3, [r3, #0]
 8017c12:	f107 0010 	add.w	r0, r7, #16
 8017c16:	491f      	ldr	r1, [pc, #124]	; (8017c94 <SetPointPressure+0x130>)
 8017c18:	f001 fbea 	bl	80193f0 <siprintf>
					"'%d and %d' successfully set as 'P01' and 'P02'\r\nOK\r\n",
					data1, data2);
			HAL_UART_Transmit(&IOT_AT_UART, txBuffer, strlen(txBuffer), 200);
 8017c1c:	f107 0310 	add.w	r3, r7, #16
 8017c20:	4618      	mov	r0, r3
 8017c22:	f7f8 fae7 	bl	80101f4 <strlen>
 8017c26:	4603      	mov	r3, r0
 8017c28:	b29a      	uxth	r2, r3
 8017c2a:	f107 0110 	add.w	r1, r7, #16
 8017c2e:	23c8      	movs	r3, #200	; 0xc8
 8017c30:	4819      	ldr	r0, [pc, #100]	; (8017c98 <SetPointPressure+0x134>)
 8017c32:	f7fd fee5 	bl	8015a00 <HAL_UART_Transmit>
		}
	} else {
		sprintf(txBuffer, "Incorrect Command\r\nError\r\n");
		HAL_UART_Transmit(&IOT_AT_UART, txBuffer, strlen(txBuffer), 200);
	}
}
 8017c36:	e026      	b.n	8017c86 <SetPointPressure+0x122>
			sprintf(txBuffer, "EEPROM not responding\r\nERROR\r\n");
 8017c38:	f107 0310 	add.w	r3, r7, #16
 8017c3c:	4917      	ldr	r1, [pc, #92]	; (8017c9c <SetPointPressure+0x138>)
 8017c3e:	4618      	mov	r0, r3
 8017c40:	f001 fbd6 	bl	80193f0 <siprintf>
			HAL_UART_Transmit(&IOT_AT_UART, txBuffer, strlen(txBuffer), 200);
 8017c44:	f107 0310 	add.w	r3, r7, #16
 8017c48:	4618      	mov	r0, r3
 8017c4a:	f7f8 fad3 	bl	80101f4 <strlen>
 8017c4e:	4603      	mov	r3, r0
 8017c50:	b29a      	uxth	r2, r3
 8017c52:	f107 0110 	add.w	r1, r7, #16
 8017c56:	23c8      	movs	r3, #200	; 0xc8
 8017c58:	480f      	ldr	r0, [pc, #60]	; (8017c98 <SetPointPressure+0x134>)
 8017c5a:	f7fd fed1 	bl	8015a00 <HAL_UART_Transmit>
}
 8017c5e:	e012      	b.n	8017c86 <SetPointPressure+0x122>
		sprintf(txBuffer, "Incorrect Command\r\nError\r\n");
 8017c60:	f107 0310 	add.w	r3, r7, #16
 8017c64:	490e      	ldr	r1, [pc, #56]	; (8017ca0 <SetPointPressure+0x13c>)
 8017c66:	4618      	mov	r0, r3
 8017c68:	f001 fbc2 	bl	80193f0 <siprintf>
		HAL_UART_Transmit(&IOT_AT_UART, txBuffer, strlen(txBuffer), 200);
 8017c6c:	f107 0310 	add.w	r3, r7, #16
 8017c70:	4618      	mov	r0, r3
 8017c72:	f7f8 fabf 	bl	80101f4 <strlen>
 8017c76:	4603      	mov	r3, r0
 8017c78:	b29a      	uxth	r2, r3
 8017c7a:	f107 0110 	add.w	r1, r7, #16
 8017c7e:	23c8      	movs	r3, #200	; 0xc8
 8017c80:	4805      	ldr	r0, [pc, #20]	; (8017c98 <SetPointPressure+0x134>)
 8017c82:	f7fd febd 	bl	8015a00 <HAL_UART_Transmit>
}
 8017c86:	bf00      	nop
 8017c88:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8017c8c:	46bd      	mov	sp, r7
 8017c8e:	bd80      	pop	{r7, pc}
 8017c90:	0801ac44 	.word	0x0801ac44
 8017c94:	0801ac58 	.word	0x0801ac58
 8017c98:	200005bc 	.word	0x200005bc
 8017c9c:	0801a9cc 	.word	0x0801a9cc
 8017ca0:	0801ac28 	.word	0x0801ac28

08017ca4 <SetTAMB>:

void SetTAMB(iot_atdatatypedef *IOT_AT, recdCPointsTypedef *recdconstpts) {
 8017ca4:	b580      	push	{r7, lr}
 8017ca6:	b0c2      	sub	sp, #264	; 0x108
 8017ca8:	af00      	add	r7, sp, #0
 8017caa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8017cae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8017cb2:	6018      	str	r0, [r3, #0]
 8017cb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8017cb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8017cbc:	6019      	str	r1, [r3, #0]
	char txBuffer[250];
	int result = sscanf(IOT_AT->atCmd, "AT+SETTAMB=\"%d\"",
 8017cbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8017cc2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8017cc6:	681b      	ldr	r3, [r3, #0]
 8017cc8:	1c58      	adds	r0, r3, #1
 8017cca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8017cce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8017cd2:	681b      	ldr	r3, [r3, #0]
 8017cd4:	3308      	adds	r3, #8
 8017cd6:	461a      	mov	r2, r3
 8017cd8:	492c      	ldr	r1, [pc, #176]	; (8017d8c <SetTAMB+0xe8>)
 8017cda:	f001 fba9 	bl	8019430 <siscanf>
 8017cde:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
			&recdconstpts->T_Amb);
	if (result == 1) {
 8017ce2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8017ce6:	2b01      	cmp	r3, #1
 8017ce8:	d138      	bne.n	8017d5c <SetTAMB+0xb8>
		if (ee_setrecdcpStruct(recdconstpts)) {
 8017cea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8017cee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8017cf2:	6818      	ldr	r0, [r3, #0]
 8017cf4:	f001 f905 	bl	8018f02 <ee_setrecdcpStruct>
 8017cf8:	4603      	mov	r3, r0
 8017cfa:	2b00      	cmp	r3, #0
 8017cfc:	d01a      	beq.n	8017d34 <SetTAMB+0x90>
			sprintf(txBuffer, "'%d' successfully set as T_Amb\r\nOK\r\n",
					recdconstpts->T_Amb);
 8017cfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8017d02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8017d06:	681b      	ldr	r3, [r3, #0]
 8017d08:	891b      	ldrh	r3, [r3, #8]
			sprintf(txBuffer, "'%d' successfully set as T_Amb\r\nOK\r\n",
 8017d0a:	461a      	mov	r2, r3
 8017d0c:	f107 0308 	add.w	r3, r7, #8
 8017d10:	491f      	ldr	r1, [pc, #124]	; (8017d90 <SetTAMB+0xec>)
 8017d12:	4618      	mov	r0, r3
 8017d14:	f001 fb6c 	bl	80193f0 <siprintf>
			HAL_UART_Transmit(&IOT_AT_UART, txBuffer, strlen(txBuffer), 200);
 8017d18:	f107 0308 	add.w	r3, r7, #8
 8017d1c:	4618      	mov	r0, r3
 8017d1e:	f7f8 fa69 	bl	80101f4 <strlen>
 8017d22:	4603      	mov	r3, r0
 8017d24:	b29a      	uxth	r2, r3
 8017d26:	f107 0108 	add.w	r1, r7, #8
 8017d2a:	23c8      	movs	r3, #200	; 0xc8
 8017d2c:	4819      	ldr	r0, [pc, #100]	; (8017d94 <SetTAMB+0xf0>)
 8017d2e:	f7fd fe67 	bl	8015a00 <HAL_UART_Transmit>
		}
	} else {
		sprintf(txBuffer, "Incorrect Command\r\nERROR\r\n");
		HAL_UART_Transmit(&IOT_AT_UART, txBuffer, strlen(txBuffer), 200);
	}
}
 8017d32:	e026      	b.n	8017d82 <SetTAMB+0xde>
			sprintf(txBuffer, "EEPROM not responding\r\nERROR\r\n");
 8017d34:	f107 0308 	add.w	r3, r7, #8
 8017d38:	4917      	ldr	r1, [pc, #92]	; (8017d98 <SetTAMB+0xf4>)
 8017d3a:	4618      	mov	r0, r3
 8017d3c:	f001 fb58 	bl	80193f0 <siprintf>
			HAL_UART_Transmit(&IOT_AT_UART, txBuffer, strlen(txBuffer), 200);
 8017d40:	f107 0308 	add.w	r3, r7, #8
 8017d44:	4618      	mov	r0, r3
 8017d46:	f7f8 fa55 	bl	80101f4 <strlen>
 8017d4a:	4603      	mov	r3, r0
 8017d4c:	b29a      	uxth	r2, r3
 8017d4e:	f107 0108 	add.w	r1, r7, #8
 8017d52:	23c8      	movs	r3, #200	; 0xc8
 8017d54:	480f      	ldr	r0, [pc, #60]	; (8017d94 <SetTAMB+0xf0>)
 8017d56:	f7fd fe53 	bl	8015a00 <HAL_UART_Transmit>
}
 8017d5a:	e012      	b.n	8017d82 <SetTAMB+0xde>
		sprintf(txBuffer, "Incorrect Command\r\nERROR\r\n");
 8017d5c:	f107 0308 	add.w	r3, r7, #8
 8017d60:	490e      	ldr	r1, [pc, #56]	; (8017d9c <SetTAMB+0xf8>)
 8017d62:	4618      	mov	r0, r3
 8017d64:	f001 fb44 	bl	80193f0 <siprintf>
		HAL_UART_Transmit(&IOT_AT_UART, txBuffer, strlen(txBuffer), 200);
 8017d68:	f107 0308 	add.w	r3, r7, #8
 8017d6c:	4618      	mov	r0, r3
 8017d6e:	f7f8 fa41 	bl	80101f4 <strlen>
 8017d72:	4603      	mov	r3, r0
 8017d74:	b29a      	uxth	r2, r3
 8017d76:	f107 0108 	add.w	r1, r7, #8
 8017d7a:	23c8      	movs	r3, #200	; 0xc8
 8017d7c:	4805      	ldr	r0, [pc, #20]	; (8017d94 <SetTAMB+0xf0>)
 8017d7e:	f7fd fe3f 	bl	8015a00 <HAL_UART_Transmit>
}
 8017d82:	bf00      	nop
 8017d84:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8017d88:	46bd      	mov	sp, r7
 8017d8a:	bd80      	pop	{r7, pc}
 8017d8c:	0801ac90 	.word	0x0801ac90
 8017d90:	0801aca0 	.word	0x0801aca0
 8017d94:	200005bc 	.word	0x200005bc
 8017d98:	0801a9cc 	.word	0x0801a9cc
 8017d9c:	0801a9ec 	.word	0x0801a9ec

08017da0 <SetEB1>:

void SetEB1(iot_atdatatypedef *IOT_AT, recdCPointsTypedef *recdconstpts) {
 8017da0:	b580      	push	{r7, lr}
 8017da2:	b0c2      	sub	sp, #264	; 0x108
 8017da4:	af00      	add	r7, sp, #0
 8017da6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8017daa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8017dae:	6018      	str	r0, [r3, #0]
 8017db0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8017db4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8017db8:	6019      	str	r1, [r3, #0]
	char txBuffer[250];
	int result = sscanf(IOT_AT->atCmd, "AT+SETEB1=\"%d\"", &recdconstpts->EB1);
 8017dba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8017dbe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8017dc2:	681b      	ldr	r3, [r3, #0]
 8017dc4:	1c58      	adds	r0, r3, #1
 8017dc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8017dca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8017dce:	681b      	ldr	r3, [r3, #0]
 8017dd0:	330a      	adds	r3, #10
 8017dd2:	461a      	mov	r2, r3
 8017dd4:	492c      	ldr	r1, [pc, #176]	; (8017e88 <SetEB1+0xe8>)
 8017dd6:	f001 fb2b 	bl	8019430 <siscanf>
 8017dda:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
	if (result == 1) {
 8017dde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8017de2:	2b01      	cmp	r3, #1
 8017de4:	d138      	bne.n	8017e58 <SetEB1+0xb8>
		if (ee_setrecdcpStruct(recdconstpts)) {
 8017de6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8017dea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8017dee:	6818      	ldr	r0, [r3, #0]
 8017df0:	f001 f887 	bl	8018f02 <ee_setrecdcpStruct>
 8017df4:	4603      	mov	r3, r0
 8017df6:	2b00      	cmp	r3, #0
 8017df8:	d01a      	beq.n	8017e30 <SetEB1+0x90>
			sprintf(txBuffer, "'%d' successfully set as EB1\r\nOK\r\n",
					recdconstpts->EB1);
 8017dfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8017dfe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8017e02:	681b      	ldr	r3, [r3, #0]
 8017e04:	895b      	ldrh	r3, [r3, #10]
			sprintf(txBuffer, "'%d' successfully set as EB1\r\nOK\r\n",
 8017e06:	461a      	mov	r2, r3
 8017e08:	f107 0308 	add.w	r3, r7, #8
 8017e0c:	491f      	ldr	r1, [pc, #124]	; (8017e8c <SetEB1+0xec>)
 8017e0e:	4618      	mov	r0, r3
 8017e10:	f001 faee 	bl	80193f0 <siprintf>
			HAL_UART_Transmit(&IOT_AT_UART, txBuffer, strlen(txBuffer), 200);
 8017e14:	f107 0308 	add.w	r3, r7, #8
 8017e18:	4618      	mov	r0, r3
 8017e1a:	f7f8 f9eb 	bl	80101f4 <strlen>
 8017e1e:	4603      	mov	r3, r0
 8017e20:	b29a      	uxth	r2, r3
 8017e22:	f107 0108 	add.w	r1, r7, #8
 8017e26:	23c8      	movs	r3, #200	; 0xc8
 8017e28:	4819      	ldr	r0, [pc, #100]	; (8017e90 <SetEB1+0xf0>)
 8017e2a:	f7fd fde9 	bl	8015a00 <HAL_UART_Transmit>
		}
	} else {
		sprintf(txBuffer, "Incorrect Command\r\nERROR\r\n");
		HAL_UART_Transmit(&IOT_AT_UART, txBuffer, strlen(txBuffer), 200);
	}
}
 8017e2e:	e026      	b.n	8017e7e <SetEB1+0xde>
			sprintf(txBuffer, "EEPROM not responding\r\nERROR\r\n");
 8017e30:	f107 0308 	add.w	r3, r7, #8
 8017e34:	4917      	ldr	r1, [pc, #92]	; (8017e94 <SetEB1+0xf4>)
 8017e36:	4618      	mov	r0, r3
 8017e38:	f001 fada 	bl	80193f0 <siprintf>
			HAL_UART_Transmit(&IOT_AT_UART, txBuffer, strlen(txBuffer), 200);
 8017e3c:	f107 0308 	add.w	r3, r7, #8
 8017e40:	4618      	mov	r0, r3
 8017e42:	f7f8 f9d7 	bl	80101f4 <strlen>
 8017e46:	4603      	mov	r3, r0
 8017e48:	b29a      	uxth	r2, r3
 8017e4a:	f107 0108 	add.w	r1, r7, #8
 8017e4e:	23c8      	movs	r3, #200	; 0xc8
 8017e50:	480f      	ldr	r0, [pc, #60]	; (8017e90 <SetEB1+0xf0>)
 8017e52:	f7fd fdd5 	bl	8015a00 <HAL_UART_Transmit>
}
 8017e56:	e012      	b.n	8017e7e <SetEB1+0xde>
		sprintf(txBuffer, "Incorrect Command\r\nERROR\r\n");
 8017e58:	f107 0308 	add.w	r3, r7, #8
 8017e5c:	490e      	ldr	r1, [pc, #56]	; (8017e98 <SetEB1+0xf8>)
 8017e5e:	4618      	mov	r0, r3
 8017e60:	f001 fac6 	bl	80193f0 <siprintf>
		HAL_UART_Transmit(&IOT_AT_UART, txBuffer, strlen(txBuffer), 200);
 8017e64:	f107 0308 	add.w	r3, r7, #8
 8017e68:	4618      	mov	r0, r3
 8017e6a:	f7f8 f9c3 	bl	80101f4 <strlen>
 8017e6e:	4603      	mov	r3, r0
 8017e70:	b29a      	uxth	r2, r3
 8017e72:	f107 0108 	add.w	r1, r7, #8
 8017e76:	23c8      	movs	r3, #200	; 0xc8
 8017e78:	4805      	ldr	r0, [pc, #20]	; (8017e90 <SetEB1+0xf0>)
 8017e7a:	f7fd fdc1 	bl	8015a00 <HAL_UART_Transmit>
}
 8017e7e:	bf00      	nop
 8017e80:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8017e84:	46bd      	mov	sp, r7
 8017e86:	bd80      	pop	{r7, pc}
 8017e88:	0801acc8 	.word	0x0801acc8
 8017e8c:	0801acd8 	.word	0x0801acd8
 8017e90:	200005bc 	.word	0x200005bc
 8017e94:	0801a9cc 	.word	0x0801a9cc
 8017e98:	0801a9ec 	.word	0x0801a9ec

08017e9c <SetSLNCRBP>:

void SetSLNCRBP(iot_atdatatypedef *IOT_AT, recdCPointsTypedef *recdconstpts) {
 8017e9c:	b580      	push	{r7, lr}
 8017e9e:	b0c2      	sub	sp, #264	; 0x108
 8017ea0:	af00      	add	r7, sp, #0
 8017ea2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8017ea6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8017eaa:	6018      	str	r0, [r3, #0]
 8017eac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8017eb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8017eb4:	6019      	str	r1, [r3, #0]
	char txBuffer[250];
	int result = sscanf(IOT_AT->atCmd, "AT+SETSLNCRBP=\"%d\"",
 8017eb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8017eba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8017ebe:	681b      	ldr	r3, [r3, #0]
 8017ec0:	1c58      	adds	r0, r3, #1
 8017ec2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8017ec6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8017eca:	681b      	ldr	r3, [r3, #0]
 8017ecc:	330c      	adds	r3, #12
 8017ece:	461a      	mov	r2, r3
 8017ed0:	492c      	ldr	r1, [pc, #176]	; (8017f84 <SetSLNCRBP+0xe8>)
 8017ed2:	f001 faad 	bl	8019430 <siscanf>
 8017ed6:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
			&recdconstpts->SLNCR_BP);
	if (result == 1) {
 8017eda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8017ede:	2b01      	cmp	r3, #1
 8017ee0:	d138      	bne.n	8017f54 <SetSLNCRBP+0xb8>
		if (ee_setrecdcpStruct(recdconstpts)) {
 8017ee2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8017ee6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8017eea:	6818      	ldr	r0, [r3, #0]
 8017eec:	f001 f809 	bl	8018f02 <ee_setrecdcpStruct>
 8017ef0:	4603      	mov	r3, r0
 8017ef2:	2b00      	cmp	r3, #0
 8017ef4:	d01a      	beq.n	8017f2c <SetSLNCRBP+0x90>
			sprintf(txBuffer, "'%d' successfully set as SLNCR_BP\r\nOK\r\n",
					recdconstpts->SLNCR_BP);
 8017ef6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8017efa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8017efe:	681b      	ldr	r3, [r3, #0]
 8017f00:	899b      	ldrh	r3, [r3, #12]
			sprintf(txBuffer, "'%d' successfully set as SLNCR_BP\r\nOK\r\n",
 8017f02:	461a      	mov	r2, r3
 8017f04:	f107 0308 	add.w	r3, r7, #8
 8017f08:	491f      	ldr	r1, [pc, #124]	; (8017f88 <SetSLNCRBP+0xec>)
 8017f0a:	4618      	mov	r0, r3
 8017f0c:	f001 fa70 	bl	80193f0 <siprintf>
			HAL_UART_Transmit(&IOT_AT_UART, txBuffer, strlen(txBuffer), 200);
 8017f10:	f107 0308 	add.w	r3, r7, #8
 8017f14:	4618      	mov	r0, r3
 8017f16:	f7f8 f96d 	bl	80101f4 <strlen>
 8017f1a:	4603      	mov	r3, r0
 8017f1c:	b29a      	uxth	r2, r3
 8017f1e:	f107 0108 	add.w	r1, r7, #8
 8017f22:	23c8      	movs	r3, #200	; 0xc8
 8017f24:	4819      	ldr	r0, [pc, #100]	; (8017f8c <SetSLNCRBP+0xf0>)
 8017f26:	f7fd fd6b 	bl	8015a00 <HAL_UART_Transmit>
		}
	} else {
		sprintf(txBuffer, "Incorrect Command\r\nERROR\r\n");
		HAL_UART_Transmit(&IOT_AT_UART, txBuffer, strlen(txBuffer), 200);
	}
}
 8017f2a:	e026      	b.n	8017f7a <SetSLNCRBP+0xde>
			sprintf(txBuffer, "EEPROM not responding\r\nERROR\r\n");
 8017f2c:	f107 0308 	add.w	r3, r7, #8
 8017f30:	4917      	ldr	r1, [pc, #92]	; (8017f90 <SetSLNCRBP+0xf4>)
 8017f32:	4618      	mov	r0, r3
 8017f34:	f001 fa5c 	bl	80193f0 <siprintf>
			HAL_UART_Transmit(&IOT_AT_UART, txBuffer, strlen(txBuffer), 200);
 8017f38:	f107 0308 	add.w	r3, r7, #8
 8017f3c:	4618      	mov	r0, r3
 8017f3e:	f7f8 f959 	bl	80101f4 <strlen>
 8017f42:	4603      	mov	r3, r0
 8017f44:	b29a      	uxth	r2, r3
 8017f46:	f107 0108 	add.w	r1, r7, #8
 8017f4a:	23c8      	movs	r3, #200	; 0xc8
 8017f4c:	480f      	ldr	r0, [pc, #60]	; (8017f8c <SetSLNCRBP+0xf0>)
 8017f4e:	f7fd fd57 	bl	8015a00 <HAL_UART_Transmit>
}
 8017f52:	e012      	b.n	8017f7a <SetSLNCRBP+0xde>
		sprintf(txBuffer, "Incorrect Command\r\nERROR\r\n");
 8017f54:	f107 0308 	add.w	r3, r7, #8
 8017f58:	490e      	ldr	r1, [pc, #56]	; (8017f94 <SetSLNCRBP+0xf8>)
 8017f5a:	4618      	mov	r0, r3
 8017f5c:	f001 fa48 	bl	80193f0 <siprintf>
		HAL_UART_Transmit(&IOT_AT_UART, txBuffer, strlen(txBuffer), 200);
 8017f60:	f107 0308 	add.w	r3, r7, #8
 8017f64:	4618      	mov	r0, r3
 8017f66:	f7f8 f945 	bl	80101f4 <strlen>
 8017f6a:	4603      	mov	r3, r0
 8017f6c:	b29a      	uxth	r2, r3
 8017f6e:	f107 0108 	add.w	r1, r7, #8
 8017f72:	23c8      	movs	r3, #200	; 0xc8
 8017f74:	4805      	ldr	r0, [pc, #20]	; (8017f8c <SetSLNCRBP+0xf0>)
 8017f76:	f7fd fd43 	bl	8015a00 <HAL_UART_Transmit>
}
 8017f7a:	bf00      	nop
 8017f7c:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8017f80:	46bd      	mov	sp, r7
 8017f82:	bd80      	pop	{r7, pc}
 8017f84:	0801acfc 	.word	0x0801acfc
 8017f88:	0801ad10 	.word	0x0801ad10
 8017f8c:	200005bc 	.word	0x200005bc
 8017f90:	0801a9cc 	.word	0x0801a9cc
 8017f94:	0801a9ec 	.word	0x0801a9ec

08017f98 <SetPOEM>:

void SetPOEM(iot_atdatatypedef *IOT_AT, recdCPointsTypedef *recdconstpts) {
 8017f98:	b580      	push	{r7, lr}
 8017f9a:	b0c2      	sub	sp, #264	; 0x108
 8017f9c:	af00      	add	r7, sp, #0
 8017f9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8017fa2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8017fa6:	6018      	str	r0, [r3, #0]
 8017fa8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8017fac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8017fb0:	6019      	str	r1, [r3, #0]
	char txBuffer[250];
	int result = sscanf(IOT_AT->atCmd, "AT+SETP_OEM=\"%d\"",
 8017fb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8017fb6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8017fba:	681b      	ldr	r3, [r3, #0]
 8017fbc:	1c58      	adds	r0, r3, #1
 8017fbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8017fc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8017fc6:	681b      	ldr	r3, [r3, #0]
 8017fc8:	330e      	adds	r3, #14
 8017fca:	461a      	mov	r2, r3
 8017fcc:	492c      	ldr	r1, [pc, #176]	; (8018080 <SetPOEM+0xe8>)
 8017fce:	f001 fa2f 	bl	8019430 <siscanf>
 8017fd2:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
			&recdconstpts->P_OEM);
	if (result == 1) {
 8017fd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8017fda:	2b01      	cmp	r3, #1
 8017fdc:	d138      	bne.n	8018050 <SetPOEM+0xb8>
		if (ee_setrecdcpStruct(recdconstpts)) {
 8017fde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8017fe2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8017fe6:	6818      	ldr	r0, [r3, #0]
 8017fe8:	f000 ff8b 	bl	8018f02 <ee_setrecdcpStruct>
 8017fec:	4603      	mov	r3, r0
 8017fee:	2b00      	cmp	r3, #0
 8017ff0:	d01a      	beq.n	8018028 <SetPOEM+0x90>
			sprintf(txBuffer, "'%d' successfully set as P_OEM\r\nOK\r\n",
					recdconstpts->P_OEM);
 8017ff2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8017ff6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8017ffa:	681b      	ldr	r3, [r3, #0]
 8017ffc:	89db      	ldrh	r3, [r3, #14]
			sprintf(txBuffer, "'%d' successfully set as P_OEM\r\nOK\r\n",
 8017ffe:	461a      	mov	r2, r3
 8018000:	f107 0308 	add.w	r3, r7, #8
 8018004:	491f      	ldr	r1, [pc, #124]	; (8018084 <SetPOEM+0xec>)
 8018006:	4618      	mov	r0, r3
 8018008:	f001 f9f2 	bl	80193f0 <siprintf>
			HAL_UART_Transmit(&IOT_AT_UART, txBuffer, strlen(txBuffer), 200);
 801800c:	f107 0308 	add.w	r3, r7, #8
 8018010:	4618      	mov	r0, r3
 8018012:	f7f8 f8ef 	bl	80101f4 <strlen>
 8018016:	4603      	mov	r3, r0
 8018018:	b29a      	uxth	r2, r3
 801801a:	f107 0108 	add.w	r1, r7, #8
 801801e:	23c8      	movs	r3, #200	; 0xc8
 8018020:	4819      	ldr	r0, [pc, #100]	; (8018088 <SetPOEM+0xf0>)
 8018022:	f7fd fced 	bl	8015a00 <HAL_UART_Transmit>
		}
	} else {
		sprintf(txBuffer, "Incorrect Command\r\nERROR\r\n");
		HAL_UART_Transmit(&IOT_AT_UART, txBuffer, strlen(txBuffer), 200);
	}
}
 8018026:	e026      	b.n	8018076 <SetPOEM+0xde>
			sprintf(txBuffer, "EEPROM not responding\r\nERROR\r\n");
 8018028:	f107 0308 	add.w	r3, r7, #8
 801802c:	4917      	ldr	r1, [pc, #92]	; (801808c <SetPOEM+0xf4>)
 801802e:	4618      	mov	r0, r3
 8018030:	f001 f9de 	bl	80193f0 <siprintf>
			HAL_UART_Transmit(&IOT_AT_UART, txBuffer, strlen(txBuffer), 200);
 8018034:	f107 0308 	add.w	r3, r7, #8
 8018038:	4618      	mov	r0, r3
 801803a:	f7f8 f8db 	bl	80101f4 <strlen>
 801803e:	4603      	mov	r3, r0
 8018040:	b29a      	uxth	r2, r3
 8018042:	f107 0108 	add.w	r1, r7, #8
 8018046:	23c8      	movs	r3, #200	; 0xc8
 8018048:	480f      	ldr	r0, [pc, #60]	; (8018088 <SetPOEM+0xf0>)
 801804a:	f7fd fcd9 	bl	8015a00 <HAL_UART_Transmit>
}
 801804e:	e012      	b.n	8018076 <SetPOEM+0xde>
		sprintf(txBuffer, "Incorrect Command\r\nERROR\r\n");
 8018050:	f107 0308 	add.w	r3, r7, #8
 8018054:	490e      	ldr	r1, [pc, #56]	; (8018090 <SetPOEM+0xf8>)
 8018056:	4618      	mov	r0, r3
 8018058:	f001 f9ca 	bl	80193f0 <siprintf>
		HAL_UART_Transmit(&IOT_AT_UART, txBuffer, strlen(txBuffer), 200);
 801805c:	f107 0308 	add.w	r3, r7, #8
 8018060:	4618      	mov	r0, r3
 8018062:	f7f8 f8c7 	bl	80101f4 <strlen>
 8018066:	4603      	mov	r3, r0
 8018068:	b29a      	uxth	r2, r3
 801806a:	f107 0108 	add.w	r1, r7, #8
 801806e:	23c8      	movs	r3, #200	; 0xc8
 8018070:	4805      	ldr	r0, [pc, #20]	; (8018088 <SetPOEM+0xf0>)
 8018072:	f7fd fcc5 	bl	8015a00 <HAL_UART_Transmit>
}
 8018076:	bf00      	nop
 8018078:	f507 7784 	add.w	r7, r7, #264	; 0x108
 801807c:	46bd      	mov	sp, r7
 801807e:	bd80      	pop	{r7, pc}
 8018080:	0801ad38 	.word	0x0801ad38
 8018084:	0801ad4c 	.word	0x0801ad4c
 8018088:	200005bc 	.word	0x200005bc
 801808c:	0801a9cc 	.word	0x0801a9cc
 8018090:	0801a9ec 	.word	0x0801a9ec

08018094 <SetBLUpdateStatus>:

void SetBLUpdateStatus(iot_atdatatypedef *IOT_AT) {
 8018094:	b580      	push	{r7, lr}
 8018096:	b0c4      	sub	sp, #272	; 0x110
 8018098:	af00      	add	r7, sp, #0
 801809a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801809e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80180a2:	6018      	str	r0, [r3, #0]
	char txBuffer[250];
	uint8_t BLupStat = 0;
 80180a4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80180a8:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 80180ac:	2200      	movs	r2, #0
 80180ae:	701a      	strb	r2, [r3, #0]
	int result = sscanf(IOT_AT->atCmd, "AT+BLUP=\"%d\"", &BLupStat);
 80180b0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80180b4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80180b8:	681b      	ldr	r3, [r3, #0]
 80180ba:	3301      	adds	r3, #1
 80180bc:	f107 020f 	add.w	r2, r7, #15
 80180c0:	492d      	ldr	r1, [pc, #180]	; (8018178 <SetBLUpdateStatus+0xe4>)
 80180c2:	4618      	mov	r0, r3
 80180c4:	f001 f9b4 	bl	8019430 <siscanf>
 80180c8:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
	if (result == 1) {
 80180cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80180d0:	2b01      	cmp	r3, #1
 80180d2:	d138      	bne.n	8018146 <SetBLUpdateStatus+0xb2>
		if (ee_setBLUpdateStatus(BLupStat)) {
 80180d4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80180d8:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 80180dc:	781b      	ldrb	r3, [r3, #0]
 80180de:	4618      	mov	r0, r3
 80180e0:	f000 ff62 	bl	8018fa8 <ee_setBLUpdateStatus>
 80180e4:	4603      	mov	r3, r0
 80180e6:	2b00      	cmp	r3, #0
 80180e8:	d019      	beq.n	801811e <SetBLUpdateStatus+0x8a>
			sprintf(txBuffer, "'%d' successfully Bootload Mode.\r\nOK\r\n",
 80180ea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80180ee:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 80180f2:	781b      	ldrb	r3, [r3, #0]
 80180f4:	461a      	mov	r2, r3
 80180f6:	f107 0310 	add.w	r3, r7, #16
 80180fa:	4920      	ldr	r1, [pc, #128]	; (801817c <SetBLUpdateStatus+0xe8>)
 80180fc:	4618      	mov	r0, r3
 80180fe:	f001 f977 	bl	80193f0 <siprintf>
					BLupStat);
			HAL_UART_Transmit(&IOT_AT_UART, txBuffer, strlen(txBuffer), 200);
 8018102:	f107 0310 	add.w	r3, r7, #16
 8018106:	4618      	mov	r0, r3
 8018108:	f7f8 f874 	bl	80101f4 <strlen>
 801810c:	4603      	mov	r3, r0
 801810e:	b29a      	uxth	r2, r3
 8018110:	f107 0110 	add.w	r1, r7, #16
 8018114:	23c8      	movs	r3, #200	; 0xc8
 8018116:	481a      	ldr	r0, [pc, #104]	; (8018180 <SetBLUpdateStatus+0xec>)
 8018118:	f7fd fc72 	bl	8015a00 <HAL_UART_Transmit>
		}
	} else {
		sprintf(txBuffer, "Incorrect Command\r\nERROR\r\n");
		HAL_UART_Transmit(&IOT_AT_UART, txBuffer, strlen(txBuffer), 200);
	}
}
 801811c:	e026      	b.n	801816c <SetBLUpdateStatus+0xd8>
			sprintf(txBuffer, "EEPROM not responding\r\nERROR\r\n");
 801811e:	f107 0310 	add.w	r3, r7, #16
 8018122:	4918      	ldr	r1, [pc, #96]	; (8018184 <SetBLUpdateStatus+0xf0>)
 8018124:	4618      	mov	r0, r3
 8018126:	f001 f963 	bl	80193f0 <siprintf>
			HAL_UART_Transmit(&IOT_AT_UART, txBuffer, strlen(txBuffer), 200);
 801812a:	f107 0310 	add.w	r3, r7, #16
 801812e:	4618      	mov	r0, r3
 8018130:	f7f8 f860 	bl	80101f4 <strlen>
 8018134:	4603      	mov	r3, r0
 8018136:	b29a      	uxth	r2, r3
 8018138:	f107 0110 	add.w	r1, r7, #16
 801813c:	23c8      	movs	r3, #200	; 0xc8
 801813e:	4810      	ldr	r0, [pc, #64]	; (8018180 <SetBLUpdateStatus+0xec>)
 8018140:	f7fd fc5e 	bl	8015a00 <HAL_UART_Transmit>
}
 8018144:	e012      	b.n	801816c <SetBLUpdateStatus+0xd8>
		sprintf(txBuffer, "Incorrect Command\r\nERROR\r\n");
 8018146:	f107 0310 	add.w	r3, r7, #16
 801814a:	490f      	ldr	r1, [pc, #60]	; (8018188 <SetBLUpdateStatus+0xf4>)
 801814c:	4618      	mov	r0, r3
 801814e:	f001 f94f 	bl	80193f0 <siprintf>
		HAL_UART_Transmit(&IOT_AT_UART, txBuffer, strlen(txBuffer), 200);
 8018152:	f107 0310 	add.w	r3, r7, #16
 8018156:	4618      	mov	r0, r3
 8018158:	f7f8 f84c 	bl	80101f4 <strlen>
 801815c:	4603      	mov	r3, r0
 801815e:	b29a      	uxth	r2, r3
 8018160:	f107 0110 	add.w	r1, r7, #16
 8018164:	23c8      	movs	r3, #200	; 0xc8
 8018166:	4806      	ldr	r0, [pc, #24]	; (8018180 <SetBLUpdateStatus+0xec>)
 8018168:	f7fd fc4a 	bl	8015a00 <HAL_UART_Transmit>
}
 801816c:	bf00      	nop
 801816e:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8018172:	46bd      	mov	sp, r7
 8018174:	bd80      	pop	{r7, pc}
 8018176:	bf00      	nop
 8018178:	0801ad74 	.word	0x0801ad74
 801817c:	0801ad84 	.word	0x0801ad84
 8018180:	200005bc 	.word	0x200005bc
 8018184:	0801a9cc 	.word	0x0801a9cc
 8018188:	0801a9ec 	.word	0x0801a9ec

0801818c <GetBLUpdateStatus>:

void GetBLUpdateStatus(void) {
 801818c:	b580      	push	{r7, lr}
 801818e:	b0c0      	sub	sp, #256	; 0x100
 8018190:	af00      	add	r7, sp, #0
	char txBuffer[250];
	uint8_t stat = 0;
 8018192:	2300      	movs	r3, #0
 8018194:	70fb      	strb	r3, [r7, #3]
	if(ee_getBLUpdateStatus(&stat)){
 8018196:	1cfb      	adds	r3, r7, #3
 8018198:	4618      	mov	r0, r3
 801819a:	f000 feec 	bl	8018f76 <ee_getBLUpdateStatus>
 801819e:	4603      	mov	r3, r0
 80181a0:	2b00      	cmp	r3, #0
 80181a2:	d012      	beq.n	80181ca <GetBLUpdateStatus+0x3e>
		sprintf(txBuffer, "'%d' is the state of bootloader on Bootup.\r\nOK\r\n", stat);
 80181a4:	78fb      	ldrb	r3, [r7, #3]
 80181a6:	461a      	mov	r2, r3
 80181a8:	1d3b      	adds	r3, r7, #4
 80181aa:	4912      	ldr	r1, [pc, #72]	; (80181f4 <GetBLUpdateStatus+0x68>)
 80181ac:	4618      	mov	r0, r3
 80181ae:	f001 f91f 	bl	80193f0 <siprintf>
		HAL_UART_Transmit(&IOT_AT_UART, txBuffer, strlen(txBuffer), 200);
 80181b2:	1d3b      	adds	r3, r7, #4
 80181b4:	4618      	mov	r0, r3
 80181b6:	f7f8 f81d 	bl	80101f4 <strlen>
 80181ba:	4603      	mov	r3, r0
 80181bc:	b29a      	uxth	r2, r3
 80181be:	1d39      	adds	r1, r7, #4
 80181c0:	23c8      	movs	r3, #200	; 0xc8
 80181c2:	480d      	ldr	r0, [pc, #52]	; (80181f8 <GetBLUpdateStatus+0x6c>)
 80181c4:	f7fd fc1c 	bl	8015a00 <HAL_UART_Transmit>
	}
	else{
		sprintf(txBuffer, "EEPROM not responding\r\nERROR\r\n");
		HAL_UART_Transmit(&IOT_AT_UART, txBuffer, strlen(txBuffer), 200);
	}
}
 80181c8:	e00f      	b.n	80181ea <GetBLUpdateStatus+0x5e>
		sprintf(txBuffer, "EEPROM not responding\r\nERROR\r\n");
 80181ca:	1d3b      	adds	r3, r7, #4
 80181cc:	490b      	ldr	r1, [pc, #44]	; (80181fc <GetBLUpdateStatus+0x70>)
 80181ce:	4618      	mov	r0, r3
 80181d0:	f001 f90e 	bl	80193f0 <siprintf>
		HAL_UART_Transmit(&IOT_AT_UART, txBuffer, strlen(txBuffer), 200);
 80181d4:	1d3b      	adds	r3, r7, #4
 80181d6:	4618      	mov	r0, r3
 80181d8:	f7f8 f80c 	bl	80101f4 <strlen>
 80181dc:	4603      	mov	r3, r0
 80181de:	b29a      	uxth	r2, r3
 80181e0:	1d39      	adds	r1, r7, #4
 80181e2:	23c8      	movs	r3, #200	; 0xc8
 80181e4:	4804      	ldr	r0, [pc, #16]	; (80181f8 <GetBLUpdateStatus+0x6c>)
 80181e6:	f7fd fc0b 	bl	8015a00 <HAL_UART_Transmit>
}
 80181ea:	bf00      	nop
 80181ec:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80181f0:	46bd      	mov	sp, r7
 80181f2:	bd80      	pop	{r7, pc}
 80181f4:	0801adac 	.word	0x0801adac
 80181f8:	200005bc 	.word	0x200005bc
 80181fc:	0801a9cc 	.word	0x0801a9cc

08018200 <SetBLFileName>:

void SetBLFileName(iot_atdatatypedef *IOT_AT) {
 8018200:	b580      	push	{r7, lr}
 8018202:	b0c8      	sub	sp, #288	; 0x120
 8018204:	af00      	add	r7, sp, #0
 8018206:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801820a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 801820e:	6018      	str	r0, [r3, #0]
	char txBuffer[250];
	char blfln[20];
	uint8_t flen = 0;
 8018210:	2300      	movs	r3, #0
 8018212:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
	int result = sscanf(IOT_AT->atCmd, "AT+BLFLN=\"%20[^\"]\"", blfln);
 8018216:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801821a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 801821e:	681b      	ldr	r3, [r3, #0]
 8018220:	3301      	adds	r3, #1
 8018222:	f107 0208 	add.w	r2, r7, #8
 8018226:	492f      	ldr	r1, [pc, #188]	; (80182e4 <SetBLFileName+0xe4>)
 8018228:	4618      	mov	r0, r3
 801822a:	f001 f901 	bl	8019430 <siscanf>
 801822e:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118
	if (result == 1) {
 8018232:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8018236:	2b01      	cmp	r3, #1
 8018238:	d13c      	bne.n	80182b4 <SetBLFileName+0xb4>
		flen = strlen(blfln);
 801823a:	f107 0308 	add.w	r3, r7, #8
 801823e:	4618      	mov	r0, r3
 8018240:	f7f7 ffd8 	bl	80101f4 <strlen>
 8018244:	4603      	mov	r3, r0
 8018246:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
		if (ee_setBLFileName(blfln, flen)) {
 801824a:	f897 211f 	ldrb.w	r2, [r7, #287]	; 0x11f
 801824e:	f107 0308 	add.w	r3, r7, #8
 8018252:	4611      	mov	r1, r2
 8018254:	4618      	mov	r0, r3
 8018256:	f000 feff 	bl	8019058 <ee_setBLFileName>
 801825a:	4603      	mov	r3, r0
 801825c:	2b00      	cmp	r3, #0
 801825e:	d015      	beq.n	801828c <SetBLFileName+0x8c>
			sprintf(txBuffer, "'%s' successfully set as Bootup file name.\r\nOK\r\n",
 8018260:	f107 0208 	add.w	r2, r7, #8
 8018264:	f107 031c 	add.w	r3, r7, #28
 8018268:	491f      	ldr	r1, [pc, #124]	; (80182e8 <SetBLFileName+0xe8>)
 801826a:	4618      	mov	r0, r3
 801826c:	f001 f8c0 	bl	80193f0 <siprintf>
					blfln);
			HAL_UART_Transmit(&IOT_AT_UART, txBuffer, strlen(txBuffer), 200);
 8018270:	f107 031c 	add.w	r3, r7, #28
 8018274:	4618      	mov	r0, r3
 8018276:	f7f7 ffbd 	bl	80101f4 <strlen>
 801827a:	4603      	mov	r3, r0
 801827c:	b29a      	uxth	r2, r3
 801827e:	f107 011c 	add.w	r1, r7, #28
 8018282:	23c8      	movs	r3, #200	; 0xc8
 8018284:	4819      	ldr	r0, [pc, #100]	; (80182ec <SetBLFileName+0xec>)
 8018286:	f7fd fbbb 	bl	8015a00 <HAL_UART_Transmit>
		}
	} else {
		sprintf(txBuffer, "Incorrect Command\r\nERROR\r\n");
		HAL_UART_Transmit(&IOT_AT_UART, txBuffer, strlen(txBuffer), 200);
	}
}
 801828a:	e026      	b.n	80182da <SetBLFileName+0xda>
			sprintf(txBuffer, "EEPROM not responding\r\nERROR\r\n");
 801828c:	f107 031c 	add.w	r3, r7, #28
 8018290:	4917      	ldr	r1, [pc, #92]	; (80182f0 <SetBLFileName+0xf0>)
 8018292:	4618      	mov	r0, r3
 8018294:	f001 f8ac 	bl	80193f0 <siprintf>
			HAL_UART_Transmit(&IOT_AT_UART, txBuffer, strlen(txBuffer), 200);
 8018298:	f107 031c 	add.w	r3, r7, #28
 801829c:	4618      	mov	r0, r3
 801829e:	f7f7 ffa9 	bl	80101f4 <strlen>
 80182a2:	4603      	mov	r3, r0
 80182a4:	b29a      	uxth	r2, r3
 80182a6:	f107 011c 	add.w	r1, r7, #28
 80182aa:	23c8      	movs	r3, #200	; 0xc8
 80182ac:	480f      	ldr	r0, [pc, #60]	; (80182ec <SetBLFileName+0xec>)
 80182ae:	f7fd fba7 	bl	8015a00 <HAL_UART_Transmit>
}
 80182b2:	e012      	b.n	80182da <SetBLFileName+0xda>
		sprintf(txBuffer, "Incorrect Command\r\nERROR\r\n");
 80182b4:	f107 031c 	add.w	r3, r7, #28
 80182b8:	490e      	ldr	r1, [pc, #56]	; (80182f4 <SetBLFileName+0xf4>)
 80182ba:	4618      	mov	r0, r3
 80182bc:	f001 f898 	bl	80193f0 <siprintf>
		HAL_UART_Transmit(&IOT_AT_UART, txBuffer, strlen(txBuffer), 200);
 80182c0:	f107 031c 	add.w	r3, r7, #28
 80182c4:	4618      	mov	r0, r3
 80182c6:	f7f7 ff95 	bl	80101f4 <strlen>
 80182ca:	4603      	mov	r3, r0
 80182cc:	b29a      	uxth	r2, r3
 80182ce:	f107 011c 	add.w	r1, r7, #28
 80182d2:	23c8      	movs	r3, #200	; 0xc8
 80182d4:	4805      	ldr	r0, [pc, #20]	; (80182ec <SetBLFileName+0xec>)
 80182d6:	f7fd fb93 	bl	8015a00 <HAL_UART_Transmit>
}
 80182da:	bf00      	nop
 80182dc:	f507 7790 	add.w	r7, r7, #288	; 0x120
 80182e0:	46bd      	mov	sp, r7
 80182e2:	bd80      	pop	{r7, pc}
 80182e4:	0801ade0 	.word	0x0801ade0
 80182e8:	0801adf4 	.word	0x0801adf4
 80182ec:	200005bc 	.word	0x200005bc
 80182f0:	0801a9cc 	.word	0x0801a9cc
 80182f4:	0801a9ec 	.word	0x0801a9ec

080182f8 <GetBLFileName>:

void GetBLFileName(void) {
 80182f8:	b580      	push	{r7, lr}
 80182fa:	b0c4      	sub	sp, #272	; 0x110
 80182fc:	af00      	add	r7, sp, #0
	char txBuffer[250];
	char flchr[20] = { 0 };
 80182fe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8018302:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8018306:	2200      	movs	r2, #0
 8018308:	601a      	str	r2, [r3, #0]
 801830a:	3304      	adds	r3, #4
 801830c:	2200      	movs	r2, #0
 801830e:	601a      	str	r2, [r3, #0]
 8018310:	605a      	str	r2, [r3, #4]
 8018312:	609a      	str	r2, [r3, #8]
 8018314:	60da      	str	r2, [r3, #12]
	uint8_t flen = 0;
 8018316:	2300      	movs	r3, #0
 8018318:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
	if (ee_getBLFileName(flchr)) {
 801831c:	463b      	mov	r3, r7
 801831e:	4618      	mov	r0, r3
 8018320:	f000 fe76 	bl	8019010 <ee_getBLFileName>
 8018324:	4603      	mov	r3, r0
 8018326:	2b00      	cmp	r3, #0
 8018328:	d014      	beq.n	8018354 <GetBLFileName+0x5c>
		sprintf(txBuffer, "'%s' is the name of Bootup file name.\r\nOK\r\n", flchr);
 801832a:	463a      	mov	r2, r7
 801832c:	f107 0314 	add.w	r3, r7, #20
 8018330:	4914      	ldr	r1, [pc, #80]	; (8018384 <GetBLFileName+0x8c>)
 8018332:	4618      	mov	r0, r3
 8018334:	f001 f85c 	bl	80193f0 <siprintf>
		HAL_UART_Transmit(&IOT_AT_UART, txBuffer, strlen(txBuffer), 200);
 8018338:	f107 0314 	add.w	r3, r7, #20
 801833c:	4618      	mov	r0, r3
 801833e:	f7f7 ff59 	bl	80101f4 <strlen>
 8018342:	4603      	mov	r3, r0
 8018344:	b29a      	uxth	r2, r3
 8018346:	f107 0114 	add.w	r1, r7, #20
 801834a:	23c8      	movs	r3, #200	; 0xc8
 801834c:	480e      	ldr	r0, [pc, #56]	; (8018388 <GetBLFileName+0x90>)
 801834e:	f7fd fb57 	bl	8015a00 <HAL_UART_Transmit>
	}
	else{
		sprintf(txBuffer, "EEPROM not responding\r\nERROR\r\n");
		HAL_UART_Transmit(&IOT_AT_UART, txBuffer, strlen(txBuffer), 200);
	}
}
 8018352:	e012      	b.n	801837a <GetBLFileName+0x82>
		sprintf(txBuffer, "EEPROM not responding\r\nERROR\r\n");
 8018354:	f107 0314 	add.w	r3, r7, #20
 8018358:	490c      	ldr	r1, [pc, #48]	; (801838c <GetBLFileName+0x94>)
 801835a:	4618      	mov	r0, r3
 801835c:	f001 f848 	bl	80193f0 <siprintf>
		HAL_UART_Transmit(&IOT_AT_UART, txBuffer, strlen(txBuffer), 200);
 8018360:	f107 0314 	add.w	r3, r7, #20
 8018364:	4618      	mov	r0, r3
 8018366:	f7f7 ff45 	bl	80101f4 <strlen>
 801836a:	4603      	mov	r3, r0
 801836c:	b29a      	uxth	r2, r3
 801836e:	f107 0114 	add.w	r1, r7, #20
 8018372:	23c8      	movs	r3, #200	; 0xc8
 8018374:	4804      	ldr	r0, [pc, #16]	; (8018388 <GetBLFileName+0x90>)
 8018376:	f7fd fb43 	bl	8015a00 <HAL_UART_Transmit>
}
 801837a:	bf00      	nop
 801837c:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8018380:	46bd      	mov	sp, r7
 8018382:	bd80      	pop	{r7, pc}
 8018384:	0801ae28 	.word	0x0801ae28
 8018388:	200005bc 	.word	0x200005bc
 801838c:	0801a9cc 	.word	0x0801a9cc

08018390 <iotATHandler>:

void iotATHandler(iot_atdatatypedef *IOT_AT, iotParam_Typedef *iot,
		recdCPointsTypedef *recdconstpts) {
 8018390:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018392:	f2ad 5d44 	subw	sp, sp, #1348	; 0x544
 8018396:	af06      	add	r7, sp, #24
 8018398:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 801839c:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 80183a0:	6018      	str	r0, [r3, #0]
 80183a2:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 80183a6:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 80183aa:	6019      	str	r1, [r3, #0]
 80183ac:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 80183b0:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 80183b4:	601a      	str	r2, [r3, #0]
	char txBuffer[250];
	char extractedVal[50];
	IOT_AT_REC_FLAG = false;
 80183b6:	4bd4      	ldr	r3, [pc, #848]	; (8018708 <iotATHandler+0x378>)
 80183b8:	2200      	movs	r2, #0
 80183ba:	701a      	strb	r2, [r3, #0]
	switch (IOT_AT->iotATCMD) {
 80183bc:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 80183c0:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 80183c4:	681b      	ldr	r3, [r3, #0]
 80183c6:	781b      	ldrb	r3, [r3, #0]
 80183c8:	2b1e      	cmp	r3, #30
 80183ca:	f200 827d 	bhi.w	80188c8 <iotATHandler+0x538>
 80183ce:	a201      	add	r2, pc, #4	; (adr r2, 80183d4 <iotATHandler+0x44>)
 80183d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80183d4:	080188bb 	.word	0x080188bb
 80183d8:	08018451 	.word	0x08018451
 80183dc:	080188c9 	.word	0x080188c9
 80183e0:	0801848f 	.word	0x0801848f
 80183e4:	08018495 	.word	0x08018495
 80183e8:	08018479 	.word	0x08018479
 80183ec:	0801847f 	.word	0x0801847f
 80183f0:	080184a5 	.word	0x080184a5
 80183f4:	080184d7 	.word	0x080184d7
 80183f8:	080184f1 	.word	0x080184f1
 80183fc:	08018527 	.word	0x08018527
 8018400:	08018541 	.word	0x08018541
 8018404:	08018577 	.word	0x08018577
 8018408:	08018591 	.word	0x08018591
 801840c:	080185c7 	.word	0x080185c7
 8018410:	080185e1 	.word	0x080185e1
 8018414:	08018619 	.word	0x08018619
 8018418:	08018633 	.word	0x08018633
 801841c:	08018669 	.word	0x08018669
 8018420:	08018683 	.word	0x08018683
 8018424:	080186b9 	.word	0x080186b9
 8018428:	080186d3 	.word	0x080186d3
 801842c:	08018735 	.word	0x08018735
 8018430:	0801874f 	.word	0x0801874f
 8018434:	080187f5 	.word	0x080187f5
 8018438:	0801880f 	.word	0x0801880f
 801843c:	08018829 	.word	0x08018829
 8018440:	08018843 	.word	0x08018843
 8018444:	0801885d 	.word	0x0801885d
 8018448:	08018877 	.word	0x08018877
 801844c:	08018891 	.word	0x08018891
	case isAT:
		sprintf(txBuffer, "AT\r\nOK\r\n");
 8018450:	f207 432c 	addw	r3, r7, #1068	; 0x42c
 8018454:	49ad      	ldr	r1, [pc, #692]	; (801870c <iotATHandler+0x37c>)
 8018456:	4618      	mov	r0, r3
 8018458:	f000 ffca 	bl	80193f0 <siprintf>
		HAL_UART_Transmit(&IOT_AT_UART, txBuffer, strlen(txBuffer), 200);
 801845c:	f207 432c 	addw	r3, r7, #1068	; 0x42c
 8018460:	4618      	mov	r0, r3
 8018462:	f7f7 fec7 	bl	80101f4 <strlen>
 8018466:	4603      	mov	r3, r0
 8018468:	b29a      	uxth	r2, r3
 801846a:	f207 412c 	addw	r1, r7, #1068	; 0x42c
 801846e:	23c8      	movs	r3, #200	; 0xc8
 8018470:	48a7      	ldr	r0, [pc, #668]	; (8018710 <iotATHandler+0x380>)
 8018472:	f7fd fac5 	bl	8015a00 <HAL_UART_Transmit>
		break;
 8018476:	e22e      	b.n	80188d6 <iotATHandler+0x546>
	case isGetBLFileName:
		GetBLFileName();
 8018478:	f7ff ff3e 	bl	80182f8 <GetBLFileName>
		break;
 801847c:	e22b      	b.n	80188d6 <iotATHandler+0x546>
	case isSetBLFileName:
		SetBLFileName(IOT_AT);
 801847e:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8018482:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 8018486:	6818      	ldr	r0, [r3, #0]
 8018488:	f7ff feba 	bl	8018200 <SetBLFileName>
		break;
 801848c:	e223      	b.n	80188d6 <iotATHandler+0x546>
	case isGetBLUpdateStat:
		GetBLUpdateStatus();
 801848e:	f7ff fe7d 	bl	801818c <GetBLUpdateStatus>
		break;
 8018492:	e220      	b.n	80188d6 <iotATHandler+0x546>
	case isSetBLUpdateStat:
		SetBLUpdateStatus(IOT_AT);
 8018494:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8018498:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 801849c:	6818      	ldr	r0, [r3, #0]
 801849e:	f7ff fdf9 	bl	8018094 <SetBLUpdateStatus>
		break;
 80184a2:	e218      	b.n	80188d6 <iotATHandler+0x546>
	case isGetDEVID:
		sprintf(txBuffer, "Current Device ID: %s\r\nOK\r\n", iot->deviceID);
 80184a4:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 80184a8:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 80184ac:	681a      	ldr	r2, [r3, #0]
 80184ae:	f207 432c 	addw	r3, r7, #1068	; 0x42c
 80184b2:	4998      	ldr	r1, [pc, #608]	; (8018714 <iotATHandler+0x384>)
 80184b4:	4618      	mov	r0, r3
 80184b6:	f000 ff9b 	bl	80193f0 <siprintf>
		HAL_UART_Transmit(&IOT_AT_UART, txBuffer, strlen(txBuffer), 200);
 80184ba:	f207 432c 	addw	r3, r7, #1068	; 0x42c
 80184be:	4618      	mov	r0, r3
 80184c0:	f7f7 fe98 	bl	80101f4 <strlen>
 80184c4:	4603      	mov	r3, r0
 80184c6:	b29a      	uxth	r2, r3
 80184c8:	f207 412c 	addw	r1, r7, #1068	; 0x42c
 80184cc:	23c8      	movs	r3, #200	; 0xc8
 80184ce:	4890      	ldr	r0, [pc, #576]	; (8018710 <iotATHandler+0x380>)
 80184d0:	f7fd fa96 	bl	8015a00 <HAL_UART_Transmit>
		break;
 80184d4:	e1ff      	b.n	80188d6 <iotATHandler+0x546>
	case isSetDEVID:
		SetDEVID(IOT_AT, iot);
 80184d6:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 80184da:	f5a3 62a4 	sub.w	r2, r3, #1312	; 0x520
 80184de:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 80184e2:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 80184e6:	6811      	ldr	r1, [r2, #0]
 80184e8:	6818      	ldr	r0, [r3, #0]
 80184ea:	f7fe fd71 	bl	8016fd0 <SetDEVID>
		break;
 80184ee:	e1f2      	b.n	80188d6 <iotATHandler+0x546>
	case isGetPUBTOPIC:
		sprintf(txBuffer, "Publishing at Topic: \"%s\"\r\nOK\r\n",
				iot->mqtt.topicPublish);
 80184f0:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 80184f4:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 80184f8:	681b      	ldr	r3, [r3, #0]
 80184fa:	f103 02ac 	add.w	r2, r3, #172	; 0xac
		sprintf(txBuffer, "Publishing at Topic: \"%s\"\r\nOK\r\n",
 80184fe:	f207 432c 	addw	r3, r7, #1068	; 0x42c
 8018502:	4985      	ldr	r1, [pc, #532]	; (8018718 <iotATHandler+0x388>)
 8018504:	4618      	mov	r0, r3
 8018506:	f000 ff73 	bl	80193f0 <siprintf>
		HAL_UART_Transmit(&IOT_AT_UART, txBuffer, strlen(txBuffer), 200);
 801850a:	f207 432c 	addw	r3, r7, #1068	; 0x42c
 801850e:	4618      	mov	r0, r3
 8018510:	f7f7 fe70 	bl	80101f4 <strlen>
 8018514:	4603      	mov	r3, r0
 8018516:	b29a      	uxth	r2, r3
 8018518:	f207 412c 	addw	r1, r7, #1068	; 0x42c
 801851c:	23c8      	movs	r3, #200	; 0xc8
 801851e:	487c      	ldr	r0, [pc, #496]	; (8018710 <iotATHandler+0x380>)
 8018520:	f7fd fa6e 	bl	8015a00 <HAL_UART_Transmit>
		break;
 8018524:	e1d7      	b.n	80188d6 <iotATHandler+0x546>
	case isSetPUBTOPIC:
		SetPUBTOPIC(IOT_AT, iot);
 8018526:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 801852a:	f5a3 62a4 	sub.w	r2, r3, #1312	; 0x520
 801852e:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8018532:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 8018536:	6811      	ldr	r1, [r2, #0]
 8018538:	6818      	ldr	r0, [r3, #0]
 801853a:	f7fe fe47 	bl	80171cc <SetPUBTOPIC>
		break;
 801853e:	e1ca      	b.n	80188d6 <iotATHandler+0x546>
	case isGetSUBTOPIC:
		sprintf(txBuffer, "Subscribed at Topic: \"%s\"\r\nOK\r\n",
				iot->mqtt.topicSubscribe);
 8018540:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8018544:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 8018548:	681b      	ldr	r3, [r3, #0]
 801854a:	f503 72d8 	add.w	r2, r3, #432	; 0x1b0
		sprintf(txBuffer, "Subscribed at Topic: \"%s\"\r\nOK\r\n",
 801854e:	f207 432c 	addw	r3, r7, #1068	; 0x42c
 8018552:	4972      	ldr	r1, [pc, #456]	; (801871c <iotATHandler+0x38c>)
 8018554:	4618      	mov	r0, r3
 8018556:	f000 ff4b 	bl	80193f0 <siprintf>
		HAL_UART_Transmit(&IOT_AT_UART, txBuffer, strlen(txBuffer), 200);
 801855a:	f207 432c 	addw	r3, r7, #1068	; 0x42c
 801855e:	4618      	mov	r0, r3
 8018560:	f7f7 fe48 	bl	80101f4 <strlen>
 8018564:	4603      	mov	r3, r0
 8018566:	b29a      	uxth	r2, r3
 8018568:	f207 412c 	addw	r1, r7, #1068	; 0x42c
 801856c:	23c8      	movs	r3, #200	; 0xc8
 801856e:	4868      	ldr	r0, [pc, #416]	; (8018710 <iotATHandler+0x380>)
 8018570:	f7fd fa46 	bl	8015a00 <HAL_UART_Transmit>
		break;
 8018574:	e1af      	b.n	80188d6 <iotATHandler+0x546>
	case isSetSUBTOPIC:
		SetSUBTOPIC(IOT_AT, iot);
 8018576:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 801857a:	f5a3 62a4 	sub.w	r2, r3, #1312	; 0x520
 801857e:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8018582:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 8018586:	6811      	ldr	r1, [r2, #0]
 8018588:	6818      	ldr	r0, [r3, #0]
 801858a:	f7fe febb 	bl	8017304 <SetSUBTOPIC>
		break;
 801858e:	e1a2      	b.n	80188d6 <iotATHandler+0x546>
	case isGetBKRADDR:
		sprintf(txBuffer, "Broker Address is: \"%s\"\r\nOK\r\n",
				iot->mqtt.BrokerAddress);
 8018590:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8018594:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 8018598:	681b      	ldr	r3, [r3, #0]
 801859a:	f103 0234 	add.w	r2, r3, #52	; 0x34
		sprintf(txBuffer, "Broker Address is: \"%s\"\r\nOK\r\n",
 801859e:	f207 432c 	addw	r3, r7, #1068	; 0x42c
 80185a2:	495f      	ldr	r1, [pc, #380]	; (8018720 <iotATHandler+0x390>)
 80185a4:	4618      	mov	r0, r3
 80185a6:	f000 ff23 	bl	80193f0 <siprintf>
		HAL_UART_Transmit(&IOT_AT_UART, txBuffer, strlen(txBuffer), 200);
 80185aa:	f207 432c 	addw	r3, r7, #1068	; 0x42c
 80185ae:	4618      	mov	r0, r3
 80185b0:	f7f7 fe20 	bl	80101f4 <strlen>
 80185b4:	4603      	mov	r3, r0
 80185b6:	b29a      	uxth	r2, r3
 80185b8:	f207 412c 	addw	r1, r7, #1068	; 0x42c
 80185bc:	23c8      	movs	r3, #200	; 0xc8
 80185be:	4854      	ldr	r0, [pc, #336]	; (8018710 <iotATHandler+0x380>)
 80185c0:	f7fd fa1e 	bl	8015a00 <HAL_UART_Transmit>
		break;
 80185c4:	e187      	b.n	80188d6 <iotATHandler+0x546>
	case isSetBKRADDR:
		SetBKRADDR(IOT_AT, iot);
 80185c6:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 80185ca:	f5a3 62a4 	sub.w	r2, r3, #1312	; 0x520
 80185ce:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 80185d2:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 80185d6:	6811      	ldr	r1, [r2, #0]
 80185d8:	6818      	ldr	r0, [r3, #0]
 80185da:	f7fe ff31 	bl	8017440 <SetBKRADDR>
		break;
 80185de:	e17a      	b.n	80188d6 <iotATHandler+0x546>
	case isGetBKRPORT:
		sprintf(txBuffer, "Broker Port is: \"%d\"\r\nOK\r\n",
				iot->mqtt.brokerPort);
 80185e0:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 80185e4:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 80185e8:	681b      	ldr	r3, [r3, #0]
 80185ea:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
		sprintf(txBuffer, "Broker Port is: \"%d\"\r\nOK\r\n",
 80185ee:	461a      	mov	r2, r3
 80185f0:	f207 432c 	addw	r3, r7, #1068	; 0x42c
 80185f4:	494b      	ldr	r1, [pc, #300]	; (8018724 <iotATHandler+0x394>)
 80185f6:	4618      	mov	r0, r3
 80185f8:	f000 fefa 	bl	80193f0 <siprintf>
		HAL_UART_Transmit(&IOT_AT_UART, txBuffer, strlen(txBuffer), 200);
 80185fc:	f207 432c 	addw	r3, r7, #1068	; 0x42c
 8018600:	4618      	mov	r0, r3
 8018602:	f7f7 fdf7 	bl	80101f4 <strlen>
 8018606:	4603      	mov	r3, r0
 8018608:	b29a      	uxth	r2, r3
 801860a:	f207 412c 	addw	r1, r7, #1068	; 0x42c
 801860e:	23c8      	movs	r3, #200	; 0xc8
 8018610:	483f      	ldr	r0, [pc, #252]	; (8018710 <iotATHandler+0x380>)
 8018612:	f7fd f9f5 	bl	8015a00 <HAL_UART_Transmit>
		break;
 8018616:	e15e      	b.n	80188d6 <iotATHandler+0x546>
	case isSetBKRPORT:
		SetBKRPORT(IOT_AT, iot);
 8018618:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 801861c:	f5a3 62a4 	sub.w	r2, r3, #1312	; 0x520
 8018620:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8018624:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 8018628:	6811      	ldr	r1, [r2, #0]
 801862a:	6818      	ldr	r0, [r3, #0]
 801862c:	f7fe ffa4 	bl	8017578 <SetBKRPORT>
		break;
 8018630:	e151      	b.n	80188d6 <iotATHandler+0x546>
	case isGetCLIENTID:
		sprintf(txBuffer, "Client ID is: \"%s\"\r\nOK\r\n", iot->mqtt.ClientID);
 8018632:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8018636:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 801863a:	681b      	ldr	r3, [r3, #0]
 801863c:	f103 026a 	add.w	r2, r3, #106	; 0x6a
 8018640:	f207 432c 	addw	r3, r7, #1068	; 0x42c
 8018644:	4938      	ldr	r1, [pc, #224]	; (8018728 <iotATHandler+0x398>)
 8018646:	4618      	mov	r0, r3
 8018648:	f000 fed2 	bl	80193f0 <siprintf>
		HAL_UART_Transmit(&IOT_AT_UART, txBuffer, strlen(txBuffer), 200);
 801864c:	f207 432c 	addw	r3, r7, #1068	; 0x42c
 8018650:	4618      	mov	r0, r3
 8018652:	f7f7 fdcf 	bl	80101f4 <strlen>
 8018656:	4603      	mov	r3, r0
 8018658:	b29a      	uxth	r2, r3
 801865a:	f207 412c 	addw	r1, r7, #1068	; 0x42c
 801865e:	23c8      	movs	r3, #200	; 0xc8
 8018660:	482b      	ldr	r0, [pc, #172]	; (8018710 <iotATHandler+0x380>)
 8018662:	f7fd f9cd 	bl	8015a00 <HAL_UART_Transmit>
		break;
 8018666:	e136      	b.n	80188d6 <iotATHandler+0x546>
	case isSetCLIENTID:
		SetCLIENTID(IOT_AT, iot);
 8018668:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 801866c:	f5a3 62a4 	sub.w	r2, r3, #1312	; 0x520
 8018670:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8018674:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 8018678:	6811      	ldr	r1, [r2, #0]
 801867a:	6818      	ldr	r0, [r3, #0]
 801867c:	f7fe fffe 	bl	801767c <SetCLIENTID>
		break;
 8018680:	e129      	b.n	80188d6 <iotATHandler+0x546>
	case isGetUSERID:
		sprintf(txBuffer, "MQTT User ID is: \"%s\"\r\nOK\r\n",
				iot->mqtt.userID);
 8018682:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8018686:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 801868a:	681b      	ldr	r3, [r3, #0]
 801868c:	f103 0280 	add.w	r2, r3, #128	; 0x80
		sprintf(txBuffer, "MQTT User ID is: \"%s\"\r\nOK\r\n",
 8018690:	f207 432c 	addw	r3, r7, #1068	; 0x42c
 8018694:	4925      	ldr	r1, [pc, #148]	; (801872c <iotATHandler+0x39c>)
 8018696:	4618      	mov	r0, r3
 8018698:	f000 feaa 	bl	80193f0 <siprintf>
		HAL_UART_Transmit(&IOT_AT_UART, txBuffer, strlen(txBuffer), 200);
 801869c:	f207 432c 	addw	r3, r7, #1068	; 0x42c
 80186a0:	4618      	mov	r0, r3
 80186a2:	f7f7 fda7 	bl	80101f4 <strlen>
 80186a6:	4603      	mov	r3, r0
 80186a8:	b29a      	uxth	r2, r3
 80186aa:	f207 412c 	addw	r1, r7, #1068	; 0x42c
 80186ae:	23c8      	movs	r3, #200	; 0xc8
 80186b0:	4817      	ldr	r0, [pc, #92]	; (8018710 <iotATHandler+0x380>)
 80186b2:	f7fd f9a5 	bl	8015a00 <HAL_UART_Transmit>
		break;
 80186b6:	e10e      	b.n	80188d6 <iotATHandler+0x546>
	case isSetUSERID:
		SetUSERID(IOT_AT, iot);
 80186b8:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 80186bc:	f5a3 62a4 	sub.w	r2, r3, #1312	; 0x520
 80186c0:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 80186c4:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 80186c8:	6811      	ldr	r1, [r2, #0]
 80186ca:	6818      	ldr	r0, [r3, #0]
 80186cc:	f7ff f872 	bl	80177b4 <SetUSERID>
		break;
 80186d0:	e101      	b.n	80188d6 <iotATHandler+0x546>
	case isGetPASSWORD:
		sprintf(txBuffer, "MQTT User Password is: \"%s\"\r\nOK\r\n",
				iot->mqtt.userPassword);
 80186d2:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 80186d6:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 80186da:	681b      	ldr	r3, [r3, #0]
 80186dc:	f103 0296 	add.w	r2, r3, #150	; 0x96
		sprintf(txBuffer, "MQTT User Password is: \"%s\"\r\nOK\r\n",
 80186e0:	f207 432c 	addw	r3, r7, #1068	; 0x42c
 80186e4:	4912      	ldr	r1, [pc, #72]	; (8018730 <iotATHandler+0x3a0>)
 80186e6:	4618      	mov	r0, r3
 80186e8:	f000 fe82 	bl	80193f0 <siprintf>
		HAL_UART_Transmit(&IOT_AT_UART, txBuffer, strlen(txBuffer), 200);
 80186ec:	f207 432c 	addw	r3, r7, #1068	; 0x42c
 80186f0:	4618      	mov	r0, r3
 80186f2:	f7f7 fd7f 	bl	80101f4 <strlen>
 80186f6:	4603      	mov	r3, r0
 80186f8:	b29a      	uxth	r2, r3
 80186fa:	f207 412c 	addw	r1, r7, #1068	; 0x42c
 80186fe:	23c8      	movs	r3, #200	; 0xc8
 8018700:	4803      	ldr	r0, [pc, #12]	; (8018710 <iotATHandler+0x380>)
 8018702:	f7fd f97d 	bl	8015a00 <HAL_UART_Transmit>
		break;
 8018706:	e0e6      	b.n	80188d6 <iotATHandler+0x546>
 8018708:	200007b6 	.word	0x200007b6
 801870c:	0801ae54 	.word	0x0801ae54
 8018710:	200005bc 	.word	0x200005bc
 8018714:	0801ae60 	.word	0x0801ae60
 8018718:	0801ae7c 	.word	0x0801ae7c
 801871c:	0801ae9c 	.word	0x0801ae9c
 8018720:	0801aebc 	.word	0x0801aebc
 8018724:	0801aedc 	.word	0x0801aedc
 8018728:	0801aef8 	.word	0x0801aef8
 801872c:	0801af14 	.word	0x0801af14
 8018730:	0801af30 	.word	0x0801af30
	case isSetPASSWORD:
		SetPASSWORD(IOT_AT, iot);
 8018734:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8018738:	f5a3 62a4 	sub.w	r2, r3, #1312	; 0x520
 801873c:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8018740:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 8018744:	6811      	ldr	r1, [r2, #0]
 8018746:	6818      	ldr	r0, [r3, #0]
 8018748:	f7ff f8d0 	bl	80178ec <SetPASSWORD>
		break;
 801874c:	e0c3      	b.n	80188d6 <iotATHandler+0x546>
	case isGetRECDSetPoints:
		char txBigBuffer[1000];
		sprintf(txBigBuffer,
				"RECD Data: \nP01-%d, P02-%d\nT01-%d, T02-%d\nT_Amb-%d, EB1-%d, SLNCR_BP-%d, P_OEM-%d\r\nOK\r\n",
				recdconstpts->setPointP[0], recdconstpts->setPointP[1],
 801874e:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8018752:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8018756:	681b      	ldr	r3, [r3, #0]
 8018758:	881b      	ldrh	r3, [r3, #0]
		sprintf(txBigBuffer,
 801875a:	469c      	mov	ip, r3
				recdconstpts->setPointP[0], recdconstpts->setPointP[1],
 801875c:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8018760:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8018764:	681b      	ldr	r3, [r3, #0]
 8018766:	885b      	ldrh	r3, [r3, #2]
		sprintf(txBigBuffer,
 8018768:	469e      	mov	lr, r3
				recdconstpts->setPointT[0], recdconstpts->setPointT[1],
 801876a:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 801876e:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8018772:	681b      	ldr	r3, [r3, #0]
 8018774:	889b      	ldrh	r3, [r3, #4]
		sprintf(txBigBuffer,
 8018776:	461a      	mov	r2, r3
				recdconstpts->setPointT[0], recdconstpts->setPointT[1],
 8018778:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 801877c:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8018780:	681b      	ldr	r3, [r3, #0]
 8018782:	88db      	ldrh	r3, [r3, #6]
		sprintf(txBigBuffer,
 8018784:	4619      	mov	r1, r3
				recdconstpts->T_Amb, recdconstpts->EB1, recdconstpts->SLNCR_BP,
 8018786:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 801878a:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 801878e:	681b      	ldr	r3, [r3, #0]
 8018790:	891b      	ldrh	r3, [r3, #8]
		sprintf(txBigBuffer,
 8018792:	461c      	mov	r4, r3
				recdconstpts->T_Amb, recdconstpts->EB1, recdconstpts->SLNCR_BP,
 8018794:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8018798:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 801879c:	681b      	ldr	r3, [r3, #0]
 801879e:	895b      	ldrh	r3, [r3, #10]
		sprintf(txBigBuffer,
 80187a0:	461d      	mov	r5, r3
				recdconstpts->T_Amb, recdconstpts->EB1, recdconstpts->SLNCR_BP,
 80187a2:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 80187a6:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 80187aa:	681b      	ldr	r3, [r3, #0]
 80187ac:	899b      	ldrh	r3, [r3, #12]
		sprintf(txBigBuffer,
 80187ae:	461e      	mov	r6, r3
				recdconstpts->P_OEM);
 80187b0:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 80187b4:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 80187b8:	681b      	ldr	r3, [r3, #0]
 80187ba:	89db      	ldrh	r3, [r3, #14]
		sprintf(txBigBuffer,
 80187bc:	f107 0010 	add.w	r0, r7, #16
 80187c0:	9305      	str	r3, [sp, #20]
 80187c2:	9604      	str	r6, [sp, #16]
 80187c4:	9503      	str	r5, [sp, #12]
 80187c6:	9402      	str	r4, [sp, #8]
 80187c8:	9101      	str	r1, [sp, #4]
 80187ca:	9200      	str	r2, [sp, #0]
 80187cc:	4673      	mov	r3, lr
 80187ce:	4662      	mov	r2, ip
 80187d0:	4943      	ldr	r1, [pc, #268]	; (80188e0 <iotATHandler+0x550>)
 80187d2:	f000 fe0d 	bl	80193f0 <siprintf>
		HAL_UART_Transmit(&IOT_AT_UART, txBigBuffer, strlen(txBigBuffer), 500);
 80187d6:	f107 0310 	add.w	r3, r7, #16
 80187da:	4618      	mov	r0, r3
 80187dc:	f7f7 fd0a 	bl	80101f4 <strlen>
 80187e0:	4603      	mov	r3, r0
 80187e2:	b29a      	uxth	r2, r3
 80187e4:	f107 0110 	add.w	r1, r7, #16
 80187e8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80187ec:	483d      	ldr	r0, [pc, #244]	; (80188e4 <iotATHandler+0x554>)
 80187ee:	f7fd f907 	bl	8015a00 <HAL_UART_Transmit>
		break;
 80187f2:	e070      	b.n	80188d6 <iotATHandler+0x546>
	case isSetRECDPressurePt:
		SetPointPressure(IOT_AT, recdconstpts);
 80187f4:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 80187f8:	f2a3 5224 	subw	r2, r3, #1316	; 0x524
 80187fc:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8018800:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 8018804:	6811      	ldr	r1, [r2, #0]
 8018806:	6818      	ldr	r0, [r3, #0]
 8018808:	f7ff f9ac 	bl	8017b64 <SetPointPressure>
		break;
 801880c:	e063      	b.n	80188d6 <iotATHandler+0x546>
	case isSetRECDTempPt:
		SetPointTemp(IOT_AT, recdconstpts);
 801880e:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8018812:	f2a3 5224 	subw	r2, r3, #1316	; 0x524
 8018816:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 801881a:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 801881e:	6811      	ldr	r1, [r2, #0]
 8018820:	6818      	ldr	r0, [r3, #0]
 8018822:	f7ff f8ff 	bl	8017a24 <SetPointTemp>
		break;
 8018826:	e056      	b.n	80188d6 <iotATHandler+0x546>
	case isSetTAmb:
		SetTAMB(IOT_AT, recdconstpts);
 8018828:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 801882c:	f2a3 5224 	subw	r2, r3, #1316	; 0x524
 8018830:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8018834:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 8018838:	6811      	ldr	r1, [r2, #0]
 801883a:	6818      	ldr	r0, [r3, #0]
 801883c:	f7ff fa32 	bl	8017ca4 <SetTAMB>
		break;
 8018840:	e049      	b.n	80188d6 <iotATHandler+0x546>
	case isSetEB1:
		SetEB1(IOT_AT, recdconstpts);
 8018842:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8018846:	f2a3 5224 	subw	r2, r3, #1316	; 0x524
 801884a:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 801884e:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 8018852:	6811      	ldr	r1, [r2, #0]
 8018854:	6818      	ldr	r0, [r3, #0]
 8018856:	f7ff faa3 	bl	8017da0 <SetEB1>
		break;
 801885a:	e03c      	b.n	80188d6 <iotATHandler+0x546>
	case isSetSLNCR_BP:
		SetSLNCRBP(IOT_AT, recdconstpts);
 801885c:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8018860:	f2a3 5224 	subw	r2, r3, #1316	; 0x524
 8018864:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8018868:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 801886c:	6811      	ldr	r1, [r2, #0]
 801886e:	6818      	ldr	r0, [r3, #0]
 8018870:	f7ff fb14 	bl	8017e9c <SetSLNCRBP>
		break;
 8018874:	e02f      	b.n	80188d6 <iotATHandler+0x546>
	case isSetP_OEM:
		SetPOEM(IOT_AT, recdconstpts);
 8018876:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 801887a:	f2a3 5224 	subw	r2, r3, #1316	; 0x524
 801887e:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8018882:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 8018886:	6811      	ldr	r1, [r2, #0]
 8018888:	6818      	ldr	r0, [r3, #0]
 801888a:	f7ff fb85 	bl	8017f98 <SetPOEM>
		break;
 801888e:	e022      	b.n	80188d6 <iotATHandler+0x546>
	case isResetIOT:
		sprintf(txBuffer, "Resetting IOT\r\n");
 8018890:	f207 432c 	addw	r3, r7, #1068	; 0x42c
 8018894:	4914      	ldr	r1, [pc, #80]	; (80188e8 <iotATHandler+0x558>)
 8018896:	4618      	mov	r0, r3
 8018898:	f000 fdaa 	bl	80193f0 <siprintf>
		HAL_UART_Transmit(&IOT_AT_UART, txBuffer, strlen(txBuffer), 200);
 801889c:	f207 432c 	addw	r3, r7, #1068	; 0x42c
 80188a0:	4618      	mov	r0, r3
 80188a2:	f7f7 fca7 	bl	80101f4 <strlen>
 80188a6:	4603      	mov	r3, r0
 80188a8:	b29a      	uxth	r2, r3
 80188aa:	f207 412c 	addw	r1, r7, #1068	; 0x42c
 80188ae:	23c8      	movs	r3, #200	; 0xc8
 80188b0:	480c      	ldr	r0, [pc, #48]	; (80188e4 <iotATHandler+0x554>)
 80188b2:	f7fd f8a5 	bl	8015a00 <HAL_UART_Transmit>
		NVIC_SystemReset();
 80188b6:	f7fe f9a5 	bl	8016c04 <__NVIC_SystemReset>
		break;
	case isUnknownAT:
		HAL_UART_Transmit(&IOT_AT_UART, "Unknown AT command\r\n", 20, 100);
 80188ba:	2364      	movs	r3, #100	; 0x64
 80188bc:	2214      	movs	r2, #20
 80188be:	490b      	ldr	r1, [pc, #44]	; (80188ec <iotATHandler+0x55c>)
 80188c0:	4808      	ldr	r0, [pc, #32]	; (80188e4 <iotATHandler+0x554>)
 80188c2:	f7fd f89d 	bl	8015a00 <HAL_UART_Transmit>
		break;
 80188c6:	e006      	b.n	80188d6 <iotATHandler+0x546>
	default:
		HAL_UART_Transmit(&IOT_AT_UART, "Error in command\r\n", 18, 100);
 80188c8:	2364      	movs	r3, #100	; 0x64
 80188ca:	2212      	movs	r2, #18
 80188cc:	4908      	ldr	r1, [pc, #32]	; (80188f0 <iotATHandler+0x560>)
 80188ce:	4805      	ldr	r0, [pc, #20]	; (80188e4 <iotATHandler+0x554>)
 80188d0:	f7fd f896 	bl	8015a00 <HAL_UART_Transmit>
		break;
 80188d4:	bf00      	nop
	}
}
 80188d6:	bf00      	nop
 80188d8:	f207 572c 	addw	r7, r7, #1324	; 0x52c
 80188dc:	46bd      	mov	sp, r7
 80188de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80188e0:	0801af54 	.word	0x0801af54
 80188e4:	200005bc 	.word	0x200005bc
 80188e8:	0801afac 	.word	0x0801afac
 80188ec:	0801afbc 	.word	0x0801afbc
 80188f0:	0801afd4 	.word	0x0801afd4

080188f4 <UART_AT_IT_EN>:

void UART_AT_IT_EN() {
 80188f4:	b580      	push	{r7, lr}
 80188f6:	af00      	add	r7, sp, #0
	HAL_UARTEx_ReceiveToIdle_IT(&IOT_AT_UART, configRxBuf, configRxBufLen);
 80188f8:	22fa      	movs	r2, #250	; 0xfa
 80188fa:	4903      	ldr	r1, [pc, #12]	; (8018908 <UART_AT_IT_EN+0x14>)
 80188fc:	4803      	ldr	r0, [pc, #12]	; (801890c <UART_AT_IT_EN+0x18>)
 80188fe:	f7fd f90a 	bl	8015b16 <HAL_UARTEx_ReceiveToIdle_IT>
}
 8018902:	bf00      	nop
 8018904:	bd80      	pop	{r7, pc}
 8018906:	bf00      	nop
 8018908:	200006bc 	.word	0x200006bc
 801890c:	200005bc 	.word	0x200005bc

08018910 <ee_getDeviceID>:
#include "app_eeprom.h"

bool ee_getDeviceID(char *str, size_t len){
 8018910:	b580      	push	{r7, lr}
 8018912:	b082      	sub	sp, #8
 8018914:	af00      	add	r7, sp, #0
 8018916:	6078      	str	r0, [r7, #4]
 8018918:	6039      	str	r1, [r7, #0]
	if(ee24_isConnected()){
 801891a:	f7fe f8ad 	bl	8016a78 <ee24_isConnected>
 801891e:	4603      	mov	r3, r0
 8018920:	2b00      	cmp	r3, #0
 8018922:	d00a      	beq.n	801893a <ee_getDeviceID+0x2a>
		if(ee24_read(eeAddr_deviceID, str, len, 200)){
 8018924:	23c8      	movs	r3, #200	; 0xc8
 8018926:	683a      	ldr	r2, [r7, #0]
 8018928:	6879      	ldr	r1, [r7, #4]
 801892a:	2016      	movs	r0, #22
 801892c:	f7fe f930 	bl	8016b90 <ee24_read>
 8018930:	4603      	mov	r3, r0
 8018932:	2b00      	cmp	r3, #0
 8018934:	d001      	beq.n	801893a <ee_getDeviceID+0x2a>
			return true;
 8018936:	2301      	movs	r3, #1
 8018938:	e000      	b.n	801893c <ee_getDeviceID+0x2c>
		}
	}
	return false;
 801893a:	2300      	movs	r3, #0
}
 801893c:	4618      	mov	r0, r3
 801893e:	3708      	adds	r7, #8
 8018940:	46bd      	mov	sp, r7
 8018942:	bd80      	pop	{r7, pc}

08018944 <ee_getDeviceIDLen>:

bool ee_getDeviceIDLen(size_t *len){
 8018944:	b580      	push	{r7, lr}
 8018946:	b082      	sub	sp, #8
 8018948:	af00      	add	r7, sp, #0
 801894a:	6078      	str	r0, [r7, #4]
	if(ee24_isConnected()){
 801894c:	f7fe f894 	bl	8016a78 <ee24_isConnected>
 8018950:	4603      	mov	r3, r0
 8018952:	2b00      	cmp	r3, #0
 8018954:	d00a      	beq.n	801896c <ee_getDeviceIDLen+0x28>
		if(ee24_read(eeAddr_deviceIDLen, len, 1, 200)){				//TODO: Replace 1 with size_t
 8018956:	23c8      	movs	r3, #200	; 0xc8
 8018958:	2201      	movs	r2, #1
 801895a:	6879      	ldr	r1, [r7, #4]
 801895c:	2049      	movs	r0, #73	; 0x49
 801895e:	f7fe f917 	bl	8016b90 <ee24_read>
 8018962:	4603      	mov	r3, r0
 8018964:	2b00      	cmp	r3, #0
 8018966:	d001      	beq.n	801896c <ee_getDeviceIDLen+0x28>
			return true;
 8018968:	2301      	movs	r3, #1
 801896a:	e000      	b.n	801896e <ee_getDeviceIDLen+0x2a>
		}
	}
	return false;
 801896c:	2300      	movs	r3, #0
}
 801896e:	4618      	mov	r0, r3
 8018970:	3708      	adds	r7, #8
 8018972:	46bd      	mov	sp, r7
 8018974:	bd80      	pop	{r7, pc}

08018976 <ee_setDeviceID>:

bool ee_setDeviceID(char *str, size_t len){
 8018976:	b580      	push	{r7, lr}
 8018978:	b082      	sub	sp, #8
 801897a:	af00      	add	r7, sp, #0
 801897c:	6078      	str	r0, [r7, #4]
 801897e:	6039      	str	r1, [r7, #0]
//	size_t *setLen = &len;
	if(ee24_isConnected()){
 8018980:	f7fe f87a 	bl	8016a78 <ee24_isConnected>
 8018984:	4603      	mov	r3, r0
 8018986:	2b00      	cmp	r3, #0
 8018988:	d01d      	beq.n	80189c6 <ee_setDeviceID+0x50>
		if(!ee24_write(eeAddr_deviceID, str, len, 200)){
 801898a:	683a      	ldr	r2, [r7, #0]
 801898c:	23c8      	movs	r3, #200	; 0xc8
 801898e:	6879      	ldr	r1, [r7, #4]
 8018990:	2016      	movs	r0, #22
 8018992:	f7fe f88b 	bl	8016aac <ee24_write>
 8018996:	4603      	mov	r3, r0
 8018998:	f083 0301 	eor.w	r3, r3, #1
 801899c:	b2db      	uxtb	r3, r3
 801899e:	2b00      	cmp	r3, #0
 80189a0:	d001      	beq.n	80189a6 <ee_setDeviceID+0x30>
			return false;
 80189a2:	2300      	movs	r3, #0
 80189a4:	e010      	b.n	80189c8 <ee_setDeviceID+0x52>
		}
		if(!ee24_write(eeAddr_deviceIDLen, &len, 1, 200)){
 80189a6:	4639      	mov	r1, r7
 80189a8:	23c8      	movs	r3, #200	; 0xc8
 80189aa:	2201      	movs	r2, #1
 80189ac:	2049      	movs	r0, #73	; 0x49
 80189ae:	f7fe f87d 	bl	8016aac <ee24_write>
 80189b2:	4603      	mov	r3, r0
 80189b4:	f083 0301 	eor.w	r3, r3, #1
 80189b8:	b2db      	uxtb	r3, r3
 80189ba:	2b00      	cmp	r3, #0
 80189bc:	d001      	beq.n	80189c2 <ee_setDeviceID+0x4c>
			return false;
 80189be:	2300      	movs	r3, #0
 80189c0:	e002      	b.n	80189c8 <ee_setDeviceID+0x52>
		}
		return true;
 80189c2:	2301      	movs	r3, #1
 80189c4:	e000      	b.n	80189c8 <ee_setDeviceID+0x52>
	}
	return false;
 80189c6:	2300      	movs	r3, #0
}
 80189c8:	4618      	mov	r0, r3
 80189ca:	3708      	adds	r7, #8
 80189cc:	46bd      	mov	sp, r7
 80189ce:	bd80      	pop	{r7, pc}

080189d0 <ee_getBrokerPort>:

bool ee_getBrokerPort(uint16_t *brokerPort){
 80189d0:	b580      	push	{r7, lr}
 80189d2:	b082      	sub	sp, #8
 80189d4:	af00      	add	r7, sp, #0
 80189d6:	6078      	str	r0, [r7, #4]
	if(ee24_isConnected()){
 80189d8:	f7fe f84e 	bl	8016a78 <ee24_isConnected>
 80189dc:	4603      	mov	r3, r0
 80189de:	2b00      	cmp	r3, #0
 80189e0:	d00a      	beq.n	80189f8 <ee_getBrokerPort+0x28>
		if(ee24_read(eeAddr_mqttBrokerPort, brokerPort, 2, 200)){
 80189e2:	23c8      	movs	r3, #200	; 0xc8
 80189e4:	2202      	movs	r2, #2
 80189e6:	6879      	ldr	r1, [r7, #4]
 80189e8:	204e      	movs	r0, #78	; 0x4e
 80189ea:	f7fe f8d1 	bl	8016b90 <ee24_read>
 80189ee:	4603      	mov	r3, r0
 80189f0:	2b00      	cmp	r3, #0
 80189f2:	d001      	beq.n	80189f8 <ee_getBrokerPort+0x28>
			return true;
 80189f4:	2301      	movs	r3, #1
 80189f6:	e000      	b.n	80189fa <ee_getBrokerPort+0x2a>
		}
	}
	return false;
 80189f8:	2300      	movs	r3, #0
}
 80189fa:	4618      	mov	r0, r3
 80189fc:	3708      	adds	r7, #8
 80189fe:	46bd      	mov	sp, r7
 8018a00:	bd80      	pop	{r7, pc}

08018a02 <ee_setBrokerPort>:

bool ee_setBrokerPort(uint16_t brokerPort){
 8018a02:	b580      	push	{r7, lr}
 8018a04:	b082      	sub	sp, #8
 8018a06:	af00      	add	r7, sp, #0
 8018a08:	4603      	mov	r3, r0
 8018a0a:	80fb      	strh	r3, [r7, #6]
	if(ee24_isConnected()){
 8018a0c:	f7fe f834 	bl	8016a78 <ee24_isConnected>
 8018a10:	4603      	mov	r3, r0
 8018a12:	2b00      	cmp	r3, #0
 8018a14:	d00a      	beq.n	8018a2c <ee_setBrokerPort+0x2a>
		if(ee24_write(eeAddr_mqttBrokerPort, &brokerPort, 2, 200)){
 8018a16:	1db9      	adds	r1, r7, #6
 8018a18:	23c8      	movs	r3, #200	; 0xc8
 8018a1a:	2202      	movs	r2, #2
 8018a1c:	204e      	movs	r0, #78	; 0x4e
 8018a1e:	f7fe f845 	bl	8016aac <ee24_write>
 8018a22:	4603      	mov	r3, r0
 8018a24:	2b00      	cmp	r3, #0
 8018a26:	d001      	beq.n	8018a2c <ee_setBrokerPort+0x2a>
			return true;
 8018a28:	2301      	movs	r3, #1
 8018a2a:	e000      	b.n	8018a2e <ee_setBrokerPort+0x2c>
		}
	}
	return false;
 8018a2c:	2300      	movs	r3, #0
}
 8018a2e:	4618      	mov	r0, r3
 8018a30:	3708      	adds	r7, #8
 8018a32:	46bd      	mov	sp, r7
 8018a34:	bd80      	pop	{r7, pc}

08018a36 <ee_getBrokerAddress>:

bool ee_getBrokerAddress(char *str, size_t len){
 8018a36:	b580      	push	{r7, lr}
 8018a38:	b082      	sub	sp, #8
 8018a3a:	af00      	add	r7, sp, #0
 8018a3c:	6078      	str	r0, [r7, #4]
 8018a3e:	6039      	str	r1, [r7, #0]
	if(ee24_isConnected()){
 8018a40:	f7fe f81a 	bl	8016a78 <ee24_isConnected>
 8018a44:	4603      	mov	r3, r0
 8018a46:	2b00      	cmp	r3, #0
 8018a48:	d00a      	beq.n	8018a60 <ee_getBrokerAddress+0x2a>
		if(ee24_read(eeAddr_mqttBrokerAddress, str, len, 200)){
 8018a4a:	23c8      	movs	r3, #200	; 0xc8
 8018a4c:	683a      	ldr	r2, [r7, #0]
 8018a4e:	6879      	ldr	r1, [r7, #4]
 8018a50:	2050      	movs	r0, #80	; 0x50
 8018a52:	f7fe f89d 	bl	8016b90 <ee24_read>
 8018a56:	4603      	mov	r3, r0
 8018a58:	2b00      	cmp	r3, #0
 8018a5a:	d001      	beq.n	8018a60 <ee_getBrokerAddress+0x2a>
			return true;
 8018a5c:	2301      	movs	r3, #1
 8018a5e:	e000      	b.n	8018a62 <ee_getBrokerAddress+0x2c>
		}
	}
	return false;
 8018a60:	2300      	movs	r3, #0
}
 8018a62:	4618      	mov	r0, r3
 8018a64:	3708      	adds	r7, #8
 8018a66:	46bd      	mov	sp, r7
 8018a68:	bd80      	pop	{r7, pc}

08018a6a <ee_getBrokerAddressLen>:

bool ee_getBrokerAddressLen(size_t *len){
 8018a6a:	b580      	push	{r7, lr}
 8018a6c:	b082      	sub	sp, #8
 8018a6e:	af00      	add	r7, sp, #0
 8018a70:	6078      	str	r0, [r7, #4]
	if(ee24_isConnected()){
 8018a72:	f7fe f801 	bl	8016a78 <ee24_isConnected>
 8018a76:	4603      	mov	r3, r0
 8018a78:	2b00      	cmp	r3, #0
 8018a7a:	d00a      	beq.n	8018a92 <ee_getBrokerAddressLen+0x28>
		if(ee24_read(eeAddr_mqttBrokerAddressLen, len, 1, 200)){
 8018a7c:	23c8      	movs	r3, #200	; 0xc8
 8018a7e:	2201      	movs	r2, #1
 8018a80:	6879      	ldr	r1, [r7, #4]
 8018a82:	2083      	movs	r0, #131	; 0x83
 8018a84:	f7fe f884 	bl	8016b90 <ee24_read>
 8018a88:	4603      	mov	r3, r0
 8018a8a:	2b00      	cmp	r3, #0
 8018a8c:	d001      	beq.n	8018a92 <ee_getBrokerAddressLen+0x28>
			return true;
 8018a8e:	2301      	movs	r3, #1
 8018a90:	e000      	b.n	8018a94 <ee_getBrokerAddressLen+0x2a>
		}
	}
	return false;
 8018a92:	2300      	movs	r3, #0
}
 8018a94:	4618      	mov	r0, r3
 8018a96:	3708      	adds	r7, #8
 8018a98:	46bd      	mov	sp, r7
 8018a9a:	bd80      	pop	{r7, pc}

08018a9c <ee_setBrokerAddress>:

bool ee_setBrokerAddress(char *str, size_t len){
 8018a9c:	b580      	push	{r7, lr}
 8018a9e:	b084      	sub	sp, #16
 8018aa0:	af00      	add	r7, sp, #0
 8018aa2:	6078      	str	r0, [r7, #4]
 8018aa4:	6039      	str	r1, [r7, #0]
	size_t *setLen = &len;
 8018aa6:	463b      	mov	r3, r7
 8018aa8:	60fb      	str	r3, [r7, #12]
	if(ee24_isConnected()){
 8018aaa:	f7fd ffe5 	bl	8016a78 <ee24_isConnected>
 8018aae:	4603      	mov	r3, r0
 8018ab0:	2b00      	cmp	r3, #0
 8018ab2:	d01d      	beq.n	8018af0 <ee_setBrokerAddress+0x54>
		if(!ee24_write(eeAddr_mqttBrokerAddress, str, len, 200)){
 8018ab4:	683a      	ldr	r2, [r7, #0]
 8018ab6:	23c8      	movs	r3, #200	; 0xc8
 8018ab8:	6879      	ldr	r1, [r7, #4]
 8018aba:	2050      	movs	r0, #80	; 0x50
 8018abc:	f7fd fff6 	bl	8016aac <ee24_write>
 8018ac0:	4603      	mov	r3, r0
 8018ac2:	f083 0301 	eor.w	r3, r3, #1
 8018ac6:	b2db      	uxtb	r3, r3
 8018ac8:	2b00      	cmp	r3, #0
 8018aca:	d001      	beq.n	8018ad0 <ee_setBrokerAddress+0x34>
			return false;
 8018acc:	2300      	movs	r3, #0
 8018ace:	e010      	b.n	8018af2 <ee_setBrokerAddress+0x56>
		}
		if(!ee24_write(eeAddr_mqttBrokerAddressLen, setLen, 1, 200)){
 8018ad0:	23c8      	movs	r3, #200	; 0xc8
 8018ad2:	2201      	movs	r2, #1
 8018ad4:	68f9      	ldr	r1, [r7, #12]
 8018ad6:	2083      	movs	r0, #131	; 0x83
 8018ad8:	f7fd ffe8 	bl	8016aac <ee24_write>
 8018adc:	4603      	mov	r3, r0
 8018ade:	f083 0301 	eor.w	r3, r3, #1
 8018ae2:	b2db      	uxtb	r3, r3
 8018ae4:	2b00      	cmp	r3, #0
 8018ae6:	d001      	beq.n	8018aec <ee_setBrokerAddress+0x50>
			return false;
 8018ae8:	2300      	movs	r3, #0
 8018aea:	e002      	b.n	8018af2 <ee_setBrokerAddress+0x56>
		}
		return true;
 8018aec:	2301      	movs	r3, #1
 8018aee:	e000      	b.n	8018af2 <ee_setBrokerAddress+0x56>
	}
	return false;
 8018af0:	2300      	movs	r3, #0
}
 8018af2:	4618      	mov	r0, r3
 8018af4:	3710      	adds	r7, #16
 8018af6:	46bd      	mov	sp, r7
 8018af8:	bd80      	pop	{r7, pc}

08018afa <ee_getMqttClientID>:

bool ee_getMqttClientID(char *str, size_t len){
 8018afa:	b580      	push	{r7, lr}
 8018afc:	b082      	sub	sp, #8
 8018afe:	af00      	add	r7, sp, #0
 8018b00:	6078      	str	r0, [r7, #4]
 8018b02:	6039      	str	r1, [r7, #0]
	if(ee24_isConnected()){
 8018b04:	f7fd ffb8 	bl	8016a78 <ee24_isConnected>
 8018b08:	4603      	mov	r3, r0
 8018b0a:	2b00      	cmp	r3, #0
 8018b0c:	d00a      	beq.n	8018b24 <ee_getMqttClientID+0x2a>
		if(ee24_read(eeAddr_mqttClientID, str, len, 200)){
 8018b0e:	23c8      	movs	r3, #200	; 0xc8
 8018b10:	683a      	ldr	r2, [r7, #0]
 8018b12:	6879      	ldr	r1, [r7, #4]
 8018b14:	2084      	movs	r0, #132	; 0x84
 8018b16:	f7fe f83b 	bl	8016b90 <ee24_read>
 8018b1a:	4603      	mov	r3, r0
 8018b1c:	2b00      	cmp	r3, #0
 8018b1e:	d001      	beq.n	8018b24 <ee_getMqttClientID+0x2a>
			return true;
 8018b20:	2301      	movs	r3, #1
 8018b22:	e000      	b.n	8018b26 <ee_getMqttClientID+0x2c>
		}
	}
	return false;
 8018b24:	2300      	movs	r3, #0
}
 8018b26:	4618      	mov	r0, r3
 8018b28:	3708      	adds	r7, #8
 8018b2a:	46bd      	mov	sp, r7
 8018b2c:	bd80      	pop	{r7, pc}

08018b2e <ee_getMqttClientIDLen>:

bool ee_getMqttClientIDLen(size_t *len){
 8018b2e:	b580      	push	{r7, lr}
 8018b30:	b082      	sub	sp, #8
 8018b32:	af00      	add	r7, sp, #0
 8018b34:	6078      	str	r0, [r7, #4]
	if(ee24_isConnected()){
 8018b36:	f7fd ff9f 	bl	8016a78 <ee24_isConnected>
 8018b3a:	4603      	mov	r3, r0
 8018b3c:	2b00      	cmp	r3, #0
 8018b3e:	d00a      	beq.n	8018b56 <ee_getMqttClientIDLen+0x28>
		if(ee24_read(eeAddr_mqttClientIDLen, len, 1, 200)){
 8018b40:	23c8      	movs	r3, #200	; 0xc8
 8018b42:	2201      	movs	r2, #1
 8018b44:	6879      	ldr	r1, [r7, #4]
 8018b46:	2098      	movs	r0, #152	; 0x98
 8018b48:	f7fe f822 	bl	8016b90 <ee24_read>
 8018b4c:	4603      	mov	r3, r0
 8018b4e:	2b00      	cmp	r3, #0
 8018b50:	d001      	beq.n	8018b56 <ee_getMqttClientIDLen+0x28>
			return true;
 8018b52:	2301      	movs	r3, #1
 8018b54:	e000      	b.n	8018b58 <ee_getMqttClientIDLen+0x2a>
		}
	}
	return false;
 8018b56:	2300      	movs	r3, #0
}
 8018b58:	4618      	mov	r0, r3
 8018b5a:	3708      	adds	r7, #8
 8018b5c:	46bd      	mov	sp, r7
 8018b5e:	bd80      	pop	{r7, pc}

08018b60 <ee_setMqttClientID>:

bool ee_setMqttClientID(char *str, size_t len){
 8018b60:	b580      	push	{r7, lr}
 8018b62:	b084      	sub	sp, #16
 8018b64:	af00      	add	r7, sp, #0
 8018b66:	6078      	str	r0, [r7, #4]
 8018b68:	6039      	str	r1, [r7, #0]
	size_t *setLen = &len;
 8018b6a:	463b      	mov	r3, r7
 8018b6c:	60fb      	str	r3, [r7, #12]
	if(ee24_isConnected()){
 8018b6e:	f7fd ff83 	bl	8016a78 <ee24_isConnected>
 8018b72:	4603      	mov	r3, r0
 8018b74:	2b00      	cmp	r3, #0
 8018b76:	d01d      	beq.n	8018bb4 <ee_setMqttClientID+0x54>
		if(!ee24_write(eeAddr_mqttClientID, str, len, 200)){
 8018b78:	683a      	ldr	r2, [r7, #0]
 8018b7a:	23c8      	movs	r3, #200	; 0xc8
 8018b7c:	6879      	ldr	r1, [r7, #4]
 8018b7e:	2084      	movs	r0, #132	; 0x84
 8018b80:	f7fd ff94 	bl	8016aac <ee24_write>
 8018b84:	4603      	mov	r3, r0
 8018b86:	f083 0301 	eor.w	r3, r3, #1
 8018b8a:	b2db      	uxtb	r3, r3
 8018b8c:	2b00      	cmp	r3, #0
 8018b8e:	d001      	beq.n	8018b94 <ee_setMqttClientID+0x34>
			return false;
 8018b90:	2300      	movs	r3, #0
 8018b92:	e010      	b.n	8018bb6 <ee_setMqttClientID+0x56>
		}
		if(!ee24_write(eeAddr_mqttClientIDLen, setLen, 1, 200)){
 8018b94:	23c8      	movs	r3, #200	; 0xc8
 8018b96:	2201      	movs	r2, #1
 8018b98:	68f9      	ldr	r1, [r7, #12]
 8018b9a:	2098      	movs	r0, #152	; 0x98
 8018b9c:	f7fd ff86 	bl	8016aac <ee24_write>
 8018ba0:	4603      	mov	r3, r0
 8018ba2:	f083 0301 	eor.w	r3, r3, #1
 8018ba6:	b2db      	uxtb	r3, r3
 8018ba8:	2b00      	cmp	r3, #0
 8018baa:	d001      	beq.n	8018bb0 <ee_setMqttClientID+0x50>
			return false;
 8018bac:	2300      	movs	r3, #0
 8018bae:	e002      	b.n	8018bb6 <ee_setMqttClientID+0x56>
		}
		return true;
 8018bb0:	2301      	movs	r3, #1
 8018bb2:	e000      	b.n	8018bb6 <ee_setMqttClientID+0x56>
	}
	return false;
 8018bb4:	2300      	movs	r3, #0
}
 8018bb6:	4618      	mov	r0, r3
 8018bb8:	3710      	adds	r7, #16
 8018bba:	46bd      	mov	sp, r7
 8018bbc:	bd80      	pop	{r7, pc}

08018bbe <ee_getMqttUserID>:

bool ee_getMqttUserID(char *str, size_t len){
 8018bbe:	b580      	push	{r7, lr}
 8018bc0:	b082      	sub	sp, #8
 8018bc2:	af00      	add	r7, sp, #0
 8018bc4:	6078      	str	r0, [r7, #4]
 8018bc6:	6039      	str	r1, [r7, #0]
	if(ee24_isConnected()){
 8018bc8:	f7fd ff56 	bl	8016a78 <ee24_isConnected>
 8018bcc:	4603      	mov	r3, r0
 8018bce:	2b00      	cmp	r3, #0
 8018bd0:	d00a      	beq.n	8018be8 <ee_getMqttUserID+0x2a>
		if(ee24_read(eeAddr_mqttUserID, str, len, 200)){
 8018bd2:	23c8      	movs	r3, #200	; 0xc8
 8018bd4:	683a      	ldr	r2, [r7, #0]
 8018bd6:	6879      	ldr	r1, [r7, #4]
 8018bd8:	2099      	movs	r0, #153	; 0x99
 8018bda:	f7fd ffd9 	bl	8016b90 <ee24_read>
 8018bde:	4603      	mov	r3, r0
 8018be0:	2b00      	cmp	r3, #0
 8018be2:	d001      	beq.n	8018be8 <ee_getMqttUserID+0x2a>
			return true;
 8018be4:	2301      	movs	r3, #1
 8018be6:	e000      	b.n	8018bea <ee_getMqttUserID+0x2c>
		}
	}
	return false;
 8018be8:	2300      	movs	r3, #0
}
 8018bea:	4618      	mov	r0, r3
 8018bec:	3708      	adds	r7, #8
 8018bee:	46bd      	mov	sp, r7
 8018bf0:	bd80      	pop	{r7, pc}

08018bf2 <ee_getMqttUserIDLen>:

bool ee_getMqttUserIDLen(size_t *len){
 8018bf2:	b580      	push	{r7, lr}
 8018bf4:	b082      	sub	sp, #8
 8018bf6:	af00      	add	r7, sp, #0
 8018bf8:	6078      	str	r0, [r7, #4]
	if(ee24_isConnected()){
 8018bfa:	f7fd ff3d 	bl	8016a78 <ee24_isConnected>
 8018bfe:	4603      	mov	r3, r0
 8018c00:	2b00      	cmp	r3, #0
 8018c02:	d00a      	beq.n	8018c1a <ee_getMqttUserIDLen+0x28>
		if(ee24_read(eeAddr_mqttUserIDLen, len, 1, 200)){
 8018c04:	23c8      	movs	r3, #200	; 0xc8
 8018c06:	2201      	movs	r2, #1
 8018c08:	6879      	ldr	r1, [r7, #4]
 8018c0a:	20ad      	movs	r0, #173	; 0xad
 8018c0c:	f7fd ffc0 	bl	8016b90 <ee24_read>
 8018c10:	4603      	mov	r3, r0
 8018c12:	2b00      	cmp	r3, #0
 8018c14:	d001      	beq.n	8018c1a <ee_getMqttUserIDLen+0x28>
			return true;
 8018c16:	2301      	movs	r3, #1
 8018c18:	e000      	b.n	8018c1c <ee_getMqttUserIDLen+0x2a>
		}
	}
	return false;
 8018c1a:	2300      	movs	r3, #0
}
 8018c1c:	4618      	mov	r0, r3
 8018c1e:	3708      	adds	r7, #8
 8018c20:	46bd      	mov	sp, r7
 8018c22:	bd80      	pop	{r7, pc}

08018c24 <ee_setMqttUserID>:

bool ee_setMqttUserID(char *str, size_t len){
 8018c24:	b580      	push	{r7, lr}
 8018c26:	b084      	sub	sp, #16
 8018c28:	af00      	add	r7, sp, #0
 8018c2a:	6078      	str	r0, [r7, #4]
 8018c2c:	6039      	str	r1, [r7, #0]
	size_t *setLen = &len;
 8018c2e:	463b      	mov	r3, r7
 8018c30:	60fb      	str	r3, [r7, #12]
	if(ee24_isConnected()){
 8018c32:	f7fd ff21 	bl	8016a78 <ee24_isConnected>
 8018c36:	4603      	mov	r3, r0
 8018c38:	2b00      	cmp	r3, #0
 8018c3a:	d01d      	beq.n	8018c78 <ee_setMqttUserID+0x54>
		if(!ee24_write(eeAddr_mqttUserID, str, len, 200)){
 8018c3c:	683a      	ldr	r2, [r7, #0]
 8018c3e:	23c8      	movs	r3, #200	; 0xc8
 8018c40:	6879      	ldr	r1, [r7, #4]
 8018c42:	2099      	movs	r0, #153	; 0x99
 8018c44:	f7fd ff32 	bl	8016aac <ee24_write>
 8018c48:	4603      	mov	r3, r0
 8018c4a:	f083 0301 	eor.w	r3, r3, #1
 8018c4e:	b2db      	uxtb	r3, r3
 8018c50:	2b00      	cmp	r3, #0
 8018c52:	d001      	beq.n	8018c58 <ee_setMqttUserID+0x34>
			return false;
 8018c54:	2300      	movs	r3, #0
 8018c56:	e010      	b.n	8018c7a <ee_setMqttUserID+0x56>
		}
		if(!ee24_write(eeAddr_mqttUserIDLen, setLen, 1, 200)){
 8018c58:	23c8      	movs	r3, #200	; 0xc8
 8018c5a:	2201      	movs	r2, #1
 8018c5c:	68f9      	ldr	r1, [r7, #12]
 8018c5e:	20ad      	movs	r0, #173	; 0xad
 8018c60:	f7fd ff24 	bl	8016aac <ee24_write>
 8018c64:	4603      	mov	r3, r0
 8018c66:	f083 0301 	eor.w	r3, r3, #1
 8018c6a:	b2db      	uxtb	r3, r3
 8018c6c:	2b00      	cmp	r3, #0
 8018c6e:	d001      	beq.n	8018c74 <ee_setMqttUserID+0x50>
			return false;
 8018c70:	2300      	movs	r3, #0
 8018c72:	e002      	b.n	8018c7a <ee_setMqttUserID+0x56>
		}
		return true;
 8018c74:	2301      	movs	r3, #1
 8018c76:	e000      	b.n	8018c7a <ee_setMqttUserID+0x56>
	}
	return false;
 8018c78:	2300      	movs	r3, #0
}
 8018c7a:	4618      	mov	r0, r3
 8018c7c:	3710      	adds	r7, #16
 8018c7e:	46bd      	mov	sp, r7
 8018c80:	bd80      	pop	{r7, pc}

08018c82 <ee_getMqttUserPassword>:

bool ee_getMqttUserPassword(char *str, size_t len){
 8018c82:	b580      	push	{r7, lr}
 8018c84:	b082      	sub	sp, #8
 8018c86:	af00      	add	r7, sp, #0
 8018c88:	6078      	str	r0, [r7, #4]
 8018c8a:	6039      	str	r1, [r7, #0]
	if(ee24_isConnected()){
 8018c8c:	f7fd fef4 	bl	8016a78 <ee24_isConnected>
 8018c90:	4603      	mov	r3, r0
 8018c92:	2b00      	cmp	r3, #0
 8018c94:	d00a      	beq.n	8018cac <ee_getMqttUserPassword+0x2a>
		if(ee24_read(eeAddr_mqttUserPassword, str, len, 200)){
 8018c96:	23c8      	movs	r3, #200	; 0xc8
 8018c98:	683a      	ldr	r2, [r7, #0]
 8018c9a:	6879      	ldr	r1, [r7, #4]
 8018c9c:	20ae      	movs	r0, #174	; 0xae
 8018c9e:	f7fd ff77 	bl	8016b90 <ee24_read>
 8018ca2:	4603      	mov	r3, r0
 8018ca4:	2b00      	cmp	r3, #0
 8018ca6:	d001      	beq.n	8018cac <ee_getMqttUserPassword+0x2a>
			return true;
 8018ca8:	2301      	movs	r3, #1
 8018caa:	e000      	b.n	8018cae <ee_getMqttUserPassword+0x2c>
		}
	}
	return false;
 8018cac:	2300      	movs	r3, #0
}
 8018cae:	4618      	mov	r0, r3
 8018cb0:	3708      	adds	r7, #8
 8018cb2:	46bd      	mov	sp, r7
 8018cb4:	bd80      	pop	{r7, pc}

08018cb6 <ee_getMqttUserPasswordLen>:

bool ee_getMqttUserPasswordLen(size_t *len){
 8018cb6:	b580      	push	{r7, lr}
 8018cb8:	b082      	sub	sp, #8
 8018cba:	af00      	add	r7, sp, #0
 8018cbc:	6078      	str	r0, [r7, #4]
	if(ee24_isConnected()){
 8018cbe:	f7fd fedb 	bl	8016a78 <ee24_isConnected>
 8018cc2:	4603      	mov	r3, r0
 8018cc4:	2b00      	cmp	r3, #0
 8018cc6:	d00a      	beq.n	8018cde <ee_getMqttUserPasswordLen+0x28>
		if(ee24_read(eeAddr_mqttUserPasswordLen, len, 1, 200)){
 8018cc8:	23c8      	movs	r3, #200	; 0xc8
 8018cca:	2201      	movs	r2, #1
 8018ccc:	6879      	ldr	r1, [r7, #4]
 8018cce:	20c2      	movs	r0, #194	; 0xc2
 8018cd0:	f7fd ff5e 	bl	8016b90 <ee24_read>
 8018cd4:	4603      	mov	r3, r0
 8018cd6:	2b00      	cmp	r3, #0
 8018cd8:	d001      	beq.n	8018cde <ee_getMqttUserPasswordLen+0x28>
			return true;
 8018cda:	2301      	movs	r3, #1
 8018cdc:	e000      	b.n	8018ce0 <ee_getMqttUserPasswordLen+0x2a>
		}
	}
	return false;
 8018cde:	2300      	movs	r3, #0
}
 8018ce0:	4618      	mov	r0, r3
 8018ce2:	3708      	adds	r7, #8
 8018ce4:	46bd      	mov	sp, r7
 8018ce6:	bd80      	pop	{r7, pc}

08018ce8 <ee_setMqttUserPassword>:

bool ee_setMqttUserPassword(char *str, size_t len){
 8018ce8:	b580      	push	{r7, lr}
 8018cea:	b084      	sub	sp, #16
 8018cec:	af00      	add	r7, sp, #0
 8018cee:	6078      	str	r0, [r7, #4]
 8018cf0:	6039      	str	r1, [r7, #0]
	size_t *setLen = &len;
 8018cf2:	463b      	mov	r3, r7
 8018cf4:	60fb      	str	r3, [r7, #12]
	if(ee24_isConnected()){
 8018cf6:	f7fd febf 	bl	8016a78 <ee24_isConnected>
 8018cfa:	4603      	mov	r3, r0
 8018cfc:	2b00      	cmp	r3, #0
 8018cfe:	d01d      	beq.n	8018d3c <ee_setMqttUserPassword+0x54>
		if(!ee24_write(eeAddr_mqttUserPassword, str, len, 200)){
 8018d00:	683a      	ldr	r2, [r7, #0]
 8018d02:	23c8      	movs	r3, #200	; 0xc8
 8018d04:	6879      	ldr	r1, [r7, #4]
 8018d06:	20ae      	movs	r0, #174	; 0xae
 8018d08:	f7fd fed0 	bl	8016aac <ee24_write>
 8018d0c:	4603      	mov	r3, r0
 8018d0e:	f083 0301 	eor.w	r3, r3, #1
 8018d12:	b2db      	uxtb	r3, r3
 8018d14:	2b00      	cmp	r3, #0
 8018d16:	d001      	beq.n	8018d1c <ee_setMqttUserPassword+0x34>
			return false;
 8018d18:	2300      	movs	r3, #0
 8018d1a:	e010      	b.n	8018d3e <ee_setMqttUserPassword+0x56>
		}
		if(!ee24_write(eeAddr_mqttUserPasswordLen, setLen, 1, 200)){
 8018d1c:	23c8      	movs	r3, #200	; 0xc8
 8018d1e:	2201      	movs	r2, #1
 8018d20:	68f9      	ldr	r1, [r7, #12]
 8018d22:	20c2      	movs	r0, #194	; 0xc2
 8018d24:	f7fd fec2 	bl	8016aac <ee24_write>
 8018d28:	4603      	mov	r3, r0
 8018d2a:	f083 0301 	eor.w	r3, r3, #1
 8018d2e:	b2db      	uxtb	r3, r3
 8018d30:	2b00      	cmp	r3, #0
 8018d32:	d001      	beq.n	8018d38 <ee_setMqttUserPassword+0x50>
			return false;
 8018d34:	2300      	movs	r3, #0
 8018d36:	e002      	b.n	8018d3e <ee_setMqttUserPassword+0x56>
		}
		return true;
 8018d38:	2301      	movs	r3, #1
 8018d3a:	e000      	b.n	8018d3e <ee_setMqttUserPassword+0x56>
	}
	return false;
 8018d3c:	2300      	movs	r3, #0
}
 8018d3e:	4618      	mov	r0, r3
 8018d40:	3710      	adds	r7, #16
 8018d42:	46bd      	mov	sp, r7
 8018d44:	bd80      	pop	{r7, pc}

08018d46 <ee_getTopicPublish1>:

bool ee_getTopicPublish1(char *str, size_t len){
 8018d46:	b580      	push	{r7, lr}
 8018d48:	b082      	sub	sp, #8
 8018d4a:	af00      	add	r7, sp, #0
 8018d4c:	6078      	str	r0, [r7, #4]
 8018d4e:	6039      	str	r1, [r7, #0]
	if(ee24_isConnected()){
 8018d50:	f7fd fe92 	bl	8016a78 <ee24_isConnected>
 8018d54:	4603      	mov	r3, r0
 8018d56:	2b00      	cmp	r3, #0
 8018d58:	d00a      	beq.n	8018d70 <ee_getTopicPublish1+0x2a>
		if(ee24_read(eeAddr_topicPublish_1, str, len, 200)){
 8018d5a:	23c8      	movs	r3, #200	; 0xc8
 8018d5c:	683a      	ldr	r2, [r7, #0]
 8018d5e:	6879      	ldr	r1, [r7, #4]
 8018d60:	20c3      	movs	r0, #195	; 0xc3
 8018d62:	f7fd ff15 	bl	8016b90 <ee24_read>
 8018d66:	4603      	mov	r3, r0
 8018d68:	2b00      	cmp	r3, #0
 8018d6a:	d001      	beq.n	8018d70 <ee_getTopicPublish1+0x2a>
			return true;
 8018d6c:	2301      	movs	r3, #1
 8018d6e:	e000      	b.n	8018d72 <ee_getTopicPublish1+0x2c>
		}
	}
	return false;
 8018d70:	2300      	movs	r3, #0
}
 8018d72:	4618      	mov	r0, r3
 8018d74:	3708      	adds	r7, #8
 8018d76:	46bd      	mov	sp, r7
 8018d78:	bd80      	pop	{r7, pc}

08018d7a <ee_getTopicPublish1Len>:

bool ee_getTopicPublish1Len(size_t *len){
 8018d7a:	b580      	push	{r7, lr}
 8018d7c:	b082      	sub	sp, #8
 8018d7e:	af00      	add	r7, sp, #0
 8018d80:	6078      	str	r0, [r7, #4]
	if(ee24_isConnected()){
 8018d82:	f7fd fe79 	bl	8016a78 <ee24_isConnected>
 8018d86:	4603      	mov	r3, r0
 8018d88:	2b00      	cmp	r3, #0
 8018d8a:	d00a      	beq.n	8018da2 <ee_getTopicPublish1Len+0x28>
		if(ee24_read(eeAddr_topicPublish_1_Len, len, 1, 200)){
 8018d8c:	23c8      	movs	r3, #200	; 0xc8
 8018d8e:	2201      	movs	r2, #1
 8018d90:	6879      	ldr	r1, [r7, #4]
 8018d92:	20f6      	movs	r0, #246	; 0xf6
 8018d94:	f7fd fefc 	bl	8016b90 <ee24_read>
 8018d98:	4603      	mov	r3, r0
 8018d9a:	2b00      	cmp	r3, #0
 8018d9c:	d001      	beq.n	8018da2 <ee_getTopicPublish1Len+0x28>
			return true;
 8018d9e:	2301      	movs	r3, #1
 8018da0:	e000      	b.n	8018da4 <ee_getTopicPublish1Len+0x2a>
		}
	}
	return false;
 8018da2:	2300      	movs	r3, #0
}
 8018da4:	4618      	mov	r0, r3
 8018da6:	3708      	adds	r7, #8
 8018da8:	46bd      	mov	sp, r7
 8018daa:	bd80      	pop	{r7, pc}

08018dac <ee_setTopicPublish1>:

bool ee_setTopicPublish1(char *str, size_t len){
 8018dac:	b580      	push	{r7, lr}
 8018dae:	b084      	sub	sp, #16
 8018db0:	af00      	add	r7, sp, #0
 8018db2:	6078      	str	r0, [r7, #4]
 8018db4:	6039      	str	r1, [r7, #0]
	size_t *setLen = &len;
 8018db6:	463b      	mov	r3, r7
 8018db8:	60fb      	str	r3, [r7, #12]
	if(ee24_isConnected()){
 8018dba:	f7fd fe5d 	bl	8016a78 <ee24_isConnected>
 8018dbe:	4603      	mov	r3, r0
 8018dc0:	2b00      	cmp	r3, #0
 8018dc2:	d01d      	beq.n	8018e00 <ee_setTopicPublish1+0x54>
		if(!ee24_write(eeAddr_topicPublish_1, str, len, 200)){
 8018dc4:	683a      	ldr	r2, [r7, #0]
 8018dc6:	23c8      	movs	r3, #200	; 0xc8
 8018dc8:	6879      	ldr	r1, [r7, #4]
 8018dca:	20c3      	movs	r0, #195	; 0xc3
 8018dcc:	f7fd fe6e 	bl	8016aac <ee24_write>
 8018dd0:	4603      	mov	r3, r0
 8018dd2:	f083 0301 	eor.w	r3, r3, #1
 8018dd6:	b2db      	uxtb	r3, r3
 8018dd8:	2b00      	cmp	r3, #0
 8018dda:	d001      	beq.n	8018de0 <ee_setTopicPublish1+0x34>
			return false;
 8018ddc:	2300      	movs	r3, #0
 8018dde:	e010      	b.n	8018e02 <ee_setTopicPublish1+0x56>
		}
		if(!ee24_write(eeAddr_topicPublish_1_Len, setLen, 1, 200)){
 8018de0:	23c8      	movs	r3, #200	; 0xc8
 8018de2:	2201      	movs	r2, #1
 8018de4:	68f9      	ldr	r1, [r7, #12]
 8018de6:	20f6      	movs	r0, #246	; 0xf6
 8018de8:	f7fd fe60 	bl	8016aac <ee24_write>
 8018dec:	4603      	mov	r3, r0
 8018dee:	f083 0301 	eor.w	r3, r3, #1
 8018df2:	b2db      	uxtb	r3, r3
 8018df4:	2b00      	cmp	r3, #0
 8018df6:	d001      	beq.n	8018dfc <ee_setTopicPublish1+0x50>
			return false;
 8018df8:	2300      	movs	r3, #0
 8018dfa:	e002      	b.n	8018e02 <ee_setTopicPublish1+0x56>
		}
		return true;
 8018dfc:	2301      	movs	r3, #1
 8018dfe:	e000      	b.n	8018e02 <ee_setTopicPublish1+0x56>
	}
	return false;
 8018e00:	2300      	movs	r3, #0
}
 8018e02:	4618      	mov	r0, r3
 8018e04:	3710      	adds	r7, #16
 8018e06:	46bd      	mov	sp, r7
 8018e08:	bd80      	pop	{r7, pc}

08018e0a <ee_getTopicSubscribe>:

bool ee_getTopicSubscribe(char *str, size_t len){
 8018e0a:	b580      	push	{r7, lr}
 8018e0c:	b082      	sub	sp, #8
 8018e0e:	af00      	add	r7, sp, #0
 8018e10:	6078      	str	r0, [r7, #4]
 8018e12:	6039      	str	r1, [r7, #0]
	if(ee24_isConnected()){
 8018e14:	f7fd fe30 	bl	8016a78 <ee24_isConnected>
 8018e18:	4603      	mov	r3, r0
 8018e1a:	2b00      	cmp	r3, #0
 8018e1c:	d00a      	beq.n	8018e34 <ee_getTopicSubscribe+0x2a>
		if(ee24_read(eeAddr_topicSubscribe, str, len, 200)){
 8018e1e:	23c8      	movs	r3, #200	; 0xc8
 8018e20:	683a      	ldr	r2, [r7, #0]
 8018e22:	6879      	ldr	r1, [r7, #4]
 8018e24:	20f7      	movs	r0, #247	; 0xf7
 8018e26:	f7fd feb3 	bl	8016b90 <ee24_read>
 8018e2a:	4603      	mov	r3, r0
 8018e2c:	2b00      	cmp	r3, #0
 8018e2e:	d001      	beq.n	8018e34 <ee_getTopicSubscribe+0x2a>
			return true;
 8018e30:	2301      	movs	r3, #1
 8018e32:	e000      	b.n	8018e36 <ee_getTopicSubscribe+0x2c>
		}
	}
	return false;
 8018e34:	2300      	movs	r3, #0
}
 8018e36:	4618      	mov	r0, r3
 8018e38:	3708      	adds	r7, #8
 8018e3a:	46bd      	mov	sp, r7
 8018e3c:	bd80      	pop	{r7, pc}

08018e3e <ee_getTopicSubscribeLen>:

bool ee_getTopicSubscribeLen(size_t *len){
 8018e3e:	b580      	push	{r7, lr}
 8018e40:	b082      	sub	sp, #8
 8018e42:	af00      	add	r7, sp, #0
 8018e44:	6078      	str	r0, [r7, #4]
	if(ee24_isConnected()){
 8018e46:	f7fd fe17 	bl	8016a78 <ee24_isConnected>
 8018e4a:	4603      	mov	r3, r0
 8018e4c:	2b00      	cmp	r3, #0
 8018e4e:	d00b      	beq.n	8018e68 <ee_getTopicSubscribeLen+0x2a>
		if(ee24_read(eeAddr_topicSubscribeLen, len, 1, 200)){
 8018e50:	23c8      	movs	r3, #200	; 0xc8
 8018e52:	2201      	movs	r2, #1
 8018e54:	6879      	ldr	r1, [r7, #4]
 8018e56:	f44f 7095 	mov.w	r0, #298	; 0x12a
 8018e5a:	f7fd fe99 	bl	8016b90 <ee24_read>
 8018e5e:	4603      	mov	r3, r0
 8018e60:	2b00      	cmp	r3, #0
 8018e62:	d001      	beq.n	8018e68 <ee_getTopicSubscribeLen+0x2a>
			return true;
 8018e64:	2301      	movs	r3, #1
 8018e66:	e000      	b.n	8018e6a <ee_getTopicSubscribeLen+0x2c>
		}
	}
	return false;
 8018e68:	2300      	movs	r3, #0
}
 8018e6a:	4618      	mov	r0, r3
 8018e6c:	3708      	adds	r7, #8
 8018e6e:	46bd      	mov	sp, r7
 8018e70:	bd80      	pop	{r7, pc}

08018e72 <ee_setTopicSubscribe>:

bool ee_setTopicSubscribe(char *str, size_t len){
 8018e72:	b580      	push	{r7, lr}
 8018e74:	b082      	sub	sp, #8
 8018e76:	af00      	add	r7, sp, #0
 8018e78:	6078      	str	r0, [r7, #4]
 8018e7a:	6039      	str	r1, [r7, #0]
//	size_t *setLen = &len;
	if(ee24_isConnected()){
 8018e7c:	f7fd fdfc 	bl	8016a78 <ee24_isConnected>
 8018e80:	4603      	mov	r3, r0
 8018e82:	2b00      	cmp	r3, #0
 8018e84:	d01e      	beq.n	8018ec4 <ee_setTopicSubscribe+0x52>
		if(!ee24_write(eeAddr_topicSubscribe, str, len, 200)){
 8018e86:	683a      	ldr	r2, [r7, #0]
 8018e88:	23c8      	movs	r3, #200	; 0xc8
 8018e8a:	6879      	ldr	r1, [r7, #4]
 8018e8c:	20f7      	movs	r0, #247	; 0xf7
 8018e8e:	f7fd fe0d 	bl	8016aac <ee24_write>
 8018e92:	4603      	mov	r3, r0
 8018e94:	f083 0301 	eor.w	r3, r3, #1
 8018e98:	b2db      	uxtb	r3, r3
 8018e9a:	2b00      	cmp	r3, #0
 8018e9c:	d001      	beq.n	8018ea2 <ee_setTopicSubscribe+0x30>
			return false;
 8018e9e:	2300      	movs	r3, #0
 8018ea0:	e011      	b.n	8018ec6 <ee_setTopicSubscribe+0x54>
		}
		if(!ee24_write(eeAddr_topicSubscribeLen, &len, 1, 200)){
 8018ea2:	4639      	mov	r1, r7
 8018ea4:	23c8      	movs	r3, #200	; 0xc8
 8018ea6:	2201      	movs	r2, #1
 8018ea8:	f44f 7095 	mov.w	r0, #298	; 0x12a
 8018eac:	f7fd fdfe 	bl	8016aac <ee24_write>
 8018eb0:	4603      	mov	r3, r0
 8018eb2:	f083 0301 	eor.w	r3, r3, #1
 8018eb6:	b2db      	uxtb	r3, r3
 8018eb8:	2b00      	cmp	r3, #0
 8018eba:	d001      	beq.n	8018ec0 <ee_setTopicSubscribe+0x4e>
			return false;
 8018ebc:	2300      	movs	r3, #0
 8018ebe:	e002      	b.n	8018ec6 <ee_setTopicSubscribe+0x54>
		}
		return true;
 8018ec0:	2301      	movs	r3, #1
 8018ec2:	e000      	b.n	8018ec6 <ee_setTopicSubscribe+0x54>
	}
	return false;
 8018ec4:	2300      	movs	r3, #0
}
 8018ec6:	4618      	mov	r0, r3
 8018ec8:	3708      	adds	r7, #8
 8018eca:	46bd      	mov	sp, r7
 8018ecc:	bd80      	pop	{r7, pc}

08018ece <ee_getMqttMsgFreq>:

bool ee_getMqttMsgFreq(uint32_t *freq){
 8018ece:	b580      	push	{r7, lr}
 8018ed0:	b082      	sub	sp, #8
 8018ed2:	af00      	add	r7, sp, #0
 8018ed4:	6078      	str	r0, [r7, #4]
	if(ee24_isConnected()){
 8018ed6:	f7fd fdcf 	bl	8016a78 <ee24_isConnected>
 8018eda:	4603      	mov	r3, r0
 8018edc:	2b00      	cmp	r3, #0
 8018ede:	d00b      	beq.n	8018ef8 <ee_getMqttMsgFreq+0x2a>
		if(ee24_read(eeAddr_mqttMsgFreq, freq, 4, 200)){
 8018ee0:	23c8      	movs	r3, #200	; 0xc8
 8018ee2:	2204      	movs	r2, #4
 8018ee4:	6879      	ldr	r1, [r7, #4]
 8018ee6:	f44f 70b6 	mov.w	r0, #364	; 0x16c
 8018eea:	f7fd fe51 	bl	8016b90 <ee24_read>
 8018eee:	4603      	mov	r3, r0
 8018ef0:	2b00      	cmp	r3, #0
 8018ef2:	d001      	beq.n	8018ef8 <ee_getMqttMsgFreq+0x2a>
			return true;
 8018ef4:	2301      	movs	r3, #1
 8018ef6:	e000      	b.n	8018efa <ee_getMqttMsgFreq+0x2c>
		}
	}
	return false;
 8018ef8:	2300      	movs	r3, #0
}
 8018efa:	4618      	mov	r0, r3
 8018efc:	3708      	adds	r7, #8
 8018efe:	46bd      	mov	sp, r7
 8018f00:	bd80      	pop	{r7, pc}

08018f02 <ee_setrecdcpStruct>:
		return true;
	}
	return false;
}

bool ee_setrecdcpStruct(recdCPointsTypedef *recdcp){
 8018f02:	b580      	push	{r7, lr}
 8018f04:	b082      	sub	sp, #8
 8018f06:	af00      	add	r7, sp, #0
 8018f08:	6078      	str	r0, [r7, #4]
	if(ee24_isConnected()){
 8018f0a:	f7fd fdb5 	bl	8016a78 <ee24_isConnected>
 8018f0e:	4603      	mov	r3, r0
 8018f10:	2b00      	cmp	r3, #0
 8018f12:	d011      	beq.n	8018f38 <ee_setrecdcpStruct+0x36>
		if(!ee24_write(eeAddr_recdConstPointStruct, (uint8_t*)recdcp, sizeof(recdCPointsTypedef), 500)){
 8018f14:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8018f18:	2210      	movs	r2, #16
 8018f1a:	6879      	ldr	r1, [r7, #4]
 8018f1c:	f240 10ab 	movw	r0, #427	; 0x1ab
 8018f20:	f7fd fdc4 	bl	8016aac <ee24_write>
 8018f24:	4603      	mov	r3, r0
 8018f26:	f083 0301 	eor.w	r3, r3, #1
 8018f2a:	b2db      	uxtb	r3, r3
 8018f2c:	2b00      	cmp	r3, #0
 8018f2e:	d001      	beq.n	8018f34 <ee_setrecdcpStruct+0x32>
			return false;
 8018f30:	2300      	movs	r3, #0
 8018f32:	e001      	b.n	8018f38 <ee_setrecdcpStruct+0x36>
		}
		return true;
 8018f34:	2301      	movs	r3, #1
 8018f36:	e7ff      	b.n	8018f38 <ee_setrecdcpStruct+0x36>
	}
}
 8018f38:	4618      	mov	r0, r3
 8018f3a:	3708      	adds	r7, #8
 8018f3c:	46bd      	mov	sp, r7
 8018f3e:	bd80      	pop	{r7, pc}

08018f40 <ee_getrecdcpStruct>:

bool ee_getrecdcpStruct(recdCPointsTypedef *recdcp){
 8018f40:	b580      	push	{r7, lr}
 8018f42:	b082      	sub	sp, #8
 8018f44:	af00      	add	r7, sp, #0
 8018f46:	6078      	str	r0, [r7, #4]
	if(ee24_isConnected()){
 8018f48:	f7fd fd96 	bl	8016a78 <ee24_isConnected>
 8018f4c:	4603      	mov	r3, r0
 8018f4e:	2b00      	cmp	r3, #0
 8018f50:	d00c      	beq.n	8018f6c <ee_getrecdcpStruct+0x2c>
		if(ee24_read(eeAddr_recdConstPointStruct, (uint8_t*)recdcp, sizeof(recdCPointsTypedef), 500)){
 8018f52:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8018f56:	2210      	movs	r2, #16
 8018f58:	6879      	ldr	r1, [r7, #4]
 8018f5a:	f240 10ab 	movw	r0, #427	; 0x1ab
 8018f5e:	f7fd fe17 	bl	8016b90 <ee24_read>
 8018f62:	4603      	mov	r3, r0
 8018f64:	2b00      	cmp	r3, #0
 8018f66:	d001      	beq.n	8018f6c <ee_getrecdcpStruct+0x2c>
			return true;
 8018f68:	2301      	movs	r3, #1
 8018f6a:	e000      	b.n	8018f6e <ee_getrecdcpStruct+0x2e>
		}
	}
	return false;
 8018f6c:	2300      	movs	r3, #0
}
 8018f6e:	4618      	mov	r0, r3
 8018f70:	3708      	adds	r7, #8
 8018f72:	46bd      	mov	sp, r7
 8018f74:	bd80      	pop	{r7, pc}

08018f76 <ee_getBLUpdateStatus>:

bool ee_getBLUpdateStatus(uint8_t* blust){
 8018f76:	b580      	push	{r7, lr}
 8018f78:	b082      	sub	sp, #8
 8018f7a:	af00      	add	r7, sp, #0
 8018f7c:	6078      	str	r0, [r7, #4]
	if(ee24_isConnected()){
 8018f7e:	f7fd fd7b 	bl	8016a78 <ee24_isConnected>
 8018f82:	4603      	mov	r3, r0
 8018f84:	2b00      	cmp	r3, #0
 8018f86:	d00a      	beq.n	8018f9e <ee_getBLUpdateStatus+0x28>
		if(ee24_read(eeAddr_blUpdateStatus, blust, 1, 200)){
 8018f88:	23c8      	movs	r3, #200	; 0xc8
 8018f8a:	2201      	movs	r2, #1
 8018f8c:	6879      	ldr	r1, [r7, #4]
 8018f8e:	2000      	movs	r0, #0
 8018f90:	f7fd fdfe 	bl	8016b90 <ee24_read>
 8018f94:	4603      	mov	r3, r0
 8018f96:	2b00      	cmp	r3, #0
 8018f98:	d001      	beq.n	8018f9e <ee_getBLUpdateStatus+0x28>
			return true;
 8018f9a:	2301      	movs	r3, #1
 8018f9c:	e000      	b.n	8018fa0 <ee_getBLUpdateStatus+0x2a>
		}
	}
	return false;
 8018f9e:	2300      	movs	r3, #0
}
 8018fa0:	4618      	mov	r0, r3
 8018fa2:	3708      	adds	r7, #8
 8018fa4:	46bd      	mov	sp, r7
 8018fa6:	bd80      	pop	{r7, pc}

08018fa8 <ee_setBLUpdateStatus>:

bool ee_setBLUpdateStatus(uint8_t blust){
 8018fa8:	b580      	push	{r7, lr}
 8018faa:	b082      	sub	sp, #8
 8018fac:	af00      	add	r7, sp, #0
 8018fae:	4603      	mov	r3, r0
 8018fb0:	71fb      	strb	r3, [r7, #7]
	if(ee24_isConnected()){
 8018fb2:	f7fd fd61 	bl	8016a78 <ee24_isConnected>
 8018fb6:	4603      	mov	r3, r0
 8018fb8:	2b00      	cmp	r3, #0
 8018fba:	d00b      	beq.n	8018fd4 <ee_setBLUpdateStatus+0x2c>
		if(ee24_write(eeAddr_blUpdateStatus, &blust, 1, 500)){
 8018fbc:	1df9      	adds	r1, r7, #7
 8018fbe:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8018fc2:	2201      	movs	r2, #1
 8018fc4:	2000      	movs	r0, #0
 8018fc6:	f7fd fd71 	bl	8016aac <ee24_write>
 8018fca:	4603      	mov	r3, r0
 8018fcc:	2b00      	cmp	r3, #0
 8018fce:	d001      	beq.n	8018fd4 <ee_setBLUpdateStatus+0x2c>
			return true;
 8018fd0:	2301      	movs	r3, #1
 8018fd2:	e000      	b.n	8018fd6 <ee_setBLUpdateStatus+0x2e>
		}
	}
	return false;
 8018fd4:	2300      	movs	r3, #0
}
 8018fd6:	4618      	mov	r0, r3
 8018fd8:	3708      	adds	r7, #8
 8018fda:	46bd      	mov	sp, r7
 8018fdc:	bd80      	pop	{r7, pc}

08018fde <ee_getBLFileNameLen>:

bool ee_getBLFileNameLen(uint8_t *len){
 8018fde:	b580      	push	{r7, lr}
 8018fe0:	b082      	sub	sp, #8
 8018fe2:	af00      	add	r7, sp, #0
 8018fe4:	6078      	str	r0, [r7, #4]
	if(ee24_isConnected()){
 8018fe6:	f7fd fd47 	bl	8016a78 <ee24_isConnected>
 8018fea:	4603      	mov	r3, r0
 8018fec:	2b00      	cmp	r3, #0
 8018fee:	d00a      	beq.n	8019006 <ee_getBLFileNameLen+0x28>
		if(ee24_read(eeAddr_blfileNameLen, len, 1, 200)){
 8018ff0:	23c8      	movs	r3, #200	; 0xc8
 8018ff2:	2201      	movs	r2, #1
 8018ff4:	6879      	ldr	r1, [r7, #4]
 8018ff6:	2015      	movs	r0, #21
 8018ff8:	f7fd fdca 	bl	8016b90 <ee24_read>
 8018ffc:	4603      	mov	r3, r0
 8018ffe:	2b00      	cmp	r3, #0
 8019000:	d001      	beq.n	8019006 <ee_getBLFileNameLen+0x28>
			return true;
 8019002:	2301      	movs	r3, #1
 8019004:	e000      	b.n	8019008 <ee_getBLFileNameLen+0x2a>
		}
	}
	return false;
 8019006:	2300      	movs	r3, #0
}
 8019008:	4618      	mov	r0, r3
 801900a:	3708      	adds	r7, #8
 801900c:	46bd      	mov	sp, r7
 801900e:	bd80      	pop	{r7, pc}

08019010 <ee_getBLFileName>:

bool ee_getBLFileName(char *str){
 8019010:	b580      	push	{r7, lr}
 8019012:	b084      	sub	sp, #16
 8019014:	af00      	add	r7, sp, #0
 8019016:	6078      	str	r0, [r7, #4]
	if(ee24_isConnected()){
 8019018:	f7fd fd2e 	bl	8016a78 <ee24_isConnected>
 801901c:	4603      	mov	r3, r0
 801901e:	2b00      	cmp	r3, #0
 8019020:	d015      	beq.n	801904e <ee_getBLFileName+0x3e>
		uint8_t flen = 0;
 8019022:	2300      	movs	r3, #0
 8019024:	73fb      	strb	r3, [r7, #15]
		if(ee_getBLFileNameLen(&flen)){
 8019026:	f107 030f 	add.w	r3, r7, #15
 801902a:	4618      	mov	r0, r3
 801902c:	f7ff ffd7 	bl	8018fde <ee_getBLFileNameLen>
 8019030:	4603      	mov	r3, r0
 8019032:	2b00      	cmp	r3, #0
 8019034:	d00b      	beq.n	801904e <ee_getBLFileName+0x3e>
			if(ee24_read(eeAddr_blFileName, str, flen, 200)){
 8019036:	7bfb      	ldrb	r3, [r7, #15]
 8019038:	461a      	mov	r2, r3
 801903a:	23c8      	movs	r3, #200	; 0xc8
 801903c:	6879      	ldr	r1, [r7, #4]
 801903e:	2001      	movs	r0, #1
 8019040:	f7fd fda6 	bl	8016b90 <ee24_read>
 8019044:	4603      	mov	r3, r0
 8019046:	2b00      	cmp	r3, #0
 8019048:	d001      	beq.n	801904e <ee_getBLFileName+0x3e>
				return true;
 801904a:	2301      	movs	r3, #1
 801904c:	e000      	b.n	8019050 <ee_getBLFileName+0x40>
			}
		}
	}
	return false;
 801904e:	2300      	movs	r3, #0
}
 8019050:	4618      	mov	r0, r3
 8019052:	3710      	adds	r7, #16
 8019054:	46bd      	mov	sp, r7
 8019056:	bd80      	pop	{r7, pc}

08019058 <ee_setBLFileName>:

bool ee_setBLFileName(char *str, size_t len){
 8019058:	b580      	push	{r7, lr}
 801905a:	b082      	sub	sp, #8
 801905c:	af00      	add	r7, sp, #0
 801905e:	6078      	str	r0, [r7, #4]
 8019060:	6039      	str	r1, [r7, #0]

	if(ee24_isConnected()){
 8019062:	f7fd fd09 	bl	8016a78 <ee24_isConnected>
 8019066:	4603      	mov	r3, r0
 8019068:	2b00      	cmp	r3, #0
 801906a:	d01d      	beq.n	80190a8 <ee_setBLFileName+0x50>
		if(!ee24_write(eeAddr_blFileName, str, len, 200)){
 801906c:	683a      	ldr	r2, [r7, #0]
 801906e:	23c8      	movs	r3, #200	; 0xc8
 8019070:	6879      	ldr	r1, [r7, #4]
 8019072:	2001      	movs	r0, #1
 8019074:	f7fd fd1a 	bl	8016aac <ee24_write>
 8019078:	4603      	mov	r3, r0
 801907a:	f083 0301 	eor.w	r3, r3, #1
 801907e:	b2db      	uxtb	r3, r3
 8019080:	2b00      	cmp	r3, #0
 8019082:	d001      	beq.n	8019088 <ee_setBLFileName+0x30>
			return false;
 8019084:	2300      	movs	r3, #0
 8019086:	e010      	b.n	80190aa <ee_setBLFileName+0x52>
		}
		if(!ee24_write(eeAddr_blfileNameLen, &len, 1, 200)){
 8019088:	4639      	mov	r1, r7
 801908a:	23c8      	movs	r3, #200	; 0xc8
 801908c:	2201      	movs	r2, #1
 801908e:	2015      	movs	r0, #21
 8019090:	f7fd fd0c 	bl	8016aac <ee24_write>
 8019094:	4603      	mov	r3, r0
 8019096:	f083 0301 	eor.w	r3, r3, #1
 801909a:	b2db      	uxtb	r3, r3
 801909c:	2b00      	cmp	r3, #0
 801909e:	d001      	beq.n	80190a4 <ee_setBLFileName+0x4c>
			return false;
 80190a0:	2300      	movs	r3, #0
 80190a2:	e002      	b.n	80190aa <ee_setBLFileName+0x52>
		}
		return true;
 80190a4:	2301      	movs	r3, #1
 80190a6:	e000      	b.n	80190aa <ee_setBLFileName+0x52>
	}
	return false;
 80190a8:	2300      	movs	r3, #0
}
 80190aa:	4618      	mov	r0, r3
 80190ac:	3708      	adds	r7, #8
 80190ae:	46bd      	mov	sp, r7
 80190b0:	bd80      	pop	{r7, pc}
	...

080190b4 <configIOTParameters>:


bool configIOTParameters(iotParam_Typedef *iot){
 80190b4:	b580      	push	{r7, lr}
 80190b6:	b090      	sub	sp, #64	; 0x40
 80190b8:	af00      	add	r7, sp, #0
 80190ba:	6078      	str	r0, [r7, #4]
	if (ee24_isConnected()) {
 80190bc:	f7fd fcdc 	bl	8016a78 <ee24_isConnected>
 80190c0:	4603      	mov	r3, r0
 80190c2:	2b00      	cmp	r3, #0
 80190c4:	d075      	beq.n	80191b2 <configIOTParameters+0xfe>
		ee_getDeviceIDLen(&(iot->DEVICE_ID_LEN));
 80190c6:	687b      	ldr	r3, [r7, #4]
 80190c8:	3332      	adds	r3, #50	; 0x32
 80190ca:	4618      	mov	r0, r3
 80190cc:	f7ff fc3a 	bl	8018944 <ee_getDeviceIDLen>
		ee_getMqttClientIDLen(&(iot->mqtt.CLIENT_ID_LEN));
 80190d0:	687b      	ldr	r3, [r7, #4]
 80190d2:	337f      	adds	r3, #127	; 0x7f
 80190d4:	4618      	mov	r0, r3
 80190d6:	f7ff fd2a 	bl	8018b2e <ee_getMqttClientIDLen>
		ee_getMqttUserIDLen(&(iot->mqtt.USER_ID_LEN));
 80190da:	687b      	ldr	r3, [r7, #4]
 80190dc:	3395      	adds	r3, #149	; 0x95
 80190de:	4618      	mov	r0, r3
 80190e0:	f7ff fd87 	bl	8018bf2 <ee_getMqttUserIDLen>
		ee_getMqttUserPasswordLen(&(iot->mqtt.USER_PASSWORD_LEN));
 80190e4:	687b      	ldr	r3, [r7, #4]
 80190e6:	33ab      	adds	r3, #171	; 0xab
 80190e8:	4618      	mov	r0, r3
 80190ea:	f7ff fde4 	bl	8018cb6 <ee_getMqttUserPasswordLen>
		ee_getBrokerAddressLen(&(iot->mqtt.BROKER_ADDRESS_LEN));
 80190ee:	687b      	ldr	r3, [r7, #4]
 80190f0:	3367      	adds	r3, #103	; 0x67
 80190f2:	4618      	mov	r0, r3
 80190f4:	f7ff fcb9 	bl	8018a6a <ee_getBrokerAddressLen>
		ee_getBrokerPort(&(iot->mqtt.brokerPort));
 80190f8:	687b      	ldr	r3, [r7, #4]
 80190fa:	3368      	adds	r3, #104	; 0x68
 80190fc:	4618      	mov	r0, r3
 80190fe:	f7ff fc67 	bl	80189d0 <ee_getBrokerPort>
		ee_getTopicPublish1Len(&(iot->mqtt.TOPIC_PUBLISH_LEN[0]));
 8019102:	687b      	ldr	r3, [r7, #4]
 8019104:	f203 13ab 	addw	r3, r3, #427	; 0x1ab
 8019108:	4618      	mov	r0, r3
 801910a:	f7ff fe36 	bl	8018d7a <ee_getTopicPublish1Len>
		ee_getTopicSubscribeLen(&(iot->mqtt.TOPIC_SUBSCRIBE_LEN));
 801910e:	687b      	ldr	r3, [r7, #4]
 8019110:	f203 13e3 	addw	r3, r3, #483	; 0x1e3
 8019114:	4618      	mov	r0, r3
 8019116:	f7ff fe92 	bl	8018e3e <ee_getTopicSubscribeLen>

		ee_getDeviceID(&(iot->deviceID), iot->DEVICE_ID_LEN);
 801911a:	687a      	ldr	r2, [r7, #4]
 801911c:	687b      	ldr	r3, [r7, #4]
 801911e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8019122:	4619      	mov	r1, r3
 8019124:	4610      	mov	r0, r2
 8019126:	f7ff fbf3 	bl	8018910 <ee_getDeviceID>
		ee_getMqttClientID(&(iot->mqtt.ClientID), iot->mqtt.CLIENT_ID_LEN);
 801912a:	687b      	ldr	r3, [r7, #4]
 801912c:	f103 026a 	add.w	r2, r3, #106	; 0x6a
 8019130:	687b      	ldr	r3, [r7, #4]
 8019132:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8019136:	4619      	mov	r1, r3
 8019138:	4610      	mov	r0, r2
 801913a:	f7ff fcde 	bl	8018afa <ee_getMqttClientID>
		ee_getMqttUserID(&(iot->mqtt.userID), iot->mqtt.USER_ID_LEN);
 801913e:	687b      	ldr	r3, [r7, #4]
 8019140:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8019144:	687b      	ldr	r3, [r7, #4]
 8019146:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 801914a:	4619      	mov	r1, r3
 801914c:	4610      	mov	r0, r2
 801914e:	f7ff fd36 	bl	8018bbe <ee_getMqttUserID>
		ee_getMqttUserPassword(&(iot->mqtt.userPassword), iot->mqtt.USER_PASSWORD_LEN);
 8019152:	687b      	ldr	r3, [r7, #4]
 8019154:	f103 0296 	add.w	r2, r3, #150	; 0x96
 8019158:	687b      	ldr	r3, [r7, #4]
 801915a:	f893 30ab 	ldrb.w	r3, [r3, #171]	; 0xab
 801915e:	4619      	mov	r1, r3
 8019160:	4610      	mov	r0, r2
 8019162:	f7ff fd8e 	bl	8018c82 <ee_getMqttUserPassword>
		ee_getBrokerAddress(&(iot->mqtt.BrokerAddress), iot->mqtt.BROKER_ADDRESS_LEN);
 8019166:	687b      	ldr	r3, [r7, #4]
 8019168:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801916c:	687b      	ldr	r3, [r7, #4]
 801916e:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 8019172:	4619      	mov	r1, r3
 8019174:	4610      	mov	r0, r2
 8019176:	f7ff fc5e 	bl	8018a36 <ee_getBrokerAddress>
		ee_getTopicPublish1(&(iot->mqtt.topicPublish[0]), iot->mqtt.TOPIC_PUBLISH_LEN[0]);
 801917a:	687b      	ldr	r3, [r7, #4]
 801917c:	f103 02ac 	add.w	r2, r3, #172	; 0xac
 8019180:	687b      	ldr	r3, [r7, #4]
 8019182:	f893 31ab 	ldrb.w	r3, [r3, #427]	; 0x1ab
 8019186:	4619      	mov	r1, r3
 8019188:	4610      	mov	r0, r2
 801918a:	f7ff fddc 	bl	8018d46 <ee_getTopicPublish1>
		ee_getTopicSubscribe(&(iot->mqtt.topicSubscribe), iot->mqtt.TOPIC_SUBSCRIBE_LEN);
 801918e:	687b      	ldr	r3, [r7, #4]
 8019190:	f503 72d8 	add.w	r2, r3, #432	; 0x1b0
 8019194:	687b      	ldr	r3, [r7, #4]
 8019196:	f893 31e3 	ldrb.w	r3, [r3, #483]	; 0x1e3
 801919a:	4619      	mov	r1, r3
 801919c:	4610      	mov	r0, r2
 801919e:	f7ff fe34 	bl	8018e0a <ee_getTopicSubscribe>
		ee_getMqttMsgFreq(&(iot->mqtt.messageFreq));
 80191a2:	687b      	ldr	r3, [r7, #4]
 80191a4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80191a8:	4618      	mov	r0, r3
 80191aa:	f7ff fe90 	bl	8018ece <ee_getMqttMsgFreq>

		return true;
 80191ae:	2301      	movs	r3, #1
 80191b0:	e079      	b.n	80192a6 <configIOTParameters+0x1f2>
	}
	else{
		iot->DEVICE_ID_LEN = 9;
 80191b2:	687b      	ldr	r3, [r7, #4]
 80191b4:	2209      	movs	r2, #9
 80191b6:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
		iot->mqtt.brokerPort = 15334;
 80191ba:	687b      	ldr	r3, [r7, #4]
 80191bc:	f643 32e6 	movw	r2, #15334	; 0x3be6
 80191c0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
		iot->mqtt.CLIENT_ID_LEN = 16;
 80191c4:	687b      	ldr	r3, [r7, #4]
 80191c6:	2210      	movs	r2, #16
 80191c8:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
		iot->mqtt.USER_ID_LEN = 9;
 80191cc:	687b      	ldr	r3, [r7, #4]
 80191ce:	2209      	movs	r2, #9
 80191d0:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
		iot->mqtt.USER_PASSWORD_LEN = 9;
 80191d4:	687b      	ldr	r3, [r7, #4]
 80191d6:	2209      	movs	r2, #9
 80191d8:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
		iot->mqtt.BROKER_ADDRESS_LEN = 35;
 80191dc:	687b      	ldr	r3, [r7, #4]
 80191de:	2223      	movs	r2, #35	; 0x23
 80191e0:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
		iot->mqtt.TOPIC_PUBLISH_LEN[0] = 8;
 80191e4:	687b      	ldr	r3, [r7, #4]
 80191e6:	2208      	movs	r2, #8
 80191e8:	f883 21ab 	strb.w	r2, [r3, #427]	; 0x1ab
		iot->mqtt.TOPIC_SUBSCRIBE_LEN = 7 + iot->DEVICE_ID_LEN + 1;
 80191ec:	687b      	ldr	r3, [r7, #4]
 80191ee:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80191f2:	3308      	adds	r3, #8
 80191f4:	b2da      	uxtb	r2, r3
 80191f6:	687b      	ldr	r3, [r7, #4]
 80191f8:	f883 21e3 	strb.w	r2, [r3, #483]	; 0x1e3

		snprintf(iot->deviceID, iot->DEVICE_ID_LEN, "Dummy-ID");
 80191fc:	6878      	ldr	r0, [r7, #4]
 80191fe:	687b      	ldr	r3, [r7, #4]
 8019200:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8019204:	4a2a      	ldr	r2, [pc, #168]	; (80192b0 <configIOTParameters+0x1fc>)
 8019206:	4619      	mov	r1, r3
 8019208:	f000 f8be 	bl	8019388 <sniprintf>
		snprintf(iot->mqtt.BrokerAddress, iot->mqtt.BROKER_ADDRESS_LEN, "o1707366.ap-southeast-1.emqx.cloud");
 801920c:	687b      	ldr	r3, [r7, #4]
 801920e:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8019212:	687b      	ldr	r3, [r7, #4]
 8019214:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 8019218:	4a26      	ldr	r2, [pc, #152]	; (80192b4 <configIOTParameters+0x200>)
 801921a:	4619      	mov	r1, r3
 801921c:	f000 f8b4 	bl	8019388 <sniprintf>
		snprintf(iot->mqtt.ClientID, iot->mqtt.CLIENT_ID_LEN, "cfe874tfhge4r39");
 8019220:	687b      	ldr	r3, [r7, #4]
 8019222:	f103 006a 	add.w	r0, r3, #106	; 0x6a
 8019226:	687b      	ldr	r3, [r7, #4]
 8019228:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 801922c:	4a22      	ldr	r2, [pc, #136]	; (80192b8 <configIOTParameters+0x204>)
 801922e:	4619      	mov	r1, r3
 8019230:	f000 f8aa 	bl	8019388 <sniprintf>
		snprintf(iot->mqtt.userID, iot->mqtt.USER_ID_LEN, "12345678");
 8019234:	687b      	ldr	r3, [r7, #4]
 8019236:	f103 0080 	add.w	r0, r3, #128	; 0x80
 801923a:	687b      	ldr	r3, [r7, #4]
 801923c:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8019240:	4a1e      	ldr	r2, [pc, #120]	; (80192bc <configIOTParameters+0x208>)
 8019242:	4619      	mov	r1, r3
 8019244:	f000 f8a0 	bl	8019388 <sniprintf>
		snprintf(iot->mqtt.userPassword, iot->mqtt.USER_PASSWORD_LEN, "12345678");
 8019248:	687b      	ldr	r3, [r7, #4]
 801924a:	f103 0096 	add.w	r0, r3, #150	; 0x96
 801924e:	687b      	ldr	r3, [r7, #4]
 8019250:	f893 30ab 	ldrb.w	r3, [r3, #171]	; 0xab
 8019254:	4a19      	ldr	r2, [pc, #100]	; (80192bc <configIOTParameters+0x208>)
 8019256:	4619      	mov	r1, r3
 8019258:	f000 f896 	bl	8019388 <sniprintf>
		char mbuf[50];
		snprintf(mbuf, iot->mqtt.TOPIC_SUBSCRIBE_LEN, "device/%s", iot->deviceID);
 801925c:	687b      	ldr	r3, [r7, #4]
 801925e:	f893 31e3 	ldrb.w	r3, [r3, #483]	; 0x1e3
 8019262:	4619      	mov	r1, r3
 8019264:	687b      	ldr	r3, [r7, #4]
 8019266:	f107 000c 	add.w	r0, r7, #12
 801926a:	4a15      	ldr	r2, [pc, #84]	; (80192c0 <configIOTParameters+0x20c>)
 801926c:	f000 f88c 	bl	8019388 <sniprintf>
		snprintf(iot->mqtt.topicSubscribe, iot->mqtt.TOPIC_SUBSCRIBE_LEN, mbuf);
 8019270:	687b      	ldr	r3, [r7, #4]
 8019272:	f503 70d8 	add.w	r0, r3, #432	; 0x1b0
 8019276:	687b      	ldr	r3, [r7, #4]
 8019278:	f893 31e3 	ldrb.w	r3, [r3, #483]	; 0x1e3
 801927c:	4619      	mov	r1, r3
 801927e:	f107 030c 	add.w	r3, r7, #12
 8019282:	461a      	mov	r2, r3
 8019284:	f000 f880 	bl	8019388 <sniprintf>
		snprintf(iot->mqtt.topicPublish[0], 8, "Testing");
 8019288:	687b      	ldr	r3, [r7, #4]
 801928a:	33ac      	adds	r3, #172	; 0xac
 801928c:	4a0d      	ldr	r2, [pc, #52]	; (80192c4 <configIOTParameters+0x210>)
 801928e:	2108      	movs	r1, #8
 8019290:	4618      	mov	r0, r3
 8019292:	f000 f879 	bl	8019388 <sniprintf>
		snprintf(iot->mqtt.topicPublish[1], 8, "recd");
 8019296:	687b      	ldr	r3, [r7, #4]
 8019298:	33df      	adds	r3, #223	; 0xdf
 801929a:	4a0b      	ldr	r2, [pc, #44]	; (80192c8 <configIOTParameters+0x214>)
 801929c:	2108      	movs	r1, #8
 801929e:	4618      	mov	r0, r3
 80192a0:	f000 f872 	bl	8019388 <sniprintf>

		return false;
 80192a4:	2300      	movs	r3, #0
	}
}
 80192a6:	4618      	mov	r0, r3
 80192a8:	3740      	adds	r7, #64	; 0x40
 80192aa:	46bd      	mov	sp, r7
 80192ac:	bd80      	pop	{r7, pc}
 80192ae:	bf00      	nop
 80192b0:	0801afe8 	.word	0x0801afe8
 80192b4:	0801aff4 	.word	0x0801aff4
 80192b8:	0801b018 	.word	0x0801b018
 80192bc:	0801b028 	.word	0x0801b028
 80192c0:	0801b034 	.word	0x0801b034
 80192c4:	0801b040 	.word	0x0801b040
 80192c8:	0801b048 	.word	0x0801b048

080192cc <configRECDConstantPointSets>:

bool configRECDConstantPointSets(recdCPointsTypedef* recdcps){
 80192cc:	b580      	push	{r7, lr}
 80192ce:	b082      	sub	sp, #8
 80192d0:	af00      	add	r7, sp, #0
 80192d2:	6078      	str	r0, [r7, #4]
	if (ee24_isConnected()) {
 80192d4:	f7fd fbd0 	bl	8016a78 <ee24_isConnected>
 80192d8:	4603      	mov	r3, r0
 80192da:	2b00      	cmp	r3, #0
 80192dc:	d004      	beq.n	80192e8 <configRECDConstantPointSets+0x1c>
		ee_getrecdcpStruct(recdcps);
 80192de:	6878      	ldr	r0, [r7, #4]
 80192e0:	f7ff fe2e 	bl	8018f40 <ee_getrecdcpStruct>
		return true;
 80192e4:	2301      	movs	r3, #1
 80192e6:	e04a      	b.n	801937e <configRECDConstantPointSets+0xb2>
	}
	else{
		recdcps->setPointP[0] = 10;
 80192e8:	687b      	ldr	r3, [r7, #4]
 80192ea:	220a      	movs	r2, #10
 80192ec:	801a      	strh	r2, [r3, #0]
		recdcps->setPointP[1] = 30;
 80192ee:	687b      	ldr	r3, [r7, #4]
 80192f0:	221e      	movs	r2, #30
 80192f2:	805a      	strh	r2, [r3, #2]
		recdcps->setPointP[2] = 40;
 80192f4:	687b      	ldr	r3, [r7, #4]
 80192f6:	2228      	movs	r2, #40	; 0x28
 80192f8:	809a      	strh	r2, [r3, #4]
		recdcps->setPointP[3] = 50;
 80192fa:	687b      	ldr	r3, [r7, #4]
 80192fc:	2232      	movs	r2, #50	; 0x32
 80192fe:	80da      	strh	r2, [r3, #6]
		recdcps->setPointP[4] = 60;
 8019300:	687b      	ldr	r3, [r7, #4]
 8019302:	223c      	movs	r2, #60	; 0x3c
 8019304:	811a      	strh	r2, [r3, #8]
		recdcps->setPointP[5] = 70;
 8019306:	687b      	ldr	r3, [r7, #4]
 8019308:	2246      	movs	r2, #70	; 0x46
 801930a:	815a      	strh	r2, [r3, #10]
		recdcps->setPointP[6] = 20;
 801930c:	687b      	ldr	r3, [r7, #4]
 801930e:	2214      	movs	r2, #20
 8019310:	819a      	strh	r2, [r3, #12]
		recdcps->setPointP[7] = 30;
 8019312:	687b      	ldr	r3, [r7, #4]
 8019314:	221e      	movs	r2, #30
 8019316:	81da      	strh	r2, [r3, #14]
		recdcps->setPointP[8] = 40;
 8019318:	687b      	ldr	r3, [r7, #4]
 801931a:	2228      	movs	r2, #40	; 0x28
 801931c:	821a      	strh	r2, [r3, #16]
		recdcps->setPointP[9] = 50;
 801931e:	687b      	ldr	r3, [r7, #4]
 8019320:	2232      	movs	r2, #50	; 0x32
 8019322:	825a      	strh	r2, [r3, #18]
		recdcps->setPointP[10] = 60;
 8019324:	687b      	ldr	r3, [r7, #4]
 8019326:	223c      	movs	r2, #60	; 0x3c
 8019328:	829a      	strh	r2, [r3, #20]
		recdcps->setPointP[11] = 70;
 801932a:	687b      	ldr	r3, [r7, #4]
 801932c:	2246      	movs	r2, #70	; 0x46
 801932e:	82da      	strh	r2, [r3, #22]

		recdcps->setPointT[0] = 100;
 8019330:	687b      	ldr	r3, [r7, #4]
 8019332:	2264      	movs	r2, #100	; 0x64
 8019334:	809a      	strh	r2, [r3, #4]
		recdcps->setPointT[1] = 200;
 8019336:	687b      	ldr	r3, [r7, #4]
 8019338:	22c8      	movs	r2, #200	; 0xc8
 801933a:	80da      	strh	r2, [r3, #6]
		recdcps->setPointT[2] = 300;
 801933c:	687b      	ldr	r3, [r7, #4]
 801933e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8019342:	811a      	strh	r2, [r3, #8]
		recdcps->setPointT[3] = 400;
 8019344:	687b      	ldr	r3, [r7, #4]
 8019346:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801934a:	815a      	strh	r2, [r3, #10]
		recdcps->setPointT[4] = 500;
 801934c:	687b      	ldr	r3, [r7, #4]
 801934e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8019352:	819a      	strh	r2, [r3, #12]
		recdcps->setPointT[5] = 600;
 8019354:	687b      	ldr	r3, [r7, #4]
 8019356:	f44f 7216 	mov.w	r2, #600	; 0x258
 801935a:	81da      	strh	r2, [r3, #14]
		recdcps->setPointT[6] = 700;
 801935c:	687b      	ldr	r3, [r7, #4]
 801935e:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8019362:	821a      	strh	r2, [r3, #16]

		recdcps->T_Amb = 80;
 8019364:	687b      	ldr	r3, [r7, #4]
 8019366:	2250      	movs	r2, #80	; 0x50
 8019368:	811a      	strh	r2, [r3, #8]
		recdcps->EB1 = 32;
 801936a:	687b      	ldr	r3, [r7, #4]
 801936c:	2220      	movs	r2, #32
 801936e:	815a      	strh	r2, [r3, #10]
		recdcps->SLNCR_BP = 3;
 8019370:	687b      	ldr	r3, [r7, #4]
 8019372:	2203      	movs	r2, #3
 8019374:	819a      	strh	r2, [r3, #12]
		recdcps->P_OEM = 67;
 8019376:	687b      	ldr	r3, [r7, #4]
 8019378:	2243      	movs	r2, #67	; 0x43
 801937a:	81da      	strh	r2, [r3, #14]
		return false;
 801937c:	2300      	movs	r3, #0
	}
}
 801937e:	4618      	mov	r0, r3
 8019380:	3708      	adds	r7, #8
 8019382:	46bd      	mov	sp, r7
 8019384:	bd80      	pop	{r7, pc}
	...

08019388 <sniprintf>:
 8019388:	b40c      	push	{r2, r3}
 801938a:	b530      	push	{r4, r5, lr}
 801938c:	4b17      	ldr	r3, [pc, #92]	; (80193ec <sniprintf+0x64>)
 801938e:	1e0c      	subs	r4, r1, #0
 8019390:	681d      	ldr	r5, [r3, #0]
 8019392:	b09d      	sub	sp, #116	; 0x74
 8019394:	da08      	bge.n	80193a8 <sniprintf+0x20>
 8019396:	238b      	movs	r3, #139	; 0x8b
 8019398:	602b      	str	r3, [r5, #0]
 801939a:	f04f 30ff 	mov.w	r0, #4294967295
 801939e:	b01d      	add	sp, #116	; 0x74
 80193a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80193a4:	b002      	add	sp, #8
 80193a6:	4770      	bx	lr
 80193a8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80193ac:	f8ad 3014 	strh.w	r3, [sp, #20]
 80193b0:	bf14      	ite	ne
 80193b2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80193b6:	4623      	moveq	r3, r4
 80193b8:	9304      	str	r3, [sp, #16]
 80193ba:	9307      	str	r3, [sp, #28]
 80193bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80193c0:	9002      	str	r0, [sp, #8]
 80193c2:	9006      	str	r0, [sp, #24]
 80193c4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80193c8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80193ca:	ab21      	add	r3, sp, #132	; 0x84
 80193cc:	a902      	add	r1, sp, #8
 80193ce:	4628      	mov	r0, r5
 80193d0:	9301      	str	r3, [sp, #4]
 80193d2:	f000 fa41 	bl	8019858 <_svfiprintf_r>
 80193d6:	1c43      	adds	r3, r0, #1
 80193d8:	bfbc      	itt	lt
 80193da:	238b      	movlt	r3, #139	; 0x8b
 80193dc:	602b      	strlt	r3, [r5, #0]
 80193de:	2c00      	cmp	r4, #0
 80193e0:	d0dd      	beq.n	801939e <sniprintf+0x16>
 80193e2:	9b02      	ldr	r3, [sp, #8]
 80193e4:	2200      	movs	r2, #0
 80193e6:	701a      	strb	r2, [r3, #0]
 80193e8:	e7d9      	b.n	801939e <sniprintf+0x16>
 80193ea:	bf00      	nop
 80193ec:	20000058 	.word	0x20000058

080193f0 <siprintf>:
 80193f0:	b40e      	push	{r1, r2, r3}
 80193f2:	b500      	push	{lr}
 80193f4:	b09c      	sub	sp, #112	; 0x70
 80193f6:	ab1d      	add	r3, sp, #116	; 0x74
 80193f8:	9002      	str	r0, [sp, #8]
 80193fa:	9006      	str	r0, [sp, #24]
 80193fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8019400:	4809      	ldr	r0, [pc, #36]	; (8019428 <siprintf+0x38>)
 8019402:	9107      	str	r1, [sp, #28]
 8019404:	9104      	str	r1, [sp, #16]
 8019406:	4909      	ldr	r1, [pc, #36]	; (801942c <siprintf+0x3c>)
 8019408:	f853 2b04 	ldr.w	r2, [r3], #4
 801940c:	9105      	str	r1, [sp, #20]
 801940e:	6800      	ldr	r0, [r0, #0]
 8019410:	9301      	str	r3, [sp, #4]
 8019412:	a902      	add	r1, sp, #8
 8019414:	f000 fa20 	bl	8019858 <_svfiprintf_r>
 8019418:	9b02      	ldr	r3, [sp, #8]
 801941a:	2200      	movs	r2, #0
 801941c:	701a      	strb	r2, [r3, #0]
 801941e:	b01c      	add	sp, #112	; 0x70
 8019420:	f85d eb04 	ldr.w	lr, [sp], #4
 8019424:	b003      	add	sp, #12
 8019426:	4770      	bx	lr
 8019428:	20000058 	.word	0x20000058
 801942c:	ffff0208 	.word	0xffff0208

08019430 <siscanf>:
 8019430:	b40e      	push	{r1, r2, r3}
 8019432:	b510      	push	{r4, lr}
 8019434:	b09f      	sub	sp, #124	; 0x7c
 8019436:	ac21      	add	r4, sp, #132	; 0x84
 8019438:	f44f 7101 	mov.w	r1, #516	; 0x204
 801943c:	f854 2b04 	ldr.w	r2, [r4], #4
 8019440:	9201      	str	r2, [sp, #4]
 8019442:	f8ad 101c 	strh.w	r1, [sp, #28]
 8019446:	9004      	str	r0, [sp, #16]
 8019448:	9008      	str	r0, [sp, #32]
 801944a:	f7f6 fed3 	bl	80101f4 <strlen>
 801944e:	4b0c      	ldr	r3, [pc, #48]	; (8019480 <siscanf+0x50>)
 8019450:	9005      	str	r0, [sp, #20]
 8019452:	9009      	str	r0, [sp, #36]	; 0x24
 8019454:	930d      	str	r3, [sp, #52]	; 0x34
 8019456:	480b      	ldr	r0, [pc, #44]	; (8019484 <siscanf+0x54>)
 8019458:	9a01      	ldr	r2, [sp, #4]
 801945a:	6800      	ldr	r0, [r0, #0]
 801945c:	9403      	str	r4, [sp, #12]
 801945e:	2300      	movs	r3, #0
 8019460:	9311      	str	r3, [sp, #68]	; 0x44
 8019462:	9316      	str	r3, [sp, #88]	; 0x58
 8019464:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019468:	f8ad 301e 	strh.w	r3, [sp, #30]
 801946c:	a904      	add	r1, sp, #16
 801946e:	4623      	mov	r3, r4
 8019470:	f000 fb4a 	bl	8019b08 <__ssvfiscanf_r>
 8019474:	b01f      	add	sp, #124	; 0x7c
 8019476:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801947a:	b003      	add	sp, #12
 801947c:	4770      	bx	lr
 801947e:	bf00      	nop
 8019480:	08019489 	.word	0x08019489
 8019484:	20000058 	.word	0x20000058

08019488 <__seofread>:
 8019488:	2000      	movs	r0, #0
 801948a:	4770      	bx	lr

0801948c <_vsniprintf_r>:
 801948c:	b530      	push	{r4, r5, lr}
 801948e:	4614      	mov	r4, r2
 8019490:	2c00      	cmp	r4, #0
 8019492:	b09b      	sub	sp, #108	; 0x6c
 8019494:	4605      	mov	r5, r0
 8019496:	461a      	mov	r2, r3
 8019498:	da05      	bge.n	80194a6 <_vsniprintf_r+0x1a>
 801949a:	238b      	movs	r3, #139	; 0x8b
 801949c:	6003      	str	r3, [r0, #0]
 801949e:	f04f 30ff 	mov.w	r0, #4294967295
 80194a2:	b01b      	add	sp, #108	; 0x6c
 80194a4:	bd30      	pop	{r4, r5, pc}
 80194a6:	f44f 7302 	mov.w	r3, #520	; 0x208
 80194aa:	f8ad 300c 	strh.w	r3, [sp, #12]
 80194ae:	bf14      	ite	ne
 80194b0:	f104 33ff 	addne.w	r3, r4, #4294967295
 80194b4:	4623      	moveq	r3, r4
 80194b6:	9302      	str	r3, [sp, #8]
 80194b8:	9305      	str	r3, [sp, #20]
 80194ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80194be:	9100      	str	r1, [sp, #0]
 80194c0:	9104      	str	r1, [sp, #16]
 80194c2:	f8ad 300e 	strh.w	r3, [sp, #14]
 80194c6:	4669      	mov	r1, sp
 80194c8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80194ca:	f000 f9c5 	bl	8019858 <_svfiprintf_r>
 80194ce:	1c43      	adds	r3, r0, #1
 80194d0:	bfbc      	itt	lt
 80194d2:	238b      	movlt	r3, #139	; 0x8b
 80194d4:	602b      	strlt	r3, [r5, #0]
 80194d6:	2c00      	cmp	r4, #0
 80194d8:	d0e3      	beq.n	80194a2 <_vsniprintf_r+0x16>
 80194da:	9b00      	ldr	r3, [sp, #0]
 80194dc:	2200      	movs	r2, #0
 80194de:	701a      	strb	r2, [r3, #0]
 80194e0:	e7df      	b.n	80194a2 <_vsniprintf_r+0x16>
	...

080194e4 <vsniprintf>:
 80194e4:	b507      	push	{r0, r1, r2, lr}
 80194e6:	9300      	str	r3, [sp, #0]
 80194e8:	4613      	mov	r3, r2
 80194ea:	460a      	mov	r2, r1
 80194ec:	4601      	mov	r1, r0
 80194ee:	4803      	ldr	r0, [pc, #12]	; (80194fc <vsniprintf+0x18>)
 80194f0:	6800      	ldr	r0, [r0, #0]
 80194f2:	f7ff ffcb 	bl	801948c <_vsniprintf_r>
 80194f6:	b003      	add	sp, #12
 80194f8:	f85d fb04 	ldr.w	pc, [sp], #4
 80194fc:	20000058 	.word	0x20000058

08019500 <memset>:
 8019500:	4402      	add	r2, r0
 8019502:	4603      	mov	r3, r0
 8019504:	4293      	cmp	r3, r2
 8019506:	d100      	bne.n	801950a <memset+0xa>
 8019508:	4770      	bx	lr
 801950a:	f803 1b01 	strb.w	r1, [r3], #1
 801950e:	e7f9      	b.n	8019504 <memset+0x4>

08019510 <strncmp>:
 8019510:	b510      	push	{r4, lr}
 8019512:	b16a      	cbz	r2, 8019530 <strncmp+0x20>
 8019514:	3901      	subs	r1, #1
 8019516:	1884      	adds	r4, r0, r2
 8019518:	f810 2b01 	ldrb.w	r2, [r0], #1
 801951c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8019520:	429a      	cmp	r2, r3
 8019522:	d103      	bne.n	801952c <strncmp+0x1c>
 8019524:	42a0      	cmp	r0, r4
 8019526:	d001      	beq.n	801952c <strncmp+0x1c>
 8019528:	2a00      	cmp	r2, #0
 801952a:	d1f5      	bne.n	8019518 <strncmp+0x8>
 801952c:	1ad0      	subs	r0, r2, r3
 801952e:	bd10      	pop	{r4, pc}
 8019530:	4610      	mov	r0, r2
 8019532:	e7fc      	b.n	801952e <strncmp+0x1e>

08019534 <strncpy>:
 8019534:	b510      	push	{r4, lr}
 8019536:	3901      	subs	r1, #1
 8019538:	4603      	mov	r3, r0
 801953a:	b132      	cbz	r2, 801954a <strncpy+0x16>
 801953c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8019540:	f803 4b01 	strb.w	r4, [r3], #1
 8019544:	3a01      	subs	r2, #1
 8019546:	2c00      	cmp	r4, #0
 8019548:	d1f7      	bne.n	801953a <strncpy+0x6>
 801954a:	441a      	add	r2, r3
 801954c:	2100      	movs	r1, #0
 801954e:	4293      	cmp	r3, r2
 8019550:	d100      	bne.n	8019554 <strncpy+0x20>
 8019552:	bd10      	pop	{r4, pc}
 8019554:	f803 1b01 	strb.w	r1, [r3], #1
 8019558:	e7f9      	b.n	801954e <strncpy+0x1a>
	...

0801955c <__errno>:
 801955c:	4b01      	ldr	r3, [pc, #4]	; (8019564 <__errno+0x8>)
 801955e:	6818      	ldr	r0, [r3, #0]
 8019560:	4770      	bx	lr
 8019562:	bf00      	nop
 8019564:	20000058 	.word	0x20000058

08019568 <__libc_init_array>:
 8019568:	b570      	push	{r4, r5, r6, lr}
 801956a:	4d0d      	ldr	r5, [pc, #52]	; (80195a0 <__libc_init_array+0x38>)
 801956c:	4c0d      	ldr	r4, [pc, #52]	; (80195a4 <__libc_init_array+0x3c>)
 801956e:	1b64      	subs	r4, r4, r5
 8019570:	10a4      	asrs	r4, r4, #2
 8019572:	2600      	movs	r6, #0
 8019574:	42a6      	cmp	r6, r4
 8019576:	d109      	bne.n	801958c <__libc_init_array+0x24>
 8019578:	4d0b      	ldr	r5, [pc, #44]	; (80195a8 <__libc_init_array+0x40>)
 801957a:	4c0c      	ldr	r4, [pc, #48]	; (80195ac <__libc_init_array+0x44>)
 801957c:	f001 f8f6 	bl	801a76c <_init>
 8019580:	1b64      	subs	r4, r4, r5
 8019582:	10a4      	asrs	r4, r4, #2
 8019584:	2600      	movs	r6, #0
 8019586:	42a6      	cmp	r6, r4
 8019588:	d105      	bne.n	8019596 <__libc_init_array+0x2e>
 801958a:	bd70      	pop	{r4, r5, r6, pc}
 801958c:	f855 3b04 	ldr.w	r3, [r5], #4
 8019590:	4798      	blx	r3
 8019592:	3601      	adds	r6, #1
 8019594:	e7ee      	b.n	8019574 <__libc_init_array+0xc>
 8019596:	f855 3b04 	ldr.w	r3, [r5], #4
 801959a:	4798      	blx	r3
 801959c:	3601      	adds	r6, #1
 801959e:	e7f2      	b.n	8019586 <__libc_init_array+0x1e>
 80195a0:	0801b1d4 	.word	0x0801b1d4
 80195a4:	0801b1d4 	.word	0x0801b1d4
 80195a8:	0801b1d4 	.word	0x0801b1d4
 80195ac:	0801b1d8 	.word	0x0801b1d8

080195b0 <__retarget_lock_acquire_recursive>:
 80195b0:	4770      	bx	lr

080195b2 <__retarget_lock_release_recursive>:
 80195b2:	4770      	bx	lr

080195b4 <_free_r>:
 80195b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80195b6:	2900      	cmp	r1, #0
 80195b8:	d044      	beq.n	8019644 <_free_r+0x90>
 80195ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80195be:	9001      	str	r0, [sp, #4]
 80195c0:	2b00      	cmp	r3, #0
 80195c2:	f1a1 0404 	sub.w	r4, r1, #4
 80195c6:	bfb8      	it	lt
 80195c8:	18e4      	addlt	r4, r4, r3
 80195ca:	f000 f8df 	bl	801978c <__malloc_lock>
 80195ce:	4a1e      	ldr	r2, [pc, #120]	; (8019648 <_free_r+0x94>)
 80195d0:	9801      	ldr	r0, [sp, #4]
 80195d2:	6813      	ldr	r3, [r2, #0]
 80195d4:	b933      	cbnz	r3, 80195e4 <_free_r+0x30>
 80195d6:	6063      	str	r3, [r4, #4]
 80195d8:	6014      	str	r4, [r2, #0]
 80195da:	b003      	add	sp, #12
 80195dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80195e0:	f000 b8da 	b.w	8019798 <__malloc_unlock>
 80195e4:	42a3      	cmp	r3, r4
 80195e6:	d908      	bls.n	80195fa <_free_r+0x46>
 80195e8:	6825      	ldr	r5, [r4, #0]
 80195ea:	1961      	adds	r1, r4, r5
 80195ec:	428b      	cmp	r3, r1
 80195ee:	bf01      	itttt	eq
 80195f0:	6819      	ldreq	r1, [r3, #0]
 80195f2:	685b      	ldreq	r3, [r3, #4]
 80195f4:	1949      	addeq	r1, r1, r5
 80195f6:	6021      	streq	r1, [r4, #0]
 80195f8:	e7ed      	b.n	80195d6 <_free_r+0x22>
 80195fa:	461a      	mov	r2, r3
 80195fc:	685b      	ldr	r3, [r3, #4]
 80195fe:	b10b      	cbz	r3, 8019604 <_free_r+0x50>
 8019600:	42a3      	cmp	r3, r4
 8019602:	d9fa      	bls.n	80195fa <_free_r+0x46>
 8019604:	6811      	ldr	r1, [r2, #0]
 8019606:	1855      	adds	r5, r2, r1
 8019608:	42a5      	cmp	r5, r4
 801960a:	d10b      	bne.n	8019624 <_free_r+0x70>
 801960c:	6824      	ldr	r4, [r4, #0]
 801960e:	4421      	add	r1, r4
 8019610:	1854      	adds	r4, r2, r1
 8019612:	42a3      	cmp	r3, r4
 8019614:	6011      	str	r1, [r2, #0]
 8019616:	d1e0      	bne.n	80195da <_free_r+0x26>
 8019618:	681c      	ldr	r4, [r3, #0]
 801961a:	685b      	ldr	r3, [r3, #4]
 801961c:	6053      	str	r3, [r2, #4]
 801961e:	440c      	add	r4, r1
 8019620:	6014      	str	r4, [r2, #0]
 8019622:	e7da      	b.n	80195da <_free_r+0x26>
 8019624:	d902      	bls.n	801962c <_free_r+0x78>
 8019626:	230c      	movs	r3, #12
 8019628:	6003      	str	r3, [r0, #0]
 801962a:	e7d6      	b.n	80195da <_free_r+0x26>
 801962c:	6825      	ldr	r5, [r4, #0]
 801962e:	1961      	adds	r1, r4, r5
 8019630:	428b      	cmp	r3, r1
 8019632:	bf04      	itt	eq
 8019634:	6819      	ldreq	r1, [r3, #0]
 8019636:	685b      	ldreq	r3, [r3, #4]
 8019638:	6063      	str	r3, [r4, #4]
 801963a:	bf04      	itt	eq
 801963c:	1949      	addeq	r1, r1, r5
 801963e:	6021      	streq	r1, [r4, #0]
 8019640:	6054      	str	r4, [r2, #4]
 8019642:	e7ca      	b.n	80195da <_free_r+0x26>
 8019644:	b003      	add	sp, #12
 8019646:	bd30      	pop	{r4, r5, pc}
 8019648:	200008f8 	.word	0x200008f8

0801964c <sbrk_aligned>:
 801964c:	b570      	push	{r4, r5, r6, lr}
 801964e:	4e0e      	ldr	r6, [pc, #56]	; (8019688 <sbrk_aligned+0x3c>)
 8019650:	460c      	mov	r4, r1
 8019652:	6831      	ldr	r1, [r6, #0]
 8019654:	4605      	mov	r5, r0
 8019656:	b911      	cbnz	r1, 801965e <sbrk_aligned+0x12>
 8019658:	f000 ff3a 	bl	801a4d0 <_sbrk_r>
 801965c:	6030      	str	r0, [r6, #0]
 801965e:	4621      	mov	r1, r4
 8019660:	4628      	mov	r0, r5
 8019662:	f000 ff35 	bl	801a4d0 <_sbrk_r>
 8019666:	1c43      	adds	r3, r0, #1
 8019668:	d00a      	beq.n	8019680 <sbrk_aligned+0x34>
 801966a:	1cc4      	adds	r4, r0, #3
 801966c:	f024 0403 	bic.w	r4, r4, #3
 8019670:	42a0      	cmp	r0, r4
 8019672:	d007      	beq.n	8019684 <sbrk_aligned+0x38>
 8019674:	1a21      	subs	r1, r4, r0
 8019676:	4628      	mov	r0, r5
 8019678:	f000 ff2a 	bl	801a4d0 <_sbrk_r>
 801967c:	3001      	adds	r0, #1
 801967e:	d101      	bne.n	8019684 <sbrk_aligned+0x38>
 8019680:	f04f 34ff 	mov.w	r4, #4294967295
 8019684:	4620      	mov	r0, r4
 8019686:	bd70      	pop	{r4, r5, r6, pc}
 8019688:	200008fc 	.word	0x200008fc

0801968c <_malloc_r>:
 801968c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019690:	1ccd      	adds	r5, r1, #3
 8019692:	f025 0503 	bic.w	r5, r5, #3
 8019696:	3508      	adds	r5, #8
 8019698:	2d0c      	cmp	r5, #12
 801969a:	bf38      	it	cc
 801969c:	250c      	movcc	r5, #12
 801969e:	2d00      	cmp	r5, #0
 80196a0:	4607      	mov	r7, r0
 80196a2:	db01      	blt.n	80196a8 <_malloc_r+0x1c>
 80196a4:	42a9      	cmp	r1, r5
 80196a6:	d905      	bls.n	80196b4 <_malloc_r+0x28>
 80196a8:	230c      	movs	r3, #12
 80196aa:	603b      	str	r3, [r7, #0]
 80196ac:	2600      	movs	r6, #0
 80196ae:	4630      	mov	r0, r6
 80196b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80196b4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8019788 <_malloc_r+0xfc>
 80196b8:	f000 f868 	bl	801978c <__malloc_lock>
 80196bc:	f8d8 3000 	ldr.w	r3, [r8]
 80196c0:	461c      	mov	r4, r3
 80196c2:	bb5c      	cbnz	r4, 801971c <_malloc_r+0x90>
 80196c4:	4629      	mov	r1, r5
 80196c6:	4638      	mov	r0, r7
 80196c8:	f7ff ffc0 	bl	801964c <sbrk_aligned>
 80196cc:	1c43      	adds	r3, r0, #1
 80196ce:	4604      	mov	r4, r0
 80196d0:	d155      	bne.n	801977e <_malloc_r+0xf2>
 80196d2:	f8d8 4000 	ldr.w	r4, [r8]
 80196d6:	4626      	mov	r6, r4
 80196d8:	2e00      	cmp	r6, #0
 80196da:	d145      	bne.n	8019768 <_malloc_r+0xdc>
 80196dc:	2c00      	cmp	r4, #0
 80196de:	d048      	beq.n	8019772 <_malloc_r+0xe6>
 80196e0:	6823      	ldr	r3, [r4, #0]
 80196e2:	4631      	mov	r1, r6
 80196e4:	4638      	mov	r0, r7
 80196e6:	eb04 0903 	add.w	r9, r4, r3
 80196ea:	f000 fef1 	bl	801a4d0 <_sbrk_r>
 80196ee:	4581      	cmp	r9, r0
 80196f0:	d13f      	bne.n	8019772 <_malloc_r+0xe6>
 80196f2:	6821      	ldr	r1, [r4, #0]
 80196f4:	1a6d      	subs	r5, r5, r1
 80196f6:	4629      	mov	r1, r5
 80196f8:	4638      	mov	r0, r7
 80196fa:	f7ff ffa7 	bl	801964c <sbrk_aligned>
 80196fe:	3001      	adds	r0, #1
 8019700:	d037      	beq.n	8019772 <_malloc_r+0xe6>
 8019702:	6823      	ldr	r3, [r4, #0]
 8019704:	442b      	add	r3, r5
 8019706:	6023      	str	r3, [r4, #0]
 8019708:	f8d8 3000 	ldr.w	r3, [r8]
 801970c:	2b00      	cmp	r3, #0
 801970e:	d038      	beq.n	8019782 <_malloc_r+0xf6>
 8019710:	685a      	ldr	r2, [r3, #4]
 8019712:	42a2      	cmp	r2, r4
 8019714:	d12b      	bne.n	801976e <_malloc_r+0xe2>
 8019716:	2200      	movs	r2, #0
 8019718:	605a      	str	r2, [r3, #4]
 801971a:	e00f      	b.n	801973c <_malloc_r+0xb0>
 801971c:	6822      	ldr	r2, [r4, #0]
 801971e:	1b52      	subs	r2, r2, r5
 8019720:	d41f      	bmi.n	8019762 <_malloc_r+0xd6>
 8019722:	2a0b      	cmp	r2, #11
 8019724:	d917      	bls.n	8019756 <_malloc_r+0xca>
 8019726:	1961      	adds	r1, r4, r5
 8019728:	42a3      	cmp	r3, r4
 801972a:	6025      	str	r5, [r4, #0]
 801972c:	bf18      	it	ne
 801972e:	6059      	strne	r1, [r3, #4]
 8019730:	6863      	ldr	r3, [r4, #4]
 8019732:	bf08      	it	eq
 8019734:	f8c8 1000 	streq.w	r1, [r8]
 8019738:	5162      	str	r2, [r4, r5]
 801973a:	604b      	str	r3, [r1, #4]
 801973c:	4638      	mov	r0, r7
 801973e:	f104 060b 	add.w	r6, r4, #11
 8019742:	f000 f829 	bl	8019798 <__malloc_unlock>
 8019746:	f026 0607 	bic.w	r6, r6, #7
 801974a:	1d23      	adds	r3, r4, #4
 801974c:	1af2      	subs	r2, r6, r3
 801974e:	d0ae      	beq.n	80196ae <_malloc_r+0x22>
 8019750:	1b9b      	subs	r3, r3, r6
 8019752:	50a3      	str	r3, [r4, r2]
 8019754:	e7ab      	b.n	80196ae <_malloc_r+0x22>
 8019756:	42a3      	cmp	r3, r4
 8019758:	6862      	ldr	r2, [r4, #4]
 801975a:	d1dd      	bne.n	8019718 <_malloc_r+0x8c>
 801975c:	f8c8 2000 	str.w	r2, [r8]
 8019760:	e7ec      	b.n	801973c <_malloc_r+0xb0>
 8019762:	4623      	mov	r3, r4
 8019764:	6864      	ldr	r4, [r4, #4]
 8019766:	e7ac      	b.n	80196c2 <_malloc_r+0x36>
 8019768:	4634      	mov	r4, r6
 801976a:	6876      	ldr	r6, [r6, #4]
 801976c:	e7b4      	b.n	80196d8 <_malloc_r+0x4c>
 801976e:	4613      	mov	r3, r2
 8019770:	e7cc      	b.n	801970c <_malloc_r+0x80>
 8019772:	230c      	movs	r3, #12
 8019774:	603b      	str	r3, [r7, #0]
 8019776:	4638      	mov	r0, r7
 8019778:	f000 f80e 	bl	8019798 <__malloc_unlock>
 801977c:	e797      	b.n	80196ae <_malloc_r+0x22>
 801977e:	6025      	str	r5, [r4, #0]
 8019780:	e7dc      	b.n	801973c <_malloc_r+0xb0>
 8019782:	605b      	str	r3, [r3, #4]
 8019784:	deff      	udf	#255	; 0xff
 8019786:	bf00      	nop
 8019788:	200008f8 	.word	0x200008f8

0801978c <__malloc_lock>:
 801978c:	4801      	ldr	r0, [pc, #4]	; (8019794 <__malloc_lock+0x8>)
 801978e:	f7ff bf0f 	b.w	80195b0 <__retarget_lock_acquire_recursive>
 8019792:	bf00      	nop
 8019794:	200008f4 	.word	0x200008f4

08019798 <__malloc_unlock>:
 8019798:	4801      	ldr	r0, [pc, #4]	; (80197a0 <__malloc_unlock+0x8>)
 801979a:	f7ff bf0a 	b.w	80195b2 <__retarget_lock_release_recursive>
 801979e:	bf00      	nop
 80197a0:	200008f4 	.word	0x200008f4

080197a4 <__ssputs_r>:
 80197a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80197a8:	688e      	ldr	r6, [r1, #8]
 80197aa:	461f      	mov	r7, r3
 80197ac:	42be      	cmp	r6, r7
 80197ae:	680b      	ldr	r3, [r1, #0]
 80197b0:	4682      	mov	sl, r0
 80197b2:	460c      	mov	r4, r1
 80197b4:	4690      	mov	r8, r2
 80197b6:	d82c      	bhi.n	8019812 <__ssputs_r+0x6e>
 80197b8:	898a      	ldrh	r2, [r1, #12]
 80197ba:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80197be:	d026      	beq.n	801980e <__ssputs_r+0x6a>
 80197c0:	6965      	ldr	r5, [r4, #20]
 80197c2:	6909      	ldr	r1, [r1, #16]
 80197c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80197c8:	eba3 0901 	sub.w	r9, r3, r1
 80197cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80197d0:	1c7b      	adds	r3, r7, #1
 80197d2:	444b      	add	r3, r9
 80197d4:	106d      	asrs	r5, r5, #1
 80197d6:	429d      	cmp	r5, r3
 80197d8:	bf38      	it	cc
 80197da:	461d      	movcc	r5, r3
 80197dc:	0553      	lsls	r3, r2, #21
 80197de:	d527      	bpl.n	8019830 <__ssputs_r+0x8c>
 80197e0:	4629      	mov	r1, r5
 80197e2:	f7ff ff53 	bl	801968c <_malloc_r>
 80197e6:	4606      	mov	r6, r0
 80197e8:	b360      	cbz	r0, 8019844 <__ssputs_r+0xa0>
 80197ea:	6921      	ldr	r1, [r4, #16]
 80197ec:	464a      	mov	r2, r9
 80197ee:	f000 fe7f 	bl	801a4f0 <memcpy>
 80197f2:	89a3      	ldrh	r3, [r4, #12]
 80197f4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80197f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80197fc:	81a3      	strh	r3, [r4, #12]
 80197fe:	6126      	str	r6, [r4, #16]
 8019800:	6165      	str	r5, [r4, #20]
 8019802:	444e      	add	r6, r9
 8019804:	eba5 0509 	sub.w	r5, r5, r9
 8019808:	6026      	str	r6, [r4, #0]
 801980a:	60a5      	str	r5, [r4, #8]
 801980c:	463e      	mov	r6, r7
 801980e:	42be      	cmp	r6, r7
 8019810:	d900      	bls.n	8019814 <__ssputs_r+0x70>
 8019812:	463e      	mov	r6, r7
 8019814:	6820      	ldr	r0, [r4, #0]
 8019816:	4632      	mov	r2, r6
 8019818:	4641      	mov	r1, r8
 801981a:	f000 fe3e 	bl	801a49a <memmove>
 801981e:	68a3      	ldr	r3, [r4, #8]
 8019820:	1b9b      	subs	r3, r3, r6
 8019822:	60a3      	str	r3, [r4, #8]
 8019824:	6823      	ldr	r3, [r4, #0]
 8019826:	4433      	add	r3, r6
 8019828:	6023      	str	r3, [r4, #0]
 801982a:	2000      	movs	r0, #0
 801982c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019830:	462a      	mov	r2, r5
 8019832:	f000 fe6b 	bl	801a50c <_realloc_r>
 8019836:	4606      	mov	r6, r0
 8019838:	2800      	cmp	r0, #0
 801983a:	d1e0      	bne.n	80197fe <__ssputs_r+0x5a>
 801983c:	6921      	ldr	r1, [r4, #16]
 801983e:	4650      	mov	r0, sl
 8019840:	f7ff feb8 	bl	80195b4 <_free_r>
 8019844:	230c      	movs	r3, #12
 8019846:	f8ca 3000 	str.w	r3, [sl]
 801984a:	89a3      	ldrh	r3, [r4, #12]
 801984c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019850:	81a3      	strh	r3, [r4, #12]
 8019852:	f04f 30ff 	mov.w	r0, #4294967295
 8019856:	e7e9      	b.n	801982c <__ssputs_r+0x88>

08019858 <_svfiprintf_r>:
 8019858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801985c:	4698      	mov	r8, r3
 801985e:	898b      	ldrh	r3, [r1, #12]
 8019860:	061b      	lsls	r3, r3, #24
 8019862:	b09d      	sub	sp, #116	; 0x74
 8019864:	4607      	mov	r7, r0
 8019866:	460d      	mov	r5, r1
 8019868:	4614      	mov	r4, r2
 801986a:	d50e      	bpl.n	801988a <_svfiprintf_r+0x32>
 801986c:	690b      	ldr	r3, [r1, #16]
 801986e:	b963      	cbnz	r3, 801988a <_svfiprintf_r+0x32>
 8019870:	2140      	movs	r1, #64	; 0x40
 8019872:	f7ff ff0b 	bl	801968c <_malloc_r>
 8019876:	6028      	str	r0, [r5, #0]
 8019878:	6128      	str	r0, [r5, #16]
 801987a:	b920      	cbnz	r0, 8019886 <_svfiprintf_r+0x2e>
 801987c:	230c      	movs	r3, #12
 801987e:	603b      	str	r3, [r7, #0]
 8019880:	f04f 30ff 	mov.w	r0, #4294967295
 8019884:	e0d0      	b.n	8019a28 <_svfiprintf_r+0x1d0>
 8019886:	2340      	movs	r3, #64	; 0x40
 8019888:	616b      	str	r3, [r5, #20]
 801988a:	2300      	movs	r3, #0
 801988c:	9309      	str	r3, [sp, #36]	; 0x24
 801988e:	2320      	movs	r3, #32
 8019890:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019894:	f8cd 800c 	str.w	r8, [sp, #12]
 8019898:	2330      	movs	r3, #48	; 0x30
 801989a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8019a40 <_svfiprintf_r+0x1e8>
 801989e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80198a2:	f04f 0901 	mov.w	r9, #1
 80198a6:	4623      	mov	r3, r4
 80198a8:	469a      	mov	sl, r3
 80198aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80198ae:	b10a      	cbz	r2, 80198b4 <_svfiprintf_r+0x5c>
 80198b0:	2a25      	cmp	r2, #37	; 0x25
 80198b2:	d1f9      	bne.n	80198a8 <_svfiprintf_r+0x50>
 80198b4:	ebba 0b04 	subs.w	fp, sl, r4
 80198b8:	d00b      	beq.n	80198d2 <_svfiprintf_r+0x7a>
 80198ba:	465b      	mov	r3, fp
 80198bc:	4622      	mov	r2, r4
 80198be:	4629      	mov	r1, r5
 80198c0:	4638      	mov	r0, r7
 80198c2:	f7ff ff6f 	bl	80197a4 <__ssputs_r>
 80198c6:	3001      	adds	r0, #1
 80198c8:	f000 80a9 	beq.w	8019a1e <_svfiprintf_r+0x1c6>
 80198cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80198ce:	445a      	add	r2, fp
 80198d0:	9209      	str	r2, [sp, #36]	; 0x24
 80198d2:	f89a 3000 	ldrb.w	r3, [sl]
 80198d6:	2b00      	cmp	r3, #0
 80198d8:	f000 80a1 	beq.w	8019a1e <_svfiprintf_r+0x1c6>
 80198dc:	2300      	movs	r3, #0
 80198de:	f04f 32ff 	mov.w	r2, #4294967295
 80198e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80198e6:	f10a 0a01 	add.w	sl, sl, #1
 80198ea:	9304      	str	r3, [sp, #16]
 80198ec:	9307      	str	r3, [sp, #28]
 80198ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80198f2:	931a      	str	r3, [sp, #104]	; 0x68
 80198f4:	4654      	mov	r4, sl
 80198f6:	2205      	movs	r2, #5
 80198f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80198fc:	4850      	ldr	r0, [pc, #320]	; (8019a40 <_svfiprintf_r+0x1e8>)
 80198fe:	f7f6 fc87 	bl	8010210 <memchr>
 8019902:	9a04      	ldr	r2, [sp, #16]
 8019904:	b9d8      	cbnz	r0, 801993e <_svfiprintf_r+0xe6>
 8019906:	06d0      	lsls	r0, r2, #27
 8019908:	bf44      	itt	mi
 801990a:	2320      	movmi	r3, #32
 801990c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019910:	0711      	lsls	r1, r2, #28
 8019912:	bf44      	itt	mi
 8019914:	232b      	movmi	r3, #43	; 0x2b
 8019916:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801991a:	f89a 3000 	ldrb.w	r3, [sl]
 801991e:	2b2a      	cmp	r3, #42	; 0x2a
 8019920:	d015      	beq.n	801994e <_svfiprintf_r+0xf6>
 8019922:	9a07      	ldr	r2, [sp, #28]
 8019924:	4654      	mov	r4, sl
 8019926:	2000      	movs	r0, #0
 8019928:	f04f 0c0a 	mov.w	ip, #10
 801992c:	4621      	mov	r1, r4
 801992e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019932:	3b30      	subs	r3, #48	; 0x30
 8019934:	2b09      	cmp	r3, #9
 8019936:	d94d      	bls.n	80199d4 <_svfiprintf_r+0x17c>
 8019938:	b1b0      	cbz	r0, 8019968 <_svfiprintf_r+0x110>
 801993a:	9207      	str	r2, [sp, #28]
 801993c:	e014      	b.n	8019968 <_svfiprintf_r+0x110>
 801993e:	eba0 0308 	sub.w	r3, r0, r8
 8019942:	fa09 f303 	lsl.w	r3, r9, r3
 8019946:	4313      	orrs	r3, r2
 8019948:	9304      	str	r3, [sp, #16]
 801994a:	46a2      	mov	sl, r4
 801994c:	e7d2      	b.n	80198f4 <_svfiprintf_r+0x9c>
 801994e:	9b03      	ldr	r3, [sp, #12]
 8019950:	1d19      	adds	r1, r3, #4
 8019952:	681b      	ldr	r3, [r3, #0]
 8019954:	9103      	str	r1, [sp, #12]
 8019956:	2b00      	cmp	r3, #0
 8019958:	bfbb      	ittet	lt
 801995a:	425b      	neglt	r3, r3
 801995c:	f042 0202 	orrlt.w	r2, r2, #2
 8019960:	9307      	strge	r3, [sp, #28]
 8019962:	9307      	strlt	r3, [sp, #28]
 8019964:	bfb8      	it	lt
 8019966:	9204      	strlt	r2, [sp, #16]
 8019968:	7823      	ldrb	r3, [r4, #0]
 801996a:	2b2e      	cmp	r3, #46	; 0x2e
 801996c:	d10c      	bne.n	8019988 <_svfiprintf_r+0x130>
 801996e:	7863      	ldrb	r3, [r4, #1]
 8019970:	2b2a      	cmp	r3, #42	; 0x2a
 8019972:	d134      	bne.n	80199de <_svfiprintf_r+0x186>
 8019974:	9b03      	ldr	r3, [sp, #12]
 8019976:	1d1a      	adds	r2, r3, #4
 8019978:	681b      	ldr	r3, [r3, #0]
 801997a:	9203      	str	r2, [sp, #12]
 801997c:	2b00      	cmp	r3, #0
 801997e:	bfb8      	it	lt
 8019980:	f04f 33ff 	movlt.w	r3, #4294967295
 8019984:	3402      	adds	r4, #2
 8019986:	9305      	str	r3, [sp, #20]
 8019988:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8019a50 <_svfiprintf_r+0x1f8>
 801998c:	7821      	ldrb	r1, [r4, #0]
 801998e:	2203      	movs	r2, #3
 8019990:	4650      	mov	r0, sl
 8019992:	f7f6 fc3d 	bl	8010210 <memchr>
 8019996:	b138      	cbz	r0, 80199a8 <_svfiprintf_r+0x150>
 8019998:	9b04      	ldr	r3, [sp, #16]
 801999a:	eba0 000a 	sub.w	r0, r0, sl
 801999e:	2240      	movs	r2, #64	; 0x40
 80199a0:	4082      	lsls	r2, r0
 80199a2:	4313      	orrs	r3, r2
 80199a4:	3401      	adds	r4, #1
 80199a6:	9304      	str	r3, [sp, #16]
 80199a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80199ac:	4825      	ldr	r0, [pc, #148]	; (8019a44 <_svfiprintf_r+0x1ec>)
 80199ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80199b2:	2206      	movs	r2, #6
 80199b4:	f7f6 fc2c 	bl	8010210 <memchr>
 80199b8:	2800      	cmp	r0, #0
 80199ba:	d038      	beq.n	8019a2e <_svfiprintf_r+0x1d6>
 80199bc:	4b22      	ldr	r3, [pc, #136]	; (8019a48 <_svfiprintf_r+0x1f0>)
 80199be:	bb1b      	cbnz	r3, 8019a08 <_svfiprintf_r+0x1b0>
 80199c0:	9b03      	ldr	r3, [sp, #12]
 80199c2:	3307      	adds	r3, #7
 80199c4:	f023 0307 	bic.w	r3, r3, #7
 80199c8:	3308      	adds	r3, #8
 80199ca:	9303      	str	r3, [sp, #12]
 80199cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80199ce:	4433      	add	r3, r6
 80199d0:	9309      	str	r3, [sp, #36]	; 0x24
 80199d2:	e768      	b.n	80198a6 <_svfiprintf_r+0x4e>
 80199d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80199d8:	460c      	mov	r4, r1
 80199da:	2001      	movs	r0, #1
 80199dc:	e7a6      	b.n	801992c <_svfiprintf_r+0xd4>
 80199de:	2300      	movs	r3, #0
 80199e0:	3401      	adds	r4, #1
 80199e2:	9305      	str	r3, [sp, #20]
 80199e4:	4619      	mov	r1, r3
 80199e6:	f04f 0c0a 	mov.w	ip, #10
 80199ea:	4620      	mov	r0, r4
 80199ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80199f0:	3a30      	subs	r2, #48	; 0x30
 80199f2:	2a09      	cmp	r2, #9
 80199f4:	d903      	bls.n	80199fe <_svfiprintf_r+0x1a6>
 80199f6:	2b00      	cmp	r3, #0
 80199f8:	d0c6      	beq.n	8019988 <_svfiprintf_r+0x130>
 80199fa:	9105      	str	r1, [sp, #20]
 80199fc:	e7c4      	b.n	8019988 <_svfiprintf_r+0x130>
 80199fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8019a02:	4604      	mov	r4, r0
 8019a04:	2301      	movs	r3, #1
 8019a06:	e7f0      	b.n	80199ea <_svfiprintf_r+0x192>
 8019a08:	ab03      	add	r3, sp, #12
 8019a0a:	9300      	str	r3, [sp, #0]
 8019a0c:	462a      	mov	r2, r5
 8019a0e:	4b0f      	ldr	r3, [pc, #60]	; (8019a4c <_svfiprintf_r+0x1f4>)
 8019a10:	a904      	add	r1, sp, #16
 8019a12:	4638      	mov	r0, r7
 8019a14:	f3af 8000 	nop.w
 8019a18:	1c42      	adds	r2, r0, #1
 8019a1a:	4606      	mov	r6, r0
 8019a1c:	d1d6      	bne.n	80199cc <_svfiprintf_r+0x174>
 8019a1e:	89ab      	ldrh	r3, [r5, #12]
 8019a20:	065b      	lsls	r3, r3, #25
 8019a22:	f53f af2d 	bmi.w	8019880 <_svfiprintf_r+0x28>
 8019a26:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019a28:	b01d      	add	sp, #116	; 0x74
 8019a2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019a2e:	ab03      	add	r3, sp, #12
 8019a30:	9300      	str	r3, [sp, #0]
 8019a32:	462a      	mov	r2, r5
 8019a34:	4b05      	ldr	r3, [pc, #20]	; (8019a4c <_svfiprintf_r+0x1f4>)
 8019a36:	a904      	add	r1, sp, #16
 8019a38:	4638      	mov	r0, r7
 8019a3a:	f000 fa4b 	bl	8019ed4 <_printf_i>
 8019a3e:	e7eb      	b.n	8019a18 <_svfiprintf_r+0x1c0>
 8019a40:	0801b07c 	.word	0x0801b07c
 8019a44:	0801b086 	.word	0x0801b086
 8019a48:	00000000 	.word	0x00000000
 8019a4c:	080197a5 	.word	0x080197a5
 8019a50:	0801b082 	.word	0x0801b082

08019a54 <_sungetc_r>:
 8019a54:	b538      	push	{r3, r4, r5, lr}
 8019a56:	1c4b      	adds	r3, r1, #1
 8019a58:	4614      	mov	r4, r2
 8019a5a:	d103      	bne.n	8019a64 <_sungetc_r+0x10>
 8019a5c:	f04f 35ff 	mov.w	r5, #4294967295
 8019a60:	4628      	mov	r0, r5
 8019a62:	bd38      	pop	{r3, r4, r5, pc}
 8019a64:	8993      	ldrh	r3, [r2, #12]
 8019a66:	f023 0320 	bic.w	r3, r3, #32
 8019a6a:	8193      	strh	r3, [r2, #12]
 8019a6c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019a6e:	6852      	ldr	r2, [r2, #4]
 8019a70:	b2cd      	uxtb	r5, r1
 8019a72:	b18b      	cbz	r3, 8019a98 <_sungetc_r+0x44>
 8019a74:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8019a76:	4293      	cmp	r3, r2
 8019a78:	dd08      	ble.n	8019a8c <_sungetc_r+0x38>
 8019a7a:	6823      	ldr	r3, [r4, #0]
 8019a7c:	1e5a      	subs	r2, r3, #1
 8019a7e:	6022      	str	r2, [r4, #0]
 8019a80:	f803 5c01 	strb.w	r5, [r3, #-1]
 8019a84:	6863      	ldr	r3, [r4, #4]
 8019a86:	3301      	adds	r3, #1
 8019a88:	6063      	str	r3, [r4, #4]
 8019a8a:	e7e9      	b.n	8019a60 <_sungetc_r+0xc>
 8019a8c:	4621      	mov	r1, r4
 8019a8e:	f000 fcca 	bl	801a426 <__submore>
 8019a92:	2800      	cmp	r0, #0
 8019a94:	d0f1      	beq.n	8019a7a <_sungetc_r+0x26>
 8019a96:	e7e1      	b.n	8019a5c <_sungetc_r+0x8>
 8019a98:	6921      	ldr	r1, [r4, #16]
 8019a9a:	6823      	ldr	r3, [r4, #0]
 8019a9c:	b151      	cbz	r1, 8019ab4 <_sungetc_r+0x60>
 8019a9e:	4299      	cmp	r1, r3
 8019aa0:	d208      	bcs.n	8019ab4 <_sungetc_r+0x60>
 8019aa2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8019aa6:	42a9      	cmp	r1, r5
 8019aa8:	d104      	bne.n	8019ab4 <_sungetc_r+0x60>
 8019aaa:	3b01      	subs	r3, #1
 8019aac:	3201      	adds	r2, #1
 8019aae:	6023      	str	r3, [r4, #0]
 8019ab0:	6062      	str	r2, [r4, #4]
 8019ab2:	e7d5      	b.n	8019a60 <_sungetc_r+0xc>
 8019ab4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8019ab8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019abc:	6363      	str	r3, [r4, #52]	; 0x34
 8019abe:	2303      	movs	r3, #3
 8019ac0:	63a3      	str	r3, [r4, #56]	; 0x38
 8019ac2:	4623      	mov	r3, r4
 8019ac4:	f803 5f46 	strb.w	r5, [r3, #70]!
 8019ac8:	6023      	str	r3, [r4, #0]
 8019aca:	2301      	movs	r3, #1
 8019acc:	e7dc      	b.n	8019a88 <_sungetc_r+0x34>

08019ace <__ssrefill_r>:
 8019ace:	b510      	push	{r4, lr}
 8019ad0:	460c      	mov	r4, r1
 8019ad2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8019ad4:	b169      	cbz	r1, 8019af2 <__ssrefill_r+0x24>
 8019ad6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019ada:	4299      	cmp	r1, r3
 8019adc:	d001      	beq.n	8019ae2 <__ssrefill_r+0x14>
 8019ade:	f7ff fd69 	bl	80195b4 <_free_r>
 8019ae2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019ae4:	6063      	str	r3, [r4, #4]
 8019ae6:	2000      	movs	r0, #0
 8019ae8:	6360      	str	r0, [r4, #52]	; 0x34
 8019aea:	b113      	cbz	r3, 8019af2 <__ssrefill_r+0x24>
 8019aec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8019aee:	6023      	str	r3, [r4, #0]
 8019af0:	bd10      	pop	{r4, pc}
 8019af2:	6923      	ldr	r3, [r4, #16]
 8019af4:	6023      	str	r3, [r4, #0]
 8019af6:	2300      	movs	r3, #0
 8019af8:	6063      	str	r3, [r4, #4]
 8019afa:	89a3      	ldrh	r3, [r4, #12]
 8019afc:	f043 0320 	orr.w	r3, r3, #32
 8019b00:	81a3      	strh	r3, [r4, #12]
 8019b02:	f04f 30ff 	mov.w	r0, #4294967295
 8019b06:	e7f3      	b.n	8019af0 <__ssrefill_r+0x22>

08019b08 <__ssvfiscanf_r>:
 8019b08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019b0c:	460c      	mov	r4, r1
 8019b0e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8019b12:	2100      	movs	r1, #0
 8019b14:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8019b18:	49a6      	ldr	r1, [pc, #664]	; (8019db4 <__ssvfiscanf_r+0x2ac>)
 8019b1a:	91a0      	str	r1, [sp, #640]	; 0x280
 8019b1c:	f10d 0804 	add.w	r8, sp, #4
 8019b20:	49a5      	ldr	r1, [pc, #660]	; (8019db8 <__ssvfiscanf_r+0x2b0>)
 8019b22:	4fa6      	ldr	r7, [pc, #664]	; (8019dbc <__ssvfiscanf_r+0x2b4>)
 8019b24:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8019dc0 <__ssvfiscanf_r+0x2b8>
 8019b28:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8019b2c:	4606      	mov	r6, r0
 8019b2e:	91a1      	str	r1, [sp, #644]	; 0x284
 8019b30:	9300      	str	r3, [sp, #0]
 8019b32:	7813      	ldrb	r3, [r2, #0]
 8019b34:	2b00      	cmp	r3, #0
 8019b36:	f000 815a 	beq.w	8019dee <__ssvfiscanf_r+0x2e6>
 8019b3a:	5cf9      	ldrb	r1, [r7, r3]
 8019b3c:	f011 0108 	ands.w	r1, r1, #8
 8019b40:	f102 0501 	add.w	r5, r2, #1
 8019b44:	d019      	beq.n	8019b7a <__ssvfiscanf_r+0x72>
 8019b46:	6863      	ldr	r3, [r4, #4]
 8019b48:	2b00      	cmp	r3, #0
 8019b4a:	dd0f      	ble.n	8019b6c <__ssvfiscanf_r+0x64>
 8019b4c:	6823      	ldr	r3, [r4, #0]
 8019b4e:	781a      	ldrb	r2, [r3, #0]
 8019b50:	5cba      	ldrb	r2, [r7, r2]
 8019b52:	0712      	lsls	r2, r2, #28
 8019b54:	d401      	bmi.n	8019b5a <__ssvfiscanf_r+0x52>
 8019b56:	462a      	mov	r2, r5
 8019b58:	e7eb      	b.n	8019b32 <__ssvfiscanf_r+0x2a>
 8019b5a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8019b5c:	3201      	adds	r2, #1
 8019b5e:	9245      	str	r2, [sp, #276]	; 0x114
 8019b60:	6862      	ldr	r2, [r4, #4]
 8019b62:	3301      	adds	r3, #1
 8019b64:	3a01      	subs	r2, #1
 8019b66:	6062      	str	r2, [r4, #4]
 8019b68:	6023      	str	r3, [r4, #0]
 8019b6a:	e7ec      	b.n	8019b46 <__ssvfiscanf_r+0x3e>
 8019b6c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8019b6e:	4621      	mov	r1, r4
 8019b70:	4630      	mov	r0, r6
 8019b72:	4798      	blx	r3
 8019b74:	2800      	cmp	r0, #0
 8019b76:	d0e9      	beq.n	8019b4c <__ssvfiscanf_r+0x44>
 8019b78:	e7ed      	b.n	8019b56 <__ssvfiscanf_r+0x4e>
 8019b7a:	2b25      	cmp	r3, #37	; 0x25
 8019b7c:	d012      	beq.n	8019ba4 <__ssvfiscanf_r+0x9c>
 8019b7e:	469a      	mov	sl, r3
 8019b80:	6863      	ldr	r3, [r4, #4]
 8019b82:	2b00      	cmp	r3, #0
 8019b84:	f340 8091 	ble.w	8019caa <__ssvfiscanf_r+0x1a2>
 8019b88:	6822      	ldr	r2, [r4, #0]
 8019b8a:	7813      	ldrb	r3, [r2, #0]
 8019b8c:	4553      	cmp	r3, sl
 8019b8e:	f040 812e 	bne.w	8019dee <__ssvfiscanf_r+0x2e6>
 8019b92:	6863      	ldr	r3, [r4, #4]
 8019b94:	3b01      	subs	r3, #1
 8019b96:	6063      	str	r3, [r4, #4]
 8019b98:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8019b9a:	3201      	adds	r2, #1
 8019b9c:	3301      	adds	r3, #1
 8019b9e:	6022      	str	r2, [r4, #0]
 8019ba0:	9345      	str	r3, [sp, #276]	; 0x114
 8019ba2:	e7d8      	b.n	8019b56 <__ssvfiscanf_r+0x4e>
 8019ba4:	9141      	str	r1, [sp, #260]	; 0x104
 8019ba6:	9143      	str	r1, [sp, #268]	; 0x10c
 8019ba8:	7853      	ldrb	r3, [r2, #1]
 8019baa:	2b2a      	cmp	r3, #42	; 0x2a
 8019bac:	bf02      	ittt	eq
 8019bae:	2310      	moveq	r3, #16
 8019bb0:	1c95      	addeq	r5, r2, #2
 8019bb2:	9341      	streq	r3, [sp, #260]	; 0x104
 8019bb4:	220a      	movs	r2, #10
 8019bb6:	46aa      	mov	sl, r5
 8019bb8:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8019bbc:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8019bc0:	2b09      	cmp	r3, #9
 8019bc2:	d91c      	bls.n	8019bfe <__ssvfiscanf_r+0xf6>
 8019bc4:	487e      	ldr	r0, [pc, #504]	; (8019dc0 <__ssvfiscanf_r+0x2b8>)
 8019bc6:	2203      	movs	r2, #3
 8019bc8:	f7f6 fb22 	bl	8010210 <memchr>
 8019bcc:	b138      	cbz	r0, 8019bde <__ssvfiscanf_r+0xd6>
 8019bce:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8019bd0:	eba0 0009 	sub.w	r0, r0, r9
 8019bd4:	2301      	movs	r3, #1
 8019bd6:	4083      	lsls	r3, r0
 8019bd8:	4313      	orrs	r3, r2
 8019bda:	9341      	str	r3, [sp, #260]	; 0x104
 8019bdc:	4655      	mov	r5, sl
 8019bde:	f815 3b01 	ldrb.w	r3, [r5], #1
 8019be2:	2b78      	cmp	r3, #120	; 0x78
 8019be4:	d806      	bhi.n	8019bf4 <__ssvfiscanf_r+0xec>
 8019be6:	2b57      	cmp	r3, #87	; 0x57
 8019be8:	d810      	bhi.n	8019c0c <__ssvfiscanf_r+0x104>
 8019bea:	2b25      	cmp	r3, #37	; 0x25
 8019bec:	d0c7      	beq.n	8019b7e <__ssvfiscanf_r+0x76>
 8019bee:	d857      	bhi.n	8019ca0 <__ssvfiscanf_r+0x198>
 8019bf0:	2b00      	cmp	r3, #0
 8019bf2:	d065      	beq.n	8019cc0 <__ssvfiscanf_r+0x1b8>
 8019bf4:	2303      	movs	r3, #3
 8019bf6:	9347      	str	r3, [sp, #284]	; 0x11c
 8019bf8:	230a      	movs	r3, #10
 8019bfa:	9342      	str	r3, [sp, #264]	; 0x108
 8019bfc:	e076      	b.n	8019cec <__ssvfiscanf_r+0x1e4>
 8019bfe:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8019c00:	fb02 1103 	mla	r1, r2, r3, r1
 8019c04:	3930      	subs	r1, #48	; 0x30
 8019c06:	9143      	str	r1, [sp, #268]	; 0x10c
 8019c08:	4655      	mov	r5, sl
 8019c0a:	e7d4      	b.n	8019bb6 <__ssvfiscanf_r+0xae>
 8019c0c:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8019c10:	2a20      	cmp	r2, #32
 8019c12:	d8ef      	bhi.n	8019bf4 <__ssvfiscanf_r+0xec>
 8019c14:	a101      	add	r1, pc, #4	; (adr r1, 8019c1c <__ssvfiscanf_r+0x114>)
 8019c16:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8019c1a:	bf00      	nop
 8019c1c:	08019ccf 	.word	0x08019ccf
 8019c20:	08019bf5 	.word	0x08019bf5
 8019c24:	08019bf5 	.word	0x08019bf5
 8019c28:	08019d2d 	.word	0x08019d2d
 8019c2c:	08019bf5 	.word	0x08019bf5
 8019c30:	08019bf5 	.word	0x08019bf5
 8019c34:	08019bf5 	.word	0x08019bf5
 8019c38:	08019bf5 	.word	0x08019bf5
 8019c3c:	08019bf5 	.word	0x08019bf5
 8019c40:	08019bf5 	.word	0x08019bf5
 8019c44:	08019bf5 	.word	0x08019bf5
 8019c48:	08019d43 	.word	0x08019d43
 8019c4c:	08019d29 	.word	0x08019d29
 8019c50:	08019ca7 	.word	0x08019ca7
 8019c54:	08019ca7 	.word	0x08019ca7
 8019c58:	08019ca7 	.word	0x08019ca7
 8019c5c:	08019bf5 	.word	0x08019bf5
 8019c60:	08019ce5 	.word	0x08019ce5
 8019c64:	08019bf5 	.word	0x08019bf5
 8019c68:	08019bf5 	.word	0x08019bf5
 8019c6c:	08019bf5 	.word	0x08019bf5
 8019c70:	08019bf5 	.word	0x08019bf5
 8019c74:	08019d53 	.word	0x08019d53
 8019c78:	08019d21 	.word	0x08019d21
 8019c7c:	08019cc7 	.word	0x08019cc7
 8019c80:	08019bf5 	.word	0x08019bf5
 8019c84:	08019bf5 	.word	0x08019bf5
 8019c88:	08019d4f 	.word	0x08019d4f
 8019c8c:	08019bf5 	.word	0x08019bf5
 8019c90:	08019d29 	.word	0x08019d29
 8019c94:	08019bf5 	.word	0x08019bf5
 8019c98:	08019bf5 	.word	0x08019bf5
 8019c9c:	08019ccf 	.word	0x08019ccf
 8019ca0:	3b45      	subs	r3, #69	; 0x45
 8019ca2:	2b02      	cmp	r3, #2
 8019ca4:	d8a6      	bhi.n	8019bf4 <__ssvfiscanf_r+0xec>
 8019ca6:	2305      	movs	r3, #5
 8019ca8:	e01f      	b.n	8019cea <__ssvfiscanf_r+0x1e2>
 8019caa:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8019cac:	4621      	mov	r1, r4
 8019cae:	4630      	mov	r0, r6
 8019cb0:	4798      	blx	r3
 8019cb2:	2800      	cmp	r0, #0
 8019cb4:	f43f af68 	beq.w	8019b88 <__ssvfiscanf_r+0x80>
 8019cb8:	9844      	ldr	r0, [sp, #272]	; 0x110
 8019cba:	2800      	cmp	r0, #0
 8019cbc:	f040 808d 	bne.w	8019dda <__ssvfiscanf_r+0x2d2>
 8019cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8019cc4:	e08f      	b.n	8019de6 <__ssvfiscanf_r+0x2de>
 8019cc6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8019cc8:	f042 0220 	orr.w	r2, r2, #32
 8019ccc:	9241      	str	r2, [sp, #260]	; 0x104
 8019cce:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8019cd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8019cd4:	9241      	str	r2, [sp, #260]	; 0x104
 8019cd6:	2210      	movs	r2, #16
 8019cd8:	2b6f      	cmp	r3, #111	; 0x6f
 8019cda:	9242      	str	r2, [sp, #264]	; 0x108
 8019cdc:	bf34      	ite	cc
 8019cde:	2303      	movcc	r3, #3
 8019ce0:	2304      	movcs	r3, #4
 8019ce2:	e002      	b.n	8019cea <__ssvfiscanf_r+0x1e2>
 8019ce4:	2300      	movs	r3, #0
 8019ce6:	9342      	str	r3, [sp, #264]	; 0x108
 8019ce8:	2303      	movs	r3, #3
 8019cea:	9347      	str	r3, [sp, #284]	; 0x11c
 8019cec:	6863      	ldr	r3, [r4, #4]
 8019cee:	2b00      	cmp	r3, #0
 8019cf0:	dd3d      	ble.n	8019d6e <__ssvfiscanf_r+0x266>
 8019cf2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8019cf4:	0659      	lsls	r1, r3, #25
 8019cf6:	d404      	bmi.n	8019d02 <__ssvfiscanf_r+0x1fa>
 8019cf8:	6823      	ldr	r3, [r4, #0]
 8019cfa:	781a      	ldrb	r2, [r3, #0]
 8019cfc:	5cba      	ldrb	r2, [r7, r2]
 8019cfe:	0712      	lsls	r2, r2, #28
 8019d00:	d43c      	bmi.n	8019d7c <__ssvfiscanf_r+0x274>
 8019d02:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8019d04:	2b02      	cmp	r3, #2
 8019d06:	dc4b      	bgt.n	8019da0 <__ssvfiscanf_r+0x298>
 8019d08:	466b      	mov	r3, sp
 8019d0a:	4622      	mov	r2, r4
 8019d0c:	a941      	add	r1, sp, #260	; 0x104
 8019d0e:	4630      	mov	r0, r6
 8019d10:	f000 fa02 	bl	801a118 <_scanf_chars>
 8019d14:	2801      	cmp	r0, #1
 8019d16:	d06a      	beq.n	8019dee <__ssvfiscanf_r+0x2e6>
 8019d18:	2802      	cmp	r0, #2
 8019d1a:	f47f af1c 	bne.w	8019b56 <__ssvfiscanf_r+0x4e>
 8019d1e:	e7cb      	b.n	8019cb8 <__ssvfiscanf_r+0x1b0>
 8019d20:	2308      	movs	r3, #8
 8019d22:	9342      	str	r3, [sp, #264]	; 0x108
 8019d24:	2304      	movs	r3, #4
 8019d26:	e7e0      	b.n	8019cea <__ssvfiscanf_r+0x1e2>
 8019d28:	220a      	movs	r2, #10
 8019d2a:	e7d5      	b.n	8019cd8 <__ssvfiscanf_r+0x1d0>
 8019d2c:	4629      	mov	r1, r5
 8019d2e:	4640      	mov	r0, r8
 8019d30:	f000 fb40 	bl	801a3b4 <__sccl>
 8019d34:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8019d36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019d3a:	9341      	str	r3, [sp, #260]	; 0x104
 8019d3c:	4605      	mov	r5, r0
 8019d3e:	2301      	movs	r3, #1
 8019d40:	e7d3      	b.n	8019cea <__ssvfiscanf_r+0x1e2>
 8019d42:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8019d44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019d48:	9341      	str	r3, [sp, #260]	; 0x104
 8019d4a:	2300      	movs	r3, #0
 8019d4c:	e7cd      	b.n	8019cea <__ssvfiscanf_r+0x1e2>
 8019d4e:	2302      	movs	r3, #2
 8019d50:	e7cb      	b.n	8019cea <__ssvfiscanf_r+0x1e2>
 8019d52:	9841      	ldr	r0, [sp, #260]	; 0x104
 8019d54:	06c3      	lsls	r3, r0, #27
 8019d56:	f53f aefe 	bmi.w	8019b56 <__ssvfiscanf_r+0x4e>
 8019d5a:	9b00      	ldr	r3, [sp, #0]
 8019d5c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8019d5e:	1d19      	adds	r1, r3, #4
 8019d60:	9100      	str	r1, [sp, #0]
 8019d62:	681b      	ldr	r3, [r3, #0]
 8019d64:	07c0      	lsls	r0, r0, #31
 8019d66:	bf4c      	ite	mi
 8019d68:	801a      	strhmi	r2, [r3, #0]
 8019d6a:	601a      	strpl	r2, [r3, #0]
 8019d6c:	e6f3      	b.n	8019b56 <__ssvfiscanf_r+0x4e>
 8019d6e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8019d70:	4621      	mov	r1, r4
 8019d72:	4630      	mov	r0, r6
 8019d74:	4798      	blx	r3
 8019d76:	2800      	cmp	r0, #0
 8019d78:	d0bb      	beq.n	8019cf2 <__ssvfiscanf_r+0x1ea>
 8019d7a:	e79d      	b.n	8019cb8 <__ssvfiscanf_r+0x1b0>
 8019d7c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8019d7e:	3201      	adds	r2, #1
 8019d80:	9245      	str	r2, [sp, #276]	; 0x114
 8019d82:	6862      	ldr	r2, [r4, #4]
 8019d84:	3a01      	subs	r2, #1
 8019d86:	2a00      	cmp	r2, #0
 8019d88:	6062      	str	r2, [r4, #4]
 8019d8a:	dd02      	ble.n	8019d92 <__ssvfiscanf_r+0x28a>
 8019d8c:	3301      	adds	r3, #1
 8019d8e:	6023      	str	r3, [r4, #0]
 8019d90:	e7b2      	b.n	8019cf8 <__ssvfiscanf_r+0x1f0>
 8019d92:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8019d94:	4621      	mov	r1, r4
 8019d96:	4630      	mov	r0, r6
 8019d98:	4798      	blx	r3
 8019d9a:	2800      	cmp	r0, #0
 8019d9c:	d0ac      	beq.n	8019cf8 <__ssvfiscanf_r+0x1f0>
 8019d9e:	e78b      	b.n	8019cb8 <__ssvfiscanf_r+0x1b0>
 8019da0:	2b04      	cmp	r3, #4
 8019da2:	dc0f      	bgt.n	8019dc4 <__ssvfiscanf_r+0x2bc>
 8019da4:	466b      	mov	r3, sp
 8019da6:	4622      	mov	r2, r4
 8019da8:	a941      	add	r1, sp, #260	; 0x104
 8019daa:	4630      	mov	r0, r6
 8019dac:	f000 fa0e 	bl	801a1cc <_scanf_i>
 8019db0:	e7b0      	b.n	8019d14 <__ssvfiscanf_r+0x20c>
 8019db2:	bf00      	nop
 8019db4:	08019a55 	.word	0x08019a55
 8019db8:	08019acf 	.word	0x08019acf
 8019dbc:	0801b0cb 	.word	0x0801b0cb
 8019dc0:	0801b082 	.word	0x0801b082
 8019dc4:	4b0b      	ldr	r3, [pc, #44]	; (8019df4 <__ssvfiscanf_r+0x2ec>)
 8019dc6:	2b00      	cmp	r3, #0
 8019dc8:	f43f aec5 	beq.w	8019b56 <__ssvfiscanf_r+0x4e>
 8019dcc:	466b      	mov	r3, sp
 8019dce:	4622      	mov	r2, r4
 8019dd0:	a941      	add	r1, sp, #260	; 0x104
 8019dd2:	4630      	mov	r0, r6
 8019dd4:	f3af 8000 	nop.w
 8019dd8:	e79c      	b.n	8019d14 <__ssvfiscanf_r+0x20c>
 8019dda:	89a3      	ldrh	r3, [r4, #12]
 8019ddc:	f013 0f40 	tst.w	r3, #64	; 0x40
 8019de0:	bf18      	it	ne
 8019de2:	f04f 30ff 	movne.w	r0, #4294967295
 8019de6:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8019dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019dee:	9844      	ldr	r0, [sp, #272]	; 0x110
 8019df0:	e7f9      	b.n	8019de6 <__ssvfiscanf_r+0x2de>
 8019df2:	bf00      	nop
 8019df4:	00000000 	.word	0x00000000

08019df8 <_printf_common>:
 8019df8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019dfc:	4616      	mov	r6, r2
 8019dfe:	4699      	mov	r9, r3
 8019e00:	688a      	ldr	r2, [r1, #8]
 8019e02:	690b      	ldr	r3, [r1, #16]
 8019e04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8019e08:	4293      	cmp	r3, r2
 8019e0a:	bfb8      	it	lt
 8019e0c:	4613      	movlt	r3, r2
 8019e0e:	6033      	str	r3, [r6, #0]
 8019e10:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8019e14:	4607      	mov	r7, r0
 8019e16:	460c      	mov	r4, r1
 8019e18:	b10a      	cbz	r2, 8019e1e <_printf_common+0x26>
 8019e1a:	3301      	adds	r3, #1
 8019e1c:	6033      	str	r3, [r6, #0]
 8019e1e:	6823      	ldr	r3, [r4, #0]
 8019e20:	0699      	lsls	r1, r3, #26
 8019e22:	bf42      	ittt	mi
 8019e24:	6833      	ldrmi	r3, [r6, #0]
 8019e26:	3302      	addmi	r3, #2
 8019e28:	6033      	strmi	r3, [r6, #0]
 8019e2a:	6825      	ldr	r5, [r4, #0]
 8019e2c:	f015 0506 	ands.w	r5, r5, #6
 8019e30:	d106      	bne.n	8019e40 <_printf_common+0x48>
 8019e32:	f104 0a19 	add.w	sl, r4, #25
 8019e36:	68e3      	ldr	r3, [r4, #12]
 8019e38:	6832      	ldr	r2, [r6, #0]
 8019e3a:	1a9b      	subs	r3, r3, r2
 8019e3c:	42ab      	cmp	r3, r5
 8019e3e:	dc26      	bgt.n	8019e8e <_printf_common+0x96>
 8019e40:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8019e44:	1e13      	subs	r3, r2, #0
 8019e46:	6822      	ldr	r2, [r4, #0]
 8019e48:	bf18      	it	ne
 8019e4a:	2301      	movne	r3, #1
 8019e4c:	0692      	lsls	r2, r2, #26
 8019e4e:	d42b      	bmi.n	8019ea8 <_printf_common+0xb0>
 8019e50:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8019e54:	4649      	mov	r1, r9
 8019e56:	4638      	mov	r0, r7
 8019e58:	47c0      	blx	r8
 8019e5a:	3001      	adds	r0, #1
 8019e5c:	d01e      	beq.n	8019e9c <_printf_common+0xa4>
 8019e5e:	6823      	ldr	r3, [r4, #0]
 8019e60:	6922      	ldr	r2, [r4, #16]
 8019e62:	f003 0306 	and.w	r3, r3, #6
 8019e66:	2b04      	cmp	r3, #4
 8019e68:	bf02      	ittt	eq
 8019e6a:	68e5      	ldreq	r5, [r4, #12]
 8019e6c:	6833      	ldreq	r3, [r6, #0]
 8019e6e:	1aed      	subeq	r5, r5, r3
 8019e70:	68a3      	ldr	r3, [r4, #8]
 8019e72:	bf0c      	ite	eq
 8019e74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019e78:	2500      	movne	r5, #0
 8019e7a:	4293      	cmp	r3, r2
 8019e7c:	bfc4      	itt	gt
 8019e7e:	1a9b      	subgt	r3, r3, r2
 8019e80:	18ed      	addgt	r5, r5, r3
 8019e82:	2600      	movs	r6, #0
 8019e84:	341a      	adds	r4, #26
 8019e86:	42b5      	cmp	r5, r6
 8019e88:	d11a      	bne.n	8019ec0 <_printf_common+0xc8>
 8019e8a:	2000      	movs	r0, #0
 8019e8c:	e008      	b.n	8019ea0 <_printf_common+0xa8>
 8019e8e:	2301      	movs	r3, #1
 8019e90:	4652      	mov	r2, sl
 8019e92:	4649      	mov	r1, r9
 8019e94:	4638      	mov	r0, r7
 8019e96:	47c0      	blx	r8
 8019e98:	3001      	adds	r0, #1
 8019e9a:	d103      	bne.n	8019ea4 <_printf_common+0xac>
 8019e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8019ea0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019ea4:	3501      	adds	r5, #1
 8019ea6:	e7c6      	b.n	8019e36 <_printf_common+0x3e>
 8019ea8:	18e1      	adds	r1, r4, r3
 8019eaa:	1c5a      	adds	r2, r3, #1
 8019eac:	2030      	movs	r0, #48	; 0x30
 8019eae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8019eb2:	4422      	add	r2, r4
 8019eb4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8019eb8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8019ebc:	3302      	adds	r3, #2
 8019ebe:	e7c7      	b.n	8019e50 <_printf_common+0x58>
 8019ec0:	2301      	movs	r3, #1
 8019ec2:	4622      	mov	r2, r4
 8019ec4:	4649      	mov	r1, r9
 8019ec6:	4638      	mov	r0, r7
 8019ec8:	47c0      	blx	r8
 8019eca:	3001      	adds	r0, #1
 8019ecc:	d0e6      	beq.n	8019e9c <_printf_common+0xa4>
 8019ece:	3601      	adds	r6, #1
 8019ed0:	e7d9      	b.n	8019e86 <_printf_common+0x8e>
	...

08019ed4 <_printf_i>:
 8019ed4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019ed8:	7e0f      	ldrb	r7, [r1, #24]
 8019eda:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8019edc:	2f78      	cmp	r7, #120	; 0x78
 8019ede:	4691      	mov	r9, r2
 8019ee0:	4680      	mov	r8, r0
 8019ee2:	460c      	mov	r4, r1
 8019ee4:	469a      	mov	sl, r3
 8019ee6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8019eea:	d807      	bhi.n	8019efc <_printf_i+0x28>
 8019eec:	2f62      	cmp	r7, #98	; 0x62
 8019eee:	d80a      	bhi.n	8019f06 <_printf_i+0x32>
 8019ef0:	2f00      	cmp	r7, #0
 8019ef2:	f000 80d4 	beq.w	801a09e <_printf_i+0x1ca>
 8019ef6:	2f58      	cmp	r7, #88	; 0x58
 8019ef8:	f000 80c0 	beq.w	801a07c <_printf_i+0x1a8>
 8019efc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019f00:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8019f04:	e03a      	b.n	8019f7c <_printf_i+0xa8>
 8019f06:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8019f0a:	2b15      	cmp	r3, #21
 8019f0c:	d8f6      	bhi.n	8019efc <_printf_i+0x28>
 8019f0e:	a101      	add	r1, pc, #4	; (adr r1, 8019f14 <_printf_i+0x40>)
 8019f10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8019f14:	08019f6d 	.word	0x08019f6d
 8019f18:	08019f81 	.word	0x08019f81
 8019f1c:	08019efd 	.word	0x08019efd
 8019f20:	08019efd 	.word	0x08019efd
 8019f24:	08019efd 	.word	0x08019efd
 8019f28:	08019efd 	.word	0x08019efd
 8019f2c:	08019f81 	.word	0x08019f81
 8019f30:	08019efd 	.word	0x08019efd
 8019f34:	08019efd 	.word	0x08019efd
 8019f38:	08019efd 	.word	0x08019efd
 8019f3c:	08019efd 	.word	0x08019efd
 8019f40:	0801a085 	.word	0x0801a085
 8019f44:	08019fad 	.word	0x08019fad
 8019f48:	0801a03f 	.word	0x0801a03f
 8019f4c:	08019efd 	.word	0x08019efd
 8019f50:	08019efd 	.word	0x08019efd
 8019f54:	0801a0a7 	.word	0x0801a0a7
 8019f58:	08019efd 	.word	0x08019efd
 8019f5c:	08019fad 	.word	0x08019fad
 8019f60:	08019efd 	.word	0x08019efd
 8019f64:	08019efd 	.word	0x08019efd
 8019f68:	0801a047 	.word	0x0801a047
 8019f6c:	682b      	ldr	r3, [r5, #0]
 8019f6e:	1d1a      	adds	r2, r3, #4
 8019f70:	681b      	ldr	r3, [r3, #0]
 8019f72:	602a      	str	r2, [r5, #0]
 8019f74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019f78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8019f7c:	2301      	movs	r3, #1
 8019f7e:	e09f      	b.n	801a0c0 <_printf_i+0x1ec>
 8019f80:	6820      	ldr	r0, [r4, #0]
 8019f82:	682b      	ldr	r3, [r5, #0]
 8019f84:	0607      	lsls	r7, r0, #24
 8019f86:	f103 0104 	add.w	r1, r3, #4
 8019f8a:	6029      	str	r1, [r5, #0]
 8019f8c:	d501      	bpl.n	8019f92 <_printf_i+0xbe>
 8019f8e:	681e      	ldr	r6, [r3, #0]
 8019f90:	e003      	b.n	8019f9a <_printf_i+0xc6>
 8019f92:	0646      	lsls	r6, r0, #25
 8019f94:	d5fb      	bpl.n	8019f8e <_printf_i+0xba>
 8019f96:	f9b3 6000 	ldrsh.w	r6, [r3]
 8019f9a:	2e00      	cmp	r6, #0
 8019f9c:	da03      	bge.n	8019fa6 <_printf_i+0xd2>
 8019f9e:	232d      	movs	r3, #45	; 0x2d
 8019fa0:	4276      	negs	r6, r6
 8019fa2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019fa6:	485a      	ldr	r0, [pc, #360]	; (801a110 <_printf_i+0x23c>)
 8019fa8:	230a      	movs	r3, #10
 8019faa:	e012      	b.n	8019fd2 <_printf_i+0xfe>
 8019fac:	682b      	ldr	r3, [r5, #0]
 8019fae:	6820      	ldr	r0, [r4, #0]
 8019fb0:	1d19      	adds	r1, r3, #4
 8019fb2:	6029      	str	r1, [r5, #0]
 8019fb4:	0605      	lsls	r5, r0, #24
 8019fb6:	d501      	bpl.n	8019fbc <_printf_i+0xe8>
 8019fb8:	681e      	ldr	r6, [r3, #0]
 8019fba:	e002      	b.n	8019fc2 <_printf_i+0xee>
 8019fbc:	0641      	lsls	r1, r0, #25
 8019fbe:	d5fb      	bpl.n	8019fb8 <_printf_i+0xe4>
 8019fc0:	881e      	ldrh	r6, [r3, #0]
 8019fc2:	4853      	ldr	r0, [pc, #332]	; (801a110 <_printf_i+0x23c>)
 8019fc4:	2f6f      	cmp	r7, #111	; 0x6f
 8019fc6:	bf0c      	ite	eq
 8019fc8:	2308      	moveq	r3, #8
 8019fca:	230a      	movne	r3, #10
 8019fcc:	2100      	movs	r1, #0
 8019fce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8019fd2:	6865      	ldr	r5, [r4, #4]
 8019fd4:	60a5      	str	r5, [r4, #8]
 8019fd6:	2d00      	cmp	r5, #0
 8019fd8:	bfa2      	ittt	ge
 8019fda:	6821      	ldrge	r1, [r4, #0]
 8019fdc:	f021 0104 	bicge.w	r1, r1, #4
 8019fe0:	6021      	strge	r1, [r4, #0]
 8019fe2:	b90e      	cbnz	r6, 8019fe8 <_printf_i+0x114>
 8019fe4:	2d00      	cmp	r5, #0
 8019fe6:	d04b      	beq.n	801a080 <_printf_i+0x1ac>
 8019fe8:	4615      	mov	r5, r2
 8019fea:	fbb6 f1f3 	udiv	r1, r6, r3
 8019fee:	fb03 6711 	mls	r7, r3, r1, r6
 8019ff2:	5dc7      	ldrb	r7, [r0, r7]
 8019ff4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8019ff8:	4637      	mov	r7, r6
 8019ffa:	42bb      	cmp	r3, r7
 8019ffc:	460e      	mov	r6, r1
 8019ffe:	d9f4      	bls.n	8019fea <_printf_i+0x116>
 801a000:	2b08      	cmp	r3, #8
 801a002:	d10b      	bne.n	801a01c <_printf_i+0x148>
 801a004:	6823      	ldr	r3, [r4, #0]
 801a006:	07de      	lsls	r6, r3, #31
 801a008:	d508      	bpl.n	801a01c <_printf_i+0x148>
 801a00a:	6923      	ldr	r3, [r4, #16]
 801a00c:	6861      	ldr	r1, [r4, #4]
 801a00e:	4299      	cmp	r1, r3
 801a010:	bfde      	ittt	le
 801a012:	2330      	movle	r3, #48	; 0x30
 801a014:	f805 3c01 	strble.w	r3, [r5, #-1]
 801a018:	f105 35ff 	addle.w	r5, r5, #4294967295
 801a01c:	1b52      	subs	r2, r2, r5
 801a01e:	6122      	str	r2, [r4, #16]
 801a020:	f8cd a000 	str.w	sl, [sp]
 801a024:	464b      	mov	r3, r9
 801a026:	aa03      	add	r2, sp, #12
 801a028:	4621      	mov	r1, r4
 801a02a:	4640      	mov	r0, r8
 801a02c:	f7ff fee4 	bl	8019df8 <_printf_common>
 801a030:	3001      	adds	r0, #1
 801a032:	d14a      	bne.n	801a0ca <_printf_i+0x1f6>
 801a034:	f04f 30ff 	mov.w	r0, #4294967295
 801a038:	b004      	add	sp, #16
 801a03a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a03e:	6823      	ldr	r3, [r4, #0]
 801a040:	f043 0320 	orr.w	r3, r3, #32
 801a044:	6023      	str	r3, [r4, #0]
 801a046:	4833      	ldr	r0, [pc, #204]	; (801a114 <_printf_i+0x240>)
 801a048:	2778      	movs	r7, #120	; 0x78
 801a04a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801a04e:	6823      	ldr	r3, [r4, #0]
 801a050:	6829      	ldr	r1, [r5, #0]
 801a052:	061f      	lsls	r7, r3, #24
 801a054:	f851 6b04 	ldr.w	r6, [r1], #4
 801a058:	d402      	bmi.n	801a060 <_printf_i+0x18c>
 801a05a:	065f      	lsls	r7, r3, #25
 801a05c:	bf48      	it	mi
 801a05e:	b2b6      	uxthmi	r6, r6
 801a060:	07df      	lsls	r7, r3, #31
 801a062:	bf48      	it	mi
 801a064:	f043 0320 	orrmi.w	r3, r3, #32
 801a068:	6029      	str	r1, [r5, #0]
 801a06a:	bf48      	it	mi
 801a06c:	6023      	strmi	r3, [r4, #0]
 801a06e:	b91e      	cbnz	r6, 801a078 <_printf_i+0x1a4>
 801a070:	6823      	ldr	r3, [r4, #0]
 801a072:	f023 0320 	bic.w	r3, r3, #32
 801a076:	6023      	str	r3, [r4, #0]
 801a078:	2310      	movs	r3, #16
 801a07a:	e7a7      	b.n	8019fcc <_printf_i+0xf8>
 801a07c:	4824      	ldr	r0, [pc, #144]	; (801a110 <_printf_i+0x23c>)
 801a07e:	e7e4      	b.n	801a04a <_printf_i+0x176>
 801a080:	4615      	mov	r5, r2
 801a082:	e7bd      	b.n	801a000 <_printf_i+0x12c>
 801a084:	682b      	ldr	r3, [r5, #0]
 801a086:	6826      	ldr	r6, [r4, #0]
 801a088:	6961      	ldr	r1, [r4, #20]
 801a08a:	1d18      	adds	r0, r3, #4
 801a08c:	6028      	str	r0, [r5, #0]
 801a08e:	0635      	lsls	r5, r6, #24
 801a090:	681b      	ldr	r3, [r3, #0]
 801a092:	d501      	bpl.n	801a098 <_printf_i+0x1c4>
 801a094:	6019      	str	r1, [r3, #0]
 801a096:	e002      	b.n	801a09e <_printf_i+0x1ca>
 801a098:	0670      	lsls	r0, r6, #25
 801a09a:	d5fb      	bpl.n	801a094 <_printf_i+0x1c0>
 801a09c:	8019      	strh	r1, [r3, #0]
 801a09e:	2300      	movs	r3, #0
 801a0a0:	6123      	str	r3, [r4, #16]
 801a0a2:	4615      	mov	r5, r2
 801a0a4:	e7bc      	b.n	801a020 <_printf_i+0x14c>
 801a0a6:	682b      	ldr	r3, [r5, #0]
 801a0a8:	1d1a      	adds	r2, r3, #4
 801a0aa:	602a      	str	r2, [r5, #0]
 801a0ac:	681d      	ldr	r5, [r3, #0]
 801a0ae:	6862      	ldr	r2, [r4, #4]
 801a0b0:	2100      	movs	r1, #0
 801a0b2:	4628      	mov	r0, r5
 801a0b4:	f7f6 f8ac 	bl	8010210 <memchr>
 801a0b8:	b108      	cbz	r0, 801a0be <_printf_i+0x1ea>
 801a0ba:	1b40      	subs	r0, r0, r5
 801a0bc:	6060      	str	r0, [r4, #4]
 801a0be:	6863      	ldr	r3, [r4, #4]
 801a0c0:	6123      	str	r3, [r4, #16]
 801a0c2:	2300      	movs	r3, #0
 801a0c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a0c8:	e7aa      	b.n	801a020 <_printf_i+0x14c>
 801a0ca:	6923      	ldr	r3, [r4, #16]
 801a0cc:	462a      	mov	r2, r5
 801a0ce:	4649      	mov	r1, r9
 801a0d0:	4640      	mov	r0, r8
 801a0d2:	47d0      	blx	sl
 801a0d4:	3001      	adds	r0, #1
 801a0d6:	d0ad      	beq.n	801a034 <_printf_i+0x160>
 801a0d8:	6823      	ldr	r3, [r4, #0]
 801a0da:	079b      	lsls	r3, r3, #30
 801a0dc:	d413      	bmi.n	801a106 <_printf_i+0x232>
 801a0de:	68e0      	ldr	r0, [r4, #12]
 801a0e0:	9b03      	ldr	r3, [sp, #12]
 801a0e2:	4298      	cmp	r0, r3
 801a0e4:	bfb8      	it	lt
 801a0e6:	4618      	movlt	r0, r3
 801a0e8:	e7a6      	b.n	801a038 <_printf_i+0x164>
 801a0ea:	2301      	movs	r3, #1
 801a0ec:	4632      	mov	r2, r6
 801a0ee:	4649      	mov	r1, r9
 801a0f0:	4640      	mov	r0, r8
 801a0f2:	47d0      	blx	sl
 801a0f4:	3001      	adds	r0, #1
 801a0f6:	d09d      	beq.n	801a034 <_printf_i+0x160>
 801a0f8:	3501      	adds	r5, #1
 801a0fa:	68e3      	ldr	r3, [r4, #12]
 801a0fc:	9903      	ldr	r1, [sp, #12]
 801a0fe:	1a5b      	subs	r3, r3, r1
 801a100:	42ab      	cmp	r3, r5
 801a102:	dcf2      	bgt.n	801a0ea <_printf_i+0x216>
 801a104:	e7eb      	b.n	801a0de <_printf_i+0x20a>
 801a106:	2500      	movs	r5, #0
 801a108:	f104 0619 	add.w	r6, r4, #25
 801a10c:	e7f5      	b.n	801a0fa <_printf_i+0x226>
 801a10e:	bf00      	nop
 801a110:	0801b08d 	.word	0x0801b08d
 801a114:	0801b09e 	.word	0x0801b09e

0801a118 <_scanf_chars>:
 801a118:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a11c:	4615      	mov	r5, r2
 801a11e:	688a      	ldr	r2, [r1, #8]
 801a120:	4680      	mov	r8, r0
 801a122:	460c      	mov	r4, r1
 801a124:	b932      	cbnz	r2, 801a134 <_scanf_chars+0x1c>
 801a126:	698a      	ldr	r2, [r1, #24]
 801a128:	2a00      	cmp	r2, #0
 801a12a:	bf0c      	ite	eq
 801a12c:	2201      	moveq	r2, #1
 801a12e:	f04f 32ff 	movne.w	r2, #4294967295
 801a132:	608a      	str	r2, [r1, #8]
 801a134:	6822      	ldr	r2, [r4, #0]
 801a136:	f8df 9090 	ldr.w	r9, [pc, #144]	; 801a1c8 <_scanf_chars+0xb0>
 801a13a:	06d1      	lsls	r1, r2, #27
 801a13c:	bf5f      	itttt	pl
 801a13e:	681a      	ldrpl	r2, [r3, #0]
 801a140:	1d11      	addpl	r1, r2, #4
 801a142:	6019      	strpl	r1, [r3, #0]
 801a144:	6816      	ldrpl	r6, [r2, #0]
 801a146:	2700      	movs	r7, #0
 801a148:	69a0      	ldr	r0, [r4, #24]
 801a14a:	b188      	cbz	r0, 801a170 <_scanf_chars+0x58>
 801a14c:	2801      	cmp	r0, #1
 801a14e:	d107      	bne.n	801a160 <_scanf_chars+0x48>
 801a150:	682a      	ldr	r2, [r5, #0]
 801a152:	7811      	ldrb	r1, [r2, #0]
 801a154:	6962      	ldr	r2, [r4, #20]
 801a156:	5c52      	ldrb	r2, [r2, r1]
 801a158:	b952      	cbnz	r2, 801a170 <_scanf_chars+0x58>
 801a15a:	2f00      	cmp	r7, #0
 801a15c:	d031      	beq.n	801a1c2 <_scanf_chars+0xaa>
 801a15e:	e022      	b.n	801a1a6 <_scanf_chars+0x8e>
 801a160:	2802      	cmp	r0, #2
 801a162:	d120      	bne.n	801a1a6 <_scanf_chars+0x8e>
 801a164:	682b      	ldr	r3, [r5, #0]
 801a166:	781b      	ldrb	r3, [r3, #0]
 801a168:	f819 3003 	ldrb.w	r3, [r9, r3]
 801a16c:	071b      	lsls	r3, r3, #28
 801a16e:	d41a      	bmi.n	801a1a6 <_scanf_chars+0x8e>
 801a170:	6823      	ldr	r3, [r4, #0]
 801a172:	06da      	lsls	r2, r3, #27
 801a174:	bf5e      	ittt	pl
 801a176:	682b      	ldrpl	r3, [r5, #0]
 801a178:	781b      	ldrbpl	r3, [r3, #0]
 801a17a:	f806 3b01 	strbpl.w	r3, [r6], #1
 801a17e:	682a      	ldr	r2, [r5, #0]
 801a180:	686b      	ldr	r3, [r5, #4]
 801a182:	3201      	adds	r2, #1
 801a184:	602a      	str	r2, [r5, #0]
 801a186:	68a2      	ldr	r2, [r4, #8]
 801a188:	3b01      	subs	r3, #1
 801a18a:	3a01      	subs	r2, #1
 801a18c:	606b      	str	r3, [r5, #4]
 801a18e:	3701      	adds	r7, #1
 801a190:	60a2      	str	r2, [r4, #8]
 801a192:	b142      	cbz	r2, 801a1a6 <_scanf_chars+0x8e>
 801a194:	2b00      	cmp	r3, #0
 801a196:	dcd7      	bgt.n	801a148 <_scanf_chars+0x30>
 801a198:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801a19c:	4629      	mov	r1, r5
 801a19e:	4640      	mov	r0, r8
 801a1a0:	4798      	blx	r3
 801a1a2:	2800      	cmp	r0, #0
 801a1a4:	d0d0      	beq.n	801a148 <_scanf_chars+0x30>
 801a1a6:	6823      	ldr	r3, [r4, #0]
 801a1a8:	f013 0310 	ands.w	r3, r3, #16
 801a1ac:	d105      	bne.n	801a1ba <_scanf_chars+0xa2>
 801a1ae:	68e2      	ldr	r2, [r4, #12]
 801a1b0:	3201      	adds	r2, #1
 801a1b2:	60e2      	str	r2, [r4, #12]
 801a1b4:	69a2      	ldr	r2, [r4, #24]
 801a1b6:	b102      	cbz	r2, 801a1ba <_scanf_chars+0xa2>
 801a1b8:	7033      	strb	r3, [r6, #0]
 801a1ba:	6923      	ldr	r3, [r4, #16]
 801a1bc:	443b      	add	r3, r7
 801a1be:	6123      	str	r3, [r4, #16]
 801a1c0:	2000      	movs	r0, #0
 801a1c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a1c6:	bf00      	nop
 801a1c8:	0801b0cb 	.word	0x0801b0cb

0801a1cc <_scanf_i>:
 801a1cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a1d0:	4698      	mov	r8, r3
 801a1d2:	4b74      	ldr	r3, [pc, #464]	; (801a3a4 <_scanf_i+0x1d8>)
 801a1d4:	460c      	mov	r4, r1
 801a1d6:	4682      	mov	sl, r0
 801a1d8:	4616      	mov	r6, r2
 801a1da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801a1de:	b087      	sub	sp, #28
 801a1e0:	ab03      	add	r3, sp, #12
 801a1e2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801a1e6:	4b70      	ldr	r3, [pc, #448]	; (801a3a8 <_scanf_i+0x1dc>)
 801a1e8:	69a1      	ldr	r1, [r4, #24]
 801a1ea:	4a70      	ldr	r2, [pc, #448]	; (801a3ac <_scanf_i+0x1e0>)
 801a1ec:	2903      	cmp	r1, #3
 801a1ee:	bf18      	it	ne
 801a1f0:	461a      	movne	r2, r3
 801a1f2:	68a3      	ldr	r3, [r4, #8]
 801a1f4:	9201      	str	r2, [sp, #4]
 801a1f6:	1e5a      	subs	r2, r3, #1
 801a1f8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801a1fc:	bf88      	it	hi
 801a1fe:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801a202:	4627      	mov	r7, r4
 801a204:	bf82      	ittt	hi
 801a206:	eb03 0905 	addhi.w	r9, r3, r5
 801a20a:	f240 135d 	movwhi	r3, #349	; 0x15d
 801a20e:	60a3      	strhi	r3, [r4, #8]
 801a210:	f857 3b1c 	ldr.w	r3, [r7], #28
 801a214:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 801a218:	bf98      	it	ls
 801a21a:	f04f 0900 	movls.w	r9, #0
 801a21e:	6023      	str	r3, [r4, #0]
 801a220:	463d      	mov	r5, r7
 801a222:	f04f 0b00 	mov.w	fp, #0
 801a226:	6831      	ldr	r1, [r6, #0]
 801a228:	ab03      	add	r3, sp, #12
 801a22a:	7809      	ldrb	r1, [r1, #0]
 801a22c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801a230:	2202      	movs	r2, #2
 801a232:	f7f5 ffed 	bl	8010210 <memchr>
 801a236:	b328      	cbz	r0, 801a284 <_scanf_i+0xb8>
 801a238:	f1bb 0f01 	cmp.w	fp, #1
 801a23c:	d159      	bne.n	801a2f2 <_scanf_i+0x126>
 801a23e:	6862      	ldr	r2, [r4, #4]
 801a240:	b92a      	cbnz	r2, 801a24e <_scanf_i+0x82>
 801a242:	6822      	ldr	r2, [r4, #0]
 801a244:	2308      	movs	r3, #8
 801a246:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801a24a:	6063      	str	r3, [r4, #4]
 801a24c:	6022      	str	r2, [r4, #0]
 801a24e:	6822      	ldr	r2, [r4, #0]
 801a250:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 801a254:	6022      	str	r2, [r4, #0]
 801a256:	68a2      	ldr	r2, [r4, #8]
 801a258:	1e51      	subs	r1, r2, #1
 801a25a:	60a1      	str	r1, [r4, #8]
 801a25c:	b192      	cbz	r2, 801a284 <_scanf_i+0xb8>
 801a25e:	6832      	ldr	r2, [r6, #0]
 801a260:	1c51      	adds	r1, r2, #1
 801a262:	6031      	str	r1, [r6, #0]
 801a264:	7812      	ldrb	r2, [r2, #0]
 801a266:	f805 2b01 	strb.w	r2, [r5], #1
 801a26a:	6872      	ldr	r2, [r6, #4]
 801a26c:	3a01      	subs	r2, #1
 801a26e:	2a00      	cmp	r2, #0
 801a270:	6072      	str	r2, [r6, #4]
 801a272:	dc07      	bgt.n	801a284 <_scanf_i+0xb8>
 801a274:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 801a278:	4631      	mov	r1, r6
 801a27a:	4650      	mov	r0, sl
 801a27c:	4790      	blx	r2
 801a27e:	2800      	cmp	r0, #0
 801a280:	f040 8085 	bne.w	801a38e <_scanf_i+0x1c2>
 801a284:	f10b 0b01 	add.w	fp, fp, #1
 801a288:	f1bb 0f03 	cmp.w	fp, #3
 801a28c:	d1cb      	bne.n	801a226 <_scanf_i+0x5a>
 801a28e:	6863      	ldr	r3, [r4, #4]
 801a290:	b90b      	cbnz	r3, 801a296 <_scanf_i+0xca>
 801a292:	230a      	movs	r3, #10
 801a294:	6063      	str	r3, [r4, #4]
 801a296:	6863      	ldr	r3, [r4, #4]
 801a298:	4945      	ldr	r1, [pc, #276]	; (801a3b0 <_scanf_i+0x1e4>)
 801a29a:	6960      	ldr	r0, [r4, #20]
 801a29c:	1ac9      	subs	r1, r1, r3
 801a29e:	f000 f889 	bl	801a3b4 <__sccl>
 801a2a2:	f04f 0b00 	mov.w	fp, #0
 801a2a6:	68a3      	ldr	r3, [r4, #8]
 801a2a8:	6822      	ldr	r2, [r4, #0]
 801a2aa:	2b00      	cmp	r3, #0
 801a2ac:	d03d      	beq.n	801a32a <_scanf_i+0x15e>
 801a2ae:	6831      	ldr	r1, [r6, #0]
 801a2b0:	6960      	ldr	r0, [r4, #20]
 801a2b2:	f891 c000 	ldrb.w	ip, [r1]
 801a2b6:	f810 000c 	ldrb.w	r0, [r0, ip]
 801a2ba:	2800      	cmp	r0, #0
 801a2bc:	d035      	beq.n	801a32a <_scanf_i+0x15e>
 801a2be:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801a2c2:	d124      	bne.n	801a30e <_scanf_i+0x142>
 801a2c4:	0510      	lsls	r0, r2, #20
 801a2c6:	d522      	bpl.n	801a30e <_scanf_i+0x142>
 801a2c8:	f10b 0b01 	add.w	fp, fp, #1
 801a2cc:	f1b9 0f00 	cmp.w	r9, #0
 801a2d0:	d003      	beq.n	801a2da <_scanf_i+0x10e>
 801a2d2:	3301      	adds	r3, #1
 801a2d4:	f109 39ff 	add.w	r9, r9, #4294967295
 801a2d8:	60a3      	str	r3, [r4, #8]
 801a2da:	6873      	ldr	r3, [r6, #4]
 801a2dc:	3b01      	subs	r3, #1
 801a2de:	2b00      	cmp	r3, #0
 801a2e0:	6073      	str	r3, [r6, #4]
 801a2e2:	dd1b      	ble.n	801a31c <_scanf_i+0x150>
 801a2e4:	6833      	ldr	r3, [r6, #0]
 801a2e6:	3301      	adds	r3, #1
 801a2e8:	6033      	str	r3, [r6, #0]
 801a2ea:	68a3      	ldr	r3, [r4, #8]
 801a2ec:	3b01      	subs	r3, #1
 801a2ee:	60a3      	str	r3, [r4, #8]
 801a2f0:	e7d9      	b.n	801a2a6 <_scanf_i+0xda>
 801a2f2:	f1bb 0f02 	cmp.w	fp, #2
 801a2f6:	d1ae      	bne.n	801a256 <_scanf_i+0x8a>
 801a2f8:	6822      	ldr	r2, [r4, #0]
 801a2fa:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801a2fe:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801a302:	d1bf      	bne.n	801a284 <_scanf_i+0xb8>
 801a304:	2310      	movs	r3, #16
 801a306:	6063      	str	r3, [r4, #4]
 801a308:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801a30c:	e7a2      	b.n	801a254 <_scanf_i+0x88>
 801a30e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801a312:	6022      	str	r2, [r4, #0]
 801a314:	780b      	ldrb	r3, [r1, #0]
 801a316:	f805 3b01 	strb.w	r3, [r5], #1
 801a31a:	e7de      	b.n	801a2da <_scanf_i+0x10e>
 801a31c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801a320:	4631      	mov	r1, r6
 801a322:	4650      	mov	r0, sl
 801a324:	4798      	blx	r3
 801a326:	2800      	cmp	r0, #0
 801a328:	d0df      	beq.n	801a2ea <_scanf_i+0x11e>
 801a32a:	6823      	ldr	r3, [r4, #0]
 801a32c:	05d9      	lsls	r1, r3, #23
 801a32e:	d50d      	bpl.n	801a34c <_scanf_i+0x180>
 801a330:	42bd      	cmp	r5, r7
 801a332:	d909      	bls.n	801a348 <_scanf_i+0x17c>
 801a334:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801a338:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a33c:	4632      	mov	r2, r6
 801a33e:	4650      	mov	r0, sl
 801a340:	4798      	blx	r3
 801a342:	f105 39ff 	add.w	r9, r5, #4294967295
 801a346:	464d      	mov	r5, r9
 801a348:	42bd      	cmp	r5, r7
 801a34a:	d028      	beq.n	801a39e <_scanf_i+0x1d2>
 801a34c:	6822      	ldr	r2, [r4, #0]
 801a34e:	f012 0210 	ands.w	r2, r2, #16
 801a352:	d113      	bne.n	801a37c <_scanf_i+0x1b0>
 801a354:	702a      	strb	r2, [r5, #0]
 801a356:	6863      	ldr	r3, [r4, #4]
 801a358:	9e01      	ldr	r6, [sp, #4]
 801a35a:	4639      	mov	r1, r7
 801a35c:	4650      	mov	r0, sl
 801a35e:	47b0      	blx	r6
 801a360:	f8d8 3000 	ldr.w	r3, [r8]
 801a364:	6821      	ldr	r1, [r4, #0]
 801a366:	1d1a      	adds	r2, r3, #4
 801a368:	f8c8 2000 	str.w	r2, [r8]
 801a36c:	f011 0f20 	tst.w	r1, #32
 801a370:	681b      	ldr	r3, [r3, #0]
 801a372:	d00f      	beq.n	801a394 <_scanf_i+0x1c8>
 801a374:	6018      	str	r0, [r3, #0]
 801a376:	68e3      	ldr	r3, [r4, #12]
 801a378:	3301      	adds	r3, #1
 801a37a:	60e3      	str	r3, [r4, #12]
 801a37c:	6923      	ldr	r3, [r4, #16]
 801a37e:	1bed      	subs	r5, r5, r7
 801a380:	445d      	add	r5, fp
 801a382:	442b      	add	r3, r5
 801a384:	6123      	str	r3, [r4, #16]
 801a386:	2000      	movs	r0, #0
 801a388:	b007      	add	sp, #28
 801a38a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a38e:	f04f 0b00 	mov.w	fp, #0
 801a392:	e7ca      	b.n	801a32a <_scanf_i+0x15e>
 801a394:	07ca      	lsls	r2, r1, #31
 801a396:	bf4c      	ite	mi
 801a398:	8018      	strhmi	r0, [r3, #0]
 801a39a:	6018      	strpl	r0, [r3, #0]
 801a39c:	e7eb      	b.n	801a376 <_scanf_i+0x1aa>
 801a39e:	2001      	movs	r0, #1
 801a3a0:	e7f2      	b.n	801a388 <_scanf_i+0x1bc>
 801a3a2:	bf00      	nop
 801a3a4:	0801b050 	.word	0x0801b050
 801a3a8:	0801a759 	.word	0x0801a759
 801a3ac:	0801a671 	.word	0x0801a671
 801a3b0:	0801b0bf 	.word	0x0801b0bf

0801a3b4 <__sccl>:
 801a3b4:	b570      	push	{r4, r5, r6, lr}
 801a3b6:	780b      	ldrb	r3, [r1, #0]
 801a3b8:	4604      	mov	r4, r0
 801a3ba:	2b5e      	cmp	r3, #94	; 0x5e
 801a3bc:	bf0b      	itete	eq
 801a3be:	784b      	ldrbeq	r3, [r1, #1]
 801a3c0:	1c4a      	addne	r2, r1, #1
 801a3c2:	1c8a      	addeq	r2, r1, #2
 801a3c4:	2100      	movne	r1, #0
 801a3c6:	bf08      	it	eq
 801a3c8:	2101      	moveq	r1, #1
 801a3ca:	3801      	subs	r0, #1
 801a3cc:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 801a3d0:	f800 1f01 	strb.w	r1, [r0, #1]!
 801a3d4:	42a8      	cmp	r0, r5
 801a3d6:	d1fb      	bne.n	801a3d0 <__sccl+0x1c>
 801a3d8:	b90b      	cbnz	r3, 801a3de <__sccl+0x2a>
 801a3da:	1e50      	subs	r0, r2, #1
 801a3dc:	bd70      	pop	{r4, r5, r6, pc}
 801a3de:	f081 0101 	eor.w	r1, r1, #1
 801a3e2:	54e1      	strb	r1, [r4, r3]
 801a3e4:	4610      	mov	r0, r2
 801a3e6:	4602      	mov	r2, r0
 801a3e8:	f812 5b01 	ldrb.w	r5, [r2], #1
 801a3ec:	2d2d      	cmp	r5, #45	; 0x2d
 801a3ee:	d005      	beq.n	801a3fc <__sccl+0x48>
 801a3f0:	2d5d      	cmp	r5, #93	; 0x5d
 801a3f2:	d016      	beq.n	801a422 <__sccl+0x6e>
 801a3f4:	2d00      	cmp	r5, #0
 801a3f6:	d0f1      	beq.n	801a3dc <__sccl+0x28>
 801a3f8:	462b      	mov	r3, r5
 801a3fa:	e7f2      	b.n	801a3e2 <__sccl+0x2e>
 801a3fc:	7846      	ldrb	r6, [r0, #1]
 801a3fe:	2e5d      	cmp	r6, #93	; 0x5d
 801a400:	d0fa      	beq.n	801a3f8 <__sccl+0x44>
 801a402:	42b3      	cmp	r3, r6
 801a404:	dcf8      	bgt.n	801a3f8 <__sccl+0x44>
 801a406:	3002      	adds	r0, #2
 801a408:	461a      	mov	r2, r3
 801a40a:	3201      	adds	r2, #1
 801a40c:	4296      	cmp	r6, r2
 801a40e:	54a1      	strb	r1, [r4, r2]
 801a410:	dcfb      	bgt.n	801a40a <__sccl+0x56>
 801a412:	1af2      	subs	r2, r6, r3
 801a414:	3a01      	subs	r2, #1
 801a416:	1c5d      	adds	r5, r3, #1
 801a418:	42b3      	cmp	r3, r6
 801a41a:	bfa8      	it	ge
 801a41c:	2200      	movge	r2, #0
 801a41e:	18ab      	adds	r3, r5, r2
 801a420:	e7e1      	b.n	801a3e6 <__sccl+0x32>
 801a422:	4610      	mov	r0, r2
 801a424:	e7da      	b.n	801a3dc <__sccl+0x28>

0801a426 <__submore>:
 801a426:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a42a:	460c      	mov	r4, r1
 801a42c:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801a42e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a432:	4299      	cmp	r1, r3
 801a434:	d11d      	bne.n	801a472 <__submore+0x4c>
 801a436:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801a43a:	f7ff f927 	bl	801968c <_malloc_r>
 801a43e:	b918      	cbnz	r0, 801a448 <__submore+0x22>
 801a440:	f04f 30ff 	mov.w	r0, #4294967295
 801a444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a448:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a44c:	63a3      	str	r3, [r4, #56]	; 0x38
 801a44e:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801a452:	6360      	str	r0, [r4, #52]	; 0x34
 801a454:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801a458:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801a45c:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801a460:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801a464:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801a468:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801a46c:	6020      	str	r0, [r4, #0]
 801a46e:	2000      	movs	r0, #0
 801a470:	e7e8      	b.n	801a444 <__submore+0x1e>
 801a472:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801a474:	0077      	lsls	r7, r6, #1
 801a476:	463a      	mov	r2, r7
 801a478:	f000 f848 	bl	801a50c <_realloc_r>
 801a47c:	4605      	mov	r5, r0
 801a47e:	2800      	cmp	r0, #0
 801a480:	d0de      	beq.n	801a440 <__submore+0x1a>
 801a482:	eb00 0806 	add.w	r8, r0, r6
 801a486:	4601      	mov	r1, r0
 801a488:	4632      	mov	r2, r6
 801a48a:	4640      	mov	r0, r8
 801a48c:	f000 f830 	bl	801a4f0 <memcpy>
 801a490:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801a494:	f8c4 8000 	str.w	r8, [r4]
 801a498:	e7e9      	b.n	801a46e <__submore+0x48>

0801a49a <memmove>:
 801a49a:	4288      	cmp	r0, r1
 801a49c:	b510      	push	{r4, lr}
 801a49e:	eb01 0402 	add.w	r4, r1, r2
 801a4a2:	d902      	bls.n	801a4aa <memmove+0x10>
 801a4a4:	4284      	cmp	r4, r0
 801a4a6:	4623      	mov	r3, r4
 801a4a8:	d807      	bhi.n	801a4ba <memmove+0x20>
 801a4aa:	1e43      	subs	r3, r0, #1
 801a4ac:	42a1      	cmp	r1, r4
 801a4ae:	d008      	beq.n	801a4c2 <memmove+0x28>
 801a4b0:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a4b4:	f803 2f01 	strb.w	r2, [r3, #1]!
 801a4b8:	e7f8      	b.n	801a4ac <memmove+0x12>
 801a4ba:	4402      	add	r2, r0
 801a4bc:	4601      	mov	r1, r0
 801a4be:	428a      	cmp	r2, r1
 801a4c0:	d100      	bne.n	801a4c4 <memmove+0x2a>
 801a4c2:	bd10      	pop	{r4, pc}
 801a4c4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a4c8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801a4cc:	e7f7      	b.n	801a4be <memmove+0x24>
	...

0801a4d0 <_sbrk_r>:
 801a4d0:	b538      	push	{r3, r4, r5, lr}
 801a4d2:	4d06      	ldr	r5, [pc, #24]	; (801a4ec <_sbrk_r+0x1c>)
 801a4d4:	2300      	movs	r3, #0
 801a4d6:	4604      	mov	r4, r0
 801a4d8:	4608      	mov	r0, r1
 801a4da:	602b      	str	r3, [r5, #0]
 801a4dc:	f7f6 fdba 	bl	8011054 <_sbrk>
 801a4e0:	1c43      	adds	r3, r0, #1
 801a4e2:	d102      	bne.n	801a4ea <_sbrk_r+0x1a>
 801a4e4:	682b      	ldr	r3, [r5, #0]
 801a4e6:	b103      	cbz	r3, 801a4ea <_sbrk_r+0x1a>
 801a4e8:	6023      	str	r3, [r4, #0]
 801a4ea:	bd38      	pop	{r3, r4, r5, pc}
 801a4ec:	200008f0 	.word	0x200008f0

0801a4f0 <memcpy>:
 801a4f0:	440a      	add	r2, r1
 801a4f2:	4291      	cmp	r1, r2
 801a4f4:	f100 33ff 	add.w	r3, r0, #4294967295
 801a4f8:	d100      	bne.n	801a4fc <memcpy+0xc>
 801a4fa:	4770      	bx	lr
 801a4fc:	b510      	push	{r4, lr}
 801a4fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a502:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a506:	4291      	cmp	r1, r2
 801a508:	d1f9      	bne.n	801a4fe <memcpy+0xe>
 801a50a:	bd10      	pop	{r4, pc}

0801a50c <_realloc_r>:
 801a50c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a510:	4680      	mov	r8, r0
 801a512:	4614      	mov	r4, r2
 801a514:	460e      	mov	r6, r1
 801a516:	b921      	cbnz	r1, 801a522 <_realloc_r+0x16>
 801a518:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a51c:	4611      	mov	r1, r2
 801a51e:	f7ff b8b5 	b.w	801968c <_malloc_r>
 801a522:	b92a      	cbnz	r2, 801a530 <_realloc_r+0x24>
 801a524:	f7ff f846 	bl	80195b4 <_free_r>
 801a528:	4625      	mov	r5, r4
 801a52a:	4628      	mov	r0, r5
 801a52c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a530:	f000 f914 	bl	801a75c <_malloc_usable_size_r>
 801a534:	4284      	cmp	r4, r0
 801a536:	4607      	mov	r7, r0
 801a538:	d802      	bhi.n	801a540 <_realloc_r+0x34>
 801a53a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801a53e:	d812      	bhi.n	801a566 <_realloc_r+0x5a>
 801a540:	4621      	mov	r1, r4
 801a542:	4640      	mov	r0, r8
 801a544:	f7ff f8a2 	bl	801968c <_malloc_r>
 801a548:	4605      	mov	r5, r0
 801a54a:	2800      	cmp	r0, #0
 801a54c:	d0ed      	beq.n	801a52a <_realloc_r+0x1e>
 801a54e:	42bc      	cmp	r4, r7
 801a550:	4622      	mov	r2, r4
 801a552:	4631      	mov	r1, r6
 801a554:	bf28      	it	cs
 801a556:	463a      	movcs	r2, r7
 801a558:	f7ff ffca 	bl	801a4f0 <memcpy>
 801a55c:	4631      	mov	r1, r6
 801a55e:	4640      	mov	r0, r8
 801a560:	f7ff f828 	bl	80195b4 <_free_r>
 801a564:	e7e1      	b.n	801a52a <_realloc_r+0x1e>
 801a566:	4635      	mov	r5, r6
 801a568:	e7df      	b.n	801a52a <_realloc_r+0x1e>
	...

0801a56c <_strtol_l.constprop.0>:
 801a56c:	2b01      	cmp	r3, #1
 801a56e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a572:	d001      	beq.n	801a578 <_strtol_l.constprop.0+0xc>
 801a574:	2b24      	cmp	r3, #36	; 0x24
 801a576:	d906      	bls.n	801a586 <_strtol_l.constprop.0+0x1a>
 801a578:	f7fe fff0 	bl	801955c <__errno>
 801a57c:	2316      	movs	r3, #22
 801a57e:	6003      	str	r3, [r0, #0]
 801a580:	2000      	movs	r0, #0
 801a582:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a586:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801a66c <_strtol_l.constprop.0+0x100>
 801a58a:	460d      	mov	r5, r1
 801a58c:	462e      	mov	r6, r5
 801a58e:	f815 4b01 	ldrb.w	r4, [r5], #1
 801a592:	f81c 7004 	ldrb.w	r7, [ip, r4]
 801a596:	f017 0708 	ands.w	r7, r7, #8
 801a59a:	d1f7      	bne.n	801a58c <_strtol_l.constprop.0+0x20>
 801a59c:	2c2d      	cmp	r4, #45	; 0x2d
 801a59e:	d132      	bne.n	801a606 <_strtol_l.constprop.0+0x9a>
 801a5a0:	782c      	ldrb	r4, [r5, #0]
 801a5a2:	2701      	movs	r7, #1
 801a5a4:	1cb5      	adds	r5, r6, #2
 801a5a6:	2b00      	cmp	r3, #0
 801a5a8:	d05b      	beq.n	801a662 <_strtol_l.constprop.0+0xf6>
 801a5aa:	2b10      	cmp	r3, #16
 801a5ac:	d109      	bne.n	801a5c2 <_strtol_l.constprop.0+0x56>
 801a5ae:	2c30      	cmp	r4, #48	; 0x30
 801a5b0:	d107      	bne.n	801a5c2 <_strtol_l.constprop.0+0x56>
 801a5b2:	782c      	ldrb	r4, [r5, #0]
 801a5b4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801a5b8:	2c58      	cmp	r4, #88	; 0x58
 801a5ba:	d14d      	bne.n	801a658 <_strtol_l.constprop.0+0xec>
 801a5bc:	786c      	ldrb	r4, [r5, #1]
 801a5be:	2310      	movs	r3, #16
 801a5c0:	3502      	adds	r5, #2
 801a5c2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801a5c6:	f108 38ff 	add.w	r8, r8, #4294967295
 801a5ca:	f04f 0e00 	mov.w	lr, #0
 801a5ce:	fbb8 f9f3 	udiv	r9, r8, r3
 801a5d2:	4676      	mov	r6, lr
 801a5d4:	fb03 8a19 	mls	sl, r3, r9, r8
 801a5d8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801a5dc:	f1bc 0f09 	cmp.w	ip, #9
 801a5e0:	d816      	bhi.n	801a610 <_strtol_l.constprop.0+0xa4>
 801a5e2:	4664      	mov	r4, ip
 801a5e4:	42a3      	cmp	r3, r4
 801a5e6:	dd24      	ble.n	801a632 <_strtol_l.constprop.0+0xc6>
 801a5e8:	f1be 3fff 	cmp.w	lr, #4294967295
 801a5ec:	d008      	beq.n	801a600 <_strtol_l.constprop.0+0x94>
 801a5ee:	45b1      	cmp	r9, r6
 801a5f0:	d31c      	bcc.n	801a62c <_strtol_l.constprop.0+0xc0>
 801a5f2:	d101      	bne.n	801a5f8 <_strtol_l.constprop.0+0x8c>
 801a5f4:	45a2      	cmp	sl, r4
 801a5f6:	db19      	blt.n	801a62c <_strtol_l.constprop.0+0xc0>
 801a5f8:	fb06 4603 	mla	r6, r6, r3, r4
 801a5fc:	f04f 0e01 	mov.w	lr, #1
 801a600:	f815 4b01 	ldrb.w	r4, [r5], #1
 801a604:	e7e8      	b.n	801a5d8 <_strtol_l.constprop.0+0x6c>
 801a606:	2c2b      	cmp	r4, #43	; 0x2b
 801a608:	bf04      	itt	eq
 801a60a:	782c      	ldrbeq	r4, [r5, #0]
 801a60c:	1cb5      	addeq	r5, r6, #2
 801a60e:	e7ca      	b.n	801a5a6 <_strtol_l.constprop.0+0x3a>
 801a610:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801a614:	f1bc 0f19 	cmp.w	ip, #25
 801a618:	d801      	bhi.n	801a61e <_strtol_l.constprop.0+0xb2>
 801a61a:	3c37      	subs	r4, #55	; 0x37
 801a61c:	e7e2      	b.n	801a5e4 <_strtol_l.constprop.0+0x78>
 801a61e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801a622:	f1bc 0f19 	cmp.w	ip, #25
 801a626:	d804      	bhi.n	801a632 <_strtol_l.constprop.0+0xc6>
 801a628:	3c57      	subs	r4, #87	; 0x57
 801a62a:	e7db      	b.n	801a5e4 <_strtol_l.constprop.0+0x78>
 801a62c:	f04f 3eff 	mov.w	lr, #4294967295
 801a630:	e7e6      	b.n	801a600 <_strtol_l.constprop.0+0x94>
 801a632:	f1be 3fff 	cmp.w	lr, #4294967295
 801a636:	d105      	bne.n	801a644 <_strtol_l.constprop.0+0xd8>
 801a638:	2322      	movs	r3, #34	; 0x22
 801a63a:	6003      	str	r3, [r0, #0]
 801a63c:	4646      	mov	r6, r8
 801a63e:	b942      	cbnz	r2, 801a652 <_strtol_l.constprop.0+0xe6>
 801a640:	4630      	mov	r0, r6
 801a642:	e79e      	b.n	801a582 <_strtol_l.constprop.0+0x16>
 801a644:	b107      	cbz	r7, 801a648 <_strtol_l.constprop.0+0xdc>
 801a646:	4276      	negs	r6, r6
 801a648:	2a00      	cmp	r2, #0
 801a64a:	d0f9      	beq.n	801a640 <_strtol_l.constprop.0+0xd4>
 801a64c:	f1be 0f00 	cmp.w	lr, #0
 801a650:	d000      	beq.n	801a654 <_strtol_l.constprop.0+0xe8>
 801a652:	1e69      	subs	r1, r5, #1
 801a654:	6011      	str	r1, [r2, #0]
 801a656:	e7f3      	b.n	801a640 <_strtol_l.constprop.0+0xd4>
 801a658:	2430      	movs	r4, #48	; 0x30
 801a65a:	2b00      	cmp	r3, #0
 801a65c:	d1b1      	bne.n	801a5c2 <_strtol_l.constprop.0+0x56>
 801a65e:	2308      	movs	r3, #8
 801a660:	e7af      	b.n	801a5c2 <_strtol_l.constprop.0+0x56>
 801a662:	2c30      	cmp	r4, #48	; 0x30
 801a664:	d0a5      	beq.n	801a5b2 <_strtol_l.constprop.0+0x46>
 801a666:	230a      	movs	r3, #10
 801a668:	e7ab      	b.n	801a5c2 <_strtol_l.constprop.0+0x56>
 801a66a:	bf00      	nop
 801a66c:	0801b0cb 	.word	0x0801b0cb

0801a670 <_strtol_r>:
 801a670:	f7ff bf7c 	b.w	801a56c <_strtol_l.constprop.0>

0801a674 <_strtoul_l.constprop.0>:
 801a674:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a678:	4f36      	ldr	r7, [pc, #216]	; (801a754 <_strtoul_l.constprop.0+0xe0>)
 801a67a:	4686      	mov	lr, r0
 801a67c:	460d      	mov	r5, r1
 801a67e:	4628      	mov	r0, r5
 801a680:	f815 4b01 	ldrb.w	r4, [r5], #1
 801a684:	5d3e      	ldrb	r6, [r7, r4]
 801a686:	f016 0608 	ands.w	r6, r6, #8
 801a68a:	d1f8      	bne.n	801a67e <_strtoul_l.constprop.0+0xa>
 801a68c:	2c2d      	cmp	r4, #45	; 0x2d
 801a68e:	d130      	bne.n	801a6f2 <_strtoul_l.constprop.0+0x7e>
 801a690:	782c      	ldrb	r4, [r5, #0]
 801a692:	2601      	movs	r6, #1
 801a694:	1c85      	adds	r5, r0, #2
 801a696:	2b00      	cmp	r3, #0
 801a698:	d057      	beq.n	801a74a <_strtoul_l.constprop.0+0xd6>
 801a69a:	2b10      	cmp	r3, #16
 801a69c:	d109      	bne.n	801a6b2 <_strtoul_l.constprop.0+0x3e>
 801a69e:	2c30      	cmp	r4, #48	; 0x30
 801a6a0:	d107      	bne.n	801a6b2 <_strtoul_l.constprop.0+0x3e>
 801a6a2:	7828      	ldrb	r0, [r5, #0]
 801a6a4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801a6a8:	2858      	cmp	r0, #88	; 0x58
 801a6aa:	d149      	bne.n	801a740 <_strtoul_l.constprop.0+0xcc>
 801a6ac:	786c      	ldrb	r4, [r5, #1]
 801a6ae:	2310      	movs	r3, #16
 801a6b0:	3502      	adds	r5, #2
 801a6b2:	f04f 38ff 	mov.w	r8, #4294967295
 801a6b6:	2700      	movs	r7, #0
 801a6b8:	fbb8 f8f3 	udiv	r8, r8, r3
 801a6bc:	fb03 f908 	mul.w	r9, r3, r8
 801a6c0:	ea6f 0909 	mvn.w	r9, r9
 801a6c4:	4638      	mov	r0, r7
 801a6c6:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801a6ca:	f1bc 0f09 	cmp.w	ip, #9
 801a6ce:	d815      	bhi.n	801a6fc <_strtoul_l.constprop.0+0x88>
 801a6d0:	4664      	mov	r4, ip
 801a6d2:	42a3      	cmp	r3, r4
 801a6d4:	dd23      	ble.n	801a71e <_strtoul_l.constprop.0+0xaa>
 801a6d6:	f1b7 3fff 	cmp.w	r7, #4294967295
 801a6da:	d007      	beq.n	801a6ec <_strtoul_l.constprop.0+0x78>
 801a6dc:	4580      	cmp	r8, r0
 801a6de:	d31b      	bcc.n	801a718 <_strtoul_l.constprop.0+0xa4>
 801a6e0:	d101      	bne.n	801a6e6 <_strtoul_l.constprop.0+0x72>
 801a6e2:	45a1      	cmp	r9, r4
 801a6e4:	db18      	blt.n	801a718 <_strtoul_l.constprop.0+0xa4>
 801a6e6:	fb00 4003 	mla	r0, r0, r3, r4
 801a6ea:	2701      	movs	r7, #1
 801a6ec:	f815 4b01 	ldrb.w	r4, [r5], #1
 801a6f0:	e7e9      	b.n	801a6c6 <_strtoul_l.constprop.0+0x52>
 801a6f2:	2c2b      	cmp	r4, #43	; 0x2b
 801a6f4:	bf04      	itt	eq
 801a6f6:	782c      	ldrbeq	r4, [r5, #0]
 801a6f8:	1c85      	addeq	r5, r0, #2
 801a6fa:	e7cc      	b.n	801a696 <_strtoul_l.constprop.0+0x22>
 801a6fc:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801a700:	f1bc 0f19 	cmp.w	ip, #25
 801a704:	d801      	bhi.n	801a70a <_strtoul_l.constprop.0+0x96>
 801a706:	3c37      	subs	r4, #55	; 0x37
 801a708:	e7e3      	b.n	801a6d2 <_strtoul_l.constprop.0+0x5e>
 801a70a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801a70e:	f1bc 0f19 	cmp.w	ip, #25
 801a712:	d804      	bhi.n	801a71e <_strtoul_l.constprop.0+0xaa>
 801a714:	3c57      	subs	r4, #87	; 0x57
 801a716:	e7dc      	b.n	801a6d2 <_strtoul_l.constprop.0+0x5e>
 801a718:	f04f 37ff 	mov.w	r7, #4294967295
 801a71c:	e7e6      	b.n	801a6ec <_strtoul_l.constprop.0+0x78>
 801a71e:	1c7b      	adds	r3, r7, #1
 801a720:	d106      	bne.n	801a730 <_strtoul_l.constprop.0+0xbc>
 801a722:	2322      	movs	r3, #34	; 0x22
 801a724:	f8ce 3000 	str.w	r3, [lr]
 801a728:	4638      	mov	r0, r7
 801a72a:	b932      	cbnz	r2, 801a73a <_strtoul_l.constprop.0+0xc6>
 801a72c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a730:	b106      	cbz	r6, 801a734 <_strtoul_l.constprop.0+0xc0>
 801a732:	4240      	negs	r0, r0
 801a734:	2a00      	cmp	r2, #0
 801a736:	d0f9      	beq.n	801a72c <_strtoul_l.constprop.0+0xb8>
 801a738:	b107      	cbz	r7, 801a73c <_strtoul_l.constprop.0+0xc8>
 801a73a:	1e69      	subs	r1, r5, #1
 801a73c:	6011      	str	r1, [r2, #0]
 801a73e:	e7f5      	b.n	801a72c <_strtoul_l.constprop.0+0xb8>
 801a740:	2430      	movs	r4, #48	; 0x30
 801a742:	2b00      	cmp	r3, #0
 801a744:	d1b5      	bne.n	801a6b2 <_strtoul_l.constprop.0+0x3e>
 801a746:	2308      	movs	r3, #8
 801a748:	e7b3      	b.n	801a6b2 <_strtoul_l.constprop.0+0x3e>
 801a74a:	2c30      	cmp	r4, #48	; 0x30
 801a74c:	d0a9      	beq.n	801a6a2 <_strtoul_l.constprop.0+0x2e>
 801a74e:	230a      	movs	r3, #10
 801a750:	e7af      	b.n	801a6b2 <_strtoul_l.constprop.0+0x3e>
 801a752:	bf00      	nop
 801a754:	0801b0cb 	.word	0x0801b0cb

0801a758 <_strtoul_r>:
 801a758:	f7ff bf8c 	b.w	801a674 <_strtoul_l.constprop.0>

0801a75c <_malloc_usable_size_r>:
 801a75c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a760:	1f18      	subs	r0, r3, #4
 801a762:	2b00      	cmp	r3, #0
 801a764:	bfbc      	itt	lt
 801a766:	580b      	ldrlt	r3, [r1, r0]
 801a768:	18c0      	addlt	r0, r0, r3
 801a76a:	4770      	bx	lr

0801a76c <_init>:
 801a76c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a76e:	bf00      	nop
 801a770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a772:	bc08      	pop	{r3}
 801a774:	469e      	mov	lr, r3
 801a776:	4770      	bx	lr

0801a778 <_fini>:
 801a778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a77a:	bf00      	nop
 801a77c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a77e:	bc08      	pop	{r3}
 801a780:	469e      	mov	lr, r3
 801a782:	4770      	bx	lr
